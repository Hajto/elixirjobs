(function() {
  'use strict';

  var globals = typeof window === 'undefined' ? global : window;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var has = ({}).hasOwnProperty;

  var aliases = {};

  var endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  var unalias = function(alias, loaderPath) {
    var start = 0;
    if (loaderPath) {
      if (loaderPath.indexOf('components/' === 0)) {
        start = 'components/'.length;
      }
      if (loaderPath.indexOf('/', start) > 0) {
        loaderPath = loaderPath.substring(start, loaderPath.indexOf('/', start));
      }
    }
    var result = aliases[alias + '/index.js'] || aliases[loaderPath + '/deps/' + alias + '/index.js'];
    if (result) {
      return 'components/' + result.substring(0, result.length - '.js'.length);
    }
    return alias;
  };

  var expand = (function() {
    var reg = /^\.\.?(\/|$)/;
    return function(root, name) {
      var results = [], parts, part;
      parts = (reg.test(name) ? root + '/' + name : name).split('/');
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part === '..') {
          results.pop();
        } else if (part !== '.' && part !== '') {
          results.push(part);
        }
      }
      return results.join('/');
    };
  })();
  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var require = function(name, loaderPath) {
    var path = expand(name, '.');
    if (loaderPath == null) loaderPath = '/';
    path = unalias(name, loaderPath);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has.call(cache, dirIndex)) return cache[dirIndex].exports;
    if (has.call(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '" from '+ '"' + loaderPath + '"');
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  require.register = require.define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  require.list = function() {
    var result = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        result.push(item);
      }
    }
    return result;
  };

  require.brunch = true;
  globals.require = require;
})();
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});

//! moment.js
//! version : 2.10.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Dc.apply(null,arguments)}function b(a){Dc=a}function c(a){return"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return za(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(0/0);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=j(b)),"undefined"!=typeof b._locale&&(a._locale=b._locale),Fc.length>0)for(c in Fc)d=Fc[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(+b._d),Gc===!1&&(Gc=!0,a.updateOffset(this),Gc=!1)}function o(a){return a instanceof n||null!=a&&null!=a._isAMomentObject}function p(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function q(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&p(a[d])!==p(b[d]))&&g++;return g+f}function r(){}function s(a){return a?a.toLowerCase().replace("_","-"):a}function t(a){for(var b,c,d,e,f=0;f<a.length;){for(e=s(a[f]).split("-"),b=e.length,c=s(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=u(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&q(e,c,!0)>=b-1)break;b--}f++}return null}function u(a){var b=null;if(!Hc[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=Ec._abbr,require("./locale/"+a),v(b)}catch(c){}return Hc[a]}function v(a,b){var c;return a&&(c="undefined"==typeof b?x(a):w(a,b),c&&(Ec=c)),Ec._abbr}function w(a,b){return null!==b?(b.abbr=a,Hc[a]||(Hc[a]=new r),Hc[a].set(b),v(a),Hc[a]):(delete Hc[a],null)}function x(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return Ec;if(!c(a)){if(b=u(a))return b;a=[a]}return t(a)}function y(a,b){var c=a.toLowerCase();Ic[c]=Ic[c+"s"]=Ic[b]=a}function z(a){return"string"==typeof a?Ic[a]||Ic[a.toLowerCase()]:void 0}function A(a){var b,c,d={};for(c in a)f(a,c)&&(b=z(c),b&&(d[b]=a[c]));return d}function B(b,c){return function(d){return null!=d?(D(this,b,d),a.updateOffset(this,c),this):C(this,b)}}function C(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function D(a,b,c){return a._d["set"+(a._isUTC?"UTC":"")+b](c)}function E(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=z(a),"function"==typeof this[a])return this[a](b);return this}function F(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function G(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Mc[a]=e),b&&(Mc[b[0]]=function(){return F(e.apply(this,arguments),b[1],b[2])}),c&&(Mc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function H(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function I(a){var b,c,d=a.match(Jc);for(b=0,c=d.length;c>b;b++)Mc[d[b]]?d[b]=Mc[d[b]]:d[b]=H(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function J(a,b){return a.isValid()?(b=K(b,a.localeData()),Lc[b]||(Lc[b]=I(b)),Lc[b](a)):a.localeData().invalidDate()}function K(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Kc.lastIndex=0;d>=0&&Kc.test(a);)a=a.replace(Kc,c),Kc.lastIndex=0,d-=1;return a}function L(a,b,c){_c[a]="function"==typeof b?b:function(a){return a&&c?c:b}}function M(a,b){return f(_c,a)?_c[a](b._strict,b._locale):new RegExp(N(a))}function N(a){return a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function O(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=p(a)}),c=0;c<a.length;c++)ad[a[c]]=d}function P(a,b){O(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function Q(a,b,c){null!=b&&f(ad,a)&&ad[a](b,c._a,c,a)}function R(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function S(a){return this._months[a.month()]}function T(a){return this._monthsShort[a.month()]}function U(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function V(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),R(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function W(b){return null!=b?(V(this,b),a.updateOffset(this,!0),this):C(this,"Month")}function X(){return R(this.year(),this.month())}function Y(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[cd]<0||c[cd]>11?cd:c[dd]<1||c[dd]>R(c[bd],c[cd])?dd:c[ed]<0||c[ed]>24||24===c[ed]&&(0!==c[fd]||0!==c[gd]||0!==c[hd])?ed:c[fd]<0||c[fd]>59?fd:c[gd]<0||c[gd]>59?gd:c[hd]<0||c[hd]>999?hd:-1,j(a)._overflowDayOfYear&&(bd>b||b>dd)&&(b=dd),j(a).overflow=b),a}function Z(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function $(a,b){var c=!0,d=a+"\n"+(new Error).stack;return g(function(){return c&&(Z(d),c=!1),b.apply(this,arguments)},b)}function _(a,b){kd[a]||(Z(b),kd[a]=!0)}function aa(a){var b,c,d=a._i,e=ld.exec(d);if(e){for(j(a).iso=!0,b=0,c=md.length;c>b;b++)if(md[b][1].exec(d)){a._f=md[b][0]+(e[6]||" ");break}for(b=0,c=nd.length;c>b;b++)if(nd[b][1].exec(d)){a._f+=nd[b][0];break}d.match(Yc)&&(a._f+="Z"),ta(a)}else a._isValid=!1}function ba(b){var c=od.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(aa(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function ca(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function da(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function ea(a){return fa(a)?366:365}function fa(a){return a%4===0&&a%100!==0||a%400===0}function ga(){return fa(this.year())}function ha(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=Aa(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ia(a){return ha(a,this._week.dow,this._week.doy).week}function ja(){return this._week.dow}function ka(){return this._week.doy}function la(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function ma(a){var b=ha(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function na(a,b,c,d,e){var f,g,h=da(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:ea(a-1)+g}}function oa(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function pa(a,b,c){return null!=a?a:null!=b?b:c}function qa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ra(a){var b,c,d,e,f=[];if(!a._d){for(d=qa(a),a._w&&null==a._a[dd]&&null==a._a[cd]&&sa(a),a._dayOfYear&&(e=pa(a._a[bd],d[bd]),a._dayOfYear>ea(e)&&(j(a)._overflowDayOfYear=!0),c=da(e,0,a._dayOfYear),a._a[cd]=c.getUTCMonth(),a._a[dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[ed]&&0===a._a[fd]&&0===a._a[gd]&&0===a._a[hd]&&(a._nextDay=!0,a._a[ed]=0),a._d=(a._useUTC?da:ca).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[ed]=24)}}function sa(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=pa(b.GG,a._a[bd],ha(Aa(),1,4).year),d=pa(b.W,1),e=pa(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=pa(b.gg,a._a[bd],ha(Aa(),f,g).year),d=pa(b.w,1),null!=b.d?(e=b.d,f>e&&++d):e=null!=b.e?b.e+f:f),h=na(c,d,e,g,f),a._a[bd]=h.year,a._dayOfYear=h.dayOfYear}function ta(b){if(b._f===a.ISO_8601)return void aa(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=K(b._f,b._locale).match(Jc)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(M(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Mc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),Q(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[ed]<=12&&b._a[ed]>0&&(j(b).bigHour=void 0),b._a[ed]=ua(b._locale,b._a[ed],b._meridiem),ra(b),Y(b)}function ua(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function va(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(0/0));for(e=0;e<a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],ta(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function wa(a){if(!a._d){var b=A(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ra(a)}}function xa(a){var b,e=a._i,f=a._f;return a._locale=a._locale||x(a._l),null===e||void 0===f&&""===e?l({nullInput:!0}):("string"==typeof e&&(a._i=e=a._locale.preparse(e)),o(e)?new n(Y(e)):(c(f)?va(a):f?ta(a):d(e)?a._d=e:ya(a),b=new n(Y(a)),b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b))}function ya(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):"string"==typeof f?ba(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ra(b)):"object"==typeof f?wa(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function za(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,xa(f)}function Aa(a,b,c,d){return za(a,b,c,d,!1)}function Ba(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Aa();for(d=b[0],e=1;e<b.length;++e)b[e][a](d)&&(d=b[e]);return d}function Ca(){var a=[].slice.call(arguments,0);return Ba("isBefore",a)}function Da(){var a=[].slice.call(arguments,0);return Ba("isAfter",a)}function Ea(a){var b=A(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=x(),this._bubble()}function Fa(a){return a instanceof Ea}function Ga(a,b){G(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+F(~~(a/60),2)+b+F(~~a%60,2)})}function Ha(a){var b=(a||"").match(Yc)||[],c=b[b.length-1]||[],d=(c+"").match(td)||["-",0,0],e=+(60*d[1])+p(d[2]);return"+"===d[0]?e:-e}function Ia(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Aa(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Aa(b).local();return c._isUTC?Aa(b).zone(c._offset||0):Aa(b).local()}function Ja(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ka(b,c){var d,e=this._offset||0;return null!=b?("string"==typeof b&&(b=Ha(b)),Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Ja(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?$a(this,Va(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ja(this)}function La(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Ma(a){return this.utcOffset(0,a)}function Na(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Ja(this),"m")),this}function Oa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ha(this._i)),this}function Pa(a){return a=a?Aa(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Qa(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ra(){if(this._a){var a=this._isUTC?h(this._a):Aa(this._a);return this.isValid()&&q(this._a,a.toArray())>0}return!1}function Sa(){return!this._isUTC}function Ta(){return this._isUTC}function Ua(){return this._isUTC&&0===this._offset}function Va(a,b){var c,d,e,g=a,h=null;return Fa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=ud.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:p(h[dd])*c,h:p(h[ed])*c,m:p(h[fd])*c,s:p(h[gd])*c,ms:p(h[hd])*c}):(h=vd.exec(a))?(c="-"===h[1]?-1:1,g={y:Wa(h[2],c),M:Wa(h[3],c),d:Wa(h[4],c),h:Wa(h[5],c),m:Wa(h[6],c),s:Wa(h[7],c),w:Wa(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=Ya(Aa(g.from),Aa(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ea(g),Fa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function Wa(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function Xa(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Ya(a,b){var c;return b=Ia(b,a),a.isBefore(b)?c=Xa(a,b):(c=Xa(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function Za(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(_(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Va(c,d),$a(this,e,a),this}}function $a(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&D(b,"Date",C(b,"Date")+g*d),h&&V(b,C(b,"Month")+h*d),e&&a.updateOffset(b,g||h)}function _a(a){var b=a||Aa(),c=Ia(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this,Aa(b)))}function ab(){return new n(this)}function bb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this>+a):(c=o(a)?+a:+Aa(a),c<+this.clone().startOf(b))}function cb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+a>+this):(c=o(a)?+a:+Aa(a),+this.clone().endOf(b)<c)}function db(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function eb(a,b){var c;return b=z(b||"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this===+a):(c=+Aa(a),+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))}function fb(a){return 0>a?Math.ceil(a):Math.floor(a)}function gb(a,b,c){var d,e,f=Ia(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=z(b),"year"===b||"month"===b||"quarter"===b?(e=hb(this,f),"quarter"===b?e/=3:"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:fb(e)}function hb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function ib(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function jb(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():J(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):J(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function kb(b){var c=J(this,b||a.defaultFormat);return this.localeData().postformat(c)}function lb(a,b){return this.isValid()?Va({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function mb(a){return this.from(Aa(),a)}function nb(a,b){return this.isValid()?Va({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.to(Aa(),a)}function pb(a){var b;return void 0===a?this._locale._abbr:(b=x(a),null!=b&&(this._locale=b),this)}function qb(){return this._locale}function rb(a){switch(a=z(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function sb(a){return a=z(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function tb(){return+this._d-6e4*(this._offset||0)}function ub(){return Math.floor(+this/1e3)}function vb(){return this._offset?new Date(+this):this._d}function wb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function xb(){return k(this)}function yb(){return g({},j(this))}function zb(){return j(this).overflow}function Ab(a,b){G(0,[a,a.length],0,b)}function Bb(a,b,c){return ha(Aa([a,11,31+b-c]),b,c).week}function Cb(a){var b=ha(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")}function Db(a){var b=ha(this,1,4).year;return null==a?b:this.add(a-b,"y")}function Eb(){return Bb(this.year(),1,4)}function Fb(){var a=this.localeData()._week;return Bb(this.year(),a.dow,a.doy)}function Gb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Hb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function Ib(a){return this._weekdays[a.day()]}function Jb(a){return this._weekdaysShort[a.day()]}function Kb(a){return this._weekdaysMin[a.day()]}function Lb(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=Aa([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b}function Mb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Hb(a,this.localeData()),this.add(a-b,"d")):b}function Nb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Ob(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Pb(a,b){G(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Qb(a,b){return b._meridiemParse}function Rb(a){return"p"===(a+"").toLowerCase().charAt(0)}function Sb(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Tb(a){G(0,[a,3],0,"millisecond")}function Ub(){return this._isUTC?"UTC":""}function Vb(){return this._isUTC?"Coordinated Universal Time":""}function Wb(a){return Aa(1e3*a)}function Xb(){return Aa.apply(null,arguments).parseZone()}function Yb(a,b,c){var d=this._calendar[a];return"function"==typeof d?d.call(b,c):d}function Zb(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b}function $b(){return this._invalidDate}function _b(a){return this._ordinal.replace("%d",a)}function ac(a){return a}function bc(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function cc(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)}function dc(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function ec(a,b,c,d){var e=x(),f=h().set(d,b);return e[c](f,a)}function fc(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return ec(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=ec(a,f,c,e);return g}function gc(a,b){return fc(a,b,"months",12,"month")}function hc(a,b){return fc(a,b,"monthsShort",12,"month")}function ic(a,b){return fc(a,b,"weekdays",7,"day")}function jc(a,b){return fc(a,b,"weekdaysShort",7,"day")}function kc(a,b){return fc(a,b,"weekdaysMin",7,"day")}function lc(){var a=this._data;return this._milliseconds=Rd(this._milliseconds),this._days=Rd(this._days),this._months=Rd(this._months),a.milliseconds=Rd(a.milliseconds),a.seconds=Rd(a.seconds),a.minutes=Rd(a.minutes),a.hours=Rd(a.hours),a.months=Rd(a.months),a.years=Rd(a.years),this}function mc(a,b,c,d){var e=Va(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function nc(a,b){return mc(this,a,b,1)}function oc(a,b){return mc(this,a,b,-1)}function pc(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;return g.milliseconds=d%1e3,a=fb(d/1e3),g.seconds=a%60,b=fb(a/60),g.minutes=b%60,c=fb(b/60),g.hours=c%24,e+=fb(c/24),h=fb(qc(e)),e-=fb(rc(h)),f+=fb(e/30),e%=30,h+=fb(f/12),f%=12,g.days=e,g.months=f,g.years=h,this}function qc(a){return 400*a/146097}function rc(a){return 146097*a/400}function sc(a){var b,c,d=this._milliseconds;if(a=z(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+12*qc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(rc(this._months/12)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function tc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*p(this._months/12)}function uc(a){return function(){return this.as(a)}}function vc(a){return a=z(a),this[a+"s"]()}function wc(a){return function(){return this._data[a]}}function xc(){return fb(this.days()/7)}function yc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function zc(a,b,c){var d=Va(a).abs(),e=fe(d.as("s")),f=fe(d.as("m")),g=fe(d.as("h")),h=fe(d.as("d")),i=fe(d.as("M")),j=fe(d.as("y")),k=e<ge.s&&["s",e]||1===f&&["m"]||f<ge.m&&["mm",f]||1===g&&["h"]||g<ge.h&&["hh",g]||1===h&&["d"]||h<ge.d&&["dd",h]||1===i&&["M"]||i<ge.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,yc.apply(null,k)}function Ac(a,b){return void 0===ge[a]?!1:void 0===b?ge[a]:(ge[a]=b,!0)}function Bc(a){var b=this.localeData(),c=zc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Cc(){var a=he(this.years()),b=he(this.months()),c=he(this.days()),d=he(this.hours()),e=he(this.minutes()),f=he(this.seconds()+this.milliseconds()/1e3),g=this.asSeconds();return g?(0>g?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"}var Dc,Ec,Fc=a.momentProperties=[],Gc=!1,Hc={},Ic={},Jc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Kc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Lc={},Mc={},Nc=/\d/,Oc=/\d\d/,Pc=/\d{3}/,Qc=/\d{4}/,Rc=/[+-]?\d{6}/,Sc=/\d\d?/,Tc=/\d{1,3}/,Uc=/\d{1,4}/,Vc=/[+-]?\d{1,6}/,Wc=/\d+/,Xc=/[+-]?\d+/,Yc=/Z|[+-]\d\d:?\d\d/gi,Zc=/[+-]?\d+(\.\d{1,3})?/,$c=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,_c={},ad={},bd=0,cd=1,dd=2,ed=3,fd=4,gd=5,hd=6;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),G("MMMM",0,0,function(a){return this.localeData().months(this,a)}),y("month","M"),L("M",Sc),L("MM",Sc,Oc),L("MMM",$c),L("MMMM",$c),O(["M","MM"],function(a,b){b[cd]=p(a)-1}),O(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[cd]=e:j(c).invalidMonth=a});var id="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),jd="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),kd={};a.suppressDeprecationWarnings=!1;var ld=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,md=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],nd=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],od=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=$("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),y("year","y"),L("Y",Xc),L("YY",Sc,Oc),L("YYYY",Uc,Qc),L("YYYYY",Vc,Rc),L("YYYYYY",Vc,Rc),O(["YYYY","YYYYY","YYYYYY"],bd),O("YY",function(b,c){c[bd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return p(a)+(p(a)>68?1900:2e3)};var pd=B("FullYear",!1);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),y("week","w"),y("isoWeek","W"),L("w",Sc),L("ww",Sc,Oc),L("W",Sc),L("WW",Sc,Oc),P(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=p(a)});var qd={dow:0,doy:6};G("DDD",["DDDD",3],"DDDo","dayOfYear"),y("dayOfYear","DDD"),L("DDD",Tc),L("DDDD",Pc),O(["DDD","DDDD"],function(a,b,c){c._dayOfYear=p(a)}),a.ISO_8601=function(){};var rd=$("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return this>a?this:a}),sd=$("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return a>this?this:a});Ga("Z",":"),Ga("ZZ",""),L("Z",Yc),L("ZZ",Yc),O(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Ha(a)});var td=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var ud=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,vd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Va.fn=Ea.prototype;var wd=Za(1,"add"),xd=Za(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var yd=$("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ab("gggg","weekYear"),Ab("ggggg","weekYear"),Ab("GGGG","isoWeekYear"),Ab("GGGGG","isoWeekYear"),y("weekYear","gg"),y("isoWeekYear","GG"),L("G",Xc),L("g",Xc),L("GG",Sc,Oc),L("gg",Sc,Oc),L("GGGG",Uc,Qc),L("gggg",Uc,Qc),L("GGGGG",Vc,Rc),L("ggggg",Vc,Rc),P(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=p(a)}),P(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),G("Q",0,0,"quarter"),y("quarter","Q"),L("Q",Nc),O("Q",function(a,b){b[cd]=3*(p(a)-1)}),G("D",["DD",2],"Do","date"),y("date","D"),L("D",Sc),L("DD",Sc,Oc),L("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),O(["D","DD"],dd),O("Do",function(a,b){b[dd]=p(a.match(Sc)[0],10)});var zd=B("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),G("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),G("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),y("day","d"),y("weekday","e"),y("isoWeekday","E"),L("d",Sc),L("e",Sc),L("E",Sc),L("dd",$c),L("ddd",$c),L("dddd",$c),P(["dd","ddd","dddd"],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),P(["d","e","E"],function(a,b,c,d){b[d]=p(a)});var Ad="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Bd="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Cd="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("H",["HH",2],0,"hour"),G("h",["hh",2],0,function(){return this.hours()%12||12}),Pb("a",!0),Pb("A",!1),y("hour","h"),L("a",Qb),L("A",Qb),L("H",Sc),L("h",Sc),L("HH",Sc,Oc),L("hh",Sc,Oc),O(["H","HH"],ed),O(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),O(["h","hh"],function(a,b,c){b[ed]=p(a),j(c).bigHour=!0});var Dd=/[ap]\.?m?\.?/i,Ed=B("Hours",!0);G("m",["mm",2],0,"minute"),y("minute","m"),L("m",Sc),L("mm",Sc,Oc),O(["m","mm"],fd);var Fd=B("Minutes",!1);G("s",["ss",2],0,"second"),y("second","s"),L("s",Sc),L("ss",Sc,Oc),O(["s","ss"],gd);var Gd=B("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Tb("SSS"),Tb("SSSS"),y("millisecond","ms"),L("S",Tc,Nc),L("SS",Tc,Oc),L("SSS",Tc,Pc),L("SSSS",Wc),O(["S","SS","SSS","SSSS"],function(a,b){b[hd]=p(1e3*("0."+a))});var Hd=B("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Id=n.prototype;Id.add=wd,Id.calendar=_a,Id.clone=ab,Id.diff=gb,Id.endOf=sb,Id.format=kb,Id.from=lb,Id.fromNow=mb,Id.to=nb,Id.toNow=ob,Id.get=E,Id.invalidAt=zb,Id.isAfter=bb,Id.isBefore=cb,Id.isBetween=db,Id.isSame=eb,Id.isValid=xb,Id.lang=yd,Id.locale=pb,Id.localeData=qb,Id.max=sd,Id.min=rd,Id.parsingFlags=yb,Id.set=E,Id.startOf=rb,Id.subtract=xd,Id.toArray=wb,Id.toDate=vb,Id.toISOString=jb,Id.toJSON=jb,Id.toString=ib,Id.unix=ub,Id.valueOf=tb,Id.year=pd,Id.isLeapYear=ga,Id.weekYear=Cb,Id.isoWeekYear=Db,Id.quarter=Id.quarters=Gb,Id.month=W,Id.daysInMonth=X,Id.week=Id.weeks=la,Id.isoWeek=Id.isoWeeks=ma,Id.weeksInYear=Fb,Id.isoWeeksInYear=Eb,Id.date=zd,Id.day=Id.days=Mb,Id.weekday=Nb,Id.isoWeekday=Ob,Id.dayOfYear=oa,Id.hour=Id.hours=Ed,Id.minute=Id.minutes=Fd,Id.second=Id.seconds=Gd,Id.millisecond=Id.milliseconds=Hd,Id.utcOffset=Ka,Id.utc=Ma,Id.local=Na,Id.parseZone=Oa,Id.hasAlignedHourOffset=Pa,Id.isDST=Qa,Id.isDSTShifted=Ra,Id.isLocal=Sa,Id.isUtcOffset=Ta,Id.isUtc=Ua,Id.isUTC=Ua,Id.zoneAbbr=Ub,Id.zoneName=Vb,Id.dates=$("dates accessor is deprecated. Use date instead.",zd),Id.months=$("months accessor is deprecated. Use month instead",W),Id.years=$("years accessor is deprecated. Use year instead",pd),Id.zone=$("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",La);var Jd=Id,Kd={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ld={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},Md="Invalid date",Nd="%d",Od=/\d{1,2}/,Pd={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",
hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Qd=r.prototype;Qd._calendar=Kd,Qd.calendar=Yb,Qd._longDateFormat=Ld,Qd.longDateFormat=Zb,Qd._invalidDate=Md,Qd.invalidDate=$b,Qd._ordinal=Nd,Qd.ordinal=_b,Qd._ordinalParse=Od,Qd.preparse=ac,Qd.postformat=ac,Qd._relativeTime=Pd,Qd.relativeTime=bc,Qd.pastFuture=cc,Qd.set=dc,Qd.months=S,Qd._months=id,Qd.monthsShort=T,Qd._monthsShort=jd,Qd.monthsParse=U,Qd.week=ia,Qd._week=qd,Qd.firstDayOfYear=ka,Qd.firstDayOfWeek=ja,Qd.weekdays=Ib,Qd._weekdays=Ad,Qd.weekdaysMin=Kb,Qd._weekdaysMin=Cd,Qd.weekdaysShort=Jb,Qd._weekdaysShort=Bd,Qd.weekdaysParse=Lb,Qd.isPM=Rb,Qd._meridiemParse=Dd,Qd.meridiem=Sb,v("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===p(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=$("moment.lang is deprecated. Use moment.locale instead.",v),a.langData=$("moment.langData is deprecated. Use moment.localeData instead.",x);var Rd=Math.abs,Sd=uc("ms"),Td=uc("s"),Ud=uc("m"),Vd=uc("h"),Wd=uc("d"),Xd=uc("w"),Yd=uc("M"),Zd=uc("y"),$d=wc("milliseconds"),_d=wc("seconds"),ae=wc("minutes"),be=wc("hours"),ce=wc("days"),de=wc("months"),ee=wc("years"),fe=Math.round,ge={s:45,m:45,h:22,d:26,M:11},he=Math.abs,ie=Ea.prototype;ie.abs=lc,ie.add=nc,ie.subtract=oc,ie.as=sc,ie.asMilliseconds=Sd,ie.asSeconds=Td,ie.asMinutes=Ud,ie.asHours=Vd,ie.asDays=Wd,ie.asWeeks=Xd,ie.asMonths=Yd,ie.asYears=Zd,ie.valueOf=tc,ie._bubble=pc,ie.get=vc,ie.milliseconds=$d,ie.seconds=_d,ie.minutes=ae,ie.hours=be,ie.days=ce,ie.weeks=xc,ie.months=de,ie.years=ee,ie.humanize=Bc,ie.toISOString=Cc,ie.toString=Cc,ie.toJSON=Cc,ie.locale=pb,ie.localeData=qb,ie.toIsoString=$("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Cc),ie.lang=yd,G("X",0,0,"unix"),G("x",0,0,"valueOf"),L("x",Xc),L("X",Zc),O("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),O("x",function(a,b,c){c._d=new Date(p(a))}),a.version="2.10.3",b(Aa),a.fn=Jd,a.min=Ca,a.max=Da,a.utc=h,a.unix=Wb,a.months=gc,a.isDate=d,a.locale=v,a.invalid=l,a.duration=Va,a.isMoment=o,a.weekdays=ic,a.parseZone=Xb,a.localeData=x,a.isDuration=Fa,a.monthsShort=hc,a.weekdaysMin=kc,a.defineLocale=w,a.weekdaysShort=jc,a.normalizeUnits=z,a.relativeTimeThreshold=Ac;var je=a;return je});
(function(/*! Brunch !*/) {
  'use strict';

  var globals = typeof window !== 'undefined' ? window : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};

  var has = function(object, name) {
    return ({}).hasOwnProperty.call(object, name);
  };

  var expand = function(root, name) {
    var results = [], parts, part;
    if (/^\.\.?(\/|$)/.test(name)) {
      parts = [root, name].join('/').split('/');
    } else {
      parts = name.split('/');
    }
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var dir = dirname(path);
      var absolute = expand(dir, name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var require = function(name, loaderPath) {
    var path = expand(name, '.');
    if (loaderPath == null) loaderPath = '/';

    if (has(cache, path)) return cache[path].exports;
    if (has(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has(cache, dirIndex)) return cache[dirIndex].exports;
    if (has(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '" from '+ '"' + loaderPath + '"');
  };

  var define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  var list = function() {
    var result = [];
    for (var item in modules) {
      if (has(modules, item)) {
        result.push(item);
      }
    }
    return result;
  };

  globals.require = require;
  globals.require.define = define;
  globals.require.register = define;
  globals.require.list = list;
  globals.require.brunch = true;
})();
require.define({'phoenix': function(exports, require, module){ "use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

// Phoenix Channels JavaScript client
//
// ## Socket Connection
//
// A single connection is established to the server and
// channels are mulitplexed over the connection.
// Connect to the server using the `Socket` class:
//
//     let socket = new Socket("/ws")
//     socket.connect()
//
// The `Socket` constructor takes the mount point of the socket
// as well as options that can be found in the Socket docs,
// such as configuring the `LongPoller` transport, and heartbeat.
//
//
// ## Channels
//
// Channels are isolated, concurrent processes on the server that
// subscribe to topics and broker events between the client and server.
// To join a channel, you must provide the topic, and channel params for
// authorization. Here's an example chat room example where `"new_msg"`
// events are listened for, messages are pushed to the server, and
// the channel is joined with ok/error matches, and `after` hook:
//
//     let chan = socket.chan("rooms:123", {token: roomToken})
//     chan.on("new_msg", msg => console.log("Got message", msg) )
//     $input.onEnter( e => {
//       chan.push("new_msg", {body: e.target.val})
//           .receive("ok", (message) => console.log("created message", message) )
//           .receive("error", (reasons) => console.log("create failed", reasons) )
//           .after(10000, () => console.log("Networking issue. Still waiting...") )
//     })
//     chan.join()
//         .receive("ok", ({messages}) => console.log("catching up", messages) )
//         .receive("error", ({reason}) => console.log("failed join", reason) )
//         .after(10000, () => console.log("Networking issue. Still waiting...") )
//
//
// ## Joining
//
// Joining a channel with `chan.join(topic, params)`, binds the params to
// `chan.params`. Subsequent rejoins will send up the modified params for
// updating authorization params, or passing up last_message_id information.
// Successful joins receive an "ok" status, while unsuccessful joins
// receive "error".
//
//
// ## Pushing Messages
//
// From the prevoius example, we can see that pushing messages to the server
// can be done with `chan.push(eventName, payload)` and we can optionally
// receive responses from the push. Additionally, we can use
// `after(millsec, callback)` to abort waiting for our `receive` hooks and
// take action after some period of waiting.
//
//
// ## Socket Hooks
//
// Lifecycle events of the multiplexed connection can be hooked into via
// `socket.onError()` and `socket.onClose()` events, ie:
//
//     socket.onError( () => console.log("there was an error with the connection!") )
//     socket.onClose( () => console.log("the connection dropped") )
//
//
// ## Channel Hooks
//
// For each joined channel, you can bind to `onError` and `onClose` events
// to monitor the channel lifecycle, ie:
//
//     chan.onError( () => console.log("there was an error!") )
//     chan.onClose( () => console.log("the channel has gone away gracefully") )
//
// ### onError hooks
//
// `onError` hooks are invoked if the socket connection drops, or the channel
// crashes on the server. In either case, a channel rejoin is attemtped
// automatically in an exponential backoff manner.
//
// ### onClose hooks
//
// `onClose` hooks are invoked only in two cases. 1) the channel explicitly
// closed on the server, or 2). The client explicitly closed, by calling
// `chan.leave()`
//

var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
var CHAN_STATES = {
  closed: "closed",
  errored: "errored",
  joined: "joined",
  joining: "joining" };
var CHAN_EVENTS = {
  close: "phx_close",
  error: "phx_error",
  join: "phx_join",
  reply: "phx_reply",
  leave: "phx_leave"
};

var Push = (function () {

  // Initializes the Push
  //
  // chan - The Channel
  // event - The event, ie `"phx_join"`
  // payload - The payload, ie `{user_id: 123}`
  //

  function Push(chan, event, payload) {
    _classCallCheck(this, Push);

    this.chan = chan;
    this.event = event;
    this.payload = payload || {};
    this.receivedResp = null;
    this.afterHook = null;
    this.recHooks = [];
    this.sent = false;
  }

  _prototypeProperties(Push, null, {
    send: {
      value: function send() {
        var _this = this;

        var ref = this.chan.socket.makeRef();
        this.refEvent = this.chan.replyEventName(ref);
        this.receivedResp = null;
        this.sent = false;

        this.chan.on(this.refEvent, function (payload) {
          _this.receivedResp = payload;
          _this.matchReceive(payload);
          _this.cancelRefEvent();
          _this.cancelAfter();
        });

        this.startAfter();
        this.sent = true;
        this.chan.socket.push({
          topic: this.chan.topic,
          event: this.event,
          payload: this.payload,
          ref: ref
        });
      },
      writable: true,
      configurable: true
    },
    receive: {
      value: function receive(status, callback) {
        if (this.receivedResp && this.receivedResp.status === status) {
          callback(this.receivedResp.response);
        }

        this.recHooks.push({ status: status, callback: callback });
        return this;
      },
      writable: true,
      configurable: true
    },
    after: {
      value: function after(ms, callback) {
        if (this.afterHook) {
          throw "only a single after hook can be applied to a push";
        }
        var timer = null;
        if (this.sent) {
          timer = setTimeout(callback, ms);
        }
        this.afterHook = { ms: ms, callback: callback, timer: timer };
        return this;
      },
      writable: true,
      configurable: true
    },
    matchReceive: {

      // private

      value: function matchReceive(_ref) {
        var status = _ref.status;
        var response = _ref.response;
        var ref = _ref.ref;

        this.recHooks.filter(function (h) {
          return h.status === status;
        }).forEach(function (h) {
          return h.callback(response);
        });
      },
      writable: true,
      configurable: true
    },
    cancelRefEvent: {
      value: function cancelRefEvent() {
        this.chan.off(this.refEvent);
      },
      writable: true,
      configurable: true
    },
    cancelAfter: {
      value: function cancelAfter() {
        if (!this.afterHook) {
          return;
        }
        clearTimeout(this.afterHook.timer);
        this.afterHook.timer = null;
      },
      writable: true,
      configurable: true
    },
    startAfter: {
      value: function startAfter() {
        var _this = this;

        if (!this.afterHook) {
          return;
        }
        var callback = function () {
          _this.cancelRefEvent();
          _this.afterHook.callback();
        };
        this.afterHook.timer = setTimeout(callback, this.afterHook.ms);
      },
      writable: true,
      configurable: true
    }
  });

  return Push;
})();

var Channel = exports.Channel = (function () {
  function Channel(topic, params, socket) {
    var _this = this;

    _classCallCheck(this, Channel);

    this.state = CHAN_STATES.closed;
    this.topic = topic;
    this.params = params || {};
    this.socket = socket;
    this.bindings = [];
    this.joinedOnce = false;
    this.joinPush = new Push(this, CHAN_EVENTS.join, this.params);
    this.pushBuffer = [];

    this.joinPush.receive("ok", function () {
      _this.state = CHAN_STATES.joined;
    });
    this.onClose(function () {
      _this.state = CHAN_STATES.closed;
      _this.socket.remove(_this);
    });
    this.onError(function (reason) {
      _this.state = CHAN_STATES.errored;
      setTimeout(function () {
        return _this.rejoinUntilConnected();
      }, _this.socket.reconnectAfterMs);
    });
    this.on(CHAN_EVENTS.reply, function (payload, ref) {
      _this.trigger(_this.replyEventName(ref), payload);
    });
  }

  _prototypeProperties(Channel, null, {
    rejoinUntilConnected: {
      value: function rejoinUntilConnected() {
        var _this = this;

        if (this.state !== CHAN_STATES.errored) {
          return;
        }
        if (this.socket.isConnected()) {
          this.rejoin();
        } else {
          setTimeout(function () {
            return _this.rejoinUntilConnected();
          }, this.socket.reconnectAfterMs);
        }
      },
      writable: true,
      configurable: true
    },
    join: {
      value: function join() {
        if (this.joinedOnce) {
          throw "tried to join mulitple times. 'join' can only be called a singe time per channel instance";
        } else {
          this.joinedOnce = true;
        }
        this.sendJoin();
        return this.joinPush;
      },
      writable: true,
      configurable: true
    },
    onClose: {
      value: function onClose(callback) {
        this.on(CHAN_EVENTS.close, callback);
      },
      writable: true,
      configurable: true
    },
    onError: {
      value: function onError(callback) {
        this.on(CHAN_EVENTS.error, function (reason) {
          return callback(reason);
        });
      },
      writable: true,
      configurable: true
    },
    on: {
      value: function on(event, callback) {
        this.bindings.push({ event: event, callback: callback });
      },
      writable: true,
      configurable: true
    },
    off: {
      value: function off(event) {
        this.bindings = this.bindings.filter(function (bind) {
          return bind.event !== event;
        });
      },
      writable: true,
      configurable: true
    },
    canPush: {
      value: function canPush() {
        return this.socket.isConnected() && this.state === CHAN_STATES.joined;
      },
      writable: true,
      configurable: true
    },
    push: {
      value: function push(event, payload) {
        if (!this.joinedOnce) {
          throw "tried to push '" + event + "' to '" + this.topic + "' before joining. Use chan.join() before pushing events";
        }
        var pushEvent = new Push(this, event, payload);
        if (this.canPush()) {
          pushEvent.send();
        } else {
          this.pushBuffer.push(pushEvent);
        }

        return pushEvent;
      },
      writable: true,
      configurable: true
    },
    leave: {

      // Leaves the channel
      //
      // Unsubscribes from server events, and
      // instructs channel to terminate on server
      //
      // Triggers onClose() hooks
      //
      // To receive leave acknowledgements, use the a `receive`
      // hook to bind to the server ack, ie:
      //
      //     chan.leave().receive("ok", () => alert("left!") )
      //

      value: function leave() {
        var _this = this;

        return this.push(CHAN_EVENTS.leave).receive("ok", function () {
          _this.trigger(CHAN_EVENTS.close, "leave");
        });
      },
      writable: true,
      configurable: true
    },
    isMember: {

      // private

      value: function isMember(topic) {
        return this.topic === topic;
      },
      writable: true,
      configurable: true
    },
    sendJoin: {
      value: function sendJoin() {
        this.state = CHAN_STATES.joining;
        this.joinPush.send();
      },
      writable: true,
      configurable: true
    },
    rejoin: {
      value: function rejoin() {
        this.sendJoin();
        this.pushBuffer.forEach(function (pushEvent) {
          return pushEvent.send();
        });
        this.pushBuffer = [];
      },
      writable: true,
      configurable: true
    },
    trigger: {
      value: function trigger(triggerEvent, payload, ref) {
        this.bindings.filter(function (bind) {
          return bind.event === triggerEvent;
        }).map(function (bind) {
          return bind.callback(payload, ref);
        });
      },
      writable: true,
      configurable: true
    },
    replyEventName: {
      value: function replyEventName(ref) {
        return "chan_reply_" + ref;
      },
      writable: true,
      configurable: true
    }
  });

  return Channel;
})();

var Socket = exports.Socket = (function () {

  // Initializes the Socket
  //
  // endPoint - The string WebSocket endpoint, ie, "ws://example.com/ws",
  //                                               "wss://example.com"
  //                                               "/ws" (inherited host & protocol)
  // opts - Optional configuration
  //   transport - The Websocket Transport, ie WebSocket, Phoenix.LongPoller.
  //               Defaults to WebSocket with automatic LongPoller fallback.
  //   heartbeatIntervalMs - The millisec interval to send a heartbeat message
  //   reconnectAfterMs - The millisec interval to reconnect after connection loss
  //   logger - The optional function for specialized logging, ie:
  //            `logger: function(msg){ console.log(msg) }`
  //   longpoller_timeout - The maximum timeout of a long poll AJAX request.
  //                        Defaults to 20s (double the server long poll timer).
  //
  // For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)
  //

  function Socket(endPoint) {
    var opts = arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Socket);

    this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
    this.reconnectTimer = null;
    this.channels = [];
    this.sendBuffer = [];
    this.ref = 0;
    this.transport = opts.transport || window.WebSocket || LongPoller;
    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;
    this.reconnectAfterMs = opts.reconnectAfterMs || 5000;
    this.logger = opts.logger || function () {}; // noop
    this.longpoller_timeout = opts.longpoller_timeout || 20000;
    this.endPoint = this.expandEndpoint(endPoint);
  }

  _prototypeProperties(Socket, null, {
    protocol: {
      value: function protocol() {
        return location.protocol.match(/^https/) ? "wss" : "ws";
      },
      writable: true,
      configurable: true
    },
    expandEndpoint: {
      value: function expandEndpoint(endPoint) {
        if (endPoint.charAt(0) !== "/") {
          return endPoint;
        }
        if (endPoint.charAt(1) === "/") {
          return "" + this.protocol() + ":" + endPoint;
        }

        return "" + this.protocol() + "://" + location.host + "" + endPoint;
      },
      writable: true,
      configurable: true
    },
    disconnect: {
      value: function disconnect(callback, code, reason) {
        if (this.conn) {
          this.conn.onclose = function () {}; // noop
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
          this.conn = null;
        }
        callback && callback();
      },
      writable: true,
      configurable: true
    },
    connect: {
      value: function connect() {
        var _this = this;

        this.disconnect(function () {
          _this.conn = new _this.transport(_this.endPoint);
          _this.conn.timeout = _this.longpoller_timeout;
          _this.conn.onopen = function () {
            return _this.onConnOpen();
          };
          _this.conn.onerror = function (error) {
            return _this.onConnError(error);
          };
          _this.conn.onmessage = function (event) {
            return _this.onConnMessage(event);
          };
          _this.conn.onclose = function (event) {
            return _this.onConnClose(event);
          };
        });
      },
      writable: true,
      configurable: true
    },
    log: {

      // Logs the message. Override `this.logger` for specialized logging. noops by default

      value: function log(msg) {
        this.logger(msg);
      },
      writable: true,
      configurable: true
    },
    onOpen: {

      // Registers callbacks for connection state change events
      //
      // Examples
      //
      //    socket.onError(function(error){ alert("An error occurred") })
      //

      value: function onOpen(callback) {
        this.stateChangeCallbacks.open.push(callback);
      },
      writable: true,
      configurable: true
    },
    onClose: {
      value: function onClose(callback) {
        this.stateChangeCallbacks.close.push(callback);
      },
      writable: true,
      configurable: true
    },
    onError: {
      value: function onError(callback) {
        this.stateChangeCallbacks.error.push(callback);
      },
      writable: true,
      configurable: true
    },
    onMessage: {
      value: function onMessage(callback) {
        this.stateChangeCallbacks.message.push(callback);
      },
      writable: true,
      configurable: true
    },
    onConnOpen: {
      value: function onConnOpen() {
        var _this = this;

        this.flushSendBuffer();
        clearInterval(this.reconnectTimer);
        if (!this.conn.skipHeartbeat) {
          clearInterval(this.heartbeatTimer);
          this.heartbeatTimer = setInterval(function () {
            return _this.sendHeartbeat();
          }, this.heartbeatIntervalMs);
        }
        this.stateChangeCallbacks.open.forEach(function (callback) {
          return callback();
        });
      },
      writable: true,
      configurable: true
    },
    onConnClose: {
      value: function onConnClose(event) {
        var _this = this;

        this.log("WS close:");
        this.log(event);
        this.triggerChanError();
        clearInterval(this.reconnectTimer);
        clearInterval(this.heartbeatTimer);
        this.reconnectTimer = setInterval(function () {
          return _this.connect();
        }, this.reconnectAfterMs);
        this.stateChangeCallbacks.close.forEach(function (callback) {
          return callback(event);
        });
      },
      writable: true,
      configurable: true
    },
    onConnError: {
      value: function onConnError(error) {
        this.log("WS error:");
        this.log(error);
        this.triggerChanError();
        this.stateChangeCallbacks.error.forEach(function (callback) {
          return callback(error);
        });
      },
      writable: true,
      configurable: true
    },
    triggerChanError: {
      value: function triggerChanError() {
        this.channels.forEach(function (chan) {
          return chan.trigger(CHAN_EVENTS.error);
        });
      },
      writable: true,
      configurable: true
    },
    connectionState: {
      value: function connectionState() {
        switch (this.conn && this.conn.readyState) {
          case SOCKET_STATES.connecting:
            return "connecting";
          case SOCKET_STATES.open:
            return "open";
          case SOCKET_STATES.closing:
            return "closing";
          default:
            return "closed";
        }
      },
      writable: true,
      configurable: true
    },
    isConnected: {
      value: function isConnected() {
        return this.connectionState() === "open";
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove(chan) {
        this.channels = this.channels.filter(function (c) {
          return !c.isMember(chan.topic);
        });
      },
      writable: true,
      configurable: true
    },
    chan: {
      value: function chan(topic, params) {
        var chan = new Channel(topic, params, this);
        this.channels.push(chan);
        return chan;
      },
      writable: true,
      configurable: true
    },
    push: {
      value: function push(data) {
        var _this = this;

        var callback = function () {
          return _this.conn.send(JSON.stringify(data));
        };
        if (this.isConnected()) {
          callback();
        } else {
          this.sendBuffer.push(callback);
        }
      },
      writable: true,
      configurable: true
    },
    makeRef: {

      // Return the next message ref, accounting for overflows

      value: function makeRef() {
        var newRef = this.ref + 1;
        if (newRef === this.ref) {
          this.ref = 0;
        } else {
          this.ref = newRef;
        }

        return this.ref.toString();
      },
      writable: true,
      configurable: true
    },
    sendHeartbeat: {
      value: function sendHeartbeat() {
        this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.makeRef() });
      },
      writable: true,
      configurable: true
    },
    flushSendBuffer: {
      value: function flushSendBuffer() {
        if (this.isConnected() && this.sendBuffer.length > 0) {
          this.sendBuffer.forEach(function (callback) {
            return callback();
          });
          this.sendBuffer = [];
        }
      },
      writable: true,
      configurable: true
    },
    onConnMessage: {
      value: function onConnMessage(rawMessage) {
        this.log("message received:");
        this.log(rawMessage);
        var msg = JSON.parse(rawMessage.data);
        var topic = msg.topic;
        var event = msg.event;
        var payload = msg.payload;
        var ref = msg.ref;

        this.channels.filter(function (chan) {
          return chan.isMember(topic);
        }).forEach(function (chan) {
          return chan.trigger(event, payload, ref);
        });
        this.stateChangeCallbacks.message.forEach(function (callback) {
          return callback(msg);
        });
      },
      writable: true,
      configurable: true
    }
  });

  return Socket;
})();

var LongPoller = exports.LongPoller = (function () {
  function LongPoller(endPoint) {
    _classCallCheck(this, LongPoller);

    this.retryInMs = 5000;
    this.endPoint = null;
    this.token = null;
    this.sig = null;
    this.skipHeartbeat = true;
    this.onopen = function () {}; // noop
    this.onerror = function () {}; // noop
    this.onmessage = function () {}; // noop
    this.onclose = function () {}; // noop
    this.upgradeEndpoint = this.normalizeEndpoint(endPoint);
    this.pollEndpoint = this.upgradeEndpoint + (/\/$/.test(endPoint) ? "poll" : "/poll");
    this.readyState = SOCKET_STATES.connecting;

    this.poll();
  }

  _prototypeProperties(LongPoller, null, {
    normalizeEndpoint: {
      value: function normalizeEndpoint(endPoint) {
        return endPoint.replace("ws://", "http://").replace("wss://", "https://");
      },
      writable: true,
      configurable: true
    },
    endpointURL: {
      value: function endpointURL() {
        return this.pollEndpoint + ("?token=" + encodeURIComponent(this.token) + "&sig=" + encodeURIComponent(this.sig));
      },
      writable: true,
      configurable: true
    },
    closeAndRetry: {
      value: function closeAndRetry() {
        this.close();
        this.readyState = SOCKET_STATES.connecting;
      },
      writable: true,
      configurable: true
    },
    ontimeout: {
      value: function ontimeout() {
        this.onerror("timeout");
        this.closeAndRetry();
      },
      writable: true,
      configurable: true
    },
    poll: {
      value: function poll() {
        var _this = this;

        if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {
          return;
        }

        Ajax.request("GET", this.endpointURL(), "application/json", null, this.timeout, this.ontimeout.bind(this), function (resp) {
          if (resp) {
            var status = resp.status;
            var token = resp.token;
            var sig = resp.sig;
            var messages = resp.messages;

            _this.token = token;
            _this.sig = sig;
          } else {
            var status = 0;
          }

          switch (status) {
            case 200:
              messages.forEach(function (msg) {
                return _this.onmessage({ data: JSON.stringify(msg) });
              });
              _this.poll();
              break;
            case 204:
              _this.poll();
              break;
            case 410:
              _this.readyState = SOCKET_STATES.open;
              _this.onopen();
              _this.poll();
              break;
            case 0:
            case 500:
              _this.onerror();
              _this.closeAndRetry();
              break;
            default:
              throw "unhandled poll status " + status;
          }
        });
      },
      writable: true,
      configurable: true
    },
    send: {
      value: function send(body) {
        var _this = this;

        Ajax.request("POST", this.endpointURL(), "application/json", body, this.timeout, this.onerror.bind(this, "timeout"), function (resp) {
          if (!resp || resp.status !== 200) {
            _this.onerror(status);
            _this.closeAndRetry();
          }
        });
      },
      writable: true,
      configurable: true
    },
    close: {
      value: function close(code, reason) {
        this.readyState = SOCKET_STATES.closed;
        this.onclose();
      },
      writable: true,
      configurable: true
    }
  });

  return LongPoller;
})();

var Ajax = exports.Ajax = (function () {
  function Ajax() {
    _classCallCheck(this, Ajax);
  }

  _prototypeProperties(Ajax, {
    request: {
      value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {
        if (window.XDomainRequest) {
          var req = new XDomainRequest(); // IE8, IE9
          this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
        } else {
          var req = window.XMLHttpRequest ? new XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari
          new ActiveXObject("Microsoft.XMLHTTP"); // IE6, IE5
          this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
        }
      },
      writable: true,
      configurable: true
    },
    xdomainRequest: {
      value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
        var _this = this;

        req.timeout = timeout;
        req.open(method, endPoint);
        req.onload = function () {
          var response = _this.parseJSON(req.responseText);
          callback && callback(response);
        };
        if (ontimeout) {
          req.ontimeout = ontimeout;
        }

        // Work around bug in IE9 that requires an attached onprogress handler
        req.onprogress = function () {};

        req.send(body);
      },
      writable: true,
      configurable: true
    },
    xhrRequest: {
      value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
        var _this = this;

        req.timeout = timeout;
        req.open(method, endPoint, true);
        req.setRequestHeader("Content-Type", accept);
        req.onerror = function () {
          callback && callback(null);
        };
        req.onreadystatechange = function () {
          if (req.readyState === _this.states.complete && callback) {
            var response = _this.parseJSON(req.responseText);
            callback(response);
          }
        };
        if (ontimeout) {
          req.ontimeout = ontimeout;
        }

        req.send(body);
      },
      writable: true,
      configurable: true
    },
    parseJSON: {
      value: function parseJSON(resp) {
        return resp && resp !== "" ? JSON.parse(resp) : null;
      },
      writable: true,
      configurable: true
    }
  });

  return Ajax;
})();

Ajax.states = { complete: 4 };
Object.defineProperty(exports, "__esModule", {
  value: true
});
 }});
if(typeof(window) === 'object' && !window.Phoenix){ window.Phoenix = require('phoenix') };
 /*
 * # Semantic UI - 1.12.3
 * https://github.com/Semantic-Org/Semantic-UI
 * http://www.semantic-ui.com/
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
/*!
 * # Semantic UI 1.12.3 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
;(function ( $, window, document, undefined ) {

$.site = $.fn.site = function(parameters) {
  var
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    settings        = ( $.isPlainObject(parameters) )
      ? $.extend(true, {}, $.site.settings, parameters)
      : $.extend({}, $.site.settings),

    namespace       = settings.namespace,
    error           = settings.error,

    eventNamespace  = '.' + namespace,
    moduleNamespace = 'module-' + namespace,

    $document       = $(document),
    $module         = $document,
    element         = this,
    instance        = $module.data(moduleNamespace),

    module,
    returnedValue
  ;
  module = {

    initialize: function() {
      module.instantiate();
    },

    instantiate: function() {
      module.verbose('Storing instance of site', module);
      instance = module;
      $module
        .data(moduleNamespace, module)
      ;
    },

    normalize: function() {
      module.fix.console();
      module.fix.requestAnimationFrame();
    },

    fix: {
      console: function() {
        module.debug('Normalizing window.console');
        if (console === undefined || console.log === undefined) {
          module.verbose('Console not available, normalizing events');
          module.disable.console();
        }
        if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
          module.verbose('Console group not available, normalizing events');
          window.console.group = function() {};
          window.console.groupEnd = function() {};
          window.console.groupCollapsed = function() {};
        }
        if (typeof console.markTimeline == 'undefined') {
          module.verbose('Mark timeline not available, normalizing events');
          window.console.markTimeline = function() {};
        }
      },
      consoleClear: function() {
        module.debug('Disabling programmatic console clearing');
        window.console.clear = function() {};
      },
      requestAnimationFrame: function() {
        module.debug('Normalizing requestAnimationFrame');
        if(window.requestAnimationFrame === undefined) {
          module.debug('RequestAnimationFrame not available, normailizing event');
          window.requestAnimationFrame = window.requestAnimationFrame
            || window.mozRequestAnimationFrame
            || window.webkitRequestAnimationFrame
            || window.msRequestAnimationFrame
            || function(callback) { setTimeout(callback, 0); }
          ;
        }
      }
    },

    moduleExists: function(name) {
      return ($.fn[name] !== undefined && $.fn[name].settings !== undefined);
    },

    enabled: {
      modules: function(modules) {
        var
          enabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(module.moduleExists(name)) {
            enabledModules.push(name);
          }
        });
        return enabledModules;
      }
    },

    disabled: {
      modules: function(modules) {
        var
          disabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(!module.moduleExists(name)) {
            disabledModules.push(name);
          }
        });
        return disabledModules;
      }
    },

    change: {
      setting: function(setting, value, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? (modules === 'all')
            ? settings.modules
            : [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            namespace = (module.moduleExists(name))
              ? $.fn[name].settings.namespace || false
              : true,
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', setting, value, name);
            $.fn[name].settings[setting] = value;
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', setting, value);
              }
            }
          }
        });
      },
      settings: function(newSettings, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', newSettings, name);
            $.extend(true, $.fn[name].settings, newSettings);
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', newSettings);
              }
            }
          }
        });
      }
    },

    enable: {
      console: function() {
        module.console(true);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling debug for modules', modules);
        module.change.setting('debug', true, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling verbose debug for modules', modules);
        module.change.setting('verbose', true, modules, modifyExisting);
      }
    },
    disable: {
      console: function() {
        module.console(false);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling debug for modules', modules);
        module.change.setting('debug', false, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling verbose debug for modules', modules);
        module.change.setting('verbose', false, modules, modifyExisting);
      }
    },

    console: function(enable) {
      if(enable) {
        if(instance.cache.console === undefined) {
          module.error(error.console);
          return;
        }
        module.debug('Restoring console function');
        window.console = instance.cache.console;
      }
      else {
        module.debug('Disabling console function');
        instance.cache.console = window.console;
        window.console = {
          clear          : function(){},
          error          : function(){},
          group          : function(){},
          groupCollapsed : function(){},
          groupEnd       : function(){},
          info           : function(){},
          log            : function(){},
          markTimeline   : function(){},
          warn           : function(){}
        };
      }
    },

    destroy: function() {
      module.verbose('Destroying previous site for', $module);
      $module
        .removeData(moduleNamespace)
      ;
    },

    cache: {},

    setting: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, settings, name);
      }
      else if(value !== undefined) {
        settings[name] = value;
      }
      else {
        return settings[name];
      }
    },
    internal: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, module, name);
      }
      else if(value !== undefined) {
        module[name] = value;
      }
      else {
        return module[name];
      }
    },
    debug: function() {
      if(settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.debug.apply(console, arguments);
        }
      }
    },
    verbose: function() {
      if(settings.verbose && settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.verbose.apply(console, arguments);
        }
      }
    },
    error: function() {
      module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
      module.error.apply(console, arguments);
    },
    performance: {
      log: function(message) {
        var
          currentTime,
          executionTime,
          previousTime
        ;
        if(settings.performance) {
          currentTime   = new Date().getTime();
          previousTime  = time || currentTime;
          executionTime = currentTime - previousTime;
          time          = currentTime;
          performance.push({
            'Element'        : element,
            'Name'           : message[0],
            'Arguments'      : [].slice.call(message, 1) || '',
            'Execution Time' : executionTime
          });
        }
        clearTimeout(module.performance.timer);
        module.performance.timer = setTimeout(module.performance.display, 100);
      },
      display: function() {
        var
          title = settings.name + ':',
          totalTime = 0
        ;
        time = false;
        clearTimeout(module.performance.timer);
        $.each(performance, function(index, data) {
          totalTime += data['Execution Time'];
        });
        title += ' ' + totalTime + 'ms';
        if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
          console.groupCollapsed(title);
          if(console.table) {
            console.table(performance);
          }
          else {
            $.each(performance, function(index, data) {
              console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
            });
          }
          console.groupEnd();
        }
        performance = [];
      }
    },
    invoke: function(query, passedArguments, context) {
      var
        object = instance,
        maxDepth,
        found,
        response
      ;
      passedArguments = passedArguments || queryArguments;
      context         = element         || context;
      if(typeof query == 'string' && object !== undefined) {
        query    = query.split(/[\. ]/);
        maxDepth = query.length - 1;
        $.each(query, function(depth, value) {
          var camelCaseValue = (depth != maxDepth)
            ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
            : query
          ;
          if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
            object = object[camelCaseValue];
          }
          else if( object[camelCaseValue] !== undefined ) {
            found = object[camelCaseValue];
            return false;
          }
          else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
            object = object[value];
          }
          else if( object[value] !== undefined ) {
            found = object[value];
            return false;
          }
          else {
            module.error(error.method, query);
            return false;
          }
        });
      }
      if ( $.isFunction( found ) ) {
        response = found.apply(context, passedArguments);
      }
      else if(found !== undefined) {
        response = found;
      }
      if($.isArray(returnedValue)) {
        returnedValue.push(response);
      }
      else if(returnedValue !== undefined) {
        returnedValue = [returnedValue, response];
      }
      else if(response !== undefined) {
        returnedValue = response;
      }
      return found;
    }
  };

  if(methodInvoked) {
    if(instance === undefined) {
      module.initialize();
    }
    module.invoke(query);
  }
  else {
    if(instance !== undefined) {
      module.destroy();
    }
    module.initialize();
  }
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.site.settings = {

  name        : 'Site',
  namespace   : 'site',

  error : {
    console : 'Console cannot be restored, most likely it was overwritten outside of module',
    method : 'The method you called is not defined.'
  },

  debug       : false,
  verbose     : true,
  performance : true,

  modules: [
    'accordion',
    'api',
    'checkbox',
    'dimmer',
    'dropdown',
    'form',
    'modal',
    'nag',
    'popup',
    'rating',
    'shape',
    'sidebar',
    'state',
    'sticky',
    'tab',
    'transition',
    'video',
    'visit',
    'visibility'
  ],

  siteNamespace   : 'site',
  namespaceStub   : {
    cache     : {},
    config    : {},
    sections  : {},
    section   : {},
    utilities : {}
  }

};

// allows for selection of elements with data attributes
$.extend($.expr[ ":" ], {
  data: ($.expr.createPseudo)
    ? $.expr.createPseudo(function(dataName) {
        return function(elem) {
          return !!$.data(elem, dataName);
        };
      })
    : function(elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[ 3 ]);
    }
});


})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.form = function(fields, parameters) {
  var
    $allModules     = $(this),

    settings        = $.extend(true, {}, $.fn.form.settings, parameters),
    validation      = $.extend({}, $.fn.form.settings.defaults, fields),

    namespace       = settings.namespace,
    metadata        = settings.metadata,
    selector        = settings.selector,
    className       = settings.className,
    error           = settings.error,

    eventNamespace  = '.' + namespace,
    moduleNamespace = 'module-' + namespace,

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        $module     = $(this),
        $field      = $(this).find(selector.field),
        $group      = $(this).find(selector.group),
        $message    = $(this).find(selector.message),
        $prompt     = $(this).find(selector.prompt),

        $submit     = $(this).find(selector.submit),
        $clear      = $(this).find(selector.clear),
        $reset      = $(this).find(selector.reset),

        formErrors  = [],
        keyHeldDown = false,

        element     = this,
        instance    = $module.data(moduleNamespace),
        module
      ;

      module      = {

        initialize: function() {
          module.verbose('Initializing form validation', $module, validation, settings);
          module.bindEvents();
          module.set.defaults();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $field = $module.find(selector.field);
        },

        submit: function() {
          module.verbose('Submitting form', $module);
          $module
            .submit()
          ;
        },

        attachEvents: function(selector, action) {
          action = action || 'submit';
          $(selector)
            .on('click', function(event) {
              module[action]();
              event.preventDefault();
            })
          ;
        },

        bindEvents: function() {
          if(settings.keyboardShortcuts) {
            $field
              .on('keydown' + eventNamespace, module.event.field.keydown)
            ;
          }
          $module
            .on('submit' + eventNamespace, module.validate.form)
          ;
          $field
            .on('blur' + eventNamespace, module.event.field.blur)
          ;

          // attach events to common elements
          module.attachEvents($submit, 'submit');
          module.attachEvents($reset, 'reset');
          module.attachEvents($clear, 'clear');

          $field
            .each(function() {
              var
                type       = $(this).prop('type'),
                inputEvent = module.get.changeEvent(type)
              ;
              $(this)
                .on(inputEvent + eventNamespace, module.event.field.change)
              ;
            })
          ;
        },

        clear: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('clear');
              }
              else if(isCheckbox) {
                $element.checkbox('uncheck');
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val('');
              }
            })
          ;
        },

        reset: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('restore defaults');
              }
              else if(isCheckbox) {
                module.verbose('Resetting checkbox value', $element, defaultValue);
                if(defaultValue === true) {
                  $element.checkbox('check');
                }
                else {
                  $element.checkbox('uncheck');
                }
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val(defaultValue);
              }
            })
          ;
        },

        removeEvents: function() {
          $module
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
          $submit
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
        },

        event: {
          field: {
            keydown: function(event) {
              var
                $field  = $(this),
                key     = event.which,
                keyCode = {
                  enter  : 13,
                  escape : 27
                }
              ;
              if( key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field
                  .blur()
                ;
              }
              if(!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0 ) {
                $submit
                  .addClass(className.pressed)
                ;
                if(!keyHeldDown) {
                  $field
                    .one('keyup' + eventNamespace, module.event.field.keyup)
                  ;
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
                }
                keyHeldDown = true;
              }
            },
            keyup: function() {
              keyHeldDown = false;
              $submit.removeClass(className.pressed);
            },
            blur: function() {
              var
                $field      = $(this),
                $fieldGroup = $field.closest($group)
              ;
              if( $fieldGroup.hasClass(className.error) ) {
                module.debug('Revalidating field', $field,  module.get.validation($field));
                module.validate.field( module.get.validation($field) );
              }
              else if(settings.on == 'blur' || settings.on == 'change') {
                module.validate.field( module.get.validation($field) );
              }
            },
            change: function() {
              var
                $field      = $(this),
                $fieldGroup = $field.closest($group)
              ;
              if(settings.on == 'change' || ( $fieldGroup.hasClass(className.error) && settings.revalidate) ) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function() {
                  module.debug('Revalidating field', $field,  module.get.validation($field));
                  module.validate.field( module.get.validation($field) );
                }, settings.delay);
              }
            }
          }

        },

        get: {
          changeEvent: function(type) {
            if(type == 'checkbox' || type == 'radio' || type == 'hidden') {
              return 'change';
            }
            else {
              return module.get.inputEvent();
            }
          },
          inputEvent: function() {
            return (document.createElement('input').oninput !== undefined)
              ? 'input'
              : (document.createElement('input').onpropertychange !== undefined)
                ? 'propertychange'
                : 'keyup'
            ;
          },
          field: function(identifier) {
            module.verbose('Finding field with identifier', identifier);
            if( $field.filter('#' + identifier).length > 0 ) {
              return $field.filter('#' + identifier);
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'"]');
            }
            else if( $field.filter('[name="' + identifier +'[]"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'[]"]');
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]');
            }
            return $('<input/>');
          },
          fields: function(fields) {
            var
              $fields = $()
            ;
            $.each(fields, function(index, name) {
              $fields = $fields.add( module.get.field(name) );
            });
            return $fields;
          },
          validation: function($field) {
            var
              rules
            ;
            $.each(validation, function(fieldName, field) {
              if( module.get.field(field.identifier).get(0) == $field.get(0) ) {
                rules = field;
              }
            });
            return rules || false;
          },
          value: function (field) {
            var
              fields = [],
              results
            ;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
          },
          values: function (fields) {
            var
              $fields = $.isArray(fields)
                ? module.get.fields(fields)
                : $field,
              values = {}
            ;
            $fields.each(function(index, field) {
              var
                $field     = $(field),
                type       = $field.prop('type'),
                name       = $field.prop('name'),
                value      = $field.val(),
                isCheckbox = $field.is(selector.checkbox),
                isRadio    = $field.is(selector.radio),
                isMultiple = (name.indexOf('[]') !== -1),
                isChecked  = (isCheckbox)
                  ? $field.is(':checked')
                  : false
              ;
              if(name) {
                if(isMultiple) {
                  name = name.replace('[]', '');
                  if(!values[name]) {
                    values[name] = [];
                  }
                  if(isCheckbox) {
                    if(isChecked) {
                      values[name].push(value)
                    }
                    else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  }
                  else {
                    values[name].push(value);
                  }
                }
                else {
                  if(isRadio) {
                    if(isChecked) {
                      values[name] = value;
                    }
                  }
                  else if(isCheckbox) {
                    if(isChecked) {
                      values[name] = true;
                    }
                    else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  }
                  else {
                    values[name] = value;
                  }
                }
              }
            });
            return values;
          }
        },

        has: {

          field: function(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            if( $field.filter('#' + identifier).length > 0 ) {
              return true;
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return true;
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return true;
            }
            return false;
          }

        },

        add: {
          prompt: function(identifier, errors) {
            var
              $field       = module.get.field(identifier),
              $fieldGroup  = $field.closest($group),
              $prompt      = $fieldGroup.children(selector.prompt),
              promptExists = ($prompt.length !== 0)
            ;
            errors = (typeof errors == 'string')
              ? [errors]
              : errors
            ;
            module.verbose('Adding field error state', identifier);
            $fieldGroup
              .addClass(className.error)
            ;
            if(settings.inline) {
              if(!promptExists) {
                $prompt = settings.templates.prompt(errors);
                $prompt
                  .appendTo($fieldGroup)
                ;
              }
              $prompt
                .html(errors[0])
              ;
              if(!promptExists) {
                if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', settings.transition);
                  $prompt.transition(settings.transition + ' in', settings.duration);
                }
                else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt
                    .fadeIn(settings.duration)
                  ;
                }
              }
              else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
              }
            }
          },
          errors: function(errors) {
            module.debug('Adding form error messages', errors);
            $message
              .html( settings.templates.error(errors) )
            ;
          }
        },

        remove: {
          prompt: function(field) {
            var
              $field      = module.get.field(field.identifier),
              $fieldGroup = $field.closest($group),
              $prompt     = $fieldGroup.children(selector.prompt)
            ;
            $fieldGroup
              .removeClass(className.error)
            ;
            if(settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', field);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                $prompt.transition(settings.transition + ' out', settings.duration, function() {
                  $prompt.remove();
                });
              }
              else {
                $prompt
                  .fadeOut(settings.duration, function(){
                    $prompt.remove();
                  })
                ;
              }
            }
          }
        },

        set: {
          success: function() {
            $module
              .removeClass(className.error)
              .addClass(className.success)
            ;
          },
          defaults: function () {
            $field
              .each(function () {
                var
                  $field     = $(this),
                  isCheckbox = ($field.filter(selector.checkbox).length > 0),
                  value      = (isCheckbox)
                    ? $field.is(':checked')
                    : $field.val()
                ;
                $field.data(metadata.defaultValue, value);
              })
            ;
          },
          error: function() {
            $module
              .removeClass(className.success)
              .addClass(className.error)
            ;
          },
          value: function (field, value) {
            var
              fields = {}
            ;
            fields[field] = value;
            return module.set.values.call(element, fields);
          },
          values: function (fields) {
            if($.isEmptyObject(fields)) {
              return;
            }
            $.each(fields, function(key, value) {
              var
                $field      = module.get.field(key),
                $element    = $field.parent(),
                isMultiple  = $.isArray(value),
                isCheckbox  = $element.is(selector.uiCheckbox),
                isDropdown  = $element.is(selector.uiDropdown),
                isRadio     = ($field.is(selector.radio) && isCheckbox),
                fieldExists = ($field.length > 0),
                $multipleField
              ;
              if(fieldExists) {
                if(isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function(index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element       = $multipleField.parent();
                    if($multipleField.length > 0) {
                      $element.checkbox('check');
                    }
                  });
                }
                else if(isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]')
                    .parent(selector.uiCheckbox)
                      .checkbox('check')
                  ;
                }
                else if(isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if(value === true) {
                    $element.checkbox('check');
                  }
                  else {
                    $element.checkbox('uncheck');
                  }
                }
                else if(isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
                }
                else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
                }
              }
            });
            module.validate.form();
          }
        },

        validate: {

          form: function(event) {
            var
              allValid = true,
              apiRequest
            ;

            // input keydown event will fire submit repeatedly by browser default
            if(keyHeldDown) {
              return false;
            }

            // reset errors
            formErrors = [];
            $.each(validation, function(fieldName, field) {
              if( !( module.validate.field(field) ) ) {
                allValid = false;
              }
            });
            if(allValid) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              return settings.onSuccess.call(element, event);
            }
            else {
              module.debug('Form has errors');
              module.set.error();
              if(!settings.inline) {
                module.add.errors(formErrors);
              }
              // prevent ajax submit
              if($module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
              }
              return settings.onFailure.call(element, formErrors);
            }
          },

          // takes a validation object and returns whether field passes validation
          field: function(field) {
            var
              $field      = module.get.field(field.identifier),
              fieldValid  = true,
              fieldErrors = []
            ;
            if($field.prop('disabled')) {
              module.debug('Field is disabled. Skipping', field.identifier);
              fieldValid = true;
            }
            else if(field.optional && $.trim($field.val()) === ''){
              module.debug('Field is optional and empty. Skipping', field.identifier);
              fieldValid = true;
            }
            else if(field.rules !== undefined) {
              $.each(field.rules, function(index, rule) {
                if( module.has.field(field.identifier) && !( module.validate.rule(field, rule) ) ) {
                  module.debug('Field is invalid', field.identifier, rule.type);
                  fieldErrors.push(rule.prompt);
                  fieldValid = false;
                }
              });
            }
            if(fieldValid) {
              module.remove.prompt(field, fieldErrors);
              settings.onValid.call($field);
            }
            else {
              formErrors = formErrors.concat(fieldErrors);
              module.add.prompt(field.identifier, fieldErrors);
              settings.onInvalid.call($field, fieldErrors);
              return false;
            }
            return true;
          },

          // takes validation rule and returns whether field passes rule
          rule: function(field, validation) {
            var
              $field        = module.get.field(field.identifier),
              type          = validation.type,
              value         = $.trim($field.val() + ''),

              bracketRegExp = /\[(.*)\]/i,
              bracket       = bracketRegExp.exec(type),
              isValid       = true,
              ancillary,
              functionType
            ;
            // if bracket notation is used, pass in extra parameters
            if(bracket !== undefined && bracket !== null) {
              ancillary    = '' + bracket[1];
              functionType = type.replace(bracket[0], '');
              isValid      = settings.rules[functionType].call(element, value, ancillary);
            }
            // normal notation
            else {
              isValid = settings.rules[type].call($field, value);
            }
            return isValid;
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }

    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.form.settings = {

  name              : 'Form',
  namespace         : 'form',

  debug             : false,
  verbose           : true,
  performance       : true,


  keyboardShortcuts : true,
  on                : 'submit',
  inline            : false,

  delay             : 200,
  revalidate        : true,

  transition        : 'scale',
  duration          : 200,

  onValid           : function() {},
  onInvalid         : function() {},
  onSuccess         : function() { return true; },
  onFailure         : function() { return false; },

  metadata : {
    defaultValue : 'default',
    validate     : 'validate'
  },

  selector : {
    checkbox   : 'input[type="checkbox"], input[type="radio"]',
    clear      : '.clear',
    field      : 'input, textarea, select',
    group      : '.field',
    input      : 'input',
    message    : '.error.message',
    prompt     : '.prompt.label',
    radio      : 'input[type="radio"]',
    reset      : '.reset',
    submit     : '.submit',
    uiCheckbox : '.ui.checkbox',
    uiDropdown : '.ui.dropdown'
  },

  className : {
    error   : 'error',
    label   : 'ui prompt label',
    pressed : 'down',
    success : 'success'
  },

  error: {
    method   : 'The method you called is not defined.'
  },

  templates: {

    // template that produces error message
    error: function(errors) {
      var
        html = '<ul class="list">'
      ;
      $.each(errors, function(index, value) {
        html += '<li>' + value + '</li>';
      });
      html += '</ul>';
      return $(html);
    },

    // template that produces label
    prompt: function(errors) {
      return $('<div/>')
        .addClass('ui red pointing prompt label')
        .html(errors[0])
      ;
    }
  },

  rules: {

    // checkbox checked
    checked: function() {
      return ($(this).filter(':checked').length > 0);
    },

    // value contains text (insensitive)
    contains: function(value, text) {
      // escape regex characters
      text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      return (value.search( new RegExp(text, 'i') ) !== -1);
    },

    // value contains text (case sensitive)
    containsExactly: function(value, text) {
      // escape regex characters
      text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      return (value.search( new RegExp(text) ) !== -1);
    },

    // is most likely an email
    email: function(value){
      var
        emailRegExp = new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?", "i")
      ;
      return emailRegExp.test(value);
    },

    // is not empty or blank string
    empty: function(value) {
      return !(value === undefined || '' === value);
    },

    // is valid integer
    integer: function(value, range) {
      var
        intRegExp = /^\-?\d+$/,
        min,
        max,
        parts
      ;
      if(range === undefined || range === '' || range === '..') {
        // do nothing
      }
      else if(range.indexOf('..') == -1) {
        if(intRegExp.test(range)) {
          min = max = range - 0;
        }
      }
      else {
        parts = range.split('..', 2);
        if(intRegExp.test(parts[0])) {
          min = parts[0] - 0;
        }
        if(intRegExp.test(parts[1])) {
          max = parts[1] - 0;
        }
      }
      return (
        intRegExp.test(value) &&
        (min === undefined || value >= min) &&
        (max === undefined || value <= max)
      );
    },

    // is value (case insensitive)
    is: function(value, text) {
      text = (typeof text == 'string')
        ? text.toLowerCase()
        : text
      ;
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      return (value == text);
    },

    // is value
    isExactly: function(value, text) {
      return (value == text);
    },

    // is at least string length
    length: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
    },

    // matches another field
    match: function(value, fieldIdentifier) {
      // use either id or name of field
      var
        $form = $(this),
        matchingValue
      ;
      if($form.find('#' + fieldIdentifier).length > 0) {
        matchingValue = $form.find('#' + fieldIdentifier).val();
      }
      else if($form.find('[name="' + fieldIdentifier +'"]').length > 0) {
        matchingValue = $form.find('[name="' + fieldIdentifier + '"]').val();
      }
      else if( $form.find('[data-validate="'+ fieldIdentifier +'"]').length > 0 ) {
        matchingValue = $form.find('[data-validate="'+ fieldIdentifier +'"]').val();
      }
      return (matchingValue !== undefined)
        ? ( value.toString() == matchingValue.toString() )
        : false
      ;
    },

    // string length is less than max length
    maxLength: function(value, maxLength) {
      return (value !== undefined)
        ? (value.length <= maxLength)
        : false
      ;
    },

    // value is not value (case insensitive)
    not: function(value, notValue) {
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      notValue = (typeof notValue == 'string')
        ? notValue.toLowerCase()
        : notValue
      ;
      return (value != notValue);
    },

    // value is not value (case sensitive)
    notExactly: function(value, notValue) {
      return (value != notValue);
    },

    // value is most likely url
    url: function(value) {
      var
        urlRegExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/
      ;
      return urlRegExp.test(value);
    }
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.accordion = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.accordion.settings, parameters)
          : $.extend({}, $.fn.accordion.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        $module  = $(this),
        $title   = $module.find(selector.title),
        $content = $module.find(selector.content),

        element  = this,
        instance = $module.data(moduleNamespace),
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', $module);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function() {
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying previous instance', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $title   = $module.find(selector.title);
          $content = $module.find(selector.content);
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.debug('Binding delegated events');
            $module
              .on('click' + eventNamespace, selector.trigger, module.event.click)
            ;
          }
        },

        event: {
          click: function() {
            module.toggle.call(this);
          }
        },

        toggle: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive && !isAnimating),
            isOpening   = (!isActive && isAnimating)
          ;
          module.debug('Toggling visibility of content', $activeTitle);
          if(isOpen || isOpening) {
            if(settings.collapsible) {
              module.close.call($activeTitle);
            }
            else {
              module.debug('Cannot close accordion content collapsing is disabled');
            }
          }
          else {
            module.open.call($activeTitle);
          }
        },

        open: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isUnopen    = (!isActive && !isAnimating)
          ;
          if(isUnopen) {
            module.debug('Opening accordion content', $activeTitle);
            if(settings.exclusive) {
              module.closeOthers.call($activeTitle);
            }
            $activeTitle
              .addClass(className.active)
            ;
            $activeContent.addClass(className.animating);
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent
                  .children()
                    .transition({
                      animation   : 'fade in',
                      queue       : false,
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $activeContent
                  .children()
                    .stop(true)
                    .animate({
                      opacity: 1
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $activeContent
              .stop(true)
              .slideDown(settings.duration, settings.easing, function() {
                $activeContent
                  .removeClass(className.animating)
                  .addClass(className.active)
                ;
                module.reset.display.call(this);
                settings.onOpen.call(this);
                settings.onChange.call(this);
              })
            ;
          }
        },

        close: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating    = $activeContent.hasClass(className.animating),
            isActive       = $activeContent.hasClass(className.active),
            isOpening      = (!isActive && isAnimating),
            isClosing      = (isActive && isAnimating)
          ;
          if((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            $activeTitle
              .removeClass(className.active)
            ;
            $activeContent
              .addClass(className.animating)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent
                  .children()
                    .transition({
                      animation   : 'fade out',
                      queue       : false,
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $activeContent
                  .children()
                    .stop(true)
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $activeContent
              .stop(true)
              .slideUp(settings.duration, settings.easing, function() {
                $activeContent
                  .removeClass(className.animating)
                  .removeClass(className.active)
                ;
                module.reset.display.call(this);
                settings.onClose.call(this);
                settings.onChange.call(this);
              })
            ;
          }
        },

        closeOthers: function(index) {
          var
            $activeTitle = (index !== undefined)
              ? $title.eq(index)
              : $(this).closest(selector.title),
            $parentTitles    = $activeTitle.parents(selector.content).prev(selector.title),
            $activeAccordion = $activeTitle.closest(selector.accordion),
            activeSelector   = selector.title + '.' + className.active + ':visible',
            activeContent    = selector.content + '.' + className.active + ':visible',
            $openTitles,
            $nestedTitles,
            $openContents
          ;
          if(settings.closeNested) {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
          }
          else {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles   = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
          }
          if( ($openTitles.length > 0) ) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles
              .removeClass(className.active)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents
                  .children()
                    .transition({
                      animation   : 'fade out',
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $openContents
                  .children()
                    .stop()
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $openContents
              .stop()
              .slideUp(settings.duration , settings.easing, function() {
                $(this).removeClass(className.active);
                module.reset.display.call(this);
              })
            ;
          }
        },

        reset: {

          display: function() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

          opacity: function() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          module.debug('Changing internal', name, value);
          if(value !== undefined) {
            if( $.isPlainObject(name) ) {
              $.extend(true, module, name);
            }
            else {
              module[name] = value;
            }
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.accordion.settings = {

  name            : 'Accordion',
  namespace       : 'accordion',

  debug           : false,
  verbose         : true,
  performance     : true,

  exclusive       : true,
  collapsible     : true,
  closeNested     : false,
  animateChildren : true,

  duration        : 350,
  easing          : 'easeOutQuad',

  onOpen          : function(){},
  onClose         : function(){},
  onChange        : function(){},

  error: {
    method : 'The method you called is not defined'
  },

  className   : {
    active    : 'active',
    animating : 'animating'
  },

  selector    : {
    accordion : '.accordion',
    title     : '.title',
    trigger   : '.title',
    content   : '.content'
  }

};

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  }
});

})( jQuery, window , document );


/*!
 * # Semantic UI 1.12.3 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.checkbox = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = $.extend(true, {}, $.fn.checkbox.settings, parameters),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $label          = $(this).find(selector.label).first(),
        $input          = $(this).find(selector.input),

        instance        = $module.data(moduleNamespace),

        observer,
        element         = this,
        module
      ;

      module      = {

        initialize: function() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.add.events();

          if( module.is.checked() ) {
            module.set.checked();
            if(settings.fireOnInit) {
              settings.onChecked.call($input.get());
            }
          }
          else {
            module.remove.checked();
            if(settings.fireOnInit) {
              settings.onUnchecked.call($input.get());
            }
          }
          module.observeChanges();

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying module');
          module.remove.events();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $module = $(element);
          $label  = $(element).find(selector.label).first();
          $input  = $(element).find(selector.input);
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        attachEvents: function(selector, event) {
          var
            $element = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound);
          }
        },

        event: {
          keydown: function(event) {
            var
              key     = event.which,
              keyCode = {
                enter  : 13,
                space  : 32,
                escape : 27
              }
            ;
            if( key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $module
                .blur()
              ;
            }
            if(!event.ctrlKey && (key == keyCode.enter || key == keyCode.space)) {
              module.verbose('Enter key pressed, toggling checkbox');
              module.toggle.call(this);
              event.preventDefault();
            }
          }
        },

        is: {
          radio: function() {
            return $module.hasClass(className.radio);
          },
          checked: function() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
          },
          unchecked: function() {
            return !module.is.checked();
          }
        },

        can: {
          change: function() {
            return !( $module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') );
          },
          uncheck: function() {
            return (typeof settings.uncheckable === 'boolean')
              ? settings.uncheckable
              : !module.is.radio()
            ;
          }
        },

        set: {
          checked: function() {
            $module.addClass(className.checked);
          },
          tab: function() {
            if( $input.attr('tabindex') === undefined) {
              $input
                .attr('tabindex', 0)
              ;
            }
          }
        },

        create: {
          label: function() {
            if($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
            }
            else if( !module.has.label() ) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
            }
          }
        },

        has: {
          label: function() {
            return ($label.length > 0);
          }
        },

        add: {
          events: function() {
            module.verbose('Attaching checkbox events');
            $module
              .on('click'   + eventNamespace, module.toggle)
              .on('keydown' + eventNamespace, selector.input, module.event.keydown)
            ;
          }
        },

        remove: {
          checked: function() {
            $module.removeClass(className.checked);
          },
          events: function() {
            module.debug('Removing events');
            $module
              .off(eventNamespace)
              .removeData(moduleNamespace)
            ;
            $input
              .off(eventNamespace, module.event.keydown)
            ;
            $label
              .off(eventNamespace)
            ;
          }
        },

        enable: function() {
          module.debug('Enabling checkbox functionality');
          $module.removeClass(className.disabled);
          $input.prop('disabled', false);
          settings.onEnabled.call($input.get());
        },

        disable: function() {
          module.debug('Disabling checkbox functionality');
          $module.addClass(className.disabled);
          $input.prop('disabled', 'disabled');
          settings.onDisabled.call($input.get());
        },

        check: function() {
          module.debug('Enabling checkbox', $input);
          $input
            .prop('checked', true)
            .trigger('change')
          ;
          module.set.checked();
          $input.trigger('blur');
          settings.onChange.call($input.get());
          settings.onChecked.call($input.get());
        },

        uncheck: function() {
          module.debug('Disabling checkbox');
          $input
            .prop('checked', false)
            .trigger('change')
          ;
          module.remove.checked();
          $input.trigger('blur');
          settings.onChange.call($input.get());
          settings.onUnchecked.call($input.get());
        },

        toggle: function(event) {
          if( !module.can.change() ) {
            console.log(module.can.change());
            module.debug('Checkbox is read-only or disabled, ignoring toggle');
            return;
          }
          module.verbose('Determining new checkbox state');
          if( module.is.unchecked() ) {
            module.check();
          }
          else if( module.is.checked() && module.can.uncheck() ) {
            module.uncheck();
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.checkbox.settings = {

  name        : 'Checkbox',
  namespace   : 'checkbox',

  debug       : false,
  verbose     : true,
  performance : true,

  // delegated event context
  uncheckable : 'auto',
  fireOnInit  : true,

  onChange    : function(){},
  onChecked   : function(){},
  onUnchecked : function(){},
  onEnabled   : function(){},
  onDisabled  : function(){},

  className   : {
    checked  : 'checked',
    disabled : 'disabled',
    radio    : 'radio',
    readOnly : 'read-only'
  },

  error     : {
    method   : 'The method you called is not defined'
  },

  selector : {
    input  : 'input[type="checkbox"], input[type="radio"]',
    label  : 'label'
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dimmer = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dimmer.settings, parameters)
          : $.extend({}, $.fn.dimmer.settings),

        selector        = settings.selector,
        namespace       = settings.namespace,
        className       = settings.className,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        clickEvent      = ('ontouchstart' in document.documentElement)
          ? 'touchstart'
          : 'click',

        $module = $(this),
        $dimmer,
        $dimmable,

        element   = this,
        instance  = $module.data(moduleNamespace),
        module
      ;

      module = {

        preinitialize: function() {
          if( module.is.dimmer() ) {
            $dimmable = $module.parent();
            $dimmer   = $module;
          }
          else {
            $dimmable = $module;
            if( module.has.dimmer() ) {
              if(settings.dimmerName) {
                $dimmer = $dimmable.children(selector.dimmer).filter('.' + settings.dimmerName);
              }
              else {
                $dimmer = $dimmable.children(selector.dimmer);
              }
            }
            else {
              $dimmer = module.create();
            }
          }
        },

        initialize: function() {
          module.debug('Initializing dimmer', settings);
          if(settings.on == 'hover') {
            $dimmable
              .on('mouseenter' + eventNamespace, module.show)
              .on('mouseleave' + eventNamespace, module.hide)
            ;
          }
          else if(settings.on == 'click') {
            $dimmable
              .on(clickEvent + eventNamespace, module.toggle)
            ;
          }
          if( module.is.page() ) {
            module.debug('Setting as a page dimmer', $dimmable);
            module.set.pageDimmer();
          }

          if( module.is.closable() ) {
            module.verbose('Adding dimmer close event', $dimmer);
            $dimmer
              .on(clickEvent + eventNamespace, module.event.click)
            ;
          }
          module.set.dimmable();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', $dimmer);
          $module
            .removeData(moduleNamespace)
          ;
          $dimmable
            .off(eventNamespace)
          ;
          $dimmer
            .off(eventNamespace)
          ;
        },

        event: {
          click: function(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if( $dimmer.find(event.target).length === 0 || $(event.target).is(selector.content) ) {
              module.hide();
              event.stopImmediatePropagation();
            }
          }
        },

        addContent: function(element) {
          var
            $content = $(element)
          ;
          module.debug('Add content to dimmer', $content);
          if($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
          }
        },

        create: function() {
          var
            $element = $( settings.template.dimmer() )
          ;
          if(settings.variation) {
            module.debug('Creating dimmer with variation', settings.variation);
            $element.addClass(settings.variation);
          }
          if(settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
          }
          $element
            .appendTo($dimmable)
          ;
          return $element;
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Showing dimmer', $dimmer, settings);
          if( (!module.is.dimmed() || module.is.animating()) && module.is.enabled() ) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is already shown or disabled');
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.dimmed() || module.is.animating() ) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is not visible');
          }
        },

        toggle: function() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if( !module.is.dimmed() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        animate: {
          show: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if(settings.opacity !== 'auto') {
                module.set.opacity();
              }
              $dimmer
                .transition({
                  animation   : settings.transition + ' in',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.set.dimmed();
                  },
                  onComplete  : function() {
                    module.set.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if(settings.opacity == 'auto') {
                settings.opacity = 0.8;
              }
              $dimmer
                .stop()
                .css({
                  opacity : 0,
                  width   : '100%',
                  height  : '100%'
                })
                .fadeTo(module.get.duration(), settings.opacity, function() {
                  $dimmer.removeAttr('style');
                  module.set.active();
                  callback();
                })
              ;
            }
          },
          hide: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer
                .transition({
                  animation   : settings.transition + ' out',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.remove.dimmed();
                  },
                  onComplete  : function() {
                    module.remove.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Hiding dimmer with javascript');
              module.remove.dimmed();
              $dimmer
                .stop()
                .fadeOut(module.get.duration(), function() {
                  module.remove.active();
                  $dimmer.removeAttr('style');
                  callback();
                })
              ;
            }
          }
        },

        get: {
          dimmer: function() {
            return $dimmer;
          },
          duration: function() {
            if(typeof settings.duration == 'object') {
              if( module.is.active() ) {
                return settings.duration.hide;
              }
              else {
                return settings.duration.show;
              }
            }
            return settings.duration;
          }
        },

        has: {
          dimmer: function() {
            if(settings.dimmerName) {
              return ($module.children(selector.dimmer).filter('.' + settings.dimmerName).length > 0);
            }
            else {
              return ( $module.children(selector.dimmer).length > 0 );
            }
          }
        },

        is: {
          active: function() {
            return $dimmer.hasClass(className.active);
          },
          animating: function() {
            return ( $dimmer.is(':animated') || $dimmer.hasClass(className.animating) );
          },
          closable: function() {
            if(settings.closable == 'auto') {
              if(settings.on == 'hover') {
                return false;
              }
              return true;
            }
            return settings.closable;
          },
          dimmer: function() {
            return $module.is(selector.dimmer);
          },
          dimmable: function() {
            return $module.is(selector.dimmable);
          },
          dimmed: function() {
            return $dimmable.hasClass(className.dimmed);
          },
          disabled: function() {
            return $dimmable.hasClass(className.disabled);
          },
          enabled: function() {
            return !module.is.disabled();
          },
          page: function () {
            return $dimmable.is('body');
          },
          pageDimmer: function() {
            return $dimmer.hasClass(className.pageDimmer);
          }
        },

        can: {
          show: function() {
            return !$dimmer.hasClass(className.disabled);
          }
        },

        set: {
          opacity: function(opacity) {
            var
              opacity    = settings.opacity || opacity,
              color      = $dimmer.css('background-color'),
              colorArray = color.split(','),
              isRGBA     = (colorArray && colorArray.length == 4)
            ;
            if(isRGBA) {
              colorArray[3] = opacity + ')';
              color         = colorArray.join(',');
            }
            else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
            }
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
          },
          active: function() {
            $dimmer.addClass(className.active);
          },
          dimmable: function() {
            $dimmable.addClass(className.dimmable);
          },
          dimmed: function() {
            $dimmable.addClass(className.dimmed);
          },
          pageDimmer: function() {
            $dimmer.addClass(className.pageDimmer);
          },
          disabled: function() {
            $dimmer.addClass(className.disabled);
          }
        },

        remove: {
          active: function() {
            $dimmer
              .removeClass(className.active)
            ;
          },
          dimmed: function() {
            $dimmable.removeClass(className.dimmed);
          },
          disabled: function() {
            $dimmer.removeClass(className.disabled);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      module.preinitialize();

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.dimmer.settings = {

  name        : 'Dimmer',
  namespace   : 'dimmer',

  debug       : false,
  verbose     : true,
  performance : true,

  // name to distinguish between multiple dimmers in context
  dimmerName  : false,

  // whether to add a variation type
  variation   : false,

  // whether to bind close events
  closable    : 'auto',

  // whether to use css animations
  useCSS      : true,

  // css animation to use
  transition  : 'fade',

  // event to bind to
  on          : false,

  // overriding opacity value
  opacity     : 'auto',

  // transition durations
  duration    : {
    show : 500,
    hide : 500
  },

  onChange    : function(){},
  onShow      : function(){},
  onHide      : function(){},

  error   : {
    method   : 'The method you called is not defined.'
  },

  selector: {
    dimmable : '.dimmable',
    dimmer   : '.ui.dimmer',
    content  : '.ui.dimmer > .content, .ui.dimmer > .content > .center'
  },

  template: {
    dimmer: function() {
     return $('<div />').attr('class', 'ui dimmer');
    }
  },

  className : {
    active     : 'active',
    animating  : 'animating',
    dimmable   : 'dimmable',
    dimmed     : 'dimmed',
    disabled   : 'disabled',
    hide       : 'hide',
    pageDimmer : 'page',
    show       : 'show'
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dropdown = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)
          : $.extend({}, $.fn.dropdown.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $text           = $module.find(selector.text),
        $search         = $module.find(selector.search),
        $input          = $module.find(selector.input),

        $combo = ($module.prev().find(selector.text).length > 0)
          ? $module.prev().find(selector.text)
          : $module.prev(),

        $menu           = $module.children(selector.menu),
        $item           = $menu.find(selector.item),

        activated       = false,
        itemActivated   = false,
        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing dropdown', settings);

          if( module.is.alreadySetup() ) {
            module.setup.reference();
          }
          else {
            module.setup.layout();

            module.save.defaults();
            module.set.selected();

            module.create.id();

            if(hasTouch) {
              module.bind.touchEvents();
            }
            module.bind.mouseEvents();
            module.bind.keyboardEvents();

            module.observeChanges();
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of dropdown', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous dropdown for', $module);
          module.remove.tabbable();
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          $menu
            .off(eventNamespace)
          ;
          $document
            .off(elementNamespace)
          ;
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              if( module.is.selectMutation(mutations) ) {
                module.debug('<select> modified, recreating menu');
                module.setup.select();
              }
              else {
                module.debug('DOM tree modified, updating selector cache');
                module.refresh();
              }
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        search: function() {
          var
            query
          ;
          query = $search.val();

          module.verbose('Searching for query', query);
          module.filter(query);
          if(module.is.searchSelection() && module.can.show() ) {
            module.show();
          }
        },

        setup: {
          layout: function() {
            if( $module.is('select') ) {
              module.setup.select();
            }
            if( module.is.search() && !module.is.searchable() ) {
              $search = $('<input />')
                .addClass(className.search)
                .insertBefore($text)
              ;
            }
            if(settings.allowTab) {
              module.set.tabbable();
            }
          },
          select: function() {
            var
              selectValues  = module.get.selectValues()
            ;
            module.debug('Dropdown initialized on a select', selectValues);
            if( $module.is('select') ) {
              $input = $module;
            }
            // see if select is placed correctly already
            if($input.parent(selector.dropdown).length > 0) {
              module.debug('UI dropdown already exists. Creating dropdown menu only');
              $module = $input.closest(selector.dropdown);
              $menu   = $module.children(selector.menu);
              if($menu.length === 0) {
                $menu = $('<div />')
                  .addClass(className.menu)
                  .appendTo($module)
                ;
              }
              $menu.html( settings.templates.menu( selectValues ));
            }
            else {
              module.debug('Creating entire dropdown from select');
              $module = $('<div />')
                .attr('class', $input.attr('class') )
                .addClass(className.selection)
                .addClass(className.dropdown)
                .html( settings.templates.dropdown(selectValues) )
                .insertBefore($input)
              ;
              $input
                .removeAttr('class')
                .prependTo($module)
              ;
            }
            module.refresh();
          },
          reference: function() {
            var
              index = $allModules.index($module),
              $firstModules,
              $lastModules
            ;
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');
            // replace module reference
            $module = $module.parent(selector.dropdown);
            module.refresh();
            // adjust all modules
            $firstModules = $allModules.slice(0, index);
            $lastModules  = $allModules.slice(index + 1);
            $allModules   = $firstModules.add($module).add($lastModules);
            // invoke method in context of current instance
            if(methodInvoked) {
              instance = module;
              module.invoke(query);
            }
          }
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $text   = $module.find(selector.text);
          $search = $module.find(selector.search);
          $input  = $module.find(selector.input);
          $combo  = ($module.prev().find(selector.text).length > 0)
            ? $module.prev().find(selector.text)
            : $module.prev()
          ;
          $menu   = $module.children(selector.menu);
          $item   = $menu.find(selector.item);
        },

        toggle: function() {
          module.verbose('Toggling menu visibility');
          if( !module.is.active() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.searchSelection() && module.is.allFiltered() ) {
            return;
          }
          if( module.can.show() && !module.is.active() ) {
            module.debug('Showing dropdown');
            module.animate.show(function() {
              if( module.can.click() ) {
                module.bind.intent();
              }
              module.set.visible();
              callback.call(element);
            });
            settings.onShow.call(element);
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.active() ) {
            module.debug('Hiding dropdown');
            module.animate.hide(function() {
              module.remove.visible();
              callback.call(element);
            });
            settings.onHide.call(element);
          }
        },

        hideOthers: function() {
          module.verbose('Finding other dropdowns to hide');
          $allModules
            .not($module)
              .has(selector.menu + ':visible:not(.' + className.animating + ')')
                .dropdown('hide')
          ;
        },

        hideSubMenus: function() {
          var
            $subMenus = $menu.find(selector.menu)
          ;
          $subMenus.transition('hide');
        },

        bind: {
          keyboardEvents: function() {
            module.debug('Binding keyboard events');
            $module
              .on('keydown' + eventNamespace, module.event.keydown)
            ;
            if( module.is.searchable() ) {
              $module
                .on(module.get.inputEvent(), selector.search, module.event.input)
              ;
            }
          },
          touchEvents: function() {
            module.debug('Touch device detected binding additional touch events');
            if( module.is.searchSelection() ) {
              // do nothing special yet
            }
            else {
              $module
                .on('touchstart' + eventNamespace, module.event.test.toggle)
              ;
            }
            $menu
              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)
            ;
          },
          mouseEvents: function() {
            module.verbose('Mouse detected binding mouse events');
            if( module.is.searchSelection() ) {
              $module
                .on('mousedown' + eventNamespace, selector.menu, module.event.menu.activate)
                .on('mouseup'   + eventNamespace, selector.menu, module.event.menu.deactivate)
                .on('click'     + eventNamespace, selector.search, module.show)
                .on('focus'     + eventNamespace, selector.search, module.event.searchFocus)
                .on('blur'      + eventNamespace, selector.search, module.event.searchBlur)
                .on('click'     + eventNamespace, selector.text, module.event.searchTextFocus)
              ;
            }
            else {
              if(settings.on == 'click') {
                $module
                  .on('click' + eventNamespace, module.event.test.toggle)
                ;
              }
              else if(settings.on == 'hover') {
                $module
                  .on('mouseenter' + eventNamespace, module.delay.show)
                  .on('mouseleave' + eventNamespace, module.delay.hide)
                ;
              }
              else {
                $module
                  .on(settings.on + eventNamespace, module.toggle)
                ;
              }
              $module
                .on('mousedown' + eventNamespace, module.event.mousedown)
                .on('mouseup'   + eventNamespace, module.event.mouseup)
                .on('focus'     + eventNamespace, module.event.focus)
                .on('blur'      + eventNamespace, module.event.blur)
              ;
            }
            $menu
              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)
              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)
              .on('click'      + eventNamespace, selector.item, module.event.item.click)
            ;
          },
          intent: function() {
            module.verbose('Binding hide intent event to document');
            if(hasTouch) {
              $document
                .on('touchstart' + elementNamespace, module.event.test.touch)
                .on('touchmove'  + elementNamespace, module.event.test.touch)
              ;
            }
            $document
              .on('click' + elementNamespace, module.event.test.hide)
            ;
          }
        },

        unbind: {
          intent: function() {
            module.verbose('Removing hide intent event from document');
            if(hasTouch) {
              $document
                .off('touchstart' + elementNamespace)
                .off('touchmove' + elementNamespace)
              ;
            }
            $document
              .off('click' + elementNamespace)
            ;
          }
        },

        filter: function(searchTerm) {
          var
            $results       = $(),
            escapedTerm    = module.escape.regExp(searchTerm),
            exactRegExp    = new RegExp('^' + escapedTerm, 'igm'),
            fullTextRegExp = new RegExp(escapedTerm, 'ig'),
            allItemsFiltered
          ;
          module.verbose('Searching for matching values');
          $item
            .each(function(){
              var
                $choice = $(this),
                text    = String(module.get.choiceText($choice, false)),
                value   = String(module.get.choiceValue($choice, text))
              ;
              if( text.match(exactRegExp) || value.match(exactRegExp) ) {
                $results = $results.add($choice);
              }
              else if(settings.fullTextSearch) {
                if( text.match(fullTextRegExp) || value.match(fullTextRegExp) ) {
                  $results = $results.add($choice);
                }
              }
            })
          ;

          module.debug('Setting filter', searchTerm);
          module.remove.filteredItem();
          $item
            .not($results)
            .addClass(className.filtered)
          ;

          module.verbose('Selecting first non-filtered element');
          module.remove.selectedItem();
          $item
            .not('.' + className.filtered)
              .eq(0)
              .addClass(className.selected)
          ;
          if( module.is.allFiltered() ) {
            module.debug('All items filtered, hiding dropdown', searchTerm);
            if(module.is.searchSelection()) {
              module.hide();
            }
            settings.onNoResults.call(element, searchTerm);
          }
        },

        focusSearch: function() {
          if( module.is.search() ) {
            $search
              .focus()
            ;
          }
        },

        forceSelection: function() {
          var
            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
            $activeItem        = $item.filter('.' + className.active).eq(0),
            $selectedItem      = ($currentlySelected.length > 0)
              ? $currentlySelected
              : $activeItem,
            hasSelected = ($selectedItem.size() > 0)
          ;
          if(hasSelected) {
            module.event.item.click.call($selectedItem);
            module.remove.filteredItem();
          }
          else {
            module.hide();
          }
        },

        event: {
          // prevents focus callback from occuring on mousedown
          mousedown: function() {
            activated = true;
          },
          mouseup: function() {
            activated = false;
          },
          focus: function() {
            if(!activated && module.is.hidden()) {
              module.show();
            }
          },
          blur: function(event) {
            var
              pageLostFocus = (document.activeElement === this)
            ;
            if(!activated && !pageLostFocus) {
              module.hide();
            }
          },
          searchFocus: function() {
            activated = true;
            module.show();
          },
          searchBlur: function(event) {
            var
              pageLostFocus = (document.activeElement === this)
            ;
            if(!itemActivated && !pageLostFocus) {
              if(settings.forceSelection) {
                module.forceSelection();
              }
              else {
                module.hide();
              }
            }
          },
          searchTextFocus: function(event) {
            activated = true;
            $search.focus();
          },
          input: function(event) {
            if(module.is.searchSelection()) {
              module.set.filtered();
            }
            clearTimeout(module.timer);
            module.timer = setTimeout(module.search, settings.delay.search);
          },
          keydown: function(event) {
            var
              $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
              $activeItem        = $menu.children('.' + className.active).eq(0),
              $selectedItem      = ($currentlySelected.length > 0)
                ? $currentlySelected
                : $activeItem,
              $visibleItems = ($selectedItem.length > 0)
                ? $selectedItem.siblings(':not(.' + className.filtered +')').andSelf()
                : $menu.children(':not(.' + className.filtered +')'),
              $subMenu      = $selectedItem.children(selector.menu),
              $parentMenu   = $selectedItem.closest(selector.menu),
              isSubMenuItem = $parentMenu[0] !== $menu[0],
              inVisibleMenu = $parentMenu.is(':visible'),
              pressedKey    = event.which,
              keys          = {
                enter      : 13,
                escape     : 27,
                leftArrow  : 37,
                upArrow    : 38,
                rightArrow : 39,
                downArrow  : 40
              },
              hasSubMenu       = ($subMenu.length> 0),
              hasSelectedItem  = ($selectedItem.length > 0),
              lastVisibleIndex = ($visibleItems.size() - 1),
              $nextItem,
              newIndex
            ;
            // visible menu keyboard shortcuts
            if(module.is.visible()) {
              // enter (select or sub-menu)
              if(pressedKey == keys.enter && hasSelectedItem) {
                if(hasSubMenu && !settings.allowCategorySelection) {
                  module.verbose('Pressed enter on unselectable category, opening sub menu');
                  pressedKey = keys.rightArrow;
                }
                else {
                  module.verbose('Enter key pressed, choosing selected item');
                  module.event.item.click.call($selectedItem, event);
                }
              }
              // left arrow (hide sub-menu)
              if(pressedKey == keys.leftArrow) {
                if(isSubMenuItem) {
                  module.verbose('Left key pressed, closing sub-menu');
                  module.animate.hide(false,  $parentMenu);
                  $selectedItem
                    .removeClass(className.selected)
                  ;
                  $parentMenu
                    .closest(selector.item)
                      .addClass(className.selected)
                  ;
                  event.preventDefault();
                }
              }
              // right arrow (show sub-menu)
              if(pressedKey == keys.rightArrow) {
                if(hasSubMenu) {
                  module.verbose('Right key pressed, opening sub-menu');
                  module.animate.show(false,  $subMenu);
                  $selectedItem
                    .removeClass(className.selected)
                  ;
                  $subMenu
                    .find(selector.item).eq(0)
                      .addClass(className.selected)
                  ;
                  event.preventDefault();
                }
              }
              // up arrow (traverse menu up)
              if(pressedKey == keys.upArrow) {
                $nextItem = (hasSelectedItem && inVisibleMenu)
                  ? $selectedItem.prevAll(selector.item + ':not(.' + className.filtered + ')').eq(0)
                  : $item.eq(0)
                ;
                if($visibleItems.index( $nextItem ) < 0) {
                  module.verbose('Up key pressed but reached top of current menu');
                  return;
                }
                else {
                  module.verbose('Up key pressed, changing active item');
                  $selectedItem
                    .removeClass(className.selected)
                  ;
                  $nextItem
                    .addClass(className.selected)
                  ;
                  module.set.scrollPosition($nextItem);
                }
                event.preventDefault();
              }
              // down arrow (traverse menu down)
              if(pressedKey == keys.downArrow) {
                $nextItem = (hasSelectedItem && inVisibleMenu)
                  ? $nextItem = $selectedItem.nextAll(selector.item + ':not(.' + className.filtered + ')').eq(0)
                  : $item.eq(0)
                ;
                if($nextItem.length === 0) {
                  module.verbose('Down key pressed but reached bottom of current menu');
                  return;
                }
                else {
                  module.verbose('Down key pressed, changing active item');
                  $item
                    .removeClass(className.selected)
                  ;
                  $nextItem
                    .addClass(className.selected)
                  ;
                  module.set.scrollPosition($nextItem);
                }
                event.preventDefault();
              }
            }
            else {
              // enter (open menu)
              if(pressedKey == keys.enter) {
                module.verbose('Enter key pressed, showing dropdown');
                module.show();
              }
              // escape (close menu)
              if(pressedKey == keys.escape) {
                module.verbose('Escape key pressed, closing dropdown');
                module.hide();
              }
              // down arrow (open menu)
              if(pressedKey == keys.downArrow) {
                module.verbose('Down key pressed, showing dropdown');
                module.show();
              }
            }
          },
          test: {
            toggle: function(event) {
              if( module.determine.eventInMenu(event, module.toggle) ) {
                event.preventDefault();
              }
            },
            touch: function(event) {
              module.determine.eventInMenu(event, function() {
                if(event.type == 'touchstart') {
                  module.timer = setTimeout(module.hide, settings.delay.touch);
                }
                else if(event.type == 'touchmove') {
                  clearTimeout(module.timer);
                }
              });
              event.stopPropagation();
            },
            hide: function(event) {
              module.determine.eventInModule(event, module.hide);
            }
          },

          menu: {
            activate: function() {
              itemActivated = true;
            },
            deactivate: function() {
              itemActivated = false;
            }
          },
          item: {
            mouseenter: function(event) {
              var
                $subMenu    = $(this).children(selector.menu),
                $otherMenus = $(this).siblings(selector.item).children(selector.menu)
              ;
              if( $subMenu.length > 0 ) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Showing sub-menu', $subMenu);
                  $.each($otherMenus, function() {
                    module.animate.hide(false, $(this));
                  });
                  module.animate.show(false,  $subMenu);
                }, settings.delay.show);
                event.preventDefault();
              }
            },
            mouseleave: function(event) {
              var
                $subMenu = $(this).children(selector.menu)
              ;
              if($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Hiding sub-menu', $subMenu);
                  module.animate.hide(false,  $subMenu);
                }, settings.delay.hide);
              }
            },
            click: function (event) {
              var
                $choice  = $(this),
                $target  = (event)
                  ? $(event.target)
                  : $(''),
                $subMenu = $choice.find(selector.menu),
                text     = module.get.choiceText($choice),
                value    = module.get.choiceValue($choice, text),
                callback = function() {
                  module.remove.searchTerm();
                  module.determine.selectAction(text, value);
                },
                hasSubMenu     = ($subMenu.length > 0),
                isBubbledEvent = ($subMenu.find($target).length > 0)
              ;
              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {
                callback();
              }
            }
          },
          resetStyle: function() {
            $(this).removeAttr('style');
          }
        },

        determine: {
          selectAction: function(text, value) {
            module.verbose('Determining action', settings.action);
            if( $.isFunction( module.action[settings.action] ) ) {
              module.verbose('Triggering preset action', settings.action, text, value);
              module.action[ settings.action ](text, value);
            }
            else if( $.isFunction(settings.action) ) {
              module.verbose('Triggering user action', settings.action, text, value);
              settings.action(text, value);
            }
            else {
              module.error(error.action, settings.action);
            }
          },
          eventInModule: function(event, callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( $(event.target).closest($module).length === 0 ) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown, canceling callback');
              return false;
            }
          },
          eventInMenu: function(event, callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( $(event.target).closest($menu).length === 0 ) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown menu, canceling callback');
              return false;
            }
          }
        },

        action: {

          nothing: function() {},

          activate: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value);
            module.hide(function() {
              module.remove.filteredItem();
            });
          },

          select: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value);
            module.hide(function() {
              module.remove.filteredItem();
            });
          },

          combo: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value);
            module.hide(function() {
              module.remove.filteredItem();
            });
          },

          hide: function() {
            module.hide(function() {
              module.remove.filteredItem();
            });
          }

        },

        get: {
          id: function() {
            return id;
          },
          text: function() {
            return $text.text();
          },
          value: function() {
            return ($input.length > 0)
              ? $input.val()
              : $module.data(metadata.value)
            ;
          },
          choiceText: function($choice, preserveHTML) {
            preserveHTML = (preserveHTML !== undefined)
              ? preserveHTML
              : settings.preserveHTML
            ;
            if($choice !== undefined) {
              if($choice.find(selector.menu).length > 0) {
                module.verbose('Retreiving text of element with sub-menu');
                $choice = $choice.clone();
                $choice.find(selector.menu).remove();
                $choice.find(selector.menuIcon).remove();
              }
              return ($choice.data(metadata.text) !== undefined)
                ? $choice.data(metadata.text)
                : (preserveHTML)
                  ? $choice.html().trim()
                  : $choice.text().trim()
              ;
            }
          },
          choiceValue: function($choice, choiceText) {
            choiceText = choiceText || module.get.choiceText($choice);
            return ($choice.data(metadata.value) !== undefined)
              ? $choice.data(metadata.value)
              : (typeof choiceText === 'string')
                ? choiceText.toLowerCase().trim()
                : choiceText.trim()
            ;
          },
          inputEvent: function() {
            var
              input = $search[0]
            ;
            if(input) {
              return (input.oninput !== undefined)
                ? 'input'
                : (input.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
              ;
            }
            return false;
          },
          selectValues: function() {
            var
              select = {}
            ;
            select.values = (settings.sortSelect)
              ? {} // properties will be sorted in object when re-accessed
              : [] // properties will keep original order in array
            ;
            $module
              .find('option')
                .each(function() {
                  var
                    name  = $(this).html(),
                    value = ( $(this).attr('value') !== undefined )
                      ? $(this).attr('value')
                      : name
                  ;
                  if(value === '') {
                    select.placeholder = name;
                  }
                  else {
                    if(settings.sortSelect) {
                      select.values[value] = {
                        name  : name,
                        value : value
                      };
                    }
                    else {
                      select.values.push({
                        name: name,
                        value: value
                      });
                    }
                  }
                })
            ;
            if(settings.sortSelect) {
              module.debug('Retrieved and sorted values from select', select);
            }
            else {
              module.debug('Retreived values from select', select);
            }
            return select;
          },
          activeItem: function() {
            return $item.filter('.'  + className.active);
          },
          item: function(value, strict) {
            var
              $selectedItem = false
            ;
            value = (value !== undefined)
              ? value
              : ( module.get.value() !== undefined)
                ? module.get.value()
                : module.get.text()
            ;
            strict = (value === '' || value === 0)
              ? true
              : strict || false
            ;
            if(value !== undefined) {
              $item
                .each(function() {
                  var
                    $choice       = $(this),
                    optionText    = module.get.choiceText($choice),
                    optionValue   = module.get.choiceValue($choice, optionText)
                  ;
                  if(strict) {
                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);
                    if( optionValue === value ) {
                      $selectedItem = $(this);
                      return true;
                    }
                    else if( !$selectedItem && optionText === value ) {
                      $selectedItem = $(this);
                      return true;
                    }
                  }
                  else {
                    if( optionValue == value ) {
                      module.verbose('Found select item by value', optionValue, value);
                      $selectedItem = $(this);
                      return true;
                    }
                    else if( !$selectedItem && optionText == value ) {
                      module.verbose('Found select item by text', optionText, value);
                      $selectedItem = $(this);
                      return true;
                    }
                  }
                })
              ;
            }
            else {
              value = module.get.text();
            }
            return $selectedItem || false;
          }
        },

        restore: {
          defaults: function() {
            module.restore.defaultText();
            module.restore.defaultValue();
          },
          defaultText: function() {
            var
              defaultText = $module.data(metadata.defaultText)
            ;
            module.debug('Restoring default text', defaultText);
            module.set.text(defaultText);
            $text.addClass(className.placeholder);
          },
          defaultValue: function() {
            var
              defaultValue = $module.data(metadata.defaultValue)
            ;
            if(defaultValue !== undefined) {
              module.debug('Restoring default value', defaultValue);
              if(defaultValue.length) {
                module.set.selected(defaultValue);
              }
              else {
                module.remove.activeItem();
                module.remove.selectedItem();
              }
            }
          }
        },

        save: {
          defaults: function() {
            module.save.defaultText();
            module.save.placeholderText();
            module.save.defaultValue();
          },
          defaultValue: function() {
            $module.data(metadata.defaultValue, module.get.value() );
          },
          defaultText: function() {
            $module.data(metadata.defaultText, $text.text() );
          },
          placeholderText: function() {
            if($text.hasClass(className.placeholder)) {
              $module.data(metadata.placeholderText, $text.text());
            }
          }
        },

        clear: function() {
          var
            placeholderText = $module.data(metadata.placeholderText)
          ;
          module.set.text(placeholderText);
          module.set.value('');
          module.remove.activeItem();
          module.remove.selectedItem();
          $text.addClass(className.placeholder);
        },

        set: {
          filtered: function() {
            var
              searchValue    = $search.val(),
              hasSearchValue = (typeof searchValue === 'string' && searchValue.length > 0)
            ;
            if(hasSearchValue) {
              $text.addClass(className.filtered);
            }
            else {
              $text.removeClass(className.filtered);
            }
          },
          tabbable: function() {
            if( module.is.searchable() ) {
              module.debug('Searchable dropdown initialized');
              $search
                .val('')
                .attr('tabindex', 0)
              ;
              $menu
                .attr('tabindex', '-1')
              ;
            }
            else {
              module.debug('Simple selection dropdown initialized');
              if(!$module.attr('tabindex') ) {
                $module
                  .attr('tabindex', 0)
                ;
                $menu
                  .attr('tabindex', '-1')
                ;
              }
            }
          },
          scrollPosition: function($item, forceScroll) {
            var
              edgeTolerance = 5,
              hasActive,
              offset,
              itemHeight,
              itemOffset,
              menuOffset,
              menuScroll,
              menuHeight,
              abovePage,
              belowPage
            ;

            $item       = $item || module.get.activeItem();
            hasActive   = ($item && $item.length > 0);
            forceScroll = (forceScroll !== undefined)
              ? forceScroll
              : false
            ;

            if($item && hasActive) {

              if(!$menu.hasClass(className.visible)) {
                $menu.addClass(className.loading);
              }

              menuHeight = $menu.height();
              itemHeight = $item.height();
              menuScroll = $menu.scrollTop();
              menuOffset = $menu.offset().top;
              itemOffset = $item.offset().top;
              offset     = menuScroll - menuOffset + itemOffset;
              belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);
              abovePage  = ((offset - edgeTolerance) < menuScroll);
              module.debug('Scrolling to active item', offset);
              if(abovePage || belowPage || forceScroll) {
                $menu
                  .scrollTop(offset)
                  .removeClass(className.loading)
                ;
              }
            }
          },
          text: function(text) {
            if(settings.action == 'combo') {
              module.debug('Changing combo button text', text, $combo);
              if(settings.preserveHTML) {
                $combo.html(text);
              }
              else {
                $combo.text(text);
              }
            }
            else if(settings.action !== 'select') {
              module.debug('Changing text', text, $text);
              $text
                .removeClass(className.filtered)
                .removeClass(className.placeholder)
              ;
              if(settings.preserveHTML) {
                $text.html(text);
              }
              else {
                $text.text(text);
              }
            }
          },
          value: function(value) {
            module.debug('Adding selected value to hidden input', value, $input);
            if($input.length > 0) {
              $input
                .val(value)
                .trigger('change')
              ;
            }
            else {
              $module.data(metadata.value, value);
            }
          },
          active: function() {
            $module
              .addClass(className.active)
            ;
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          selected: function(value) {
            var
              $selectedItem = module.get.item(value),
              selectedText,
              selectedValue
            ;
            if($selectedItem && !$selectedItem.hasClass(className.active) ) {
              module.debug('Setting selected menu item to', $selectedItem);
              module.remove.activeItem();
              module.remove.selectedItem();
              $selectedItem
                .addClass(className.active)
                .addClass(className.selected)
              ;
              selectedText  = module.get.choiceText($selectedItem);
              selectedValue = module.get.choiceValue($selectedItem, selectedText);
              module.set.text(selectedText);
              module.set.value(selectedValue);
              settings.onChange.call(element, value, selectedText, $selectedItem);
            }
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          activeItem: function() {
            $item.removeClass(className.active);
          },
          filteredItem: function() {
            $item.removeClass(className.filtered);
          },
          searchTerm: function() {
            $search.val('');
          },
          selectedItem: function() {
            $item.removeClass(className.selected);
          },
          tabbable: function() {
            if( module.is.searchable() ) {
              module.debug('Searchable dropdown initialized');
              $search
                .attr('tabindex', '-1')
              ;
              $menu
                .attr('tabindex', '-1')
              ;
            }
            else {
              module.debug('Simple selection dropdown initialized');
              $module
                .attr('tabindex', '-1')
              ;
              $menu
                .attr('tabindex', '-1')
              ;
            }
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          alreadySetup: function() {
            return ($module.is('select') && $module.parent(selector.dropdown).length > 0);
          },
          animating: function($subMenu) {
            return ($subMenu)
              ? $subMenu.is(':animated') || $subMenu.transition && $subMenu.transition('is animating')
              : $menu.is(':animated') || $menu.transition && $menu.transition('is animating')
            ;
          },
          allFiltered: function() {
            return ($item.filter('.' + className.filtered).length === $item.length);
          },
          hidden: function($subMenu) {
            return ($subMenu)
              ? $subMenu.is(':hidden')
              : $menu.is(':hidden')
            ;
          },
          selectMutation: function(mutations) {
            var
              selectChanged = false
            ;
            $.each(mutations, function(index, mutation) {
              if(mutation.target && $(mutation.target).is('select')) {
                selectChanged = true;
                return true;
              }
            });
            return selectChanged;
          },
          search: function() {
            return $module.hasClass(className.search);
          },
          searchable: function() {
            return ($search.length > 0);
          },
          searchSelection: function() {
            return ( module.is.searchable() && $search.parent().is($module) );
          },
          selection: function() {
            return $module.hasClass(className.selection);
          },
          upward: function() {
            return $module.hasClass(className.upward);
          },
          visible: function($subMenu) {
            return ($subMenu)
              ? $subMenu.is(':visible')
              : $menu.is(':visible')
            ;
          }
        },

        can: {
          click: function() {
            return (hasTouch || settings.on == 'click');
          },
          show: function() {
            return !$module.hasClass(className.disabled);
          }
        },

        animate: {
          show: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              start = ($subMenu)
                ? function() {}
                : function() {
                  module.hideSubMenus();
                  module.hideOthers();
                  module.set.active();
                }
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            module.set.scrollPosition(module.get.activeItem(), true);
            module.verbose('Doing menu show animation', $currentMenu);
            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {

              if(settings.transition == 'auto') {
                settings.transition = module.is.upward()
                  ? 'slide up'
                  : 'slide down'
                ;
                module.verbose('Automatically determining animation based on animation direction', settings.transition);
              }
              if(settings.transition == 'none') {
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : settings.transition + ' in',
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    duration   : settings.duration,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                    }
                  })
                ;
              }
              else if(settings.transition == 'slide down') {
                start();
                $currentMenu
                  .hide()
                  .clearQueue()
                  .children()
                    .clearQueue()
                    .css('opacity', 0)
                    .delay(50)
                    .animate({
                      opacity : 1
                    }, settings.duration, 'easeOutQuad', module.event.resetStyle)
                    .end()
                  .slideDown(100, 'easeOutQuad', function() {
                    module.event.resetStyle.call(this);
                    callback.call(element);
                  })
                ;
              }
              else if(settings.transition == 'fade') {
                start();
                $currentMenu
                  .hide()
                  .clearQueue()
                  .fadeIn(settings.duration, function() {
                    module.event.resetStyle.call(this);
                    callback.call(element);
                  })
                ;
              }
              else {
                module.error(error.transition, settings.transition);
              }
            }
          },
          hide: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              duration = ($subMenu)
                ? (settings.duration * 0.9)
                : settings.duration,
              start = ($subMenu)
                ? function() {}
                : function() {
                  if( module.can.click() ) {
                    module.unbind.intent();
                  }
                  module.focusSearch();
                  module.remove.active();
                }
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {
              module.verbose('Doing menu hide animation', $currentMenu);

              if(settings.transition == 'auto') {
                settings.transition = module.is.upward()
                  ? 'slide up'
                  : 'slide down'
                ;
              }

              $input.trigger('blur');

              if(settings.transition == 'none') {
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : settings.transition + ' out',
                    duration   : settings.duration,
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                    }
                  })
                ;
              }
              else if(settings.transition == 'slide down') {
                start();
                $currentMenu
                  .show()
                  .clearQueue()
                  .children()
                    .clearQueue()
                    .css('opacity', 1)
                    .animate({
                      opacity : 0
                    }, 100, 'easeOutQuad', module.event.resetStyle)
                    .end()
                  .delay(50)
                  .slideUp(100, 'easeOutQuad', function() {
                    module.event.resetStyle.call(this);
                    callback.call(element);
                  })
                ;
              }
              else if(settings.transition == 'fade') {
                start();
                $currentMenu
                  .show()
                  .clearQueue()
                  .fadeOut(150, function() {
                    module.event.resetStyle.call(this);
                    callback.call(element);
                  })
                ;
              }
              else {
                module.error(error.transition);
              }
            }
          }
        },

        delay: {
          show: function() {
            module.verbose('Delaying show event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.show, settings.delay.show);
          },
          hide: function() {
            module.verbose('Delaying hide event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.hide, settings.delay.hide);
          }
        },

        escape: {
          regExp: function(text) {
            text =  String(text);
            return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : $allModules
  ;
};

$.fn.dropdown.settings = {

  debug                  : false,
  verbose                : true,
  performance            : true,

  on                     : 'click',
  action                 : 'activate',

  allowTab               : true,
  fullTextSearch         : false,
  preserveHTML           : true,
  sortSelect             : false,

  allowCategorySelection : false,

  delay                  : {
    hide   : 300,
    show   : 200,
    search : 50,
    touch  : 50
  },

  forceSelection: true,

  transition : 'auto',
  duration   : 250,

  /* Callbacks */
  onNoResults : function(searchTerm){},
  onChange    : function(value, text){},
  onShow      : function(){},
  onHide      : function(){},

  /* Component */

  name           : 'Dropdown',
  namespace      : 'dropdown',

  error   : {
    action       : 'You called a dropdown action that was not defined',
    alreadySetup : 'Once a select has been initialized behaviors must be called on the created ui dropdown',
    method       : 'The method you called is not defined.',
    transition   : 'The requested transition was not found'
  },

  metadata: {
    defaultText     : 'defaultText',
    defaultValue    : 'defaultValue',
    placeholderText : 'placeholderText',
    text            : 'text',
    value           : 'value'
  },

  selector : {
    dropdown : '.ui.dropdown',
    input    : '> input[type="hidden"], > select',
    item     : '.item',
    menu     : '.menu',
    menuIcon : '.dropdown.icon',
    search   : '> input.search, .menu > .search > input, .menu > input.search',
    text     : '> .text:not(.icon)'
  },

  className : {
    active      : 'active',
    animating   : 'animating',
    disabled    : 'disabled',
    dropdown    : 'ui dropdown',
    filtered    : 'filtered',
    loading     : 'loading',
    menu        : 'menu',
    placeholder : 'default',
    search      : 'search',
    selected    : 'selected',
    selection   : 'selection',
    upward      : 'upward',
    visible     : 'visible'
  }

};

/* Templates */
$.fn.dropdown.settings.templates = {
  menu: function(select) {
    var
      placeholder = select.placeholder || false,
      values      = select.values || {},
      html        = ''
    ;
    $.each(select.values, function(index, option) {
      html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
    });
    return html;
  },
  dropdown: function(select) {
    var
      placeholder = select.placeholder || false,
      values      = select.values || {},
      html        = ''
    ;
    html +=  '<i class="dropdown icon"></i>';
    if(select.placeholder) {
      html += '<div class="default text">' + placeholder + '</div>';
    }
    else {
      html += '<div class="text"></div>';
    }
    html += '<div class="menu">';
    $.each(select.values, function(index, option) {
      html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
    });
    html += '</div>';
    return html;
  }
};


/* Dependencies */
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
});


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.modal = function(parameters) {
  var
    $allModules    = $(this),
    $window        = $(window),
    $document      = $(document),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings    = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.modal.settings, parameters)
          : $.extend({}, $.fn.modal.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $close          = $module.find(selector.close),

        $allModals,
        $otherModals,
        $focusedElement,
        $dimmable,
        $dimmer,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        observer,
        module
      ;
      module  = {

        initialize: function() {
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();
          module.refreshModals();

          module.verbose('Attaching close events', $close);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        create: {
          dimmer: function() {
            var
              defaultSettings = {
                debug      : settings.debug,
                dimmerName : 'modals',
                duration   : {
                  show     : settings.duration,
                  hide     : settings.duration
                }
              },
              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)
            ;
            if($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
            }
            module.debug('Creating dimmer with settings', dimmerSettings);
            $dimmable = $context.dimmer(dimmerSettings);
            if(settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
            }
            $dimmer = $dimmable.dimmer('get dimmer');
          },
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous modal');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
          $window.off(elementNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        refresh: function() {
          module.remove.scrolling();
          module.cacheSizes();
          module.set.screenHeight();
          module.set.type();
          module.set.position();
        },

        refreshModals: function() {
          $otherModals = $module.siblings(selector.modal);
          $allModals   = $otherModals.add($module);
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle
              .off(eventNamespace)
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        bind: {
          events: function() {
            $close.on('click' + eventNamespace, module.event.close);
            $window.on('resize' + elementNamespace, module.event.resize);
          }
        },

        get: {
          id: function() {
            return (Math.random().toString(16) + '000000000').substr(2,8);
          }
        },

        event: {
          close: function() {
            module.verbose('Closing element pressed');
            if( $(this).is(selector.approve) ) {
              if(settings.onApprove.call(element) !== false) {
                module.hide();
              }
              else {
                module.verbose('Approve callback returned false cancelling hide');
              }
            }
            else if( $(this).is(selector.deny) ) {
              if(settings.onDeny.call(element) !== false) {
                module.hide();
              }
              else {
                module.verbose('Deny callback returned false cancelling hide');
              }
            }
            else {
              module.hide();
            }
          },
          click: function(event) {
            if( $(event.target).closest($module).length === 0 ) {
              module.debug('Dimmer clicked, hiding all modals');
              if( module.is.active() ) {
                module.remove.clickaway();
                if(settings.allowMultiple) {
                  module.hide();
                }
                else {
                  module.hideAll();
                }
              }
            }
          },
          debounce: function(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
          },
          keyboard: function(event) {
            var
              keyCode   = event.which,
              escapeKey = 27
            ;
            if(keyCode == escapeKey) {
              if(settings.closable) {
                module.debug('Escape key pressed hiding modal');
                module.hide();
              }
              else {
                module.debug('Escape key pressed, but closable is set to false');
              }
              event.preventDefault();
            }
          },
          resize: function() {
            if( $dimmable.dimmer('is active') ) {
              requestAnimationFrame(module.refresh);
            }
          }
        },

        toggle: function() {
          if( module.is.active() || module.is.animating() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.showModal(callback);
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.hideModal(callback);
        },

        showModal: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.animating() || !module.is.active() ) {

            module.showDimmer();
            module.cacheSizes();
            module.set.position();
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if( !settings.allowMultiple && $otherModals.filter('.' + className.active).length > 0) {
              module.debug('Other modals visible, queueing show animation');
              module.hideOthers(module.showModal);
            }
            else {
              settings.onShow.call(element);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module
                  .transition({
                    debug       : settings.debug,
                    animation   : settings.transition + ' in',
                    queue       : settings.queue,
                    duration    : settings.duration,
                    useFailSafe : true,
                    onComplete : function() {
                      settings.onVisible.apply(element);
                      module.add.keyboardShortcuts();
                      module.save.focus();
                      module.set.active();
                      module.set.autofocus();
                      callback();
                    }
                  })
                ;
              }
              else {
                module.debug('Showing modal with javascript');
                $module
                  .fadeIn(settings.duration, settings.easing, function() {
                    settings.onVisible.apply(element);
                    module.add.keyboardShortcuts();
                    module.save.focus();
                    module.set.active();
                    callback();
                  })
                ;
              }
            }
          }
          else {
            module.debug('Modal is already visible');
          }
        },

        hideModal: function(callback, keepDimmed) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Hiding modal');
          settings.onHide.call(element);

          if( module.is.animating() || module.is.active() ) {
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module
                .transition({
                  debug       : settings.debug,
                  animation   : settings.transition + ' out',
                  queue       : settings.queue,
                  duration    : settings.duration,
                  useFailSafe : true,
                  onStart     : function() {
                    if(!module.othersActive() && !keepDimmed) {
                      module.hideDimmer();
                    }
                    module.remove.keyboardShortcuts();
                  },
                  onComplete : function() {
                    settings.onHidden.call(element);
                    module.restore.focus();
                    callback();
                  }
                })
              ;
            }
            else {
              module.remove.active();
              if( !module.othersActive() ) {
                module.hideDimmer();
              }
              module.remove.keyboardShortcuts();
              $module
                .fadeOut(settings.duration, settings.easing, function() {
                  settings.onHidden.call(element);
                  module.restore.focus();
                  callback();
                })
              ;
            }
          }
        },

        showDimmer: function() {
          if($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active') ) {
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
          }
          else {
            module.debug('Dimmer already visible');
          }
        },

        hideDimmer: function() {
          if( $dimmable.dimmer('is animating') || ($dimmable.dimmer('is active')) ) {
            $dimmable.dimmer('hide', function() {
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.remove.clickaway();
                module.remove.screenHeight();
              }
            });
          }
          else {
            module.debug('Dimmer is not visible cannot hide');
            return;
          }
        },

        hideAll: function(callback) {
          var
            $visibleModals = $allModals.filter(':visible')
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding all visible modals');
            module.hideDimmer();
            $visibleModals
              .modal('hide modal', callback)
            ;
          }
        },

        hideOthers: function(callback) {
          var
            $visibleModals = $otherModals.filter(':visible')
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals
              .modal('hide modal', callback, true)
            ;
          }
        },

        othersActive: function() {
          return ($otherModals.filter('.' + className.active).length > 0);
        },

        add: {
          keyboardShortcuts: function() {
            module.verbose('Adding keyboard shortcuts');
            $document
              .on('keyup' + eventNamespace, module.event.keyboard)
            ;
          }
        },

        save: {
          focus: function() {
            $focusedElement = $(document.activeElement).blur();
          }
        },

        restore: {
          focus: function() {
            if($focusedElement && $focusedElement.length > 0) {
              $focusedElement.focus();
            }
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .off('click' + elementNamespace)
              ;
            }
          },
          screenHeight: function() {
            if(module.cache.height > module.cache.pageHeight) {
              module.debug('Removing page height');
              $body
                .css('height', '')
              ;
            }
          },
          keyboardShortcuts: function() {
            module.verbose('Removing keyboard shortcuts');
            $document
              .off('keyup' + eventNamespace)
            ;
          },
          scrolling: function() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
          }
        },

        cacheSizes: function() {
          var
            modalHeight = $module.outerHeight()
          ;
          if(module.cache === undefined || modalHeight !== 0) {
            module.cache = {
              pageHeight    : $(document).outerHeight(),
              height        : modalHeight + settings.offset,
              contextHeight : (settings.context == 'body')
                ? $(window).height()
                : $dimmable.height()
            };
          }
          module.debug('Caching modal and container sizes', module.cache);
        },

        can: {
          fit: function() {
            return ( ( module.cache.height + (settings.padding * 2) ) < module.cache.contextHeight);
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return $module.transition('is supported')
              ? $module.transition('is animating')
              : $module.is(':visible')
            ;
          },
          scrolling: function() {
            return $dimmable.hasClass(className.scrolling);
          },
          modernBrowser: function() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || "ActiveXObject" in window);
          }
        },

        set: {
          autofocus: function() {
            if(settings.autofocus) {
              var
                $inputs    = $module.find(':input:visible'),
                $autofocus = $inputs.filter('[autofocus]'),
                $input     = ($autofocus.length > 0)
                  ? $autofocus
                  : $inputs
              ;
              $input.first().focus();
            }
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .on('click' + elementNamespace, module.event.click)
              ;
            }
          },
          screenHeight: function() {
            if( module.can.fit() ) {
              $body.css('height', '');
            }
            else {
              module.debug('Modal is taller than page content, resizing page height');
              $body
                .css('height', module.cache.height + (settings.padding / 2) )
              ;
            }
          },
          active: function() {
            $module.addClass(className.active);
          },
          scrolling: function() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
          },
          type: function() {
            if(module.can.fit()) {
              module.verbose('Modal fits on screen');
              if(!module.othersActive) {
                module.remove.scrolling();
              }
            }
            else {
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
            }
          },
          position: function() {
            module.verbose('Centering modal on page', module.cache);
            if(module.can.fit()) {
              $module
                .css({
                  top: '',
                  marginTop: -(module.cache.height / 2)
                })
              ;
            }
            else {
              $module
                .css({
                  marginTop : '',
                  top       : $document.scrollTop()
                })
              ;
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.modal.settings = {

  name           : 'Modal',
  namespace      : 'modal',

  debug          : false,
  verbose        : true,
  performance    : true,

  allowMultiple  : false,
  detachable     : true,
  closable       : true,
  autofocus      : true,

  dimmerSettings : {
    closable : false,
    useCSS   : true
  },

  context        : 'body',

  queue          : false,
  duration       : 500,
  easing         : 'easeOutExpo',
  offset         : 0,
  transition     : 'scale',

  padding        : 50,

  onShow         : function(){},
  onHide         : function(){},

  onVisible      : function(){},
  onHidden       : function(){},

  onApprove      : function(){ return true; },
  onDeny         : function(){ return true; },

  selector    : {
    close    : '.close, .actions .button',
    approve  : '.actions .positive, .actions .approve, .actions .ok',
    deny     : '.actions .negative, .actions .deny, .actions .cancel',
    modal    : '.ui.modal'
  },
  error : {
    dimmer    : 'UI Dimmer, a required component is not included in this page',
    method    : 'The method you called is not defined.',
    notFound  : 'The element you specified could not be found'
  },
  className : {
    active    : 'active',
    animating : 'animating',
    scrolling : 'scrolling'
  }
};


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.nag = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.nag.settings, parameters)
          : $.extend({}, $.fn.nag.settings),

        className       = settings.className,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        $close          = $module.find(selector.close),
        $context        = (settings.context)
          ? $(settings.context)
          : $('body'),

        element         = this,
        instance        = $module.data(moduleNamespace),

        moduleOffset,
        moduleHeight,

        contextWidth,
        contextHeight,
        contextOffset,

        yOffset,
        yPosition,

        timer,
        module,

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); }
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing element');

          $module
            .data(moduleNamespace, module)
          ;
          $close
            .on('click' + eventNamespace, module.dismiss)
          ;

          if(settings.detachable && $module.parent()[0] !== $context[0]) {
            $module
              .detach()
              .prependTo($context)
            ;
          }

          if(settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
          }
          module.show();
        },

        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        show: function() {
          if( module.should.show() && !$module.is(':visible') ) {
            module.debug('Showing nag', settings.animation.show);
            if(settings.animation.show == 'fade') {
              $module
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            else {
              $module
                .slideDown(settings.duration, settings.easing)
              ;
            }
          }
        },

        hide: function() {
          module.debug('Showing nag', settings.animation.hide);
          if(settings.animation.show == 'fade') {
            $module
              .fadeIn(settings.duration, settings.easing)
            ;
          }
          else {
            $module
              .slideUp(settings.duration, settings.easing)
            ;
          }
        },

        onHide: function() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
          }
        },

        dismiss: function(event) {
          if(settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
          }
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
        },

        should: {
          show: function() {
            if(settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
            }
            if( module.storage.get(settings.key) != settings.value.toString() ) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
            }
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
          }
        },

        get: {
          storageOptions: function() {
            var
              options = {}
            ;
            if(settings.expires) {
              options.expires = settings.expires;
            }
            if(settings.domain) {
              options.domain = settings.domain;
            }
            if(settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        clear: function() {
          module.storage.remove(settings.key);
        },

        storage: {
          set: function(key, value) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
            }
            else if($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
            }
            else {
              module.error(error.noCookieStorage);
              return;
            }
          },
          get: function(key, value) {
            var
              storedValue
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
            }
            // get by cookie
            else if($.cookie !== undefined) {
              storedValue = $.cookie(key);
            }
            else {
              module.error(error.noCookieStorage);
            }
            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
            }
            return storedValue;
          },
          remove: function(key) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'local' && window.store !== undefined) {
              window.localStorage.removeItem(key);
            }
            // store by cookie
            else if($.cookie !== undefined) {
              $.removeCookie(key, options);
            }
            else {
              module.error(error.noStorage);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.nag.settings = {

  name        : 'Nag',

  debug       : false,
  verbose     : true,
  performance : true,

  namespace   : 'Nag',

  // allows cookie to be overriden
  persist     : false,

  // set to zero to require manually dismissal, otherwise hides on its own
  displayTime : 0,

  animation   : {
    show : 'slide',
    hide : 'slide'
  },

  context       : false,
  detachable    : false,

  expires       : 30,
  domain        : false,
  path          : '/',

  // type of storage to use
  storageMethod : 'cookie',

  // value to store in dismissed localstorage/cookie
  key           : 'nag',
  value         : 'dismiss',

  error: {
    noStorage : 'Neither $.cookie or store is defined. A storage solution is required for storing state',
    method    : 'The method you called is not defined.'
  },

  className     : {
    bottom : 'bottom',
    fixed  : 'fixed'
  },

  selector      : {
    close : '.close.icon'
  },

  speed         : 500,
  easing        : 'easeOutQuad',

  onHide: function() {}

};

})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.popup = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.popup.settings, parameters)
          : $.extend({}, $.fn.popup.settings),

        selector           = settings.selector,
        className          = settings.className,
        error              = settings.error,
        metadata           = settings.metadata,
        namespace          = settings.namespace,

        eventNamespace     = '.' + settings.namespace,
        moduleNamespace    = 'module-' + namespace,

        $module            = $(this),
        $context           = $(settings.context),
        $target            = (settings.target)
          ? $(settings.target)
          : $module,

        $window            = $(window),
        $body              = $('body'),
        $popup,
        $offsetParent,

        searchDepth        = 0,
        triedPositions     = false,

        element            = this,
        instance           = $module.data(moduleNamespace),

        elementNamespace,
        id,
        module
      ;

      module = {

        // binds events
        initialize: function() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if( !module.exists() && settings.preserve) {
            module.create();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        refresh: function() {
          if(settings.popup) {
            $popup = $(settings.popup).eq(0);
          }
          else {
            if(settings.inline) {
              $popup = $target.next(selector.popup).eq(0);
            }
          }
          if(settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if(settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');
              $popup
                .detach()
                .appendTo($offsetParent)
              ;
            }
          }
          else {
            $offsetParent = (settings.inline)
              ? module.get.offsetParent($target)
              : module.has.popup()
                ? module.get.offsetParent($popup)
                : $body
            ;
          }
          if( $offsetParent.is('html') ) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
          }
        },

        reposition: function() {
          module.refresh();
          module.set.position();
        },

        destroy: function() {
          module.debug('Destroying previous module');
          // remove element only if was created dynamically
          if($popup && !settings.preserve) {
            module.removePopup();
          }
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          $window.off(elementNamespace);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        event: {
          start:  function(event) {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.show
                : settings.delay
            ;
            clearTimeout(module.hideTimer);
            module.showTimer = setTimeout(function() {
              if(module.is.hidden() && !( module.is.active() && module.is.dropdown()) ) {
                module.show();
              }
            }, delay);
          },
          end:  function() {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.hide
                : settings.delay
            ;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(function() {
              if(module.is.visible() ) {
                module.hide();
              }
            }, delay);
          },
          resize: function() {
            if( module.is.visible() ) {
              module.set.position();
            }
          }
        },

        // generates popup html from metadata
        create: function() {
          var
            html      = $module.data(metadata.html)      || settings.html,
            variation = $module.data(metadata.variation) || settings.variation,
            title     = $module.data(metadata.title)     || settings.title,
            content   = $module.data(metadata.content)   || $module.attr('title') || settings.content
          ;
          if(html || content || title) {
            module.debug('Creating pop-up html');
            if(!html) {
              html = settings.templates.popup({
                title   : title,
                content : content
              });
            }
            $popup = $('<div/>')
              .addClass(className.popup)
              .addClass(variation)
              .data(metadata.activator, $module)
              .html(html)
            ;
            if(variation) {
              $popup
                .addClass(variation)
              ;
            }
            if(settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup
                .insertAfter($module)
              ;
            }
            else {
              module.verbose('Appending popup element to body', $popup);
              $popup
                .appendTo( $context )
              ;
            }
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
            settings.onCreate.call($popup, element);
          }
          else if($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popup  = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else if(settings.popup) {
            settings.popup.data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else {
            module.debug('No content specified skipping display', element);
          }
        },

        createID: function() {
          id = (Math.random().toString(16) + '000000000').substr(2,8);
          elementNamespace = '.' + id;
          module.verbose('Creating unique id for element', id);
        },

        // determines popup state
        toggle: function() {
          module.debug('Toggling pop-up');
          if( module.is.hidden() ) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
          }
          else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback) ? callback : function(){};
          module.debug('Showing pop-up', settings.transition);
          if( !module.exists() ) {
            module.create();
          }
          else if(!settings.preserve && !settings.popup) {
            module.refresh();
          }
          if( $popup && module.set.position() ) {
            module.save.conditions();
            if(settings.exclusive) {
              module.hideAll();
            }
            module.animate.show(callback);
          }
        },


        hide: function(callback) {
          callback = $.isFunction(callback) ? callback : function(){};
          module.remove.visible();
          module.unbind.close();
          if( module.is.visible() ) {
            module.restore.conditions();
            module.animate.hide(callback);
          }
        },

        hideAll: function() {
          $(selector.popup)
            .filter('.' + className.visible)
            .each(function() {
              $(this)
                .data(metadata.activator)
                .popup('hide')
              ;
            })
          ;
        },

        hideGracefully: function(event) {
          // don't close on clicks inside popup
          if(event && $(event.target).closest(selector.popup).length === 0) {
            module.debug('Click occurred outside popup hiding popup');
            module.hide();
          }
          else {
            module.debug('Click was inside popup, keeping popup open');
          }
        },

        exists: function() {
          if(!$popup) {
            return false;
          }
          if(settings.inline || settings.popup) {
            return ( module.has.popup() );
          }
          else {
            return ( $popup.closest($context).length >= 1 )
              ? true
              : false
            ;
          }
        },

        removePopup: function() {
          module.debug('Removing popup', $popup);
          if( module.has.popup() && !settings.popup) {
            $popup.remove();
            $popup = undefined;
          }
          settings.onRemove.call($popup, element);
        },

        save: {
          conditions: function() {
            module.cache = {
              title: $module.attr('title')
            };
            if (module.cache.title) {
              $module.removeAttr('title');
            }
            module.verbose('Saving original attributes', module.cache.title);
          }
        },
        restore: {
          conditions: function() {
            if(module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
            }
            return true;
          }
        },
        animate: {
          show: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup
                .transition({
                  animation  : settings.transition + ' in',
                  queue      : false,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    module.bind.close();
                    callback.call($popup, element);
                    settings.onVisible.call($popup, element);
                  }
                })
              ;
            }
            else {
              module.set.visible();
              $popup
                .stop()
                .fadeIn(settings.duration, settings.easing, function() {
                  module.bind.close();
                  callback.call($popup, element);
                  settings.onVisible.call($popup, element);
                })
              ;
            }
            settings.onShow.call($popup, element);
          },
          hide: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            module.debug('Hiding pop-up');
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup
                .transition({
                  animation  : settings.transition + ' out',
                  queue      : false,
                  duration   : settings.duration,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  onComplete : function() {
                    module.reset();
                    callback.call($popup, element);
                    settings.onHidden.call($popup, element);
                  }
                })
              ;
            }
            else {
              $popup
                .stop()
                .fadeOut(settings.duration, settings.easing, function() {
                  module.reset();
                  callback.call($popup, element);
                  settings.onHidden.call($popup, element);
                })
              ;
            }
            settings.onHide.call($popup, element);
          }
        },

        get: {
          id: function() {
            return id;
          },
          startEvent: function() {
            if(settings.on == 'hover') {
              return (hasTouch)
                ? 'touchstart mouseenter'
                : 'mouseenter'
              ;
            }
            else if(settings.on == 'focus') {
              return 'focus';
            }
            return false;
          },
          scrollEvent: function() {
            return (hasTouch)
              ? 'touchmove scroll'
              : 'scroll'
            ;
          },
          endEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseleave';
            }
            else if(settings.on == 'focus') {
              return 'blur';
            }
            return false;
          },
          offsetParent: function($target) {
            var
              element = ($target !== undefined)
                ? $target[0]
                : $module[0],
              parentNode = element.parentNode,
              $node    = $(parentNode)
            ;
            if(parentNode) {
              var
                is2D     = ($node.css('transform') === 'none'),
                isStatic = ($node.css('position') === 'static'),
                isHTML   = $node.is('html')
              ;
              while(parentNode && !isHTML && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node    = $(parentNode);
                is2D     = ($node.css('transform') === 'none');
                isStatic = ($node.css('position') === 'static');
                isHTML   = $node.is('html');
              }
            }
            return ($node && $node.length > 0)
              ? $node
              : $()
            ;
          },
          offstagePosition: function(position) {
            var
              boundary  = {
                top    : $(window).scrollTop(),
                bottom : $(window).scrollTop() + $(window).height(),
                left   : 0,
                right  : $(window).width()
              },
              popup     = {
                width  : $popup.width(),
                height : $popup.height(),
                offset : $popup.offset()
              },
              offstage  = {},
              offstagePositions = []
            ;
            position = position || false;
            if(popup.offset && position) {
              module.verbose('Checking if outside viewable area', popup.offset);
              offstage = {
                top    : (popup.offset.top < boundary.top),
                bottom : (popup.offset.top + popup.height > boundary.bottom),
                right  : (popup.offset.left + popup.width > boundary.right),
                left   : (popup.offset.left < boundary.left)
              };
            }
            // return only boundaries that have been surpassed
            $.each(offstage, function(direction, isOffstage) {
              if(isOffstage) {
                offstagePositions.push(direction);
              }
            });
            return (offstagePositions.length > 0)
              ? offstagePositions.join(' ')
              : false
            ;
          },
          positions: function() {
            return {
              'top left'      : false,
              'top center'    : false,
              'top right'     : false,
              'bottom left'   : false,
              'bottom center' : false,
              'bottom right'  : false,
              'left center'   : false,
              'right center'  : false
            };
          },
          nextPosition: function(position) {
            var
              positions          = position.split(' '),
              verticalPosition   = positions[0],
              horizontalPosition = positions[1],
              opposite = {
                top    : 'bottom',
                bottom : 'top',
                left   : 'right',
                right  : 'left'
              },
              adjacent = {
                left   : 'center',
                center : 'right',
                right  : 'left'
              },
              backup = {
                'top left'      : 'top center',
                'top center'    : 'top right',
                'top right'     : 'right center',
                'right center'  : 'bottom right',
                'bottom right'  : 'bottom center',
                'bottom center' : 'bottom left',
                'bottom left'   : 'left center',
                'left center'   : 'top left'
              },
              adjacentsAvailable = (verticalPosition == 'top' || verticalPosition == 'bottom'),
              oppositeTried = false,
              adjacentTried = false,
              nextPosition  = false
            ;
            if(!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
            }

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if(settings.prefer === 'opposite') {
              nextPosition  = [opposite[verticalPosition], horizontalPosition];
              nextPosition  = nextPosition.join(' ');
              oppositeTried = (triedPositions[nextPosition] === true);
              module.debug('Trying opposite strategy', nextPosition);
            }
            if((settings.prefer === 'adjacent') && adjacentsAvailable ) {
              nextPosition  = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition  = nextPosition.join(' ');
              adjacentTried = (triedPositions[nextPosition] === true);
              module.debug('Trying adjacent strategy', nextPosition);
            }
            if(adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
            }
            return nextPosition;
          }
        },

        set: {
          position: function(position, arrowOffset) {
            var
              windowWidth   = $(window).width(),
              windowHeight  = $(window).height(),

              targetWidth   = $target.outerWidth(),
              targetHeight  = $target.outerHeight(),

              popupWidth    = $popup.outerWidth(),
              popupHeight   = $popup.outerHeight(),

              parentWidth   = $offsetParent.outerWidth(),
              parentHeight  = $offsetParent.outerHeight(),

              distanceAway  = settings.distanceAway,

              targetElement = $target[0],

              marginTop     = (settings.inline)
                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10)
                : 0,
              marginLeft    = (settings.inline)
                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue(module.is.rtl() ? 'margin-right' : 'margin-left'), 10)
                : 0,

              target        = (settings.inline || settings.popup)
                ? $target.position()
                : $target.offset(),

              computedPosition,
              positioning,
              offstagePosition
            ;
            position    = position    || $module.data(metadata.position)    || settings.position;
            arrowOffset = arrowOffset || $module.data(metadata.offset)      || settings.offset;

            if(searchDepth == settings.maxSearchDepth && settings.lastResort) {
              module.debug('Using last resort position to display', settings.lastResort);
              position = settings.lastResort;
            }

            if(settings.inline) {
              module.debug('Adding targets margin to calculation');
              if(position == 'left center' || position == 'right center') {
                arrowOffset  += marginTop;
                distanceAway += -marginLeft;
              }
              else if (position == 'top left' || position == 'top center' || position == 'top right') {
                arrowOffset  += marginLeft;
                distanceAway -= marginTop;
              }
              else {
                arrowOffset  += marginLeft;
                distanceAway += marginTop;
              }
            }
            module.debug('Calculating popup positioning', position);

            computedPosition = position;
            if (module.is.rtl()) {
              computedPosition = computedPosition.replace(/left|right/g, function (match) {
                return (match == 'left')
                  ? 'right'
                  : 'left'
                ;
              });
              module.debug('RTL: Popup positioning updated', computedPosition);
            }
            switch (computedPosition) {
              case 'top left':
                positioning = {
                  top    : 'auto',
                  bottom : parentHeight - target.top + distanceAway,
                  left   : target.left + arrowOffset,
                  right  : 'auto'
                };
              break;
              case 'top center':
                positioning = {
                  bottom : parentHeight - target.top + distanceAway,
                  left   : target.left + (targetWidth / 2) - (popupWidth / 2) + arrowOffset,
                  top    : 'auto',
                  right  : 'auto'
                };
              break;
              case 'top right':
                positioning = {
                  bottom :  parentHeight - target.top + distanceAway,
                  right  :  parentWidth - target.left - targetWidth - arrowOffset,
                  top    : 'auto',
                  left   : 'auto'
                };
              break;
              case 'left center':
                positioning = {
                  top    : target.top + (targetHeight / 2) - (popupHeight / 2) + arrowOffset,
                  right  : parentWidth - target.left + distanceAway,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
              case 'right center':
                positioning = {
                  top    : target.top + (targetHeight / 2) - (popupHeight / 2) + arrowOffset,
                  left   : target.left + targetWidth + distanceAway,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom left':
                positioning = {
                  top    : target.top + targetHeight + distanceAway,
                  left   : target.left + arrowOffset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom center':
                positioning = {
                  top    : target.top + targetHeight + distanceAway,
                  left   : target.left + (targetWidth / 2) - (popupWidth / 2) + arrowOffset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom right':
                positioning = {
                  top    : target.top + targetHeight + distanceAway,
                  right  : parentWidth - target.left  - targetWidth - arrowOffset,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
            }
            if(positioning === undefined) {
              module.error(error.invalidPosition, position);
            }

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup
              .css(positioning)
              .removeClass(className.position)
              .addClass(position)
              .addClass(className.loading)
            ;
            // check if is offstage
            offstagePosition = module.get.offstagePosition(position);

            // recursively find new positioning
            if(offstagePosition) {
              module.debug('Popup cant fit into viewport', offstagePosition);
              if(searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                position = module.get.nextPosition(position);
                module.debug('Trying new position', position);
                return ($popup)
                  ? module.set.position(position)
                  : false
                ;
              }
              else if(!settings.lastResort) {
                module.debug('Popup could not find a position in view', $popup);
                // module.error(error.cannotPlace, element);
                module.remove.attempts();
                module.remove.loading();
                module.reset();
                return false;
              }
            }

            module.debug('Position is on stage', position);
            module.remove.attempts();
            module.set.fluidWidth();
            module.remove.loading();
            return true;
          },

          fluidWidth: function() {
            if( settings.setFluidWidth && $popup.hasClass(className.fluid) ) {
              $popup.css('width', $offsetParent.width());
            }
          },

          visible: function() {
            $module.addClass(className.visible);
          }
        },

        remove: {
          loading: function() {
            $popup.removeClass(className.loading);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          attempts: function() {
            module.verbose('Resetting all searched positions');
            searchDepth    = 0;
            triedPositions = false;
          }
        },

        bind: {
          events: function() {
            module.debug('Binding popup events to module');
            if(settings.on == 'click') {
              $module
                .on('click' + eventNamespace, module.toggle)
              ;
            }
            else if( module.get.startEvent() ) {
              $module
                .on(module.get.startEvent() + eventNamespace, module.event.start)
                .on(module.get.endEvent() + eventNamespace, module.event.end)
              ;
            }
            if(settings.target) {
              module.debug('Target set to element', $target);
            }
            $window.on('resize' + elementNamespace, module.event.resize);
          },
          popup: function() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if( $popup && module.has.popup() ) {
              $popup
                .on('mouseenter' + eventNamespace, module.event.start)
                .on('mouseleave' + eventNamespace, module.event.end)
              ;
            }
          },
          close:function() {
            if(settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document
                .one(module.get.scrollEvent() + elementNamespace, module.hideGracefully)
              ;
              $context
                .one(module.get.scrollEvent() + elementNamespace, module.hideGracefully)
              ;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Binding popup close event to document');
              $document
                .on('click' + elementNamespace, function(event) {
                  module.verbose('Pop-up clickaway intent detected');
                  module.hideGracefully.call(element, event);
                })
              ;
            }
          }
        },

        unbind: {
          close: function() {
            if(settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document
                .off('scroll' + elementNamespace, module.hide)
              ;
              $context
                .off('scroll' + elementNamespace, module.hide)
              ;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Removing close event from document');
              $document
                .off('click' + elementNamespace)
              ;
            }
          }
        },

        has: {
          popup: function() {
            return ($popup && $popup.length > 0);
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return ( $popup && $popup.is(':animated') || $popup.hasClass(className.animating) );
          },
          visible: function() {
            return $popup && $popup.is(':visible');
          },
          dropdown: function() {
            return $module.hasClass(className.dropdown);
          },
          hidden: function() {
            return !module.is.visible();
          },
          rtl: function () {
            return $module.css('direction') == 'rtl';
          }
        },

        reset: function() {
          module.remove.visible();
          if(settings.preserve) {
            if($.fn.transition !== undefined) {
              $popup
                .transition('remove transition')
              ;
            }
          }
          else {
            module.removePopup();
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.popup.settings = {

  name         : 'Popup',

  debug        : false,
  verbose      : true,
  performance  : true,
  namespace    : 'popup',

  onCreate     : function(){},
  onRemove     : function(){},

  onShow       : function(){},
  onVisible    : function(){},
  onHide       : function(){},
  onHidden     : function(){},

  variation    : '',
  content      : false,
  html         : false,
  title        : false,

  on           : 'hover',
  closable     : true,
  hideOnScroll : 'auto',
  exclusive    : true,

  context      : 'body',

  position     : 'top left',
  prefer       : 'opposite',
  lastResort   : false,

  delay        : {
    show : 30,
    hide : 0
  },

  setFluidWidth  : true,
  movePopup      : true,

  target         : false,
  popup          : false,
  inline         : false,
  preserve       : false,
  hoverable      : false,

  duration       : 200,
  easing         : 'easeOutQuint',
  transition     : 'scale',

  distanceAway   : 0,
  offset         : 0,
  maxSearchDepth : 20,

  error: {
    invalidPosition : 'The position you specified is not a valid position',
    cannotPlace     : 'No visible position could be found for the popup',
    method          : 'The method you called is not defined.'
  },

  metadata: {
    activator : 'activator',
    content   : 'content',
    html      : 'html',
    offset    : 'offset',
    position  : 'position',
    title     : 'title',
    variation : 'variation'
  },

  className   : {
    active    : 'active',
    animating : 'animating',
    dropdown  : 'dropdown',
    fluid     : 'fluid',
    loading   : 'loading',
    popup     : 'ui popup',
    position  : 'top left center bottom right',
    visible   : 'visible'
  },

  selector    : {
    popup    : '.ui.popup'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    popup: function(text) {
      var
        html   = '',
        escape = $.fn.popup.settings.templates.escape
      ;
      if(typeof text !== undefined) {
        if(typeof text.title !== undefined && text.title) {
          text.title = escape(text.title);
          html += '<div class="header">' + text.title + '</div>';
        }
        if(typeof text.content !== undefined && text.content) {
          text.content = escape(text.content);
          html += '<div class="content">' + text.content + '</div>';
        }
      }
      return html;
    }
  }

};

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  }
});


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.progress = function(parameters) {
  var
    $allModules    = $(this),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.progress.settings, parameters)
          : $.extend({}, $.fn.progress.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $bar            = $(this).find(selector.bar),
        $progress       = $(this).find(selector.progress),
        $label          = $(this).find(selector.label),

        element         = this,
        instance        = $module.data(moduleNamespace),

        animating = false,
        transitionEnd,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing progress bar', settings);

          transitionEnd = module.get.transitionEnd();

          module.read.metadata();
          module.set.duration();
          module.set.initials();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
        },

        reset: function() {
          module.set.percent(0);
        },

        complete: function() {
          if(module.percent === undefined || module.percent < 100) {
            module.set.percent(100);
          }
        },

        read: {
          metadata: function() {
            if( $module.data(metadata.percent) ) {
              module.verbose('Current percent value set from metadata');
              module.percent = $module.data(metadata.percent);
            }
            if( $module.data(metadata.total) ) {
              module.verbose('Total value set from metadata');
              module.total = $module.data(metadata.total);
            }
            if( $module.data(metadata.value) ) {
              module.verbose('Current value set from metadata');
              module.value = $module.data(metadata.value);
            }
          },
          currentValue: function() {
            return (module.value !== undefined)
              ? module.value
              : false
            ;
          }
        },

        increment: function(incrementValue) {
          var
            total          = module.total || false,
            edgeValue,
            startValue,
            newValue
          ;
          if(total) {
            startValue     = module.value || 0;
            incrementValue = incrementValue || 1;
            newValue       = startValue + incrementValue;
            edgeValue      = module.total;
            module.debug('Incrementing value by', incrementValue, startValue, edgeValue);
            if(newValue > edgeValue ) {
              module.debug('Value cannot increment above total', edgeValue);
              newValue = edgeValue;
            }
            module.set.progress(newValue);
          }
          else {
            startValue     = module.percent || 0;
            incrementValue = incrementValue || module.get.randomValue();
            newValue       = startValue + incrementValue;
            edgeValue      = 100;
            module.debug('Incrementing percentage by', incrementValue, startValue);
            if(newValue > edgeValue ) {
              module.debug('Value cannot increment above 100 percent');
              newValue = edgeValue;
            }
            module.set.progress(newValue);
          }
        },
        decrement: function(decrementValue) {
          var
            total     = module.total || false,
            edgeValue = 0,
            startValue,
            newValue
          ;
          if(total) {
            startValue     =  module.value   || 0;
            decrementValue =  decrementValue || 1;
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
          }
          else {
            startValue     =  module.percent || 0;
            decrementValue =  decrementValue || module.get.randomValue();
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
          }

          if(newValue < edgeValue) {
            module.debug('Value cannot decrement below 0');
            newValue = 0;
          }
          module.set.progress(newValue);
        },

        get: {
          text: function(templateText) {
            var
              value   = module.value                || 0,
              total   = module.total                || 0,
              percent = (module.is.visible() && animating)
                ? module.get.displayPercent()
                : module.percent || 0,
              left = (module.total > 0)
                ? (total - value)
                : (100 - percent)
            ;
            templateText = templateText || '';
            templateText = templateText
              .replace('{value}', value)
              .replace('{total}', total)
              .replace('{left}', left)
              .replace('{percent}', percent)
            ;
            module.debug('Adding variables to progress bar text', templateText);
            return templateText;
          },
          randomValue: function() {
            module.debug('Generating random increment percentage');
            return Math.floor((Math.random() * settings.random.max) + settings.random.min);
          },

          transitionEnd: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function() {
            var
              barWidth       = $bar.width(),
              totalWidth     = $module.width(),
              minDisplay     = parseInt($bar.css('min-width'), 10),
              displayPercent = (barWidth > minDisplay)
                ? (barWidth / totalWidth * 100)
                : module.percent
            ;
            if(settings.precision === 0) {
              return Math.round(displayPercent);
            }
            return Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision);
          },

          percent: function() {
            return module.percent || 0;
          },
          value: function() {
            return module.value || false;
          },
          total: function() {
            return module.total || false;
          }
        },

        is: {
          success: function() {
            return $module.hasClass(className.success);
          },
          warning: function() {
            return $module.hasClass(className.warning);
          },
          error: function() {
            return $module.hasClass(className.error);
          },
          active: function() {
            return $module.hasClass(className.active);
          },
          visible: function() {
            return $module.is(':visible');
          }
        },

        remove: {
          state: function() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
          },
          active: function() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
          },
          success: function() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
          },
          warning: function() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
          },
          error: function() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
          }
        },

        set: {
          barWidth: function(value) {
            if(value > 100) {
              module.error(error.tooHigh, value);
            }
            else if (value < 0) {
              module.error(error.tooLow, value);
            }
            else {
              $bar
                .css('width', value + '%')
              ;
              $module
                .attr('data-percent', parseInt(value, 10))
              ;
            }
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting progress bar transition duration', duration);
            $bar
              .css({
                '-webkit-transition-duration': duration,
                '-moz-transition-duration': duration,
                '-ms-transition-duration': duration,
                '-o-transition-duration': duration,
                'transition-duration':  duration
              })
            ;
          },
          initials: function() {
            if(settings.total !== false) {
              module.verbose('Current total set in settings', settings.total);
              module.total = settings.total;
            }
            if(settings.value !== false) {
              module.verbose('Current value set in settings', settings.value);
              module.value = settings.value;
            }
            if(settings.percent !== false) {
              module.verbose('Current percent set in settings', settings.percent);
              module.percent = settings.percent;
            }
            if(module.percent !== undefined) {
              module.set.percent(module.percent);
            }
            else if(module.value !== undefined) {
              module.set.progress(module.value);
            }
          },
          percent: function(percent) {
            percent = (typeof percent == 'string')
              ? +(percent.replace('%', ''))
              : percent
            ;
            if(percent > 0 && percent < 1) {
              module.verbose('Module percentage passed as decimal, converting');
              percent = percent * 100;
            }
            // round percentage
            if(settings.precision === 0) {
              percent = Math.round(percent);
            }
            else {
              percent = Math.round(percent * (10 * settings.precision)) / (10 * settings.precision);
            }
            module.percent = percent;
            if(module.total) {
              module.value = Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision);
            }
            else if(settings.limitValues) {
              module.value = (module.value > 100)
                ? 100
                : (module.value < 0)
                  ? 0
                  : module.value
              ;
            }
            module.set.barWidth(percent);
            if( module.is.visible() ) {
              module.set.labelInterval();
            }
            module.set.labels();
            settings.onChange.call(element, percent, module.value, module.total);
          },
          labelInterval: function() {
            var
              animationCallback = function() {
                module.verbose('Bar finished animating, removing continuous label updates');
                clearInterval(module.interval);
                animating = false;
                module.set.labels();
              }
            ;
            clearInterval(module.interval);
            $bar.one(transitionEnd + eventNamespace, animationCallback);
            module.timer = setTimeout(animationCallback, settings.duration + 100);
            animating = true;
            module.interval = setInterval(module.set.labels, settings.framerate);
          },
          labels: function() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
          },
          label: function(text) {
            text = text || '';
            if(text) {
              text = module.get.text(text);
              module.debug('Setting label to text', text);
              $label.text(text);
            }
          },
          state: function(percent) {
            percent = (percent !== undefined)
              ? percent
              : module.percent
            ;
            if(percent === 100) {
              if(settings.autoSuccess && !(module.is.warning() || module.is.error())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
              }
              else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
              }
            }
            else if(percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
            }
            else {
              module.remove.active();
              module.set.label(settings.text.active);
            }
          },
          barLabel: function(text) {
            if(text !== undefined) {
              $progress.text( module.get.text(text) );
            }
            else if(settings.label == 'ratio' && module.total) {
              module.debug('Adding ratio to bar label');
              $progress.text( module.get.text(settings.text.ratio) );
            }
            else if(settings.label == 'percent') {
              module.debug('Adding percentage to bar label');
              $progress.text( module.get.text(settings.text.percent) );
            }
          },
          active: function(text) {
            text = text || settings.text.active;
            module.debug('Setting active state');
            if(settings.showActivity && !module.is.active() ) {
              $module.addClass(className.active);
            }
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            if(text) {
              module.set.label(text);
            }
            settings.onActive.call(element, module.value, module.total);
          },
          success : function(text) {
            text = text || settings.text.success;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onSuccess.call(element, module.total);
          },
          warning : function(text) {
            text = text || settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onWarning.call(element, module.value, module.total);
          },
          error : function(text) {
            text = text || settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onError.call(element, module.value, module.total);
          },
          total: function(totalValue) {
            module.total = totalValue;
          },
          progress: function(value) {
            var
              numericValue = (typeof value === 'string')
                ? (value.replace(/[^\d.]/g, '') !== '')
                  ? +(value.replace(/[^\d.]/g, ''))
                  : false
                : value,
              percentComplete
            ;
            if(numericValue === false) {
              module.error(error.nonNumeric, value);
            }
            if(module.total) {
              module.value    = numericValue;
              percentComplete = (numericValue / module.total) * 100;
              module.debug('Calculating percent complete from total', percentComplete);
              module.set.percent( percentComplete );
            }
            else {
              percentComplete = numericValue;
              module.debug('Setting value to exact percentage value', percentComplete);
              module.set.percent( percentComplete );
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.progress.settings = {

  name         : 'Progress',
  namespace    : 'progress',

  debug        : false,
  verbose      : true,
  performance  : true,

  random       : {
    min : 2,
    max : 5
  },

  duration     : 300,

  autoSuccess  : true,
  showActivity : true,
  limitValues  : true,

  label        : 'percent',
  precision    : 1,
  framerate    : (1000 / 30), /// 30 fps

  percent      : false,
  total        : false,
  value        : false,

  onChange     : function(percent, value, total){},
  onSuccess    : function(total){},
  onActive     : function(value, total){},
  onError      : function(value, total){},
  onWarning    : function(value, total){},

  error    : {
    method     : 'The method you called is not defined.',
    nonNumeric : 'Progress value is non numeric',
    tooHigh    : 'Value specified is above 100%',
    tooLow     : 'Value specified is below 0%'
  },

  regExp: {
    variable: /\{\$*[A-z0-9]+\}/g
  },

  metadata: {
    percent : 'percent',
    total   : 'total',
    value   : 'value'
  },

  selector : {
    bar      : '> .bar',
    label    : '> .label',
    progress : '.bar > .progress'
  },

  text : {
    active  : false,
    error   : false,
    success : false,
    warning : false,
    percent : '{percent}%',
    ratio   : '{value} of {total}'
  },

  className : {
    active  : 'active',
    error   : 'error',
    success : 'success',
    warning : 'warning'
  }

};


})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.rating = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.rating.settings, parameters)
          : $.extend({}, $.fn.rating.settings),

        namespace       = settings.namespace,
        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        element         = this,
        instance        = $(this).data(moduleNamespace),

        $module         = $(this),
        $icon           = $module.find(selector.icon),

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing rating module', settings);

          if($icon.length === 0) {
            module.setup.layout();
          }

          if(settings.interactive) {
            module.enable();
          }
          else {
            module.disable();
          }
          if(settings.initialRating) {
            module.debug('Setting initial rating');
            module.setRating(settings.initialRating);
          }
          if( $module.data(metadata.rating) ) {
            module.debug('Rating found in metadata');
            module.setRating( $module.data(metadata.rating) );
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance', instance);
          $module
            .removeData(moduleNamespace)
          ;
          $icon
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          $icon   = $module.find(selector.icon);
        },

        setup: {
          layout: function() {
            var
              maxRating = $module.data(metadata.maxRating) || settings.maxRating
            ;
            module.debug('Generating icon html dynamically');
            $module
              .html($.fn.rating.settings.templates.icon(maxRating))
            ;
            module.refresh();
          }
        },

        event: {
          mouseenter: function() {
            var
              $activeIcon = $(this)
            ;
            $activeIcon
              .nextAll()
                .removeClass(className.selected)
            ;
            $module
              .addClass(className.selected)
            ;
            $activeIcon
              .addClass(className.selected)
                .prevAll()
                .addClass(className.selected)
            ;
          },
          mouseleave: function() {
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
            ;
          },
          click: function() {
            var
              $activeIcon   = $(this),
              currentRating = module.getRating(),
              rating        = $icon.index($activeIcon) + 1,
              canClear      = (settings.clearable == 'auto')
               ? ($icon.length === 1)
               : settings.clearable
            ;
            if(canClear && currentRating == rating) {
              module.clearRating();
            }
            else {
              module.setRating( rating );
            }
          }
        },

        clearRating: function() {
          module.debug('Clearing current rating');
          module.setRating(0);
        },

        getRating: function() {
          var
            currentRating = $icon.filter('.' + className.active).length
          ;
          module.verbose('Current rating retrieved', currentRating);
          return currentRating;
        },

        enable: function() {
          module.debug('Setting rating to interactive mode');
          $icon
            .on('mouseenter' + eventNamespace, module.event.mouseenter)
            .on('mouseleave' + eventNamespace, module.event.mouseleave)
            .on('click' + eventNamespace, module.event.click)
          ;
          $module
            .removeClass(className.disabled)
          ;
        },

        disable: function() {
          module.debug('Setting rating to read-only mode');
          $icon
            .off(eventNamespace)
          ;
          $module
            .addClass(className.disabled)
          ;
        },

        setRating: function(rating) {
          var
            ratingIndex = (rating - 1 >= 0)
              ? (rating - 1)
              : 0,
            $activeIcon = $icon.eq(ratingIndex)
          ;
          $module
            .removeClass(className.selected)
          ;
          $icon
            .removeClass(className.selected)
            .removeClass(className.active)
          ;
          if(rating > 0) {
            module.verbose('Setting current rating to', rating);
            $activeIcon
              .prevAll()
              .andSelf()
                .addClass(className.active)
            ;
          }
          settings.onRate.call(element, rating);
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.rating.settings = {

  name          : 'Rating',
  namespace     : 'rating',

  debug         : false,
  verbose       : true,
  performance   : true,

  initialRating : 0,
  interactive   : true,
  maxRating     : 4,
  clearable     : 'auto',

  onRate        : function(rating){},

  error         : {
    method    : 'The method you called is not defined',
    noMaximum : 'No maximum rating specified. Cannot generate HTML automatically'
  },


  metadata: {
    rating    : 'rating',
    maxRating : 'maxRating'
  },

  className : {
    active   : 'active',
    disabled : 'disabled',
    selected : 'selected',
    loading  : 'loading'
  },

  selector  : {
    icon : '.icon'
  },

  templates: {
    icon: function(maxRating) {
      var
        icon = 1,
        html = ''
      ;
      while(icon <= maxRating) {
        html += '<i class="icon"></i>';
        icon++;
      }
      return html;
    }
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.search = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $(this)
    .each(function() {
      var
        settings        = $.extend(true, {}, $.fn.search.settings, parameters),

        className       = settings.className,
        metadata        = settings.metadata,
        regExp          = settings.regExp,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),
        $prompt         = $module.find(selector.prompt),
        $searchButton   = $module.find(selector.searchButton),
        $results        = $module.find(selector.results),
        $result         = $module.find(selector.result),
        $category       = $module.find(selector.category),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing module');
          var
            prompt = $prompt[0],
            inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)
              ? 'input'
              : (prompt !== undefined && prompt.onpropertychange !== undefined)
                ? 'propertychange'
                : 'keyup'
          ;
          if(settings.automatic) {
            $prompt
              .on(inputEvent + eventNamespace, module.throttle)
              .attr('autocomplete', 'off')
            ;
          }
          $prompt
            .on('focus' + eventNamespace, module.event.focus)
            .on('blur' + eventNamespace, module.event.blur)
            .on('keydown' + eventNamespace, module.handleKeyboard)
          ;
          $searchButton
            .on('click' + eventNamespace, module.query)
          ;
          $results
            .on('mousedown' + eventNamespace, module.event.result.mousedown)
            .on('mouseup' + eventNamespace, module.event.result.mouseup)
            .on('click' + eventNamespace, selector.result, module.event.result.click)
          ;
          module.instantiate();
        },
        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .removeData(moduleNamespace)
          ;
          $prompt
            .off(eventNamespace)
          ;
          $searchButton
            .off(eventNamespace)
          ;
          $results
            .off(eventNamespace)
          ;
        },
        event: {
          focus: function() {
            module.set.focus();
            clearTimeout(module.timer);
            module.throttle();
            if( module.has.minimumCharacters() ) {
              module.showResults();
            }
          },
          blur: function(event) {
            var
              pageLostFocus = (document.activeElement === this)
            ;
            if(!pageLostFocus && !module.resultsClicked) {
              module.cancel.query();
              module.remove.focus();
              module.timer = setTimeout(module.hideResults, settings.hideDelay);
            }
          },
          result: {
            mousedown: function() {
              module.resultsClicked = true;
            },
            mouseup: function() {
              module.resultsClicked = false;
            },
            click: function(event) {
              module.debug('Search result selected');
              var
                $result = $(this),
                $title  = $result.find(selector.title).eq(0),
                $link   = $result.find('a[href]').eq(0),
                href    = $link.attr('href')   || false,
                target  = $link.attr('target') || false,
                title   = $title.html(),
                name    = ($title.length > 0)
                  ? $title.text()
                  : false,
                results = module.get.results(),
                result  = module.get.result(name, results),
                returnedValue
              ;
              if( $.isFunction(settings.onSelect) ) {
                if(settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  return;
                }
              }
              module.hideResults();
              if(name) {
                module.set.value(name);
              }
              if(href) {
                module.verbose('Opening search link found in result', $link);
                if(target == '_blank' || event.ctrlKey) {
                  window.open(href);
                }
                else {
                  window.location.href = (href);
                }
              }
            }
          }
        },
        handleKeyboard: function(event) {
          var
            // force selector refresh
            $result      = $module.find(selector.result),
            $category    = $module.find(selector.category),
            currentIndex = $result.index( $result.filter('.' + className.active) ),
            resultSize   = $result.length,

            keyCode      = event.which,
            keys         = {
              backspace : 8,
              enter     : 13,
              escape    : 27,
              upArrow   : 38,
              downArrow : 40
            },
            newIndex
          ;
          // search shortcuts
          if(keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            $prompt
              .trigger('blur')
            ;
          }
          if( module.is.visible() ) {
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if( $result.filter('.' + className.active).length > 0 ) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
              }
            }
            else if(keyCode == keys.upArrow) {
              module.verbose('Up key pressed, changing active result');
              newIndex = (currentIndex - 1 < 0)
                ? currentIndex
                : currentIndex - 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
            else if(keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = (currentIndex + 1 >= resultSize)
                ? currentIndex
                : currentIndex + 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
          }
          else {
            // query shortcuts
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
            }
          }
        },

        setup: {
          api: function() {
            var
              apiSettings = {
                on        : false,
                action    : 'search',
                onFailure : module.error
              },
              searchHTML
            ;
            module.verbose('First request, initializing API');
            $module.api(apiSettings);
          }
        },

        can: {
          useAPI: function() {
            return $.fn.api !== undefined;
          },
          transition: function() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
          }
        },

        is: {
          empty: function() {
            return ($results.html() === '');
          },
          visible: function() {
            return ($results.filter(':visible').length > 0);
          },
          focused: function() {
            return ($prompt.filter(':focus').length > 0);
          }
        },

        get: {
          value: function() {
            return $prompt.val();
          },
          results: function() {
            var
              results = $module.data(metadata.results)
            ;
            return results;
          },
          result: function(value, results) {
            var
              result = false
            ;
            value   = value   || module.get.value();
            results = results || module.get.results();
            if(settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function(index, category) {
                if($.isArray(category.results)) {
                  result = module.search.object(value, category.results)[0];
                  if(result && result.length > 0) {
                    return true;
                  }
                }
              });
            }
            else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results)[0];
            }
            return result;
          },
        },

        set: {
          focus: function() {
            $module.addClass(className.focus);
          },
          loading: function() {
            $module.addClass(className.loading);
          },
          value: function(value) {
            module.verbose('Setting search input value', value);
            $prompt.val(value);
            module.query();
          },
          buttonPressed: function() {
            $searchButton.addClass(className.pressed);
          }
        },

        remove: {
          loading: function() {
            $module.removeClass(className.loading);
          },
          focus: function() {
            $module.removeClass(className.focus);
          },
          buttonPressed: function() {
            $searchButton.removeClass(className.pressed);
          }
        },

        query: function() {
          var
            searchTerm = module.get.value(),
            cache = module.read.cache(searchTerm)
          ;
          if(cache) {
            module.debug('Reading result for ' + searchTerm + ' from cache');
            module.save.results(cache.results);
            module.addResults(cache.html);
          }
          else {
            module.debug('Querying for ' + searchTerm);
            if($.isPlainObject(settings.source) || $.isArray(settings.source)) {
              module.search.local(searchTerm);
            }
            else if( module.can.useAPI() ) {
              if(settings.apiSettings) {
                module.debug('Searching with specified API settings', settings.apiSettings);
                module.search.remote(searchTerm);
              }
              else if($.api.settings.api.search !== undefined) {
                module.debug('Searching with default search API endpoint');
                module.search.remote(searchTerm);
              }
              else {
                module.error(error.noEndpoint);
              }
            }
            else {
              module.error(error.source);
            }
            settings.onSearchQuery.call(element, searchTerm);
          }
        },

        search: {
          local: function(searchTerm) {
            var
              searchResults = module.search.object(searchTerm, settings.content),
              searchHTML
            ;
            module.set.loading();
            module.save.results(searchResults);
            module.debug('Returned local search results', searchResults);

            searchHTML = module.generateResults({
              results: searchResults
            });
            module.remove.loading();
            module.write.cache(searchTerm, {
              html    : searchHTML,
              results : searchResults
            });
            module.addResults(searchHTML);
          },
          remote: function(searchTerm) {
            var
              apiSettings = {
                onSuccess : function(response) {
                  module.parse.response.call(element, response, searchTerm);
                },
                urlData: {
                  query: searchTerm
                }
              }
            ;
            if( !$module.api('get request') ) {
              module.setup.api();
            }
            $.extend(true, apiSettings, settings.apiSettings);
            module.debug('Executing search', apiSettings);
            module.cancel.query();
            $module
              .api('setting', apiSettings)
              .api('query')
            ;
          },
          object: function(searchTerm, source) {
            var
              results         = [],
              fullTextResults = [],
              searchFields    = $.isArray(settings.searchFields)
                ? settings.searchFields
                : [settings.searchFields],
              searchExp       = searchTerm.replace(regExp.escape, '\\$&'),
              searchRegExp    = new RegExp(regExp.exact + searchExp, 'i')
            ;

            source = source || settings.source;

            // exit conditions on no source
            if(source === undefined) {
              module.error(error.source);
              return [];
            }

            // iterate through search fields in array order
            $.each(searchFields, function(index, field) {
              $.each(source, function(label, content) {
                var
                  fieldExists = (typeof content[field] == 'string'),
                  notAlreadyResult = ($.inArray(content, results) == -1 && $.inArray(content, fullTextResults) == -1)
                ;
                if(fieldExists && notAlreadyResult) {
                  if( content[field].match(searchRegExp) ) {
                    results.push(content);
                  }
                  else if(settings.searchFullText && module.fuzzySearch(searchTerm, content[field]) ) {
                    fullTextResults.push(content);
                  }
                }
              });
            });
            return $.merge(results, fullTextResults);
          }
        },

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
          }
          if(queryLength === termLength) {
            return (query === term);
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        parse: {
          response: function(response, searchTerm) {
            var
              searchHTML = module.generateResults(response)
            ;
            module.verbose('Parsing server response', response);
            if(response !== undefined) {
              if(searchTerm !== undefined && response.results !== undefined) {
                module.write.cache(searchTerm, {
                  html    : searchHTML,
                  results : response.results
                });
                module.save.results(response.results);
                module.addResults(searchHTML);
              }
            }
          }
        },

        throttle: function() {
          clearTimeout(module.timer);
          if(module.has.minimumCharacters())  {
            module.timer = setTimeout(module.query, settings.searchDelay);
          }
          else {
            module.hideResults();
          }
        },

        cancel: {
          query: function() {
            if( module.can.useAPI() ) {
              $module.api('abort');
            }
          }
        },

        has: {
          minimumCharacters: function() {
            var
              searchTerm    = module.get.value(),
              numCharacters = searchTerm.length
            ;
            return (numCharacters >= settings.minCharacters);
          }
        },

        read: {
          cache: function(name) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return (typeof cache == 'object') && (cache[name] !== undefined)
                ? cache[name]
                : false
              ;
            }
            return false;
          }
        },

        save: {
          results: function(results) {
            module.verbose('Saving current search results to metadata', results);
            $module.data(metadata.results, results);
          }
        },

        write: {
          cache: function(name, value) {
            var
              cache = ($module.data(metadata.cache) !== undefined)
                ? $module.data(metadata.cache)
                : {}
            ;
            if(settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module
                .data(metadata.cache, cache)
              ;
            }
          }
        },

        addResults: function(html) {
          if( $.isFunction(settings.onResultsAdd) ) {
            if( settings.onResultsAdd.call($results, html) === false ) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
            }
          }
          $results
            .html(html)
          ;
          module.showResults();
        },

        showResults: function() {
          if( !module.is.visible() && module.is.focused() && !module.is.empty() ) {
            if( module.can.transition() ) {
              module.debug('Showing results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' in',
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Showing results with javascript');
              $results
                .stop()
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            settings.onResultsOpen.call($results);
          }
        },
        hideResults: function() {
          if( module.is.visible() ) {
            if( module.can.transition() ) {
              module.debug('Hiding results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' out',
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Hiding results with javascript');
              $results
                .stop()
                .fadeOut(settings.duration, settings.easing)
              ;
            }
            settings.onResultsClose.call($results);
          }
        },

        generateResults: function(response) {
          module.debug('Generating html from response', response);
          var
            template       = settings.templates[settings.type],
            isProperObject = ($.isPlainObject(response.results) && !$.isEmptyObject(response.results)),
            isProperArray  = ($.isArray(response.results) && response.results.length > 0),
            html           = ''
          ;
          if(isProperObject || isProperArray ) {
            if(settings.maxResults > 0) {
              if(isProperObject) {
                if(settings.type == 'standard') {
                  module.error(error.maxResults);
                }
              }
              else {
                response.results = response.results.slice(0, settings.maxResults);
              }
            }
            if($.isFunction(template)) {
              html = template(response);
            }
            else {
              module.error(error.noTemplate, false);
            }
          }
          else {
            html = module.displayMessage(error.noResults, 'empty');
          }
          settings.onResults.call(element, response);
          return html;
        },

        displayMessage: function(text, type) {
          type = type || 'standard';
          module.debug('Displaying message', text, type);
          module.addResults( settings.templates.message(text, type) );
          return settings.templates.message(text, type);
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }

    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.search.settings = {

  name           : 'Search Module',
  namespace      : 'search',

  debug          : false,
  verbose        : true,
  performance    : true,

  type           : 'standard',
  minCharacters  : 1,

  // api config
  apiSettings    : false,

  source         : false,
  searchFields   : [
    'title',
    'description'
  ],
  searchFullText : true,

  automatic      : 'true',
  hideDelay      : 0,
  searchDelay    : 100,
  maxResults     : 7,
  cache          : true,

  transition     : 'scale',
  duration       : 300,
  easing         : 'easeOutExpo',

  onSelect       : false,
  onResultsAdd   : false,

  onSearchQuery  : function(){},
  onResults      : function(response){},

  onResultsOpen  : function(){},
  onResultsClose : function(){},

  className: {
    active  : 'active',
    empty   : 'empty',
    focus   : 'focus',
    loading : 'loading',
    pressed : 'down'
  },

  error : {
    source      : 'Cannot search. No source used, and Semantic API module was not included',
    noResults   : 'Your search returned no results',
    logging     : 'Error in debug logging, exiting.',
    noEndpoint  : 'No search endpoint was specified',
    noTemplate  : 'A valid template name was not specified.',
    serverError : 'There was an issue with querying the server.',
    maxResults  : 'Results must be an array to use maxResults setting',
    method      : 'The method you called is not defined.'
  },

  metadata: {
    cache   : 'cache',
    results : 'results'
  },

  regExp: {
    escape : /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    exact  : '(?:\s|^)'
  },

  selector : {
    prompt       : '.prompt',
    searchButton : '.search.button',
    results      : '.results',
    category     : '.category',
    result       : '.result',
    title        : '.title, .name'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    message: function(message, type) {
      var
        html = ''
      ;
      if(message !== undefined && type !== undefined) {
        html +=  ''
          + '<div class="message ' + type + '">'
        ;
        // message type
        if(type == 'empty') {
          html += ''
            + '<div class="header">No Results</div class="header">'
            + '<div class="description">' + message + '</div class="description">'
          ;
        }
        else {
          html += ' <div class="description">' + message + '</div>';
        }
        html += '</div>';
      }
      return html;
    },
    category: function(response) {
      var
        html = '',
        escape = $.fn.search.settings.templates.escape
      ;
      if(response.results !== undefined) {
        // each category
        $.each(response.results, function(index, category) {
          if(category.results !== undefined && category.results.length > 0) {
            html  += ''
              + '<div class="category">'
              + '<div class="name">' + category.name + '</div>'
            ;
            // each item inside category
            $.each(category.results, function(index, result) {
              html  += '<div class="result">';
              if(result.url) {
                html  += '<a href="' + result.url + '"></a>';
              }
              if(result.image !== undefined) {
                result.image = escape(result.image);
                html += ''
                  + '<div class="image">'
                  + ' <img src="' + result.image + '" alt="">'
                  + '</div>'
                ;
              }
              html += '<div class="content">';
              if(result.price !== undefined) {
                result.price = escape(result.price);
                html += '<div class="price">' + result.price + '</div>';
              }
              if(result.title !== undefined) {
                result.title = escape(result.title);
                html += '<div class="title">' + result.title + '</div>';
              }
              if(result.description !== undefined) {
                html += '<div class="description">' + result.description + '</div>';
              }
              html  += ''
                + '</div>'
                + '</div>'
              ;
            });
            html  += ''
              + '</div>'
            ;
          }
        });
        if(response.action) {
          html += ''
          + '<a href="' + response.action.url + '" class="action">'
          +   response.action.text
          + '</a>';
        }
        return html;
      }
      return false;
    },
    standard: function(response) {
      var
        html = ''
      ;
      if(response.results !== undefined) {

        // each result
        $.each(response.results, function(index, result) {
          if(result.url) {
            html  += '<a class="result" href="' + result.url + '">';
          }
          else {
            html  += '<a class="result">';
          }
          if(result.image !== undefined) {
            html += ''
              + '<div class="image">'
              + ' <img src="' + result.image + '">'
              + '</div>'
            ;
          }
          html += '<div class="content">';
          if(result.price !== undefined) {
            html += '<div class="price">' + result.price + '</div>';
          }
          if(result.title !== undefined) {
            html += '<div class="title">' + result.title + '</div>';
          }
          if(result.description !== undefined) {
            html += '<div class="description">' + result.description + '</div>';
          }
          html  += ''
            + '</div>'
          ;
          html += '</a>';
        });

        if(response.action) {
          html += ''
          + '<a href="' + response.action.url + '" class="action">'
          +   response.action.text
          + '</a>';
        }
        return html;
      }
      return false;
    }
  }
};

})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.shape = function(parameters) {
  var
    $allModules     = $(this),
    $body           = $('body'),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        moduleSelector  = $allModules.selector || '',
        settings        = $.extend(true, {}, $.fn.shape.settings, parameters),

        // internal aliases
        namespace     = settings.namespace,
        selector      = settings.selector,
        error         = settings.error,
        className     = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // selector cache
        $module       = $(this),
        $sides        = $module.find(selector.sides),
        $side         = $module.find(selector.side),

        // private variables
        nextIndex = false,
        $activeSide,
        $nextSide,

        // standard module
        element       = this,
        instance      = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides  = $(this).find(selector.shape);
          $side   = $(this).find(selector.side);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          var
            shape          = $sides.get(0) || document.createElement('div'),
            fakeAssignment = shape.offsetWidth
          ;
        },

        animate: function(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function(event) {
            module.verbose('Executing animation callback');
            if(event !== undefined) {
              event.stopPropagation();
            }
            module.reset();
            module.set.active();
          };
          settings.beforeChange.call($nextSide.get());
          if(module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module
              .addClass(className.animating)
            ;
            $sides
              .css(propertyObject)
              .one(module.get.transitionEvent(), callback)
            ;
            module.set.duration(settings.duration);
            requestAnimationFrame(function() {
              $module
                .addClass(className.animating)
              ;
              $activeSide
                .addClass(className.hidden)
              ;
            });
          }
          else {
            callback();
          }
        },

        queue: function(method) {
          module.debug('Queueing animation of', method);
          $sides
            .one(module.get.transitionEvent(), function() {
              module.debug('Executing queued animation');
              setTimeout(function(){
                $module.shape(method);
              }, 0);
            })
          ;
        },

        reset: function() {
          module.verbose('Animating states reset');
          $module
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
          // removeAttr style does not consistently work in safari
          $sides
            .attr('style', '')
            .removeAttr('style')
          ;
          $side
            .attr('style', '')
            .removeAttr('style')
            .removeClass(className.hidden)
          ;
          $nextSide
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
        },

        is: {
          complete: function() {
            return ($side.filter('.' + className.active)[0] == $nextSide[0]);
          },
          animating: function() {
            return $module.hasClass(className.animating);
          }
        },

        set: {

          defaultSide: function() {
            $activeSide = $module.find('.' + settings.className.active);
            $nextSide   = ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
          },

          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting animation duration', duration);
            $sides.add($side)
              .css({
                '-webkit-transition-duration': duration,
                '-moz-transition-duration': duration,
                '-ms-transition-duration': duration,
                '-o-transition-duration': duration,
                'transition-duration': duration
              })
            ;
          },

          stageSize: function() {
            var
              $clone      = $module.clone().addClass(className.loading),
              $activeSide = $clone.find('.' + settings.className.active),
              $nextSide   = (nextIndex)
                ? $clone.find(selector.side).eq(nextIndex)
                : ( $activeSide.next(selector.side).length > 0 )
                  ? $activeSide.next(selector.side)
                  : $clone.find(selector.side).first(),
              newSize = {}
            ;
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            newSize = {
              width  : $nextSide.outerWidth(),
              height : $nextSide.outerHeight()
            };
            $clone.remove();
            $module
              .css(newSize)
            ;
            module.verbose('Resizing stage to fit new content', newSize);
          },

          nextSide: function(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
            }
            module.verbose('Next side manually set to', $nextSide);
          },

          active: function() {
            module.verbose('Setting new side to active', $nextSide);
            $side
              .removeClass(className.active)
            ;
            $nextSide
              .addClass(className.active)
            ;
            settings.onChange.call($nextSide.get());
            module.set.defaultSide();
          }
        },

        flip: {

          up: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping up', $nextSide);
              module.set.stageSize();
              module.stage.above();
              module.animate( module.get.transform.up() );
            }
            else {
              module.queue('flip up');
            }
          },

          down: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping down', $nextSide);
              module.set.stageSize();
              module.stage.below();
              module.animate( module.get.transform.down() );
            }
            else {
              module.queue('flip down');
            }
          },

          left: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping left', $nextSide);
              module.set.stageSize();
              module.stage.left();
              module.animate(module.get.transform.left() );
            }
            else {
              module.queue('flip left');
            }
          },

          right: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping right', $nextSide);
              module.set.stageSize();
              module.stage.right();
              module.animate(module.get.transform.right() );
            }
            else {
              module.queue('flip right');
            }
          },

          over: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping over', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.over() );
            }
            else {
              module.queue('flip over');
            }
          },

          back: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping back', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.back() );
            }
            else {
              module.queue('flip back');
            }
          }

        },

        get: {

          transform: {
            up: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                  z: -($activeSide.outerHeight() / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(-90deg)'
              };
            },

            down: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                  z: -($activeSide.outerHeight() / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(90deg)'
              };
            },

            left: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2),
                  z : -($activeSide.outerWidth() / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'
              };
            },

            right: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2),
                  z : -($activeSide.outerWidth() / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'
              };
            },

            over: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
              };
            },

            back: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
              };
            }
          },

          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          nextSide: function() {
            return ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
          }

        },

        stage: {

          above: function() {
            var
              box = {
                origin : (($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                depth  : {
                  active : ($nextSide.outerHeight() / 2),
                  next   : ($activeSide.outerHeight() / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'display'   : 'block',
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          below: function() {
            var
              box = {
                origin : (($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                depth  : {
                  active : ($nextSide.outerHeight() / 2),
                  next   : ($activeSide.outerHeight() / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'display'   : 'block',
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          left: function() {
            var
              box = {
                origin : ( ( $activeSide.outerWidth() - $nextSide.outerWidth() ) / 2),
                depth  : {
                  active : ($nextSide.outerWidth() / 2),
                  next   : ($activeSide.outerWidth() / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'display'   : 'block',
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          right: function() {
            var
              box = {
                origin : ( ( $activeSide.outerWidth() - $nextSide.outerWidth() ) / 2),
                depth  : {
                  active : ($nextSide.outerWidth() / 2),
                  next   : ($activeSide.outerWidth() / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'display'   : 'block',
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          behind: function() {
            var
              box = {
                origin : ( ( $activeSide.outerWidth() - $nextSide.outerWidth() ) / 2),
                depth  : {
                  active : ($nextSide.outerWidth() / 2),
                  next   : ($activeSide.outerWidth() / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'display'   : 'block',
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-180deg)'
              })
            ;
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.shape.settings = {

  // module info
  name : 'Shape',

  // debug content outputted to console
  debug      : false,

  // verbose debug output
  verbose    : true,

  // performance data output
  performance: true,

  // event namespace
  namespace  : 'shape',

  // callback occurs on side change
  beforeChange : function() {},
  onChange     : function() {},

  // allow animation to same side
  allowRepeats: false,

  // animation duration
  duration   : 700,

  // possible errors
  error: {
    side   : 'You tried to switch to a side that does not exist.',
    method : 'The method you called is not defined'
  },

  // classnames used
  className   : {
    animating : 'animating',
    hidden    : 'hidden',
    loading   : 'loading',
    active    : 'active'
  },

  // selectors used
  selector    : {
    sides : '.sides',
    side  : '.side'
  }

};


})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sidebar = function(parameters) {
  var
    $allModules     = $(this),
    $window         = $(window),
    $document       = $(document),
    $html           = $('html'),
    $head           = $('head'),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sidebar.settings, parameters)
          : $.extend({}, $.fn.sidebar.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),

        $sidebars       = $module.children(selector.sidebar),
        $fixed          = $context.children(selector.fixed),
        $pusher         = $context.children(selector.pusher),
        $style,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        currentScroll,
        transitionEvent,

        module
      ;

      module      = {

        initialize: function() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          // cache on initialize
          if( ( settings.useLegacy == 'auto' && module.is.legacy() ) || settings.useLegacy === true) {
            settings.transition = 'overlay';
            settings.useLegacy = true;
          }

          if(module.is.ios()) {
            module.set.ios();
          }

          // avoids locking rendering if initialized in onReady
          if(settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
          }
          else {
            module.setup.layout();
          }

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous module for', $module);
          module.remove.direction();
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
        },

        event: {
          clickaway: function(event) {
            var
              clickedInPusher = ($pusher.find(event.target).length > 0 || $pusher.is(event.target)),
              clickedContext  = ($context.is(event.target))
            ;
            if(clickedInPusher) {
              module.verbose('User clicked on dimmed page');
              module.hide();
            }
            if(clickedContext) {
              module.verbose('User clicked on dimmable context (scaled out page)');
              module.hide();
            }
          },
          touch: function(event) {
            //event.stopPropagation();
          },
          containScroll: function(event) {
            if(element.scrollTop <= 0)  {
              element.scrollTop = 1;
            }
            if((element.scrollTop + element.offsetHeight) >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
            }
          },
          scroll: function(event) {
            if( $(event.target).closest(selector.sidebar).length === 0 ) {
              event.preventDefault();
            }
          }
        },

        bind: {
          clickaway: function() {
            module.verbose('Adding clickaway events to context', $context);
            if(settings.closable) {
              $context
                .on('click' + elementNamespace, module.event.clickaway)
                .on('touchend' + elementNamespace, module.event.clickaway)
              ;
            }
          },
          scrollLock: function() {
            if(settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window
                .on('DOMMouseScroll' + elementNamespace, module.event.scroll)
              ;
            }
            module.verbose('Adding events to contain sidebar scroll');
            $document
              .on('touchmove' + elementNamespace, module.event.touch)
            ;
            $module
              .on('scroll' + eventNamespace, module.event.containScroll)
            ;
          }
        },
        unbind: {
          clickaway: function() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
          },
          scrollLock: function() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
          }
        },

        add: {
          bodyCSS: function() {
            var
              width     = $module.outerWidth(),
              height    = $module.outerHeight(),
              direction = module.get.direction(),
              distance  = {
                left   : width,
                right  : -width,
                top    : height,
                bottom : -height
              },
              style
            ;
            if( module.is.rtl() ){
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
            }

            style  = '<style title="' + namespace + '">';

            if(direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + ' }'
              ;
            }
            else if(direction === 'top' || direction == 'bottom') {
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + ' }'
              ;
            }

            /* IE is only browser not to create context with transforms */
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
            if( module.is.ie() ) {
              if(direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + ' }'
                ;
              }
              else if(direction === 'top' || direction == 'bottom') {
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + ' }'
                ;
              }
              /* opposite sides visible forces content overlay */
              style += ''
                + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,'
                + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {'
                + '   -webkit-transform: translate3d(0px, 0, 0);'
                + '           transform: translate3d(0px, 0, 0);'
                + ' }'
              ;
            }
            style += '</style>';
            $head.append(style);
            $style = $('style[title=' + namespace + ']');
            module.debug('Adding sizing css to head', $style);
          }
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $context  = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher   = $context.children(selector.pusher);
          $fixed    = $context.children(selector.fixed);
        },

        refreshSidebars: function() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          element.style.display='none';
          element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display='';
        },

        setup: {
          layout: function() {
            if( $context.children(selector.pusher).length === 0 ) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context
                .children()
                  .not(selector.omitted)
                  .not($sidebars)
                  .wrapAll($pusher)
              ;
              module.refresh();
            }
            if($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
            }
            module.set.pushable();
            module.set.direction();
          }
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        show: function(callback) {
          var
            animateMethod = (settings.useLegacy === true)
              ? module.legacyPushPage
              : module.pushPage
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.hidden()) {
            module.refreshSidebars();
            if(settings.overlay)  {
              module.error(error.overlay);
              settings.transition = 'overlay';
            }
            module.refresh();
            if(module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if(settings.exclusive) {
                // if not overlay queue animation after hide
                if(settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
                }
                else {
                  module.hideOthers();
                }
              }
              else {
                settings.transition = 'overlay';
              }
            }
            animateMethod(function() {
              callback.call(element);
              settings.onShow.call(element);
            });
            settings.onChange.call(element);
            settings.onVisible.call(element);
          }
          else {
            module.debug('Sidebar is already visible');
          }
        },

        hide: function(callback) {
          var
            animateMethod = (settings.useLegacy === true)
              ? module.legacyPullPage
              : module.pullPage
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            animateMethod(function() {
              callback.call(element);
              settings.onHidden.call(element);
            });
            settings.onChange.call(element);
            settings.onHide.call(element);
          }
        },

        othersAnimating: function() {
          return ($sidebars.not($module).filter('.' + className.animating).length > 0);
        },
        othersVisible: function() {
          return ($sidebars.not($module).filter('.' + className.visible).length > 0);
        },
        othersActive: function() {
          return(module.othersVisible() || module.othersAnimating());
        },

        hideOthers: function(callback) {
          var
            $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
            sidebarCount   = $otherSidebars.length,
            callbackCount  = 0
          ;
          callback = callback || function(){};
          $otherSidebars
            .sidebar('hide', function() {
              callbackCount++;
              if(callbackCount == sidebarCount) {
                callback();
              }
            })
          ;
        },

        toggle: function() {
          module.verbose('Determining toggled direction');
          if(module.is.hidden()) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        pushPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition == 'safe')
              ? $context
              : (transition === 'overlay' || module.othersActive())
                ? $module
                : $pusher,
            animate,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(settings.transition == 'scale down') {
            module.scrollToTop();
          }
          module.set.transition(transition);
          module.repaint();
          animate = function() {
            module.bind.clickaway();
            module.add.bodyCSS();
            module.set.animating();
            module.set.visible();
            if(!module.othersVisible()) {
              if(settings.dimPage) {
                $pusher.addClass(className.dimmed);
              }
            }
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        pullPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition == 'safe')
              ? $context
              : (transition == 'overlay' || module.othersActive())
                ? $module
                : $pusher,
            animate,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.verbose('Removing context push state', module.get.direction());

          module.set.transition(transition);
          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function() {
            module.set.animating();
            module.remove.visible();
            if(settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
            }
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.bodyCSS();
              if(transition == 'scale down' || (settings.returnScroll && module.is.mobile()) ) {
                module.scrollBack();
              }
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        legacyPushPage: function(callback) {
          var
            distance   = $module.width(),
            direction  = module.get.direction(),
            properties = {}
          ;
          distance  = distance || $module.width();
          callback  = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          properties[direction] = distance;
          module.debug('Using javascript to push context', properties);
          module.set.visible();
          module.set.transition();
          module.set.animating();
          if(settings.dimPage) {
            $pusher.addClass(className.dimmed);
          }
          $context
            .css('position', 'relative')
            .animate(properties, settings.duration, settings.easing, function() {
              module.remove.animating();
              module.bind.clickaway();
              callback.call(element);
            })
          ;
        },
        legacyPullPage: function(callback) {
          var
            distance   = 0,
            direction  = module.get.direction(),
            properties = {}
          ;
          distance  = distance || $module.width();
          callback  = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          properties[direction] = '0px';
          module.debug('Using javascript to pull context', properties);
          module.unbind.clickaway();
          module.set.animating();
          module.remove.visible();
          if(settings.dimPage && !module.othersActive()) {
            $pusher.removeClass(className.dimmed);
          }
          $context
            .css('position', 'relative')
            .animate(properties, settings.duration, settings.easing, function() {
              module.remove.animating();
              callback.call(element);
            })
          ;
        },

        scrollToTop: function() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
        },

        scrollBack: function() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
        },

        set: {
          // html
          ios: function() {
            $html.addClass(className.ios);
          },

          // container
          pushed: function() {
            $context.addClass(className.pushed);
          },
          pushable: function() {
            $context.addClass(className.pushable);
          },

          // sidebar
          active: function() {
            $module.addClass(className.active);
          },
          animating: function() {
            $module.addClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.addClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.addClass(className[direction]);
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          overlay: function() {
            $module.addClass(className.overlay);
          }
        },
        remove: {

          bodyCSS: function() {
            module.debug('Removing body css styles', $style);
            if($style && $style.length > 0) {
              $style.remove();
            }
          },

          // context
          pushed: function() {
            $context.removeClass(className.pushed);
          },
          pushable: function() {
            $context.removeClass(className.pushable);
          },

          // sidebar
          active: function() {
            $module.removeClass(className.active);
          },
          animating: function() {
            $module.removeClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.removeClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.removeClass(className[direction]);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          overlay: function() {
            $module.removeClass(className.overlay);
          }
        },

        get: {
          direction: function() {
            if($module.hasClass(className.top)) {
              return className.top;
            }
            else if($module.hasClass(className.right)) {
              return className.right;
            }
            else if($module.hasClass(className.bottom)) {
              return className.bottom;
            }
            return className.left;
          },
          transition: function() {
            var
              direction = module.get.direction(),
              transition
            ;
            transition = ( module.is.mobile() )
              ? (settings.mobileTransition == 'auto')
                ? settings.defaultTransition.mobile[direction]
                : settings.mobileTransition
              : (settings.transition == 'auto')
                ? settings.defaultTransition.computer[direction]
                : settings.transition
            ;
            module.verbose('Determined transition', transition);
            return transition;
          },
          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          }
        },

        is: {

          ie: function() {
            var
              isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),
              isIE   = ('ActiveXObject' in window)
            ;
            return (isIE11 || isIE);
          },

          legacy: function() {
            var
              element    = document.createElement('div'),
              transforms = {
                'webkitTransform' :'-webkit-transform',
                'OTransform'      :'-o-transform',
                'msTransform'     :'-ms-transform',
                'MozTransform'    :'-moz-transform',
                'transform'       :'transform'
              },
              has3D
            ;

            // Add it to the body to get the computed style.
            document.body.insertBefore(element, null);
            for (var transform in transforms) {
              if (element.style[transform] !== undefined) {
                element.style[transform] = "translate3d(1px,1px,1px)";
                has3D = window.getComputedStyle(element).getPropertyValue(transforms[transform]);
              }
            }
            document.body.removeChild(element);
            return !(has3D !== undefined && has3D.length > 0 && has3D !== 'none');
          },
          ios: function() {
            var
              userAgent = navigator.userAgent,
              isIOS     = userAgent.match(regExp.ios)
            ;
            if(isIOS) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
            }
            else {
              return false;
            }
          },
          mobile: function() {
            var
              userAgent    = navigator.userAgent,
              isMobile     = userAgent.match(regExp.mobile)
            ;
            if(isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
            }
            else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
            }
          },
          hidden: function() {
            return !module.is.visible();
          },
          visible: function() {
            return $module.hasClass(className.visible);
          },
          // alias
          open: function() {
            return module.is.visible();
          },
          closed: function() {
            return module.is.hidden();
          },
          vertical: function() {
            return $module.hasClass(className.top);
          },
          animating: function() {
            return $context.hasClass(className.animating);
          },
          rtl: function () {
            return $module.css('direction') == 'rtl';
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      }
    ;

    if(methodInvoked) {
      if(instance === undefined) {
        module.initialize();
      }
      module.invoke(query);
    }
    else {
      if(instance !== undefined) {
        module.invoke('destroy');
      }
      module.initialize();
    }
  });

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sidebar.settings = {

  name              : 'Sidebar',
  namespace         : 'sidebar',

  debug             : false,
  verbose           : true,
  performance       : true,

  transition        : 'auto',
  mobileTransition  : 'auto',

  defaultTransition : {
    computer: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    },
    mobile: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    }
  },

  context           : 'body',
  exclusive         : false,
  closable          : true,
  dimPage           : true,
  scrollLock        : false,
  returnScroll      : false,
  delaySetup        : false,

  useLegacy         : 'auto',
  duration          : 500,
  easing            : 'easeInOutQuint',

  onChange          : function(){},
  onShow            : function(){},
  onHide            : function(){},

  onHidden          : function(){},
  onVisible         : function(){},

  className         : {
    active    : 'active',
    animating : 'animating',
    dimmed    : 'dimmed',
    ios       : 'ios',
    pushable  : 'pushable',
    pushed    : 'pushed',
    right     : 'right',
    top       : 'top',
    left      : 'left',
    bottom    : 'bottom',
    visible   : 'visible'
  },

  selector: {
    fixed   : '.fixed',
    omitted : 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
    pusher  : '.pusher',
    sidebar : '.ui.sidebar'
  },

  regExp: {
    ios    : /(iPad|iPhone|iPod)/g,
    mobile : /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
  },

  error   : {
    method       : 'The method you called is not defined.',
    pusher       : 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
    movedSidebar : 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
    overlay      : 'The overlay setting is no longer supported, use animation: overlay',
    notFound     : 'There were no elements that matched the specified selector'
  }

};

// Adds easing
$.extend( $.easing, {
  easeInOutQuint: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
    return c/2*((t-=2)*t*t*t*t + 2) + b;
  }
});


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sticky = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings              = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sticky.settings, parameters)
          : $.extend({}, $.fn.sticky.settings),

        className             = settings.className,
        namespace             = settings.namespace,
        error                 = settings.error,

        eventNamespace        = '.' + namespace,
        moduleNamespace       = 'module-' + namespace,

        $module               = $(this),
        $window               = $(window),
        $container            = $module.offsetParent(),
        $scroll               = $(settings.scrollContext),
        $context,

        selector              = $module.selector || '',
        instance              = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        observer,
        module
      ;

      module      = {

        initialize: function() {

          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance');
          module.reset();
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load' + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $scroll
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module.removeData(moduleNamespace);
        },

        observeChanges: function() {
          var
            context = $context[0]
          ;
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            observer.observe(context, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        determineContext: function() {
          if(settings.context) {
            $context = $(settings.context);
          }
          else {
            $context = $container;
          }
          if($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
          }
        },

        checkErrors: function() {
          if( module.is.hidden() ) {
            module.error(error.visible, $module);
          }
          if(module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
          }
        },

        bind: {
          events: function() {
            $window
              .on('load' + eventNamespace, module.event.load)
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $scroll
              .off('scroll' + eventNamespace)
              .on('scroll' + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          }
        },

        event: {
          load: function() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
          },
          resize: function() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
          },
          scroll: function() {
            requestAnimationFrame(function() {
              $scroll.trigger('scrollchange' + eventNamespace, $scroll.scrollTop() );
            });
          },
          scrollchange: function(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
          }
        },

        refresh: function(hardRefresh) {
          module.reset();
          if(hardRefresh) {
            $container = $module.offsetParent();
          }
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
        },

        supports: {
          sticky: function() {
            var
              $element = $('<div/>'),
              element = $element.get()
            ;
            $element.addClass(className.supported);
            return($element.css('position').match('sticky'));
          }
        },

        save: {
          lastScroll: function(scroll) {
            module.lastScroll = scroll;
          },
          positions: function() {
            var
              window = {
                height: $window.height()
              },
              element = {
                margin: {
                  top    : parseInt($module.css('margin-top'), 10),
                  bottom : parseInt($module.css('margin-bottom'), 10),
                },
                offset : $module.offset(),
                width  : $module.outerWidth(),
                height : $module.outerHeight()
              },
              context = {
                offset        : $context.offset(),
                height        : $context.outerHeight(),
                bottomPadding : parseInt($context.css('padding-bottom'), 10)
              }
            ;
            module.cache = {
              fits : ( element.height < window.height ),
              window: {
                height: window.height
              },
              element: {
                margin : element.margin,
                top    : element.offset.top - element.margin.top,
                left   : element.offset.left,
                width  : element.width,
                height : element.height,
                bottom : element.offset.top + element.height
              },
              context: {
                top           : context.offset.top,
                height        : context.height,
                bottomPadding : context.bottomPadding,
                bottom        : context.offset.top + context.height - context.bottomPadding
              }
            };
            module.set.containerSize();
            module.set.size();
            module.stick();
            module.debug('Caching element positions', module.cache);
          }
        },

        get: {
          direction: function(scroll) {
            var
              direction = 'down'
            ;
            scroll = scroll || $scroll.scrollTop();
            if(module.lastScroll !== undefined) {
              if(module.lastScroll < scroll) {
                direction = 'down';
              }
              else if(module.lastScroll > scroll) {
                direction = 'up';
              }
            }
            return direction;
          },
          scrollChange: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return (module.lastScroll)
              ? (scroll - module.lastScroll)
              : 0
            ;
          },
          currentElementScroll: function() {
            return ( module.is.top() )
              ? Math.abs(parseInt($module.css('top'), 10))    || 0
              : Math.abs(parseInt($module.css('bottom'), 10)) || 0
            ;
          },

          elementScroll: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var
              element        = module.cache.element,
              window         = module.cache.window,
              delta          = module.get.scrollChange(scroll),
              maxScroll      = (element.height - window.height + settings.offset),
              elementScroll  = module.get.currentElementScroll(),
              possibleScroll = (elementScroll + delta),
              elementScroll
            ;
            if(module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
            }
            else if(possibleScroll > maxScroll ) {
              elementScroll = maxScroll;
            }
            else {
              elementScroll = possibleScroll;
            }
            return elementScroll;
          }
        },

        remove: {
          offset: function() {
            $module.css('margin-top', '');
          }
        },

        set: {
          offset: function() {
            module.verbose('Setting offset on element', settings.offset);
            $module.css('margin-top', settings.offset);
          },
          containerSize: function() {
            var
              tagName = $container.get(0).tagName
            ;
            if(tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              $container = $module.offsetParent();
            }
            else {
              if( Math.abs($container.height() - module.cache.context.height) > 5) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
                });
              }
            }
          },
          scroll: function(scroll) {
            module.debug('Setting scroll on element', scroll);
            if( module.is.top() ) {
              $module
                .css('bottom', '')
                .css('top', -scroll)
              ;
            }
            if( module.is.bottom() ) {
              $module
                .css('top', '')
                .css('bottom', scroll)
              ;
            }
          },
          size: function() {
            if(module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              $module
                .css({
                  width  : module.cache.element.width,
                  height : module.cache.element.height
                })
              ;
            }
          }
        },

        is: {
          top: function() {
            return $module.hasClass(className.top);
          },
          bottom: function() {
            return $module.hasClass(className.bottom);
          },
          initialPosition: function() {
            return (!module.is.fixed() && !module.is.bound());
          },
          hidden: function() {
            return (!$module.is(':visible'));
          },
          bound: function() {
            return $module.hasClass(className.bound);
          },
          fixed: function() {
            return $module.hasClass(className.fixed);
          }
        },

        stick: function(scroll) {
          var
            cachedPosition = scroll || $scroll.scrollTop(),
            cache          = module.cache,
            fits           = cache.fits,
            element        = cache.element,
            window         = cache.window,
            context        = cache.context,
            offset         = (module.is.bottom() && settings.pushing)
              ? settings.bottomOffset
              : settings.offset,
            scroll         = {
              top    : cachedPosition + offset,
              bottom : cachedPosition + offset + window.height
            },
            direction      = module.get.direction(scroll.top),
            elementScroll  = (fits)
              ? 0
              : module.get.elementScroll(scroll.top),

            // shorthand
            doesntFit      = !fits,
            elementVisible = (element.height !== 0)
          ;

          // save current scroll for next run
          module.save.lastScroll(scroll.top);

          if(elementVisible) {

            if( module.is.initialPosition() ) {
              if(scroll.top >= context.bottom) {
                module.debug('Element bottom of container');
                module.bindBottom();
              }
              else if(scroll.top >= element.top) {
                module.debug('Element passed, fixing element to page');
                module.fixTop();
              }
            }
            else if( module.is.fixed() ) {

              // currently fixed top
              if( module.is.top() ) {
                if( scroll.top < element.top ) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
                }
                else if( (element.height + scroll.top - elementScroll) > context.bottom ) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }

              // currently fixed bottom
              else if(module.is.bottom() ) {

                // top edge
                if( (scroll.bottom - element.height) < element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
                }
                // bottom edge
                else if(scroll.bottom > context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                }

              }
            }
            else if( module.is.bottom() ) {
              if(settings.pushing) {
                if(module.is.bound() && scroll.bottom < context.bottom ) {
                  module.debug('Fixing bottom attached element to bottom of browser.');
                  module.fixBottom();
                }
              }
              else {
                if(module.is.bound() && (scroll.top < context.bottom - element.height) ) {
                  module.debug('Fixing bottom attached element to top of browser.');
                  module.fixTop();
                }
              }
            }
          }
        },

        bindTop: function() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module
            .css('left' , '')
            .css('top' , '')
            .css('margin-bottom' , '')
            .removeClass(className.fixed)
            .removeClass(className.bottom)
            .addClass(className.bound)
            .addClass(className.top)
          ;
          settings.onTop.call(element);
          settings.onUnstick.call(element);
        },
        bindBottom: function() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module
            .css('left' , '')
            .css('top' , '')
            .css('margin-bottom' , module.cache.context.bottomPadding)
            .removeClass(className.fixed)
            .removeClass(className.top)
            .addClass(className.bound)
            .addClass(className.bottom)
          ;
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
        },

        setInitialPosition: function() {
          module.unfix();
          module.unbind();
        },


        fixTop: function() {
          module.debug('Fixing element to top of page');
          module.set.offset();
          $module
            .css('left', module.cache.element.left)
            .css('bottom' , '')
            .removeClass(className.bound)
            .removeClass(className.bottom)
            .addClass(className.fixed)
            .addClass(className.top)
          ;
          settings.onStick.call(element);
        },

        fixBottom: function() {
          module.debug('Sticking element to bottom of page');
          module.set.offset();
          $module
            .css('left', module.cache.element.left)
            .css('bottom' , '')
            .removeClass(className.bound)
            .removeClass(className.top)
            .addClass(className.fixed)
            .addClass(className.bottom)
          ;
          settings.onStick.call(element);
        },

        unbind: function() {
          module.debug('Removing absolute position on element');
          module.remove.offset();
          $module
            .removeClass(className.bound)
            .removeClass(className.top)
            .removeClass(className.bottom)
          ;
        },

        unfix: function() {
          module.debug('Removing fixed position on element');
          module.remove.offset();
          $module
            .removeClass(className.fixed)
            .removeClass(className.top)
            .removeClass(className.bottom)
          ;
          settings.onUnstick.call(element);
        },

        reset: function() {
          module.debug('Reseting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
        },

        resetCSS: function() {
          $module
            .css({
              width  : '',
              height : ''
            })
          ;
          $container
            .css({
              height: ''
            })
          ;
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sticky.settings = {

  name           : 'Sticky',
  namespace      : 'sticky',

  debug          : false,
  verbose        : false,
  performance    : false,

  pushing        : false,
  context        : false,
  scrollContext  : window,

  offset         : 0,
  bottomOffset   : 0,

  observeChanges : true,

  onReposition   : function(){},
  onScroll       : function(){},
  onStick        : function(){},
  onUnstick      : function(){},
  onTop          : function(){},
  onBottom       : function(){},

  error         : {
    container      : 'Sticky element must be inside a relative container',
    visible        : 'Element is hidden, you must call refresh after element becomes visible',
    method         : 'The method you called is not defined.',
    invalidContext : 'Context specified does not exist',
    elementSize    : 'Sticky element is larger than its container, cannot create sticky.'
  },

  className : {
    bound     : 'bound',
    fixed     : 'fixed',
    supported : 'native',
    top       : 'top',
    bottom    : 'bottom'
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.tab = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),

    settings        = ( $.isPlainObject(parameters) )
      ? $.extend(true, {}, $.fn.tab.settings, parameters)
      : $.extend({}, $.fn.tab.settings),

    moduleSelector  = $allModules.selector || '',
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    module,
    returnedValue
  ;

  $allModules
    .each(function() {
      var

        className          = settings.className,
        metadata           = settings.metadata,
        selector           = settings.selector,
        error              = settings.error,

        eventNamespace     = '.' + settings.namespace,
        moduleNamespace    = 'module-' + settings.namespace,

        $module            = $(this),

        cache              = {},
        firstLoad          = true,
        recursionDepth     = 0,

        $context,
        $tabs,
        activeTabPath,
        parameterArray,
        historyEvent,

        element         = this,
        instance        = $module.data(moduleNamespace)
      ;

      module = {

        initialize: function() {
          module.debug('Initializing tab menu item', $module);

          module.determineTabs();
          module.debug('Determining tabs', settings.context, $tabs);

          // set up automatic routing
          if(settings.auto) {
            module.set.auto();
          }

          // attach events if navigation wasn't set to window
          if( !$.isWindow( element ) ) {
            module.debug('Attaching tab activation events to element', $module);
            $module
              .on('click' + eventNamespace, module.event.click)
            ;
          }
          module.instantiate();
        },

        determineTabs: function() {
          var
            $reference
          ;

          // determine tab context
          if(settings.context === 'parent') {
            if($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element for determining parent', $reference);
            }
            else {
              $reference = $module;
            }
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
          }
          else if(settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
          }
          else {
            $context = $('body');
          }

          // find tabs
          if(settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
          }
          else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
          }
        },

        initializeHistory: function() {
          if(settings.history) {
            module.debug('Initializing page state');
            if( $.address === undefined ) {
              module.error(error.state);
              return false;
            }
            else {
              if(settings.historyType == 'state') {
                module.debug('Using HTML5 to manage state');
                if(settings.path !== false) {
                  $.address
                    .history(true)
                    .state(settings.path)
                  ;
                }
                else {
                  module.error(error.path);
                  return false;
                }
              }
              $.address
                .bind('change', module.event.history.change)
              ;
            }
          }
        },

        instantiate: function () {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying tabs', $module);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        event: {
          click: function(event) {
            var
              tabPath = $(this).data(metadata.tab)
            ;
            if(tabPath !== undefined) {
              if(settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
              }
              else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
              }
              event.preventDefault();
            }
            else {
              module.debug('No tab specified');
            }
          },
          history: {
            change: function(event) {
              var
                tabPath   = event.pathNames.join('/') || module.get.initialPath(),
                pageTitle = settings.templates.determineTitle(tabPath) || false
              ;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if(tabPath !== undefined) {
                module.changeTab(tabPath);
              }
              if(pageTitle) {
                $.address.title(pageTitle);
              }
            }
          }
        },

        refresh: function() {
          if(activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
          }
        },

        cache: {

          read: function(cacheKey) {
            return (cacheKey !== undefined)
              ? cache[cacheKey]
              : false
            ;
          },
          add: function(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
          },
          remove: function(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
          }
        },

        set: {
          auto: function() {
            var
              url = (typeof settings.path == 'string')
                ? settings.path.replace(/\/$/, '') + '/{$tab}'
                : '/{$tab}'
            ;
            module.verbose('Setting up automatic tab retrieval from server', url);
            if($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
            }
            else {
              settings.apiSettings = {
                url: url
              };
            }
          },
          state: function(state) {
            $.address.value(state);
          }
        },

        changeTab: function(tabPath) {
          var
            pushStateAvailable = (window.history && window.history.pushState),
            shouldIgnoreLoad   = (pushStateAvailable && settings.ignoreFirstLoad && firstLoad),
            remoteContent      = (settings.auto || $.isPlainObject(settings.apiSettings) ),
            // only get default path if not remote content
            pathArray = (remoteContent && !shouldIgnoreLoad)
              ? module.utilities.pathToArray(tabPath)
              : module.get.defaultPathArray(tabPath)
          ;
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function(index, tab) {
            var
              currentPathArray   = pathArray.slice(0, index + 1),
              currentPath        = module.utilities.arrayToPath(currentPathArray),

              isTab              = module.is.tab(currentPath),
              isLastIndex        = (index + 1 == pathArray.length),

              $tab               = module.get.tabElement(currentPath),
              $anchor,
              nextPathArray,
              nextPath,
              isLastTab
            ;
            module.verbose('Looking for tab', tab);
            if(isTab) {

              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath  = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if(isLastIndex) {
                isLastTab = true;
              }
              else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath      = module.utilities.arrayToPath(nextPathArray);
                isLastTab     = ( !module.is.tab(nextPath) );
                if(isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
                }
              }
              if(isLastTab && remoteContent) {
                if(!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.content.fetch(currentPath, tabPath);
                }
                else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                  settings.onTabLoad.call($tab, currentPath, parameterArray, historyEvent);
                }
                return false;
              }
              else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                }
                settings.onTabLoad.call($tab, currentPath, parameterArray, historyEvent);
              }
            }
            else if(tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              $anchor     = $('#' + tabPath + ', a[name="' + tabPath + '"]'),
              currentPath = $anchor.closest('[data-tab]').data('tab');
              $tab        = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if($anchor && $anchor.length > 0 && currentPath) {
                module.debug('No tab found, but deep anchor link present, opening parent tab');
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                }
                return false;
              }
            }
            else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
            }
          });
        },

        content: {

          fetch: function(tabPath, fullTabPath) {
            var
              $tab        = module.get.tabElement(tabPath),
              apiSettings = {
                dataType : 'html',
                on       : 'now',
                onSuccess    : function(response) {
                  module.cache.add(fullTabPath, response);
                  module.content.update(tabPath, response);
                  if(tabPath == activeTabPath) {
                    module.debug('Content loaded', tabPath);
                    module.activate.tab(tabPath);
                  }
                  else {
                    module.debug('Content loaded in background', tabPath);
                  }
                  settings.onTabInit.call($tab, tabPath, parameterArray, historyEvent);
                  settings.onTabLoad.call($tab, tabPath, parameterArray, historyEvent);
                },
                urlData: { tab: fullTabPath }
              },
              request         = $tab.api('get request') || false,
              existingRequest = ( request && request.state() === 'pending' ),
              requestSettings,
              cachedContent
            ;

            fullTabPath   = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);


            module.activate.tab(tabPath);

            if(settings.cache && cachedContent) {
              module.debug('Showing existing content', fullTabPath);
              module.content.update(tabPath, cachedContent);
              settings.onTabLoad.call($tab, tabPath, parameterArray, historyEvent);
            }
            else if(existingRequest) {
              module.debug('Content is already loading', fullTabPath);
              $tab.addClass(className.loading);
            }
            else if($.api !== undefined) {
              requestSettings = $.extend(true, {
                headers: { 'X-Remote': true }
              }, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              $tab.api( requestSettings );
            }
            else {
              module.error(error.api);
            }
          },

          update: function(tabPath, html) {
            module.debug('Updating html for', tabPath);
            var
              $tab = module.get.tabElement(tabPath)
            ;
            $tab
              .html(html)
            ;
          }
        },

        activate: {
          all: function(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
          },
          tab: function(tabPath) {
            var
              $tab = module.get.tabElement(tabPath)
            ;
            module.verbose('Showing tab content for', $tab);
            $tab
              .addClass(className.active)
              .siblings($tabs)
                .removeClass(className.active + ' ' + className.loading)
            ;
          },
          navigation: function(tabPath) {
            var
              $navigation = module.get.navElement(tabPath)
            ;
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            $navigation
              .addClass(className.active)
              .siblings($allModules)
                .removeClass(className.active + ' ' + className.loading)
            ;
          }
        },

        deactivate: {
          all: function() {
            module.deactivate.navigation();
            module.deactivate.tabs();
          },
          navigation: function() {
            $allModules
              .removeClass(className.active)
            ;
          },
          tabs: function() {
            $tabs
              .removeClass(className.active + ' ' + className.loading)
            ;
          }
        },

        is: {
          tab: function(tabName) {
            return (tabName !== undefined)
              ? ( module.get.tabElement(tabName).length > 0 )
              : false
            ;
          }
        },

        get: {
          initialPath: function() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
          },
          path: function() {
            return $.address.value();
          },
          // adds default tabs to tab path
          defaultPathArray: function(tabPath) {
            return module.utilities.pathToArray( module.get.defaultPath(tabPath) );
          },
          defaultPath: function(tabPath) {
            var
              $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),
              defaultTab  = $defaultNav.data(metadata.tab) || false
            ;
            if( defaultTab ) {
              module.debug('Found default tab', defaultTab);
              if(recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
              }
              module.error(error.recursion);
            }
            else {
              module.debug('No default tabs found for', tabPath, $tabs);
            }
            recursionDepth = 0;
            return tabPath;
          },
          navElement: function(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
          },
          tabElement: function(tabPath) {
            var
              $fullPathTab,
              $simplePathTab,
              tabPathArray,
              lastTab
            ;
            tabPath        = tabPath || activeTabPath;
            tabPathArray   = module.utilities.pathToArray(tabPath);
            lastTab        = module.utilities.last(tabPathArray);
            $fullPathTab   = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
            return ($fullPathTab.length > 0)
              ? $fullPathTab
              : $simplePathTab
            ;
          },
          tab: function() {
            return activeTabPath;
          }
        },

        utilities: {
          filterArray: function(keepArray, removeArray) {
            return $.grep(keepArray, function(keepValue) {
              return ( $.inArray(keepValue, removeArray) == -1);
            });
          },
          last: function(array) {
            return $.isArray(array)
              ? array[ array.length - 1]
              : false
            ;
          },
          pathToArray: function(pathName) {
            if(pathName === undefined) {
              pathName = activeTabPath;
            }
            return typeof pathName == 'string'
              ? pathName.split('/')
              : [pathName]
            ;
          },
          arrayToPath: function(pathArray) {
            return $.isArray(pathArray)
              ? pathArray.join('/')
              : false
            ;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  if(module && !methodInvoked) {
    module.initializeHistory();
  }
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;

};

// shortcut for tabbed content with no defined navigation
$.tab = function() {
  $(window).tab.apply(this, arguments);
};

$.fn.tab.settings = {

  name            : 'Tab',
  namespace       : 'tab',

  debug           : false,
  verbose         : true,
  performance     : true,

  auto            : false,  // uses pjax style endpoints fetching content from same url with remote-content headers
  history         : false,  // use browser history
  historyType     : 'hash', // #/ or html5 state
  path            : false,  // base path of url

  context         : false,  // specify a context that tabs must appear inside
  childrenOnly    : false,  // use only tabs that are children of context
  maxDepth        : 25,     // max depth a tab can be nested

  alwaysRefresh   : false,  // load tab content new every tab click
  cache           : true,   // cache the content requests to pull locally
  ignoreFirstLoad : false,  // don't load remote content on first load
  apiSettings     : false,  // settings for api call

  onTabInit    : function(tabPath, parameterArray, historyEvent) {}, // called first time loaded
  onTabLoad    : function(tabPath, parameterArray, historyEvent) {}, // called on every load

  templates    : {
    determineTitle: function(tabArray) {} // returns page title for path
  },

  error: {
    api        : 'You attempted to load content without API module',
    method     : 'The method you called is not defined',
    missingTab : 'Activated tab cannot be found for this context.',
    noContent  : 'The tab you specified is missing a content url.',
    path       : 'History enabled, but no path was specified',
    recursion  : 'Max recursive depth reached',
    state      : 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
  },

  metadata : {
    tab    : 'tab',
    loaded : 'loaded',
    promise: 'promise'
  },

  className   : {
    loading : 'loading',
    active  : 'active'
  },

  selector    : {
    tabs : '.ui.tab',
    ui   : '.ui'
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.transition = function() {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    moduleArguments = arguments,
    query           = moduleArguments[0],
    queryArguments  = [].slice.call(arguments, 1),
    methodInvoked   = (typeof query === 'string'),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function(index) {
      var
        $module  = $(this),
        element  = this,

        // set at run time
        settings,
        instance,

        error,
        className,
        metadata,
        animationStart,
        animationEnd,
        animationName,

        namespace,
        moduleNamespace,
        eventNamespace,
        module
      ;

      module = {

        initialize: function() {

          // get full settings
          settings        = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className       = settings.className;
          error           = settings.error;
          metadata        = settings.metadata;

          // define namespace
          eventNamespace  = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance        = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd    = module.get.animationEndEvent();
          animationName   = module.get.animationName();
          animationStart  = module.get.animationStartEvent();

          if(methodInvoked) {
            methodInvoked = module.invoke(query);
          }

          // method not invoked, lets run an animation
          if(methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if(settings.interval) {
              module.delay(settings.animate);
            }
            else  {
              module.animate();
            }
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
        },

        forceRepaint: function() {
          module.verbose('Forcing element repaint');
          var
            $parentElement = $module.parent(),
            $nextElement = $module.next()
          ;
          if($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
          }
          else {
            $module.detach().insertBefore($nextElement);
          }
        },

        repaint: function() {
          module.verbose('Repainting element');
          var
            fakeAssignment = element.offsetWidth
          ;
        },

        delay: function(interval) {
          var
            isReverse = (settings.reverse === true),
            shouldReverse = (settings.reverse == 'auto' && module.get.direction() == className.outward),
            delay
          ;
          interval = (typeof interval !== undefined)
            ? interval
            : settings.interval
          ;
          delay = (isReverse || shouldReverse)
            ? ($allModules.length - index) * settings.interval
            : index * settings.interval
          ;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
        },

        animate: function(overrideSettings) {
          settings = overrideSettings || settings;
          if(!module.is.supported()) {
            module.error(error.support);
            return false;
          }
          module.debug('Preparing animation', settings.animation);
          if(module.is.animating()) {
            if(settings.queue) {
              if(!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              }
              else {
                module.queue(settings.animation);
              }
              return false;
            }
            else if(!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
            }
            else {
              module.debug('New animation started, completing previous early', settings.animation);
              module.complete();
            }
          }
          if( module.can.animate() ) {
            module.set.animating(settings.animation);
          }
          else {
            module.error(error.noAnimation, settings.animation, element);
          }
        },

        reset: function() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
        },

        queue: function(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module
            .one(animationEnd + '.queue' + eventNamespace, function() {
              module.queuing = false;
              module.repaint();
              module.animate.apply(this, settings);
            })
          ;
        },

        complete: function (event) {
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if(!module.is.looping()) {
            if( module.is.outward() ) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
              settings.onHide.call(this);
            }
            else if( module.is.inward() ) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
              settings.onShow.call(this);
            }
            else {
              module.restore.conditions();
            }
            module.remove.animation();
            module.remove.animating();
          }
          settings.onComplete.call(this);
        },

        has: {
          direction: function(animation) {
            var
              hasDirection = false
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function(index, word){
                if(word === className.inward || word === className.outward) {
                  hasDirection = true;
                }
              });
            }
            return hasDirection;
          },
          inlineDisplay: function() {
            var
              style = $module.attr('style') || ''
            ;
            return $.isArray(style.match(/display.*?;/, ''));
          }
        },

        set: {
          animating: function(animation) {
            animation = animation || settings.animation;
            if(!module.is.animating()) {
              module.save.conditions();
            }
            module.remove.direction();
            module.remove.completeCallback();
            if(module.can.transition() && !module.has.direction()) {
              module.set.direction();
            }
            module.remove.hidden();
            module.set.display();
            $module
              .addClass(className.animating + ' ' + className.transition + ' ' + animation)
              .addClass(animation)
              .one(animationEnd + '.complete' + eventNamespace, module.complete)
            ;
            if(settings.useFailSafe) {
              module.add.failSafe();
            }
            module.set.duration(settings.duration);
            settings.onStart.call(this);
            module.debug('Starting tween', animation, $module.attr('class'));
          },
          duration: function(animationName, duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            if(duration || duration === 0) {
              module.verbose('Setting animation duration', duration);
              $module
                .css({
                  '-webkit-animation-duration': duration,
                  '-moz-animation-duration': duration,
                  '-ms-animation-duration': duration,
                  '-o-animation-duration': duration,
                  'animation-duration':  duration
                })
              ;
            }
          },
          display: function() {
            var
              style              = module.get.style(),
              displayType        = module.get.displayType(),
              overrideStyle      = style + 'display: ' + displayType + ' !important;'
            ;
            $module.css('display', '');
            module.refresh();
            if( $module.css('display') !== displayType ) {
              module.verbose('Setting inline visibility to', displayType);
              $module
                .attr('style', overrideStyle)
              ;
            }
          },
          direction: function() {
            if($module.is(':visible') && !module.is.hidden()) {
              module.debug('Automatically determining the direction of animation', 'Outward');
              $module
                .removeClass(className.inward)
                .addClass(className.outward)
              ;
            }
            else {
              module.debug('Automatically determining the direction of animation', 'Inward');
              $module
                .removeClass(className.outward)
                .addClass(className.inward)
              ;
            }
          },
          looping: function() {
            module.debug('Transition set to loop');
            $module
              .addClass(className.looping)
            ;
          },
          hidden: function() {
            if(!module.is.hidden()) {
              $module
                .addClass(className.transition)
                .addClass(className.hidden)
              ;
            }
            if($module.css('display') !== 'none') {
              module.verbose('Overriding default display to hide element');
              $module
                .css('display', 'none')
              ;
            }
          },
          visible: function() {
            $module
              .addClass(className.transition)
              .addClass(className.visible)
            ;
          }
        },

        save: {
          displayType: function(displayType) {
            $module.data(metadata.displayType, displayType);
          },
          transitionExists: function(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
          },
          conditions: function() {
            var
              clasName = $module.attr('class') || false,
              style    = $module.attr('style') || ''
            ;
            $module.removeClass(settings.animation);
            module.remove.direction();
            module.cache = {
              className : $module.attr('class'),
              style     : module.get.style()
            };
            module.verbose('Saving original attributes', module.cache);
          }
        },

        restore: {
          conditions: function() {
            if(module.cache === undefined) {
              return false;
            }
            if(module.cache.className) {
              $module.attr('class', module.cache.className);
            }
            else {
              $module.removeAttr('class');
            }
            if(module.cache.style) {
              module.verbose('Restoring original style attribute', module.cache.style);
              $module.attr('style', module.cache.style);
            }
            else {
              module.verbose('Clearing style attribute');
              $module.removeAttr('style');
            }
            module.verbose('Restoring original attributes', module.cache);
          }
        },

        add: {
          failSafe: function() {
            var
              duration = module.get.duration()
            ;
            module.timer = setTimeout(function() {
              $module.trigger(animationEnd);
            }, duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
          }
        },

        remove: {
          animating: function() {
            $module.removeClass(className.animating);
          },
          animation: function() {
            $module
              .css({
                '-webkit-animation' : '',
                '-moz-animation'    : '',
                '-ms-animation'     : '',
                '-o-animation'      : '',
                'animation'         : ''
              })
            ;
          },
          animationCallbacks: function() {
            module.remove.queueCallback();
            module.remove.completeCallback();
          },
          queueCallback: function() {
            $module.off('.queue' + eventNamespace)
          },
          completeCallback: function() {
            $module.off('.complete' + eventNamespace);
          },
          display: function() {
            $module.css('display', '');
          },
          direction: function() {
            $module
              .removeClass(className.inward)
              .removeClass(className.outward)
            ;
          },
          failSafe: function() {
            module.verbose('Removing fail safe timer', module.timer);
            if(module.timer) {
              clearTimeout(module.timer);
            }
          },
          hidden: function() {
            $module.removeClass(className.hidden);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          looping: function() {
            module.debug('Transitions are no longer looping');
            if( module.is.looping() ) {
              module.reset();
              $module
                .removeClass(className.looping)
              ;
            }
          },
          transition: function() {
            $module
              .removeClass(className.visible)
              .removeClass(className.hidden)
            ;
          }
        },
        get: {
          settings: function(animation, duration, onComplete) {
            // single settings object
            if(typeof animation == 'object') {
              return $.extend(true, {}, $.fn.transition.settings, animation);
            }
            // all arguments provided
            else if(typeof onComplete == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : onComplete,
                duration   : duration
              });
            }
            // only duration provided
            else if(typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation,
                duration  : duration
              });
            }
            // duration is actually settings object
            else if(typeof duration == 'object') {
              return $.extend({}, $.fn.transition.settings, duration, {
                animation : animation
              });
            }
            // duration is actually callback
            else if(typeof duration == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : duration
              });
            }
            // only animation provided
            else {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation
              });
            }
            return $.fn.transition.settings;
          },
          direction: function(animation) {
            // quickest manually specified direction
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function(index, word){
                if(word === className.inward) {
                  return className.inward;
                }
                else if(word === className.outward) {
                  return className.outward;
                }
              });
            }
            // slower backup
            if( !module.can.transition() ) {
              return 'static';
            }
            if($module.is(':visible') && !module.is.hidden()) {
              return className.outward;
            }
            else {
              return className.inward;
            }
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            if(duration === false) {
              duration = $module.css('animation-duration') || 0;
            }
            return (typeof duration === 'string')
              ? (duration.indexOf('ms') > -1)
                ? parseFloat(duration)
                : parseFloat(duration) * 1000
              : duration
            ;
          },
          displayType: function() {
            if(settings.displayType) {
              return settings.displayType;
            }
            if($module.data(metadata.displayType) === undefined) {
              // create fake element to determine display state
              module.can.transition(true);
            }
            return $module.data(metadata.displayType);
          },
          style: function() {
            var
              style = $module.attr('style') || ''
            ;
            return style.replace(/display.*?;/, '');
          },
          transitionExists: function(animation) {
            return $.fn.transition.exists[animation];
          },
          animationName: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationName',
                'OAnimation'      :'oAnimationName',
                'MozAnimation'    :'mozAnimationName',
                'WebkitAnimation' :'webkitAnimationName'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          },
          animationStartEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationstart',
                'OAnimation'      :'oAnimationStart',
                'MozAnimation'    :'mozAnimationStart',
                'WebkitAnimation' :'webkitAnimationStart'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          },
          animationEndEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationend',
                'OAnimation'      :'oAnimationEnd',
                'MozAnimation'    :'mozAnimationEnd',
                'WebkitAnimation' :'webkitAnimationEnd'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          }

        },

        can: {
          transition: function(forced) {
            var
              elementClass      = $module.attr('class'),
              tagName           = $module.prop('tagName'),
              animation         = settings.animation,
              transitionExists  = module.get.transitionExists(animation),
              $clone,
              currentAnimation,
              inAnimation,
              directionExists,
              displayType
            ;
            if( transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              $clone = $('<' + tagName + ' />').addClass( elementClass ).insertAfter($module);
              currentAnimation = $clone
                .addClass(animation)
                .removeClass(className.inward)
                .removeClass(className.outward)
                .addClass(className.animating)
                .addClass(className.transition)
                .css(animationName)
              ;
              inAnimation = $clone
                .addClass(className.inward)
                .css(animationName)
              ;
              displayType = $clone
                .attr('class', elementClass)
                .removeAttr('style')
                .removeClass(className.hidden)
                .removeClass(className.visible)
                .show()
                .css('display')
              ;
              module.verbose('Determining final display state', displayType);
              module.save.displayType(displayType);

              $clone.remove();
              if(currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
              }
              else if(currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
              }
              else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
              }
              module.save.transitionExists(animation, directionExists);
            }
            return (transitionExists !== undefined)
              ? transitionExists
              : directionExists
            ;
          },
          animate: function() {
            // can transition does not return a value if animation does not exist
            return (module.can.transition() !== undefined);
          }
        },

        is: {
          animating: function() {
            return $module.hasClass(className.animating);
          },
          inward: function() {
            return $module.hasClass(className.inward);
          },
          outward: function() {
            return $module.hasClass(className.outward);
          },
          looping: function() {
            return $module.hasClass(className.looping);
          },
          occurring: function(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return ( $module.filter(animation).length > 0 );
          },
          visible: function() {
            return $module.is(':visible');
          },
          hidden: function() {
            return $module.css('visibility') === 'hidden';
          },
          supported: function() {
            return(animationName !== false && animationEnd !== false);
          }
        },

        hide: function() {
          module.verbose('Hiding element');
          if( module.is.animating() ) {
            module.reset();
          }
          module.remove.display();
          module.remove.visible();
          module.set.hidden();
          module.repaint();
        },

        show: function(display) {
          module.verbose('Showing element', display);
          module.remove.hidden();
          module.set.visible();
          module.set.display();
          module.repaint();
        },

        toggle: function() {
          if( module.is.visible() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        stop: function() {
          module.debug('Stopping current animation');
          $module.trigger(animationEnd);
        },

        stopAll: function() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.trigger(animationEnd);
        },

        clear: {
          queue: function() {
            module.debug('Clearing animation queue')
            module.remove.queueCallback();
          }
        },

        enable: function() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
        },

        disable: function() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        // modified for transition to return invoke success
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }

          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return (found !== undefined)
            ? found
            : false
          ;
        }
      };
      module.initialize();
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

// Records if CSS transition is available
$.fn.transition.exists = {};

$.fn.transition.settings = {

  // module info
  name          : 'Transition',

  // debug content outputted to console
  debug         : false,

  // verbose debug output
  verbose       : true,

  // performance data output
  performance   : true,

  // event namespace
  namespace     : 'transition',

  // delay between animations in group
  interval      : 0,

  // whether group animations should be reversed
  reverse       : 'auto',

  // animation callback event
  onStart       : function() {},
  onComplete    : function() {},
  onShow        : function() {},
  onHide        : function() {},

  // whether timeout should be used to ensure callback fires in cases animationend does not
  useFailSafe   : true,

  // delay in ms for fail safe
  failSafeDelay : 100,

  // whether EXACT animation can occur twice in a row
  allowRepeats  : false,

  // Override final display type on visible
  displayType   : false,

  // animation duration
  animation     : 'fade',
  duration      : false,

  // new animations will occur after previous ones
  queue         : true,

  metadata : {
    displayType: 'display'
  },

  className   : {
    animating  : 'animating',
    disabled   : 'disabled',
    hidden     : 'hidden',
    inward     : 'in',
    loading    : 'loading',
    looping    : 'looping',
    outward    : 'out',
    transition : 'transition',
    visible    : 'visible'
  },

  // possible errors
  error: {
    noAnimation : 'There is no css animation matching the one you specified.',
    repeated    : 'That animation is already occurring, cancelling repeated animation',
    method      : 'The method you called is not defined',
    support     : 'This browser does not support CSS animations'
  }

};


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.video = function(parameters) {

  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.video.settings, parameters)
          : $.extend({}, $.fn.video.settings),

        selector        = settings.selector,
        className       = settings.className,
        error           = settings.error,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),
        $module         = $(this),
        $placeholder    = $module.find(selector.placeholder),
        $playButton     = $module.find(selector.playButton),
        $embed          = $module.find(selector.embed),

        element         = this,
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing video');
          module.create();
          $placeholder
            .on('click' + eventNamespace, module.play)
          ;
          $playButton
            .on('click' + eventNamespace, module.play)
          ;
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        create: function() {
          var
            image = $module.data(metadata.image),
            html = templates.video(image)
          ;
          $module.html(html);
          module.refresh();
          if(!image) {
            module.play();
          }
          module.debug('Creating html for video element', html);
        },

        destroy: function() {
          module.verbose('Destroying previous instance of video');
          module.reset();
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
          $placeholder
            .off(eventNamespace)
          ;
          $playButton
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $placeholder    = $module.find(selector.placeholder);
          $playButton     = $module.find(selector.playButton);
          $embed          = $module.find(selector.embed);
        },

        // sets new video
        change: function(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module
            .data(metadata.source, source)
            .data(metadata.id, id)
            .data(metadata.url, url)
          ;
          settings.onChange();
        },

        // clears video embed
        reset: function() {
          module.debug('Clearing video embed and showing placeholder');
          $module
            .removeClass(className.active)
          ;
          $embed
            .html(' ')
          ;
          $placeholder
            .show()
          ;
          settings.onReset();
        },

        // plays current video
        play: function() {
          module.debug('Playing video');
          var
            source = $module.data(metadata.source) || false,
            url    = $module.data(metadata.url)    || false,
            id     = $module.data(metadata.id)     || false
          ;
          $embed
            .html( module.generate.html(source, id, url) )
          ;
          $module
            .addClass(className.active)
          ;
          settings.onPlay();
        },

        get: {
          source: function(url) {
            if(typeof url !== 'string') {
              return false;
            }
            if(url.search('youtube.com') !== -1) {
              return 'youtube';
            }
            else if(url.search('vimeo.com') !== -1) {
              return 'vimeo';
            }
            return false;
          },
          id: function(url) {
            if(url.match(settings.regExp.youtube)) {
              return url.match(settings.regExp.youtube)[1];
            }
            else if(url.match(settings.regExp.vimeo)) {
              return url.match(settings.regExp.vimeo)[2];
            }
            return false;
          }
        },

        generate: {
          // generates iframe html
          html: function(source, id, url) {
            module.debug('Generating embed html');
            var
              html
            ;
            // allow override of settings
            source = source || settings.source;
            id     = id     || settings.id;
            if((source && id) || url) {
              if(!source || !id) {
                source = module.get.source(url);
                id     = module.get.id(url);
              }
              if(source == 'vimeo') {
                html = ''
                  + '<iframe src="//player.vimeo.com/video/' + id + '?=' + module.generate.url(source) + '"'
                  + ' width="100%" height="100%"'
                  + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'
                ;
              }
              else if(source == 'youtube') {
                html = ''
                  + '<iframe src="//www.youtube.com/embed/' + id + '?=' + module.generate.url(source) + '"'
                  + ' width="100%" height="100%"'
                  + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'
                ;
              }
            }
            else {
              module.error(error.noVideo);
            }
            return html;
          },

          // generate url parameters
          url: function(source) {
            var
              api      = (settings.api)
                ? 1
                : 0,
              autoplay = (settings.autoplay === 'auto')
                ? ($module.data('image') !== undefined)
                : settings.autoplay,
              hd       = (settings.hd)
                ? 1
                : 0,
              showUI   = (settings.showUI)
                ? 1
                : 0,
              // opposite used for some params
              hideUI   = !(settings.showUI)
                ? 1
                : 0,
              url = ''
            ;
            if(source == 'vimeo') {
              url = ''
                +      'api='      + api
                + '&amp;title='    + showUI
                + '&amp;byline='   + showUI
                + '&amp;portrait=' + showUI
                + '&amp;autoplay=' + autoplay
              ;
              if(settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            if(source == 'ustream') {
              url = ''
                + 'autoplay=' + autoplay
              ;
              if(settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            else if(source == 'youtube') {
              url = ''
                + 'enablejsapi='      + api
                + '&amp;autoplay='    + autoplay
                + '&amp;autohide='    + hideUI
                + '&amp;hq='          + hd
                + '&amp;modestbranding=1'
              ;
              if(settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            return url;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.video.settings = {

  name        : 'Video',
  namespace   : 'video',

  debug       : false,
  verbose     : true,
  performance : true,

  metadata    : {
    id     : 'id',
    image  : 'image',
    source : 'source',
    url    : 'url'
  },

  source      : false,
  url         : false,
  id          : false,

  aspectRatio : (16/9),

  onPlay   : function(){},
  onReset  : function(){},
  onChange : function(){},

  // callbacks not coded yet (needs to use jsapi)
  onPause  : function() {},
  onStop   : function() {},

  width    : 'auto',
  height   : 'auto',

  autoplay : 'auto',
  color    : '#442359',
  hd       : true,
  showUI   : false,
  api      : true,

  regExp : {
    youtube : /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/,
    vimeo   : /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/
  },

  error      : {
    noVideo     : 'No video specified',
    method      : 'The method you called is not defined'
  },

  className   : {
    active      : 'active'
  },

  selector    : {
    embed       : '.embed',
    placeholder : '.placeholder',
    playButton  : '.play'
  }
};

$.fn.video.settings.templates = {
  video: function(image) {
    var
      html = ''
    ;
    if(image) {
      html += ''
        + '<i class="video play icon"></i>'
        + '<img class="placeholder" src="' + image + '">'
      ;
    }
    html += '<div class="embed"></div>';
    return html;
  }
};


})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.api = $.fn.api = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),
    moduleSelector = $allModules.selector || '',
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.api.settings, parameters)
          : $.extend({}, $.fn.api.settings),

        // internal aliases
        namespace       = settings.namespace,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,
        className       = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // element that creates request
        $module         = $(this),
        $form           = $module.closest(selector.form),

        // context used for state
        $context        = (settings.stateContext)
          ? $(settings.stateContext)
          : $module,

        // request details
        ajaxSettings,
        requestSettings,
        url,
        data,

        // standard module
        element         = this,
        context         = $context.get(),
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          var
            triggerEvent = module.get.event()
          ;
          // bind events
          if(!methodInvoked) {
            if( triggerEvent ) {
              module.debug('Attaching API events to element', triggerEvent);
              $module
                .on(triggerEvent + eventNamespace, module.event.trigger)
              ;
            }
            else if(settings.on == 'now') {
              module.debug('Querying API now', triggerEvent);
              module.query();
            }
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        query: function() {

          if(module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
          }
          // determine if an api event already occurred
          if(module.is.loading() && settings.throttle === 0 ) {
            module.debug('Cancelling request, previous request is still pending');
            return;
          }

          // pass element metadata to url (value, text)
          if(settings.defaultData) {
            $.extend(true, settings.urlData, module.get.defaultData());
          }

          // Add form content
          if(settings.serializeForm !== false || $context.is('form')) {
            if(settings.serializeForm == 'json') {
              $.extend(true, settings.data, module.get.formData());
            }
            else {
              settings.data = module.get.formData();
            }
          }

          // call beforesend and get any settings changes
          requestSettings         = module.get.settings();

          // check if before send cancelled request
          if(requestSettings === false) {
            module.cancelled = true;
            module.error(error.beforeSend);
            return;
          }
          else {
            module.cancelled = false;
          }

          if(settings.url) {
            // override with url if specified
            module.debug('Using specified url', url);
            url = module.add.urlData( settings.url );
          }
          else {
            // otherwise find url from api endpoints
            url = module.add.urlData( module.get.templateURL() );
            module.debug('Added URL Data to url', url);
          }

          // exit conditions reached, missing url parameters
          if( !url ) {
            if( module.is.form() ) {
              url = $module.attr('action') || '';
              module.debug('No url or action specified, defaulting to form action', url);
            }
            else {
              module.error(error.missingURL, settings.action);
              return;
            }
          }

          // add loading state
          module.set.loading();

          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {}, settings, {
            type       : settings.method || settings.type,
            data       : data,
            url        : settings.base + url,
            beforeSend : settings.beforeXHR,
            success    : function() {},
            failure    : function() {},
            complete   : function() {}
          });

          module.debug('Querying URL', ajaxSettings.url);
          module.debug('Sending data', data, ajaxSettings.method);
          module.verbose('Using AJAX settings', ajaxSettings);

          if( module.is.loading() ) {
            // throttle additional requests
            module.timer = setTimeout(function() {
              module.request = module.create.request();
              module.xhr     = module.create.xhr();
              settings.onRequest.call(context, module.request, module.xhr);
            }, settings.throttle);
          }
          else {
            // immediately on first request
            module.request = module.create.request();
            module.xhr     = module.create.xhr();
            settings.onRequest.call(context, module.request, module.xhr);
          }

        },


        is: {
          disabled: function() {
            return ($module.filter(settings.filter).length > 0);
          },
          form: function() {
            return $module.is('form');
          },
          input: function() {
            return $module.is('input');
          },
          loading: function() {
            return (module.request && module.request.state() == 'pending');
          }
        },

        was: {
          cancelled: function() {
            return (module.cancelled || false);
          },
          succesful: function() {
            return (module.request && module.request.state() == 'resolved');
          },
          failure: function() {
            return (module.request && module.request.state() == 'rejected');
          },
          complete: function() {
            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );
          }
        },

        add: {
          urlData: function(url, urlData) {
            var
              requiredVariables,
              optionalVariables
            ;
            if(url) {
              requiredVariables = url.match(settings.regExp.required);
              optionalVariables = url.match(settings.regExp.optional);
              urlData           = urlData || settings.urlData;
              if(requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function(index, templatedString) {
                  var
                    // allow legacy {$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(2, templatedString.length - 3)
                      : templatedString.substr(1, templatedString.length - 2),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // remove value
                  if(value === undefined) {
                    module.error(error.requiredParameter, variable, url);
                    url = false;
                    return false;
                  }
                  else {
                    module.verbose('Found required variable', variable, value);
                    url = url.replace(templatedString, value);
                  }
                });
              }
              if(optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function(index, templatedString) {
                  var
                    // allow legacy {/$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(3, templatedString.length - 4)
                      : templatedString.substr(2, templatedString.length - 3),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // optional replacement
                  if(value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                  }
                  else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if(url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                    }
                    else {
                      url = url.replace(templatedString, '');
                    }
                  }
                });
              }
            }
            return url;
          }
        },

        event: {
          trigger: function(event) {
            module.query();
            if(event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
            }
          },
          xhr: {
            always: function() {
              // calculate if loading time was below minimum threshold
            },
            done: function(response) {
              var
                context      = this,
                elapsedTime  = (new Date().getTime() - time),
                timeLeft     = (settings.loadingDuration - elapsedTime)
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              setTimeout(function() {
                module.request.resolveWith(context, [response]);
              }, timeLeft);
            },
            fail: function(xhr, status, httpMessage) {
              var
                context     = this,
                elapsedTime = (new Date().getTime() - time),
                timeLeft    = (settings.loadingDuration - elapsedTime)
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              // page triggers abort on navigation, dont show error
              setTimeout(function() {
                if(status !== 'abort') {
                  module.request.rejectWith(context, [xhr, status, httpMessage]);
                }
                else {
                  module.reset();
                }
              }, timeLeft);
            }
          },
          request: {
            complete: function(response) {
              module.remove.loading();
              settings.onComplete.call(context, response, $module);
            },
            done: function(response) {
              module.debug('API Response Received', response);
              if(settings.dataType == 'json') {
                if( $.isFunction(settings.successTest) ) {
                  module.debug('Checking JSON returned success', settings.successTest, response);
                  if( settings.successTest(response) ) {
                    settings.onSuccess.call(context, response, $module);
                  }
                  else {
                    module.debug('JSON test specified by user and response failed', response);
                    settings.onFailure.call(context, response, $module);
                  }
                }
                else {
                  settings.onSuccess.call(context, response, $module);
                }
              }
              else {
                settings.onSuccess.call(context, response, $module);
              }
            },
            error: function(xhr, status, httpMessage) {
              var
                errorMessage = (settings.error[status] !== undefined)
                  ? settings.error[status]
                  : httpMessage,
                response
              ;
              // let em know unless request aborted
              if(xhr !== undefined) {
                // readyState 4 = done, anything less is not really sent
                if(xhr.readyState !== undefined && xhr.readyState == 4) {

                  // if http status code returned and json returned error, look for it
                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);
                  }
                  else {
                    if(status == 'error' && settings.dataType == 'json') {
                      try {
                        response = $.parseJSON(xhr.responseText);
                        if(response && response.error !== undefined) {
                          errorMessage = response.error;
                        }
                      }
                      catch(e) {
                        module.error(error.JSONParse);
                      }
                    }
                  }
                  module.remove.loading();
                  module.set.error();
                  // show error state only for duration specified in settings
                  if(settings.errorDuration) {
                    setTimeout(module.remove.error, settings.errorDuration);
                  }
                  module.debug('API Request error:', errorMessage);
                  settings.onError.call(context, errorMessage, $module);
                }
                else {
                  settings.onAbort.call(context, errorMessage, $module);
                  module.debug('Request Aborted (Most likely caused by page change or CORS Policy)', status, httpMessage);
                }
              }
            }
          }
        },

        create: {
          request: function() {
            return $.Deferred()
              .always(module.event.request.complete)
              .done(module.event.request.done)
              .fail(module.event.request.error)
            ;
          },
          xhr: function() {
            return $.ajax(ajaxSettings)
              .always(module.event.xhr.always)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;
          }
        },

        set: {
          error: function() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
          },
          loading: function() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
          }
        },

        remove: {
          error: function() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
          },
          loading: function() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
          }
        },

        get: {
          request: function() {
            return module.request || false;
          },
          xhr: function() {
            return module.xhr || false;
          },
          settings: function() {
            var
              runSettings
            ;
            runSettings = settings.beforeSend.call($module, settings);
            if(runSettings) {
              if(runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
              }
              if(runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
              }
              if(runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
              }
            }
            if(runSettings === undefined) {
              module.error(error.noReturnedValue);
            }
            return (runSettings !== undefined)
              ? runSettings
              : settings
            ;
          },
          defaultData: function() {
            var
              data = {}
            ;
            if( !$.isWindow(element) ) {
              if( module.is.input() ) {
                data.value = $module.val();
              }
              else if( !module.is.form() ) {

              }
              else {
                data.text = $module.text();
              }
            }
            return data;
          },
          event: function() {
            if( $.isWindow(element) || settings.on == 'now' ) {
              module.debug('API called without element, no events attached');
              return false;
            }
            else if(settings.on == 'auto') {
              if( $module.is('input') ) {
                return (element.oninput !== undefined)
                  ? 'input'
                  : (element.onpropertychange !== undefined)
                    ? 'propertychange'
                    : 'keyup'
                ;
              }
              else if( $module.is('form') ) {
                return 'submit';
              }
              else {
                return 'click';
              }
            }
            else {
              return settings.on;
            }
          },
          formData: function() {
            var
              formData
            ;
            if($module.serializeObject !== undefined) {
              formData = $form.serializeObject();
            }
            else {
              module.error(error.missingSerialize);
              formData = $form.serialize();
            }
            module.debug('Retrieved form data', formData);
            return formData;
          },
          templateURL: function(action) {
            var
              url
            ;
            action = action || $module.data(metadata.action) || settings.action || false;
            if(action) {
              module.debug('Looking up url for action', action, settings.api);
              if(settings.api[action] !== undefined) {
                url = settings.api[action];
                module.debug('Found template url', url);
              }
              else if( !module.is.form() ) {
                module.error(error.missingAction, settings.action, settings.api);
              }
            }
            return url;
          }
        },

        abort: function() {
          var
            xhr = module.get.xhr()
          ;
          if( xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
            module.request.rejectWith(settings.apiSettings);
          }
        },

        // reset state
        reset: function() {
          module.remove.error();
          module.remove.loading();
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.api.settings = {

  name            : 'API',
  namespace       : 'api',

  debug           : true,
  verbose         : false,
  performance     : true,

  // event binding
  on              : 'auto',
  filter          : '.disabled',
  stateContext    : false,

  // state
  loadingDuration : 0,
  errorDuration   : 2000,

  // templating
  action          : false,
  url             : false,
  base            : '',

  // data
  urlData         : {},

  // ui
  defaultData     : true,
  serializeForm   : false,
  throttle        : 0,

  // jQ ajax
  method          : 'get',
  data            : {},
  dataType        : 'json',

  // callbacks
  beforeSend  : function(settings) { return settings; },
  beforeXHR   : function(xhr) {},

  onRequest   : function(promise, xhr) {},
  onSuccess   : function(response, $module) {},
  onComplete  : function(response, $module) {},
  onFailure   : function(errorMessage, $module) {},
  onError     : function(errorMessage, $module) {},
  onAbort     : function(errorMessage, $module) {},

  successTest : false,

  // errors
  error : {
    beforeSend        : 'The before send function has aborted the request',
    error             : 'There was an error with your request',
    exitConditions    : 'API Request Aborted. Exit conditions met',
    JSONParse         : 'JSON could not be parsed during error handling',
    legacyParameters  : 'You are using legacy API success callback names',
    method            : 'The method you called is not defined',
    missingAction     : 'API action used but no url was defined',
    missingSerialize  : 'Required dependency jquery-serialize-object missing, using basic serialize',
    missingURL        : 'No URL specified for api event',
    noReturnedValue   : 'The beforeSend callback must return a settings object, beforeSend ignored.',
    parseError        : 'There was an error parsing your request',
    requiredParameter : 'Missing a required URL parameter: ',
    statusMessage     : 'Server gave an error: ',
    timeout           : 'Your request timed out'
  },

  regExp  : {
    required: /\{\$*[A-z0-9]+\}/g,
    optional: /\{\/\$*[A-z0-9]+\}/g,
  },

  className: {
    loading : 'loading',
    error   : 'error'
  },

  selector: {
    form: 'form'
  },

  metadata: {
    action  : 'action'
  }
};


$.api.settings.api = {};


})( jQuery, window , document );
/*!
 * # Semantic UI 1.12.3 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.state = function(parameters) {
  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    hasTouch        = ('ontouchstart' in document.documentElement),
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.state.settings, parameters)
          : $.extend({}, $.fn.state.settings),

        error           = settings.error,
        metadata        = settings.metadata,
        className       = settings.className,
        namespace       = settings.namespace,
        states          = settings.states,
        text            = settings.text,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if(settings.automatic) {
            module.add.defaults();
          }

          // bind events with delegated events
          if(settings.context && moduleSelector !== '') {
            $(settings.context)
              .on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text)
              .on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text)
              .on(moduleSelector, 'click'      + eventNamespace, module.toggle.state)
            ;
          }
          else {
            $module
              .on('mouseenter' + eventNamespace, module.change.text)
              .on('mouseleave' + eventNamespace, module.reset.text)
              .on('click'      + eventNamespace, module.toggle.state)
            ;
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
        },

        add: {
          defaults: function() {
            var
              userStates = parameters && $.isPlainObject(parameters.states)
                ? parameters.states
                : {}
            ;
            $.each(settings.defaults, function(type, typeStates) {
              if( module.is[type] !== undefined && module.is[type]() ) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
              }
            });
          }
        },

        is: {

          active: function() {
            return $module.hasClass(className.active);
          },
          loading: function() {
            return $module.hasClass(className.loading);
          },
          inactive: function() {
            return !( $module.hasClass(className.active) );
          },
          state: function(state) {
            if(className[state] === undefined) {
              return false;
            }
            return $module.hasClass( className[state] );
          },

          enabled: function() {
            return !( $module.is(settings.filter.active) );
          },
          disabled: function() {
            return ( $module.is(settings.filter.active) );
          },
          textEnabled: function() {
            return !( $module.is(settings.filter.text) );
          },

          // definitions for automatic type detection
          button: function() {
            return $module.is('.button:not(a, .submit)');
          },
          input: function() {
            return $module.is('input');
          },
          progress: function() {
            return $module.is('.ui.progress');
          }
        },

        allow: function(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
        },
        disallow: function(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
        },

        allows: function(state) {
          return states[state] || false;
        },

        enable: function() {
          $module.removeClass(className.disabled);
        },

        disable: function() {
          $module.addClass(className.disabled);
        },

        setState: function(state) {
          if(module.allows(state)) {
            $module.addClass( className[state] );
          }
        },

        removeState: function(state) {
          if(module.allows(state)) {
            $module.removeClass( className[state] );
          }
        },

        toggle: {
          state: function() {
            var
              apiRequest,
              requestCancelled
            ;
            if( module.allows('active') && module.is.enabled() ) {
              module.refresh();
              if($.fn.api !== undefined) {
                apiRequest       = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if( requestCancelled ) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                else if(apiRequest) {
                  module.listenTo(apiRequest);
                  return;
                }
              }
              module.change.state();
            }
          }
        },

        listenTo: function(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if(apiRequest) {
            if(text.loading) {
              module.update.text(text.loading);
            }
            $.when(apiRequest)
              .then(function() {
                if(apiRequest.state() == 'resolved') {
                  module.debug('API request succeeded');
                  settings.activateTest   = function(){ return true; };
                  settings.deactivateTest = function(){ return true; };
                }
                else {
                  module.debug('API request failed');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                module.change.state();
              })
            ;
          }
        },

        // checks whether active/inactive state can be given
        change: {

          state: function() {
            module.debug('Determining state change direction');
            // inactive to active change
            if( module.is.inactive() ) {
              module.activate();
            }
            else {
              module.deactivate();
            }
            if(settings.sync) {
              module.sync();
            }
            settings.onChange.call(element);
          },

          text: function() {
            if( module.is.textEnabled() ) {
              if(module.is.disabled() ) {
                module.verbose('Changing text to disabled text', text.hover);
                module.update.text(text.disabled);
              }
              else if( module.is.active() ) {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.deactivate) {
                  module.verbose('Changing text to deactivating text', text.deactivate);
                  module.update.text(text.deactivate);
                }
              }
              else {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.activate){
                  module.verbose('Changing text to activating text', text.activate);
                  module.update.text(text.activate);
                }
              }
            }
          }

        },

        activate: function() {
          if( settings.activateTest.call(element) ) {
            module.debug('Setting state to active');
            $module
              .addClass(className.active)
            ;
            module.update.text(text.active);
            settings.onActivate.call(element);
          }
        },

        deactivate: function() {
          if( settings.deactivateTest.call(element) ) {
            module.debug('Setting state to inactive');
            $module
              .removeClass(className.active)
            ;
            module.update.text(text.inactive);
            settings.onDeactivate.call(element);
          }
        },

        sync: function() {
          module.verbose('Syncing other buttons to current state');
          if( module.is.active() ) {
            $allModules
              .not($module)
                .state('activate');
          }
          else {
            $allModules
              .not($module)
                .state('deactivate')
            ;
          }
        },

        get: {
          text: function() {
            return (settings.selector.text)
              ? $module.find(settings.selector.text).text()
              : $module.html()
            ;
          },
          textFor: function(state) {
            return text[state] || false;
          }
        },

        flash: {
          text: function(text, duration, callback) {
            var
              previousText = module.get.text()
            ;
            module.debug('Flashing text message', text, duration);
            text     = text     || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function() {};
            module.update.text(text);
            setTimeout(function(){
              module.update.text(previousText);
              callback.call(element);
            }, duration);
          }
        },

        reset: {
          // on mouseout sets text to previous value
          text: function() {
            var
              activeText   = text.active   || $module.data(metadata.storedText),
              inactiveText = text.inactive || $module.data(metadata.storedText)
            ;
            if( module.is.textEnabled() ) {
              if( module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
              }
              else if(inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
              }
            }
          }
        },

        update: {
          text: function(text) {
            var
              currentText = module.get.text()
            ;
            if(text && text !== currentText) {
              module.debug('Updating text', text);
              if(settings.selector.text) {
                $module
                  .data(metadata.storedText, text)
                  .find(settings.selector.text)
                    .text(text)
                ;
              }
              else {
                $module
                  .data(metadata.storedText, text)
                  .html(text)
                ;
              }
            }
            else {
              module.debug('Text is already set, ignoring update', text);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.state.settings = {

  // module info
  name           : 'State',

  // debug output
  debug          : false,

  // verbose debug output
  verbose        : true,

  // namespace for events
  namespace      : 'state',

  // debug data includes performance
  performance    : true,

  // callback occurs on state change
  onActivate     : function() {},
  onDeactivate   : function() {},
  onChange       : function() {},

  // state test functions
  activateTest   : function() { return true; },
  deactivateTest : function() { return true; },

  // whether to automatically map default states
  automatic      : true,

  // activate / deactivate changes all elements instantiated at same time
  sync           : false,

  // default flash text duration, used for temporarily changing text of an element
  flashDuration  : 1000,

  // selector filter
  filter     : {
    text   : '.loading, .disabled',
    active : '.disabled'
  },

  context    : false,

  // error
  error: {
    beforeSend : 'The before send function has cancelled state change',
    method     : 'The method you called is not defined.'
  },

  // metadata
  metadata: {
    promise    : 'promise',
    storedText : 'stored-text'
  },

  // change class on state
  className: {
    active   : 'active',
    disabled : 'disabled',
    error    : 'error',
    loading  : 'loading',
    success  : 'success',
    warning  : 'warning'
  },

  selector: {
    // selector for text node
    text: false
  },

  defaults : {
    input: {
      disabled : true,
      loading  : true,
      active   : true
    },
    button: {
      disabled : true,
      loading  : true,
      active   : true,
    },
    progress: {
      active   : true,
      success  : true,
      warning  : true,
      error    : true
    }
  },

  states     : {
    active   : true,
    disabled : true,
    error    : true,
    loading  : true,
    success  : true,
    warning  : true
  },

  text     : {
    disabled   : false,
    flash      : false,
    hover      : false,
    active     : false,
    inactive   : false,
    activate   : false,
    deactivate : false
  }

};



})( jQuery, window , document );

/*!
 * # Semantic UI 1.12.3 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.visibility = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.visibility.settings, parameters)
          : $.extend({}, $.fn.visibility.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),

        $module         = $(this),
        $context        = $(settings.context),
        selector        = $module.selector || '',

        instance        = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', settings);

          module.setup.cache();
          module.save.position();

          if( module.should.trackChanges() ) {
            module.bind.events();
            if(settings.type == 'image') {
              module.setup.image();
            }
            if(settings.type == 'fixed') {
              module.setup.fixed();
            }
            if(settings.observeChanges) {
              module.observeChanges();
            }
            if( !module.is.visible() ) {
              module.error(error.visible, $module);
            }
          }
          if(settings.initialCheck) {
            module.checkVisibility();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.debug('Storing instance', module);
          $module
            .data(moduleNamespace, module)
          ;
          instance = module;
        },

        destroy: function() {
          module.verbose('Destroying previous module');
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load' + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $context.off('scrollchange' + eventNamespace, module.event.scrollchange);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        observeChanges: function() {
          var
            context = $context[0]
          ;
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.verbose('DOM tree modified, updating visibility calculations');
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.verbose('Binding visibility events to scroll and resize');
            $window
              .on('load' + eventNamespace, module.event.load)
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $context
              .off('scroll' + eventNamespace)
              .on('scroll' + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          },
          imageLoad: function() {
            var
              $images       = $module.find('img'),
              imageCount    = $images.length,
              index         = imageCount,
              loadedCount   = 0,
              images        = [],
              cache         = [],
              cacheImage    = document.createElement('img'),
              handleLoad    = function() {
                loadedCount++;
                if(loadedCount >= imageCount) {
                  module.debug('Images finished loading inside element, refreshing position');
                  module.refresh();
                }
              }
            ;
            if(imageCount > 0) {
              $images
                .each(function() {
                  images.push( $(this).attr('src') );
                })
              ;
              while(index--) {
                cacheImage         = document.createElement('img');
                cacheImage.onload  = handleLoad;
                cacheImage.onerror = handleLoad;
                cacheImage.src     = images[index];
                cache.push(cacheImage);
              }
            }
          }
        },

        event: {
          resize: function() {
            module.debug('Window resized');
            requestAnimationFrame(module.refresh);
          },
          load: function() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
          },
          // publishes scrollchange event on one scroll
          scroll: function() {
            if(settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                $context.trigger('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              }, settings.throttle);
            }
            else {
              requestAnimationFrame(function() {
                $context.trigger('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              });
            }
          },
          // subscribes to scrollchange
          scrollchange: function(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
          },
        },

        precache: function(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
          }
          var
            imagesLength  = images.length,
            loadedCounter = 0,
            cache         = [],
            cacheImage    = document.createElement('img'),
            handleLoad    = function() {
              loadedCounter++;
              if (loadedCounter >= images.length) {
                if ($.isFunction(callback)) {
                  callback();
                }
              }
            }
          ;
          while (imagesLength--) {
            cacheImage         = document.createElement('img');
            cacheImage.onload  = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src     = images[imagesLength];
            cache.push(cacheImage);
          }
        },

        should: {
          trackChanges: function() {
            if(methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
            }
            module.debug('Callbacks being attached');
            return true;
          }
        },

        setup: {
          cache: function() {
            module.cache = {
              occurred : {},
              screen   : {},
              element  : {},
            };
          },
          image: function() {
            var
              src = $module.data('src')
            ;
            if(src) {
              module.verbose('Lazy loading image', src);
              settings.observeChanges = false;
              // show when top visible
              module.topVisible(function() {
                module.debug('Image top visible', element);
                module.precache(src, function() {
                  module.set.image(src);
                  settings.onTopVisible = false;
                });
              });
            }
          },
          fixed: function() {
            module.verbose('Setting up fixed on element pass');
            settings.once = false;
            settings.onTopPassed = function() {
              $module
                .addClass(className.fixed)
                .css({
                  top: settings.offset + 'px'
                })
              ;
              if(settings.transition) {
                if($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                }
              }
            };
            settings.onTopPassedReverse = function() {
              $module
                .removeClass(className.fixed)
                .css({
                  position: '',
                  top: ''
                })
              ;
            };
          }
        },

        set: {
          image: function(src) {
            var
              offScreen = (module.cache.screen.bottom < module.cache.element.top)
            ;
            $module
              .attr('src', src)
            ;
            if(offScreen) {
              module.verbose('Image outside browser, no show animation');
              $module.show();
            }
            else {
              if(settings.transition) {
                if( $.fn.transition !== undefined ) {
                  $module.transition(settings.transition, settings.duration);
                }
                else {
                  $module.fadeIn(settings.duration);
                }
              }
              else {
                $module.show();
              }
            }
          }
        },

        is: {
          visible: function() {
            if(module.cache && module.cache.element) {
              return (module.cache.element.width > 0);
            }
            return false;
          }
        },

        refresh: function() {
          module.debug('Refreshing constants (width/height)');
          module.reset();
          module.save.position();
          module.checkVisibility();
          settings.onRefresh.call(element);
        },

        reset: function() {
          module.verbose('Reseting all cached values');
          if( $.isPlainObject(module.cache) ) {
            module.cache.screen = {};
            module.cache.element = {};
          }
        },

        checkVisibility: function(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if( module.is.visible() ) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if(settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
            }
          }
        },

        passed: function(amount, newCallback) {
          var
            calculations   = module.get.elementCalculations(),
            amountInPixels
          ;
          // assign callback
          if(amount !== undefined && newCallback !== undefined) {
            settings.onPassed[amount] = newCallback;
          }
          else if(amount !== undefined) {
            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);
          }
          else if(calculations.passing) {
            $.each(settings.onPassed, function(amount, callback) {
              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
              }
              else if(!settings.once) {
                module.remove.occurred(callback);
              }
            });
          }
        },

        passing: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassing,
            callbackName = 'passing'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
          }
          if(calculations.passing) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.passing;
          }
        },


        topVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisible,
            callbackName = 'topVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
          }
          if(calculations.topVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topVisible;
          }
        },

        bottomVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisible,
            callbackName = 'bottomVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
          }
          if(calculations.bottomVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomVisible;
          }
        },

        topPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassed,
            callbackName = 'topPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
          }
          if(calculations.topPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topPassed;
          }
        },

        bottomPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassed,
            callbackName = 'bottomPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
          }
          if(calculations.bottomPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomPassed;
          }
        },

        passingReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassingReverse,
            callbackName = 'passingReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
          }
          if(!calculations.passing) {
            if(module.get.occurred('passing')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return !calculations.passing;
          }
        },


        topVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisibleReverse,
            callbackName = 'topVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
          }
          if(!calculations.topVisible) {
            if(module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.topVisible;
          }
        },

        bottomVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisibleReverse,
            callbackName = 'bottomVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
          }
          if(!calculations.bottomVisible) {
            if(module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomVisible;
          }
        },

        topPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassedReverse,
            callbackName = 'topPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
          }
          if(!calculations.topPassed) {
            if(module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.onTopPassed;
          }
        },

        bottomPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassedReverse,
            callbackName = 'bottomPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
          }
          if(!calculations.bottomPassed) {
            if(module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomPassed;
          }
        },

        execute: function(callback, callbackName) {
          var
            calculations = module.get.elementCalculations(),
            screen       = module.get.screenCalculations()
          ;
          callback = callback || false;
          if(callback) {
            if(settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
            else if(!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
          }
          module.save.occurred(callbackName);
        },

        remove: {
          occurred: function(callback) {
            if(callback) {
              if(module.cache.occurred[callback] !== undefined && module.cache.occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
              }
            }
            else {
              module.cache.occurred = {};
            }
          }
        },

        save: {
          calculations: function() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
          },
          occurred: function(callback) {
            if(callback) {
              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
              }
            }
          },
          scroll: function(scrollPosition) {
            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
          },
          direction: function() {
            var
              scroll     = module.get.scroll(),
              lastScroll = module.get.lastScroll(),
              direction
            ;
            if(scroll > lastScroll && lastScroll) {
              direction = 'down';
            }
            else if(scroll < lastScroll && lastScroll) {
              direction = 'up';
            }
            else {
              direction = 'static';
            }
            module.cache.direction = direction;
            return module.cache.direction;
          },
          elementPosition: function() {
            var
              element = module.cache.element,
              screen  = module.get.screenSize()
            ;
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits          = (element.height < screen.height);
            element.offset        = $module.offset();
            element.width         = $module.outerWidth();
            element.height        = $module.outerHeight();
            // store
            module.cache.element = element;
            return element;
          },
          elementCalculations: function() {
            var
              screen     = module.get.screenCalculations(),
              element    = module.get.elementPosition()
            ;
            // offset
            if(settings.includeMargin) {
              element.margin        = {};
              element.margin.top    = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top    = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
            }
            else {
              element.top    = element.offset.top;
              element.bottom = element.offset.top + element.height;
            }

            // visibility
            element.topVisible       = (screen.bottom >= element.top);
            element.topPassed        = (screen.top >= element.top);
            element.bottomVisible    = (screen.bottom >= element.bottom);
            element.bottomPassed     = (screen.top >= element.bottom);
            element.pixelsPassed     = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.visible = (element.topVisible || element.bottomVisible);
            element.passing = (element.topPassed && !element.bottomPassed);
            element.hidden  = (!element.topVisible && !element.bottomVisible);

            // passing calculations
            if(element.passing) {
              element.pixelsPassed     = (screen.top - element.top);
              element.percentagePassed = (screen.top - element.top) / element.height;
            }
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
          },
          screenCalculations: function() {
            var
              scroll = module.get.scroll()
            ;
            module.save.direction();
            module.cache.screen.top    = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
          },
          screenSize: function() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
            };
          },
          position: function() {
            module.save.screenSize();
            module.save.elementPosition();
          }
        },

        get: {
          pixelsPassed: function(amount) {
            var
              element = module.get.elementCalculations()
            ;
            if(amount.search('%') > -1) {
              return ( element.height * (parseInt(amount, 10) / 100) );
            }
            return parseInt(amount, 10);
          },
          occurred: function(callback) {
            return (module.cache.occurred !== undefined)
              ? module.cache.occurred[callback] || false
              : false
            ;
          },
          direction: function() {
            if(module.cache.direction === undefined) {
              module.save.direction();
            }
            return module.cache.direction;
          },
          elementPosition: function() {
            if(module.cache.element === undefined) {
              module.save.elementPosition();
            }
            return module.cache.element;
          },
          elementCalculations: function() {
            if(module.cache.element === undefined) {
              module.save.elementCalculations();
            }
            return module.cache.element;
          },
          screenCalculations: function() {
            if(module.cache.screen === undefined) {
              module.save.screenCalculations();
            }
            return module.cache.screen;
          },
          screenSize: function() {
            if(module.cache.screen === undefined) {
              module.save.screenSize();
            }
            return module.cache.screen;
          },
          scroll: function() {
            if(module.cache.scroll === undefined) {
              module.save.scroll();
            }
            return module.cache.scroll;
          },
          lastScroll: function() {
            if(module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
            }
            return module.cache.screen.top;
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.visibility.settings = {

  name                   : 'Visibility',
  namespace              : 'visibility',

  debug                  : false,
  verbose                : false,
  performance            : true,

  // whether to use mutation observers to follow changes
  observeChanges         : true,

  // whether to refresh calculations after all page images load
  refreshOnLoad          : true,

  // callback should only occur one time
  once                   : true,

  // callback should fire continuously whe evaluates to true
  continuous             : false,

  // offset to use with scroll top
  offset                 : 0,

  // whether to include margin in elements position
  includeMargin          : false,

  // scroll context for visibility checks
  context                : window,

  // check position immediately on init
  initialCheck           : true,

  // visibility check delay in ms (defaults to animationFrame)
  throttle               : false,

  // special visibility type (image, fixed)
  type                   : false,

  // image only animation settings
  transition             : false,
  duration               : 1000,

  // array of callbacks for percentage
  onPassed               : {},

  // standard callbacks
  onPassing              : false,
  onTopVisible           : false,
  onBottomVisible        : false,
  onTopPassed            : false,
  onBottomPassed         : false,

  // reverse callbacks
  onPassingReverse       : false,
  onTopVisibleReverse    : false,
  onBottomVisibleReverse : false,
  onTopPassedReverse     : false,
  onBottomPassedReverse  : false,

  // utility callbacks
  onUpdate               : false, // disabled by default for performance
  onRefresh              : function(){},

  className: {
    fixed: 'fixed'
  },

  error : {
    method  : 'The method you called is not defined.',
    visible : 'Element is hidden, you must call refresh after element becomes visible'
  }

};

})( jQuery, window , document );
require.register("web/static/css/components/accordion", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.accordion = function (parameters) {
    var $allModules = $(this),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.accordion.settings, parameters) : $.extend({}, $.fn.accordion.settings),
          className = settings.className,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          moduleSelector = $allModules.selector || '',
          $module = $(this),
          $title = $module.find(selector.title),
          $content = $module.find(selector.content),
          element = this,
          instance = $module.data(moduleNamespace),
          observer,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing', $module);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function instantiate() {
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.debug('Destroying previous instance', $module);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        refresh: function refresh() {
          $title = $module.find(selector.title);
          $content = $module.find(selector.content);
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function events() {
            module.debug('Binding delegated events');
            $module.on('click' + eventNamespace, selector.trigger, module.event.click);
          }
        },

        event: {
          click: function click() {
            module.toggle.call(this);
          }
        },

        toggle: function toggle(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isOpen = isActive && !isAnimating,
              isOpening = !isActive && isAnimating;
          module.debug('Toggling visibility of content', $activeTitle);
          if (isOpen || isOpening) {
            if (settings.collapsible) {
              module.close.call($activeTitle);
            } else {
              module.debug('Cannot close accordion content collapsing is disabled');
            }
          } else {
            module.open.call($activeTitle);
          }
        },

        open: function open(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isUnopen = !isActive && !isAnimating;
          if (isUnopen) {
            module.debug('Opening accordion content', $activeTitle);
            if (settings.exclusive) {
              module.closeOthers.call($activeTitle);
            }
            $activeTitle.addClass(className.active);
            $activeContent.addClass(className.animating);
            if (settings.animateChildren) {
              if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent.children().transition({
                  animation: 'fade in',
                  queue: false,
                  useFailSafe: true,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration
                });
              } else {
                $activeContent.children().stop(true).animate({
                  opacity: 1
                }, settings.duration, module.resetOpacity);
              }
            }
            $activeContent.stop(true).slideDown(settings.duration, settings.easing, function () {
              $activeContent.removeClass(className.animating).addClass(className.active);
              module.reset.display.call(this);
              settings.onOpen.call(this);
              settings.onChange.call(this);
            });
          }
        },

        close: function close(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isOpening = !isActive && isAnimating,
              isClosing = isActive && isAnimating;
          if ((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            $activeTitle.removeClass(className.active);
            $activeContent.addClass(className.animating);
            if (settings.animateChildren) {
              if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent.children().transition({
                  animation: 'fade out',
                  queue: false,
                  useFailSafe: true,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration
                });
              } else {
                $activeContent.children().stop(true).animate({
                  opacity: 0
                }, settings.duration, module.resetOpacity);
              }
            }
            $activeContent.stop(true).slideUp(settings.duration, settings.easing, function () {
              $activeContent.removeClass(className.animating).removeClass(className.active);
              module.reset.display.call(this);
              settings.onClose.call(this);
              settings.onChange.call(this);
            });
          }
        },

        closeOthers: function closeOthers(index) {
          var $activeTitle = index !== undefined ? $title.eq(index) : $(this).closest(selector.title),
              $parentTitles = $activeTitle.parents(selector.content).prev(selector.title),
              $activeAccordion = $activeTitle.closest(selector.accordion),
              activeSelector = selector.title + '.' + className.active + ':visible',
              activeContent = selector.content + '.' + className.active + ':visible',
              $openTitles,
              $nestedTitles,
              $openContents;
          if (settings.closeNested) {
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
          } else {
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
          }
          if ($openTitles.length > 0) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles.removeClass(className.active);
            if (settings.animateChildren) {
              if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents.children().transition({
                  animation: 'fade out',
                  useFailSafe: true,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration
                });
              } else {
                $openContents.children().stop().animate({
                  opacity: 0
                }, settings.duration, module.resetOpacity);
              }
            }
            $openContents.stop().slideUp(settings.duration, settings.easing, function () {
              $(this).removeClass(className.active);
              module.reset.display.call(this);
            });
          }
        },

        reset: {

          display: function display() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if ($(this).attr('style') === '') {
              $(this).attr('style', '').removeAttr('style');
            }
          },

          opacity: function opacity() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if ($(this).attr('style') === '') {
              $(this).attr('style', '').removeAttr('style');
            }
          }

        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          module.debug('Changing internal', name, value);
          if (value !== undefined) {
            if ($.isPlainObject(name)) {
              $.extend(true, module, name);
            } else {
              module[name] = value;
            }
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.accordion.settings = {

    name: 'Accordion',
    namespace: 'accordion',

    debug: false,
    verbose: true,
    performance: true,

    exclusive: true,
    collapsible: true,
    closeNested: false,
    animateChildren: true,

    duration: 350,
    easing: 'easeOutQuad',

    onOpen: function onOpen() {},
    onClose: function onClose() {},
    onChange: function onChange() {},

    error: {
      method: 'The method you called is not defined'
    },

    className: {
      active: 'active',
      animating: 'animating'
    },

    selector: {
      accordion: '.accordion',
      title: '.title',
      trigger: '.title',
      content: '.content'
    }

  };

  // Adds easing
  $.extend($.easing, {
    easeOutQuad: function easeOutQuad(x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    }
  });
})(jQuery, window, document);
});

require.register("web/static/css/components/accordion.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, i) {
  "use strict";e.fn.accordion = function (t) {
    {
      var o,
          a = e(this),
          s = new Date().getTime(),
          r = [],
          c = arguments[0],
          l = "string" == typeof c,
          u = [].slice.call(arguments, 1);n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      };
    }return (a.each(function () {
      var d,
          m,
          g = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.accordion.settings, t) : e.extend({}, e.fn.accordion.settings),
          f = g.className,
          p = g.namespace,
          v = g.selector,
          h = g.error,
          b = "." + p,
          y = "module-" + p,
          C = a.selector || "",
          O = e(this),
          x = O.find(v.title),
          F = O.find(v.content),
          T = this,
          q = O.data(y);m = { initialize: function initialize() {
          m.debug("Initializing", O), m.bind.events(), m.observeChanges(), m.instantiate();
        }, instantiate: function instantiate() {
          q = m, O.data(y, m);
        }, destroy: function destroy() {
          m.debug("Destroying previous instance", O), O.off(b).removeData(y);
        }, refresh: function refresh() {
          x = O.find(v.title), F = O.find(v.content);
        }, observeChanges: function observeChanges() {
          "MutationObserver" in n && (d = new MutationObserver(function (e) {
            m.debug("DOM tree modified, updating selector cache"), m.refresh();
          }), d.observe(T, { childList: !0, subtree: !0 }), m.debug("Setting up mutation observer", d));
        }, bind: { events: function events() {
            m.debug("Binding delegated events"), O.on("click" + b, v.trigger, m.event.click);
          } }, event: { click: function click() {
            m.toggle.call(this);
          } }, toggle: function toggle(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(F),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = s && !a,
              c = !s && a;m.debug("Toggling visibility of content", t), r || c ? g.collapsible ? m.close.call(t) : m.debug("Cannot close accordion content collapsing is disabled") : m.open.call(t);
        }, open: function open(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(F),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = !s && !a;r && (m.debug("Opening accordion content", t), g.exclusive && m.closeOthers.call(t), t.addClass(f.active), o.addClass(f.animating), g.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? o.children().transition({ animation: "fade in", queue: !1, useFailSafe: !0, debug: g.debug, verbose: g.verbose, duration: g.duration }) : o.children().stop(!0).animate({ opacity: 1 }, g.duration, m.resetOpacity)), o.stop(!0).slideDown(g.duration, g.easing, function () {
            o.removeClass(f.animating).addClass(f.active), m.reset.display.call(this), g.onOpen.call(this), g.onChange.call(this);
          }));
        }, close: function close(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(F),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = !s && a,
              c = s && a;!s && !r || c || (m.debug("Closing accordion content", o), t.removeClass(f.active), o.addClass(f.animating), g.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? o.children().transition({ animation: "fade out", queue: !1, useFailSafe: !0, debug: g.debug, verbose: g.verbose, duration: g.duration }) : o.children().stop(!0).animate({ opacity: 0 }, g.duration, m.resetOpacity)), o.stop(!0).slideUp(g.duration, g.easing, function () {
            o.removeClass(f.animating).removeClass(f.active), m.reset.display.call(this), g.onClose.call(this), g.onChange.call(this);
          }));
        }, closeOthers: function closeOthers(n) {
          var t,
              o,
              a,
              s = n !== i ? x.eq(n) : e(this).closest(v.title),
              r = s.parents(v.content).prev(v.title),
              c = s.closest(v.accordion),
              l = v.title + "." + f.active + ":visible",
              u = v.content + "." + f.active + ":visible";g.closeNested ? (t = c.find(l).not(r), a = t.next(F)) : (t = c.find(l).not(r), o = c.find(u).find(l).not(r), t = t.not(o), a = t.next(F)), t.length > 0 && (m.debug("Exclusive enabled, closing other content", t), t.removeClass(f.active), g.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? a.children().transition({ animation: "fade out", useFailSafe: !0, debug: g.debug, verbose: g.verbose, duration: g.duration }) : a.children().stop().animate({ opacity: 0 }, g.duration, m.resetOpacity)), a.stop().slideUp(g.duration, g.easing, function () {
            e(this).removeClass(f.active), m.reset.display.call(this);
          }));
        }, reset: { display: function display() {
            m.verbose("Removing inline display from element", this), e(this).css("display", ""), "" === e(this).attr("style") && e(this).attr("style", "").removeAttr("style");
          }, opacity: function opacity() {
            m.verbose("Removing inline opacity from element", this), e(this).css("opacity", ""), "" === e(this).attr("style") && e(this).attr("style", "").removeAttr("style");
          } }, setting: function setting(n, t) {
          if ((m.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, g, n);else {
            if (t === i) return g[n];g[n] = t;
          }
        }, internal: function internal(n, t) {
          return (m.debug("Changing internal", n, t), t === i ? m[n] : void (e.isPlainObject(n) ? e.extend(!0, m, n) : m[n] = t));
        }, debug: function debug() {
          g.debug && (g.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, g.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, i;g.performance && (n = new Date().getTime(), i = s || n, t = n - i, s = n, r.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": t })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 100);
          }, display: function display() {
            var n = g.name + ":",
                t = 0;s = !1, clearTimeout(m.performance.timer), e.each(r, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", C && (n += " '" + C + "'"), (console.group !== i || console.table !== i) && r.length > 0 && (console.groupCollapsed(n), console.table ? console.table(r) : e.each(r, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), r = [];
          } }, invoke: function invoke(n, t, a) {
          var s,
              r,
              c,
              l = q;return (t = t || u, a = T || a, "string" == typeof n && l !== i && (n = n.split(/[\. ]/), s = n.length - 1, e.each(n, function (t, o) {
            var a = t != s ? o + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(l[a]) && t != s) l = l[a];else {
              if (l[a] !== i) return (r = l[a], !1);if (!e.isPlainObject(l[o]) || t == s) return l[o] !== i ? (r = l[o], !1) : (m.error(h.method, n), !1);l = l[o];
            }
          })), e.isFunction(r) ? c = r.apply(a, t) : r !== i && (c = r), e.isArray(o) ? o.push(c) : o !== i ? o = [o, c] : c !== i && (o = c), r);
        } }, l ? (q === i && m.initialize(), m.invoke(c)) : (q !== i && q.invoke("destroy"), m.initialize());
    }), o !== i ? o : this);
  }, e.fn.accordion.settings = { name: "Accordion", namespace: "accordion", debug: !1, verbose: !0, performance: !0, exclusive: !0, collapsible: !0, closeNested: !1, animateChildren: !0, duration: 350, easing: "easeOutQuad", onOpen: function onOpen() {}, onClose: function onClose() {}, onChange: function onChange() {}, error: { method: "The method you called is not defined" }, className: { active: "active", animating: "animating" }, selector: { accordion: ".accordion", title: ".title", trigger: ".title", content: ".content" } }, e.extend(e.easing, { easeOutQuad: function easeOutQuad(e, n, t, i, o) {
      return -i * (n /= o) * (n - 2) + t;
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/api", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.api = $.fn.api = function (parameters) {

    var
    // use window context if none specified
    $allModules = $.isFunction(this) ? $(window) : $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.api.settings, parameters) : $.extend({}, $.fn.api.settings),

      // internal aliases
      namespace = _settings.namespace,
          metadata = _settings.metadata,
          selector = _settings.selector,
          _error = _settings.error,
          className = _settings.className,

      // define namespaces for modules
      eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,

      // element that creates request
      $module = $(this),
          $form = $module.closest(selector.form),

      // context used for state
      $context = _settings.stateContext ? $(_settings.stateContext) : $module,

      // request details
      ajaxSettings,
          requestSettings,
          url,
          data,

      // standard module
      element = this,
          context = $context.get(),
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          var triggerEvent = module.get.event();
          // bind events
          if (!methodInvoked) {
            if (triggerEvent) {
              module.debug('Attaching API events to element', triggerEvent);
              $module.on(triggerEvent + eventNamespace, module.event.trigger);
            } else if (_settings.on == 'now') {
              module.debug('Querying API now', triggerEvent);
              module.query();
            }
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        query: function query() {

          if (module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
          }
          // determine if an api event already occurred
          if (module.is.loading() && _settings.throttle === 0) {
            module.debug('Cancelling request, previous request is still pending');
            return;
          }

          // pass element metadata to url (value, text)
          if (_settings.defaultData) {
            $.extend(true, _settings.urlData, module.get.defaultData());
          }

          // Add form content
          if (_settings.serializeForm !== false || $context.is('form')) {
            if (_settings.serializeForm == 'json') {
              $.extend(true, _settings.data, module.get.formData());
            } else {
              _settings.data = module.get.formData();
            }
          }

          // call beforesend and get any settings changes
          requestSettings = module.get.settings();

          // check if before send cancelled request
          if (requestSettings === false) {
            module.cancelled = true;
            module.error(_error.beforeSend);
            return;
          } else {
            module.cancelled = false;
          }

          if (_settings.url) {
            // override with url if specified
            module.debug('Using specified url', url);
            url = module.add.urlData(_settings.url);
          } else {
            // otherwise find url from api endpoints
            url = module.add.urlData(module.get.templateURL());
            module.debug('Added URL Data to url', url);
          }

          // exit conditions reached, missing url parameters
          if (!url) {
            if (module.is.form()) {
              url = $module.attr('action') || '';
              module.debug('No url or action specified, defaulting to form action', url);
            } else {
              module.error(_error.missingURL, _settings.action);
              return;
            }
          }

          // add loading state
          module.set.loading();

          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {}, _settings, {
            type: _settings.method || _settings.type,
            data: data,
            url: _settings.base + url,
            beforeSend: _settings.beforeXHR,
            success: function success() {},
            failure: function failure() {},
            complete: function complete() {}
          });

          module.debug('Querying URL', ajaxSettings.url);
          module.debug('Sending data', data, ajaxSettings.method);
          module.verbose('Using AJAX settings', ajaxSettings);

          if (module.is.loading()) {
            // throttle additional requests
            module.timer = setTimeout(function () {
              module.request = module.create.request();
              module.xhr = module.create.xhr();
              _settings.onRequest.call(context, module.request, module.xhr);
            }, _settings.throttle);
          } else {
            // immediately on first request
            module.request = module.create.request();
            module.xhr = module.create.xhr();
            _settings.onRequest.call(context, module.request, module.xhr);
          }
        },

        is: {
          disabled: function disabled() {
            return $module.filter(_settings.filter).length > 0;
          },
          form: function form() {
            return $module.is('form');
          },
          input: function input() {
            return $module.is('input');
          },
          loading: function loading() {
            return module.request && module.request.state() == 'pending';
          }
        },

        was: {
          cancelled: function cancelled() {
            return module.cancelled || false;
          },
          succesful: function succesful() {
            return module.request && module.request.state() == 'resolved';
          },
          failure: function failure() {
            return module.request && module.request.state() == 'rejected';
          },
          complete: function complete() {
            return module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected');
          }
        },

        add: {
          urlData: function urlData(url, _urlData) {
            var requiredVariables, optionalVariables;
            if (url) {
              requiredVariables = url.match(_settings.regExp.required);
              optionalVariables = url.match(_settings.regExp.optional);
              _urlData = _urlData || _settings.urlData;
              if (requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function (index, templatedString) {
                  var
                  // allow legacy {$var} style
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(2, templatedString.length - 3) : templatedString.substr(1, templatedString.length - 2),
                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable];
                  // remove value
                  if (value === undefined) {
                    module.error(_error.requiredParameter, variable, url);
                    url = false;
                    return false;
                  } else {
                    module.verbose('Found required variable', variable, value);
                    url = url.replace(templatedString, value);
                  }
                });
              }
              if (optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function (index, templatedString) {
                  var
                  // allow legacy {/$var} style
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(3, templatedString.length - 4) : templatedString.substr(2, templatedString.length - 3),
                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable];
                  // optional replacement
                  if (value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                  } else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if (url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                    } else {
                      url = url.replace(templatedString, '');
                    }
                  }
                });
              }
            }
            return url;
          }
        },

        event: {
          trigger: function trigger(event) {
            module.query();
            if (event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
            }
          },
          xhr: {
            always: function always() {},
            done: function done(response) {
              var context = this,
                  elapsedTime = new Date().getTime() - time,
                  timeLeft = _settings.loadingDuration - elapsedTime;
              timeLeft = timeLeft > 0 ? timeLeft : 0;
              setTimeout(function () {
                module.request.resolveWith(context, [response]);
              }, timeLeft);
            },
            fail: function fail(xhr, status, httpMessage) {
              var context = this,
                  elapsedTime = new Date().getTime() - time,
                  timeLeft = _settings.loadingDuration - elapsedTime;
              timeLeft = timeLeft > 0 ? timeLeft : 0;
              // page triggers abort on navigation, dont show error
              setTimeout(function () {
                if (status !== 'abort') {
                  module.request.rejectWith(context, [xhr, status, httpMessage]);
                } else {
                  module.reset();
                }
              }, timeLeft);
            }
          },
          request: {
            complete: function complete(response) {
              module.remove.loading();
              _settings.onComplete.call(context, response, $module);
            },
            done: function done(response) {
              module.debug('API Response Received', response);
              if (_settings.dataType == 'json') {
                if ($.isFunction(_settings.successTest)) {
                  module.debug('Checking JSON returned success', _settings.successTest, response);
                  if (_settings.successTest(response)) {
                    _settings.onSuccess.call(context, response, $module);
                  } else {
                    module.debug('JSON test specified by user and response failed', response);
                    _settings.onFailure.call(context, response, $module);
                  }
                } else {
                  _settings.onSuccess.call(context, response, $module);
                }
              } else {
                _settings.onSuccess.call(context, response, $module);
              }
            },
            error: function error(xhr, status, httpMessage) {
              var errorMessage = _settings.error[status] !== undefined ? _settings.error[status] : httpMessage,
                  response;
              // let em know unless request aborted
              if (xhr !== undefined) {
                // readyState 4 = done, anything less is not really sent
                if (xhr.readyState !== undefined && xhr.readyState == 4) {

                  // if http status code returned and json returned error, look for it
                  if (xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {
                    module.error(_error.statusMessage + httpMessage, ajaxSettings.url);
                  } else {
                    if (status == 'error' && _settings.dataType == 'json') {
                      try {
                        response = $.parseJSON(xhr.responseText);
                        if (response && response.error !== undefined) {
                          errorMessage = response.error;
                        }
                      } catch (e) {
                        module.error(_error.JSONParse);
                      }
                    }
                  }
                  module.remove.loading();
                  module.set.error();
                  // show error state only for duration specified in settings
                  if (_settings.errorDuration) {
                    setTimeout(module.remove.error, _settings.errorDuration);
                  }
                  module.debug('API Request error:', errorMessage);
                  _settings.onError.call(context, errorMessage, $module);
                } else {
                  _settings.onAbort.call(context, errorMessage, $module);
                  module.debug('Request Aborted (Most likely caused by page change or CORS Policy)', status, httpMessage);
                }
              }
            }
          }
        },

        create: {
          request: function request() {
            return $.Deferred().always(module.event.request.complete).done(module.event.request.done).fail(module.event.request.error);
          },
          xhr: function xhr() {
            return $.ajax(ajaxSettings).always(module.event.xhr.always).done(module.event.xhr.done).fail(module.event.xhr.fail);
          }
        },

        set: {
          error: function error() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
          },
          loading: function loading() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
          }
        },

        remove: {
          error: function error() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
          },
          loading: function loading() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
          }
        },

        get: {
          request: function request() {
            return module.request || false;
          },
          xhr: function xhr() {
            return module.xhr || false;
          },
          settings: function settings() {
            var runSettings;
            runSettings = _settings.beforeSend.call($module, _settings);
            if (runSettings) {
              if (runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(_error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
              }
              if (runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(_error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
              }
              if (runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(_error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
              }
            }
            if (runSettings === undefined) {
              module.error(_error.noReturnedValue);
            }
            return runSettings !== undefined ? runSettings : _settings;
          },
          defaultData: function defaultData() {
            var data = {};
            if (!$.isWindow(element)) {
              if (module.is.input()) {
                data.value = $module.val();
              } else if (!module.is.form()) {} else {
                data.text = $module.text();
              }
            }
            return data;
          },
          event: function event() {
            if ($.isWindow(element) || _settings.on == 'now') {
              module.debug('API called without element, no events attached');
              return false;
            } else if (_settings.on == 'auto') {
              if ($module.is('input')) {
                return element.oninput !== undefined ? 'input' : element.onpropertychange !== undefined ? 'propertychange' : 'keyup';
              } else if ($module.is('form')) {
                return 'submit';
              } else {
                return 'click';
              }
            } else {
              return _settings.on;
            }
          },
          formData: function formData() {
            var formData;
            if ($module.serializeObject !== undefined) {
              formData = $form.serializeObject();
            } else {
              module.error(_error.missingSerialize);
              formData = $form.serialize();
            }
            module.debug('Retrieved form data', formData);
            return formData;
          },
          templateURL: function templateURL(action) {
            var url;
            action = action || $module.data(metadata.action) || _settings.action || false;
            if (action) {
              module.debug('Looking up url for action', action, _settings.api);
              if (_settings.api[action] !== undefined) {
                url = _settings.api[action];
                module.debug('Found template url', url);
              } else if (!module.is.form()) {
                module.error(_error.missingAction, _settings.action, _settings.api);
              }
            }
            return url;
          }
        },

        abort: function abort() {
          var xhr = module.get.xhr();
          if (xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
            module.request.rejectWith(_settings.apiSettings);
          }
        },

        // reset state
        reset: function reset() {
          module.remove.error();
          module.remove.loading();
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, _settings, name);
          } else if (value !== undefined) {
            _settings[name] = value;
          } else {
            return _settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (_settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (_settings.verbose && _settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (_settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = _settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(_error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.api.settings = {

    name: 'API',
    namespace: 'api',

    debug: true,
    verbose: false,
    performance: true,

    // event binding
    on: 'auto',
    filter: '.disabled',
    stateContext: false,

    // state
    loadingDuration: 0,
    errorDuration: 2000,

    // templating
    action: false,
    url: false,
    base: '',

    // data
    urlData: {},

    // ui
    defaultData: true,
    serializeForm: false,
    throttle: 0,

    // jQ ajax
    method: 'get',
    data: {},
    dataType: 'json',

    // callbacks
    beforeSend: function beforeSend(settings) {
      return settings;
    },
    beforeXHR: function beforeXHR(xhr) {},

    onRequest: function onRequest(promise, xhr) {},
    onSuccess: function onSuccess(response, $module) {},
    onComplete: function onComplete(response, $module) {},
    onFailure: function onFailure(errorMessage, $module) {},
    onError: function onError(errorMessage, $module) {},
    onAbort: function onAbort(errorMessage, $module) {},

    successTest: false,

    // errors
    error: {
      beforeSend: 'The before send function has aborted the request',
      error: 'There was an error with your request',
      exitConditions: 'API Request Aborted. Exit conditions met',
      JSONParse: 'JSON could not be parsed during error handling',
      legacyParameters: 'You are using legacy API success callback names',
      method: 'The method you called is not defined',
      missingAction: 'API action used but no url was defined',
      missingSerialize: 'Required dependency jquery-serialize-object missing, using basic serialize',
      missingURL: 'No URL specified for api event',
      noReturnedValue: 'The beforeSend callback must return a settings object, beforeSend ignored.',
      parseError: 'There was an error parsing your request',
      requiredParameter: 'Missing a required URL parameter: ',
      statusMessage: 'Server gave an error: ',
      timeout: 'Your request timed out'
    },

    regExp: {
      required: /\{\$*[A-z0-9]+\}/g,
      optional: /\{\/\$*[A-z0-9]+\}/g
    },

    className: {
      loading: 'loading',
      error: 'error'
    },

    selector: {
      form: 'form'
    },

    metadata: {
      action: 'action'
    }
  };

  $.api.settings.api = {};
})(jQuery, window, document);

// calculate if loading time was below minimum threshold
});

require.register("web/static/css/components/api.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, r, n) {
  "use strict";e.api = e.fn.api = function (r) {
    var o,
        a = e(e.isFunction(this) ? t : this),
        i = a.selector || "",
        s = new Date().getTime(),
        u = [],
        c = arguments[0],
        l = "string" == typeof c,
        d = [].slice.call(arguments, 1);return (a.each(function () {
      var t,
          a,
          f,
          g,
          m,
          p = e.isPlainObject(r) ? e.extend(!0, {}, e.fn.api.settings, r) : e.extend({}, e.fn.api.settings),
          b = p.namespace,
          v = p.metadata,
          h = p.selector,
          y = p.error,
          q = p.className,
          x = "." + b,
          A = "module-" + b,
          D = e(this),
          P = D.closest(h.form),
          R = p.stateContext ? e(p.stateContext) : D,
          T = this,
          S = R.get(),
          j = D.data(A);m = { initialize: function initialize() {
          var e = m.get.event();l || (e ? (m.debug("Attaching API events to element", e), D.on(e + x, m.event.trigger)) : "now" == p.on && (m.debug("Querying API now", e), m.query())), m.instantiate();
        }, instantiate: function instantiate() {
          m.verbose("Storing instance of module", m), j = m, D.data(A, j);
        }, destroy: function destroy() {
          m.verbose("Destroying previous module for", T), D.removeData(A).off(x);
        }, query: function query() {
          if (m.is.disabled()) return void m.debug("Element is disabled API request aborted");if (m.is.loading() && 0 === p.throttle) return void m.debug("Cancelling request, previous request is still pending");if ((p.defaultData && e.extend(!0, p.urlData, m.get.defaultData()), (p.serializeForm !== !1 || R.is("form")) && ("json" == p.serializeForm ? e.extend(!0, p.data, m.get.formData()) : p.data = m.get.formData()), a = m.get.settings(), a === !1)) return (m.cancelled = !0, void m.error(y.beforeSend));if ((m.cancelled = !1, p.url ? (m.debug("Using specified url", f), f = m.add.urlData(p.url)) : (f = m.add.urlData(m.get.templateURL()), m.debug("Added URL Data to url", f)), !f)) {
            if (!m.is.form()) return void m.error(y.missingURL, p.action);f = D.attr("action") || "", m.debug("No url or action specified, defaulting to form action", f);
          }m.set.loading(), t = e.extend(!0, {}, p, { type: p.method || p.type, data: g, url: p.base + f, beforeSend: p.beforeXHR, success: function success() {}, failure: function failure() {}, complete: function complete() {} }), m.debug("Querying URL", t.url), m.debug("Sending data", g, t.method), m.verbose("Using AJAX settings", t), m.is.loading() ? m.timer = setTimeout(function () {
            m.request = m.create.request(), m.xhr = m.create.xhr(), p.onRequest.call(S, m.request, m.xhr);
          }, p.throttle) : (m.request = m.create.request(), m.xhr = m.create.xhr(), p.onRequest.call(S, m.request, m.xhr));
        }, is: { disabled: function disabled() {
            return D.filter(p.filter).length > 0;
          }, form: function form() {
            return D.is("form");
          }, input: function input() {
            return D.is("input");
          }, loading: function loading() {
            return m.request && "pending" == m.request.state();
          } }, was: { cancelled: function cancelled() {
            return m.cancelled || !1;
          }, succesful: function succesful() {
            return m.request && "resolved" == m.request.state();
          }, failure: function failure() {
            return m.request && "rejected" == m.request.state();
          }, complete: function complete() {
            return m.request && ("resolved" == m.request.state() || "rejected" == m.request.state());
          } }, add: { urlData: function urlData(t, r) {
            var o, a;return (t && (o = t.match(p.regExp.required), a = t.match(p.regExp.optional), r = r || p.urlData, o && (m.debug("Looking for required URL variables", o), e.each(o, function (o, a) {
              var i = -1 !== a.indexOf("$") ? a.substr(2, a.length - 3) : a.substr(1, a.length - 2),
                  s = e.isPlainObject(r) && r[i] !== n ? r[i] : D.data(i) !== n ? D.data(i) : R.data(i) !== n ? R.data(i) : r[i];return s === n ? (m.error(y.requiredParameter, i, t), t = !1, !1) : (m.verbose("Found required variable", i, s), void (t = t.replace(a, s)));
            })), a && (m.debug("Looking for optional URL variables", o), e.each(a, function (o, a) {
              var i = -1 !== a.indexOf("$") ? a.substr(3, a.length - 4) : a.substr(2, a.length - 3),
                  s = e.isPlainObject(r) && r[i] !== n ? r[i] : D.data(i) !== n ? D.data(i) : R.data(i) !== n ? R.data(i) : r[i];s !== n ? (m.verbose("Optional variable Found", i, s), t = t.replace(a, s)) : (m.verbose("Optional variable not found", i), t = -1 !== t.indexOf("/" + a) ? t.replace("/" + a, "") : t.replace(a, ""));
            }))), t);
          } }, event: { trigger: function trigger(e) {
            m.query(), ("submit" == e.type || "click" == e.type) && e.preventDefault();
          }, xhr: { always: function always() {}, done: function done(e) {
              var t = this,
                  r = new Date().getTime() - s,
                  n = p.loadingDuration - r;n = n > 0 ? n : 0, setTimeout(function () {
                m.request.resolveWith(t, [e]);
              }, n);
            }, fail: function fail(e, t, r) {
              var n = this,
                  o = new Date().getTime() - s,
                  a = p.loadingDuration - o;a = a > 0 ? a : 0, setTimeout(function () {
                "abort" !== t ? m.request.rejectWith(n, [e, t, r]) : m.reset();
              }, a);
            } }, request: { complete: function complete(e) {
              m.remove.loading(), p.onComplete.call(S, e, D);
            }, done: function done(t) {
              m.debug("API Response Received", t), "json" == p.dataType && e.isFunction(p.successTest) ? (m.debug("Checking JSON returned success", p.successTest, t), p.successTest(t) ? p.onSuccess.call(S, t, D) : (m.debug("JSON test specified by user and response failed", t), p.onFailure.call(S, t, D))) : p.onSuccess.call(S, t, D);
            }, error: function error(r, o, a) {
              var i,
                  s = p.error[o] !== n ? p.error[o] : a;if (r !== n) if (r.readyState !== n && 4 == r.readyState) {
                if (200 != r.status && a !== n && "" !== a) m.error(y.statusMessage + a, t.url);else if ("error" == o && "json" == p.dataType) try {
                  i = e.parseJSON(r.responseText), i && i.error !== n && (s = i.error);
                } catch (u) {
                  m.error(y.JSONParse);
                }m.remove.loading(), m.set.error(), p.errorDuration && setTimeout(m.remove.error, p.errorDuration), m.debug("API Request error:", s), p.onError.call(S, s, D);
              } else p.onAbort.call(S, s, D), m.debug("Request Aborted (Most likely caused by page change or CORS Policy)", o, a);
            } } }, create: { request: function request() {
            return e.Deferred().always(m.event.request.complete).done(m.event.request.done).fail(m.event.request.error);
          }, xhr: function xhr() {
            return e.ajax(t).always(m.event.xhr.always).done(m.event.xhr.done).fail(m.event.xhr.fail);
          } }, set: { error: function error() {
            m.verbose("Adding error state to element", R), R.addClass(q.error);
          }, loading: function loading() {
            m.verbose("Adding loading state to element", R), R.addClass(q.loading);
          } }, remove: { error: function error() {
            m.verbose("Removing error state from element", R), R.removeClass(q.error);
          }, loading: function loading() {
            m.verbose("Removing loading state from element", R), R.removeClass(q.loading);
          } }, get: { request: function request() {
            return m.request || !1;
          }, xhr: function xhr() {
            return m.xhr || !1;
          }, settings: function settings() {
            var e;return (e = p.beforeSend.call(D, p), e && (e.success !== n && (m.debug("Legacy success callback detected", e), m.error(y.legacyParameters, e.success), e.onSuccess = e.success), e.failure !== n && (m.debug("Legacy failure callback detected", e), m.error(y.legacyParameters, e.failure), e.onFailure = e.failure), e.complete !== n && (m.debug("Legacy complete callback detected", e), m.error(y.legacyParameters, e.complete), e.onComplete = e.complete)), e === n && m.error(y.noReturnedValue), e !== n ? e : p);
          }, defaultData: function defaultData() {
            var t = {};return (e.isWindow(T) || (m.is.input() ? t.value = D.val() : m.is.form() && (t.text = D.text())), t);
          }, event: function event() {
            return e.isWindow(T) || "now" == p.on ? (m.debug("API called without element, no events attached"), !1) : "auto" == p.on ? D.is("input") ? T.oninput !== n ? "input" : T.onpropertychange !== n ? "propertychange" : "keyup" : D.is("form") ? "submit" : "click" : p.on;
          }, formData: function formData() {
            var e;return (D.serializeObject !== n ? e = P.serializeObject() : (m.error(y.missingSerialize), e = P.serialize()), m.debug("Retrieved form data", e), e);
          }, templateURL: function templateURL(e) {
            var t;return (e = e || D.data(v.action) || p.action || !1, e && (m.debug("Looking up url for action", e, p.api), p.api[e] !== n ? (t = p.api[e], m.debug("Found template url", t)) : m.is.form() || m.error(y.missingAction, p.action, p.api)), t);
          } }, abort: function abort() {
          var e = m.get.xhr();e && "resolved" !== e.state() && (m.debug("Cancelling API request"), e.abort(), m.request.rejectWith(p.apiSettings));
        }, reset: function reset() {
          m.remove.error(), m.remove.loading();
        }, setting: function setting(t, r) {
          if ((m.debug("Changing setting", t, r), e.isPlainObject(t))) e.extend(!0, p, t);else {
            if (r === n) return p[t];p[t] = r;
          }
        }, internal: function internal(t, r) {
          if (e.isPlainObject(t)) e.extend(!0, m, t);else {
            if (r === n) return m[t];m[t] = r;
          }
        }, debug: function debug() {
          p.debug && (p.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, p.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          p.verbose && p.debug && (p.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, p.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, p.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, r, n;p.performance && (t = new Date().getTime(), n = s || t, r = t - n, s = t, u.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", "Execution Time": r })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 100);
          }, display: function display() {
            var t = p.name + ":",
                r = 0;s = !1, clearTimeout(m.performance.timer), e.each(u, function (e, t) {
              r += t["Execution Time"];
            }), t += " " + r + "ms", i && (t += " '" + i + "'"), (console.group !== n || console.table !== n) && u.length > 0 && (console.groupCollapsed(t), console.table ? console.table(u) : e.each(u, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), u = [];
          } }, invoke: function invoke(t, r, a) {
          var i,
              s,
              u,
              c = j;return (r = r || d, a = T || a, "string" == typeof t && c !== n && (t = t.split(/[\. ]/), i = t.length - 1, e.each(t, function (r, o) {
            var a = r != i ? o + t[r + 1].charAt(0).toUpperCase() + t[r + 1].slice(1) : t;if (e.isPlainObject(c[a]) && r != i) c = c[a];else {
              if (c[a] !== n) return (s = c[a], !1);if (!e.isPlainObject(c[o]) || r == i) return c[o] !== n ? (s = c[o], !1) : (m.error(y.method, t), !1);c = c[o];
            }
          })), e.isFunction(s) ? u = s.apply(a, r) : s !== n && (u = s), e.isArray(o) ? o.push(u) : o !== n ? o = [o, u] : u !== n && (o = u), s);
        } }, l ? (j === n && m.initialize(), m.invoke(c)) : (j !== n && j.invoke("destroy"), m.initialize());
    }), o !== n ? o : this);
  }, e.api.settings = { name: "API", namespace: "api", debug: !0, verbose: !1, performance: !0, on: "auto", filter: ".disabled", stateContext: !1, loadingDuration: 0, errorDuration: 2000, action: !1, url: !1, base: "", urlData: {}, defaultData: !0, serializeForm: !1, throttle: 0, method: "get", data: {}, dataType: "json", beforeSend: function beforeSend(e) {
      return e;
    }, beforeXHR: function beforeXHR(e) {}, onRequest: function onRequest(e, t) {}, onSuccess: function onSuccess(e, t) {}, onComplete: function onComplete(e, t) {}, onFailure: function onFailure(e, t) {}, onError: function onError(e, t) {}, onAbort: function onAbort(e, t) {}, successTest: !1, error: { beforeSend: "The before send function has aborted the request", error: "There was an error with your request", exitConditions: "API Request Aborted. Exit conditions met", JSONParse: "JSON could not be parsed during error handling", legacyParameters: "You are using legacy API success callback names", method: "The method you called is not defined", missingAction: "API action used but no url was defined", missingSerialize: "Required dependency jquery-serialize-object missing, using basic serialize", missingURL: "No URL specified for api event", noReturnedValue: "The beforeSend callback must return a settings object, beforeSend ignored.", parseError: "There was an error parsing your request", requiredParameter: "Missing a required URL parameter: ", statusMessage: "Server gave an error: ", timeout: "Your request timed out" }, regExp: { required: /\{\$*[A-z0-9]+\}/g, optional: /\{\/\$*[A-z0-9]+\}/g }, className: { loading: "loading", error: "error" }, selector: { form: "form" }, metadata: { action: "action" } }, e.api.settings.api = {};
})(jQuery, window, document);
});

require.register("web/static/css/components/checkbox", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.checkbox = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.extend(true, {}, $.fn.checkbox.settings, parameters),
          className = settings.className,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $label = $(this).find(selector.label).first(),
          $input = $(this).find(selector.input),
          instance = $module.data(moduleNamespace),
          observer,
          element = this,
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.add.events();

          if (module.is.checked()) {
            module.set.checked();
            if (settings.fireOnInit) {
              settings.onChecked.call($input.get());
            }
          } else {
            module.remove.checked();
            if (settings.fireOnInit) {
              settings.onUnchecked.call($input.get());
            }
          }
          module.observeChanges();

          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying module');
          module.remove.events();
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          $module = $(element);
          $label = $(element).find(selector.label).first();
          $input = $(element).find(selector.input);
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        attachEvents: function attachEvents(selector, event) {
          var $element = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element.on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound);
          }
        },

        event: {
          keydown: function keydown(event) {
            var key = event.which,
                keyCode = {
              enter: 13,
              space: 32,
              escape: 27
            };
            if (key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $module.blur();
            }
            if (!event.ctrlKey && (key == keyCode.enter || key == keyCode.space)) {
              module.verbose('Enter key pressed, toggling checkbox');
              module.toggle.call(this);
              event.preventDefault();
            }
          }
        },

        is: {
          radio: function radio() {
            return $module.hasClass(className.radio);
          },
          checked: function checked() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
          },
          unchecked: function unchecked() {
            return !module.is.checked();
          }
        },

        can: {
          change: function change() {
            return !($module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled'));
          },
          uncheck: function uncheck() {
            return typeof settings.uncheckable === 'boolean' ? settings.uncheckable : !module.is.radio();
          }
        },

        set: {
          checked: function checked() {
            $module.addClass(className.checked);
          },
          tab: function tab() {
            if ($input.attr('tabindex') === undefined) {
              $input.attr('tabindex', 0);
            }
          }
        },

        create: {
          label: function label() {
            if ($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
            } else if (!module.has.label()) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
            }
          }
        },

        has: {
          label: function label() {
            return $label.length > 0;
          }
        },

        add: {
          events: function events() {
            module.verbose('Attaching checkbox events');
            $module.on('click' + eventNamespace, module.toggle).on('keydown' + eventNamespace, selector.input, module.event.keydown);
          }
        },

        remove: {
          checked: function checked() {
            $module.removeClass(className.checked);
          },
          events: function events() {
            module.debug('Removing events');
            $module.off(eventNamespace).removeData(moduleNamespace);
            $input.off(eventNamespace, module.event.keydown);
            $label.off(eventNamespace);
          }
        },

        enable: function enable() {
          module.debug('Enabling checkbox functionality');
          $module.removeClass(className.disabled);
          $input.prop('disabled', false);
          settings.onEnabled.call($input.get());
        },

        disable: function disable() {
          module.debug('Disabling checkbox functionality');
          $module.addClass(className.disabled);
          $input.prop('disabled', 'disabled');
          settings.onDisabled.call($input.get());
        },

        check: function check() {
          module.debug('Enabling checkbox', $input);
          $input.prop('checked', true).trigger('change');
          module.set.checked();
          $input.trigger('blur');
          settings.onChange.call($input.get());
          settings.onChecked.call($input.get());
        },

        uncheck: function uncheck() {
          module.debug('Disabling checkbox');
          $input.prop('checked', false).trigger('change');
          module.remove.checked();
          $input.trigger('blur');
          settings.onChange.call($input.get());
          settings.onUnchecked.call($input.get());
        },

        toggle: function toggle(event) {
          if (!module.can.change()) {
            console.log(module.can.change());
            module.debug('Checkbox is read-only or disabled, ignoring toggle');
            return;
          }
          module.verbose('Determining new checkbox state');
          if (module.is.unchecked()) {
            module.check();
          } else if (module.is.checked() && module.can.uncheck()) {
            module.uncheck();
          }
        },
        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.checkbox.settings = {

    name: 'Checkbox',
    namespace: 'checkbox',

    debug: false,
    verbose: true,
    performance: true,

    // delegated event context
    uncheckable: 'auto',
    fireOnInit: true,

    onChange: function onChange() {},
    onChecked: function onChecked() {},
    onUnchecked: function onUnchecked() {},
    onEnabled: function onEnabled() {},
    onDisabled: function onDisabled() {},

    className: {
      checked: 'checked',
      disabled: 'disabled',
      radio: 'radio',
      readOnly: 'read-only'
    },

    error: {
      method: 'The method you called is not defined'
    },

    selector: {
      input: 'input[type="checkbox"], input[type="radio"]',
      label: 'label'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/checkbox.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, o) {
  "use strict";e.fn.checkbox = function (t) {
    var c,
        i = e(this),
        r = i.selector || "",
        a = new Date().getTime(),
        l = [],
        s = arguments[0],
        u = "string" == typeof s,
        d = [].slice.call(arguments, 1);return (i.each(function () {
      var i,
          b,
          g = e.extend(!0, {}, e.fn.checkbox.settings, t),
          h = g.className,
          f = g.namespace,
          p = g.selector,
          m = g.error,
          k = "." + f,
          v = "module-" + f,
          y = e(this),
          x = e(this).find(p.label).first(),
          C = e(this).find(p.input),
          D = y.data(v),
          E = this;b = { initialize: function initialize() {
          b.verbose("Initializing checkbox", g), b.create.label(), b.add.events(), b.is.checked() ? (b.set.checked(), g.fireOnInit && g.onChecked.call(C.get())) : (b.remove.checked(), g.fireOnInit && g.onUnchecked.call(C.get())), b.observeChanges(), b.instantiate();
        }, instantiate: function instantiate() {
          b.verbose("Storing instance of module", b), D = b, y.data(v, b);
        }, destroy: function destroy() {
          b.verbose("Destroying module"), b.remove.events(), y.removeData(v);
        }, refresh: function refresh() {
          y = e(E), x = e(E).find(p.label).first(), C = e(E).find(p.input);
        }, observeChanges: function observeChanges() {
          "MutationObserver" in n && (i = new MutationObserver(function (e) {
            b.debug("DOM tree modified, updating selector cache"), b.refresh();
          }), i.observe(E, { childList: !0, subtree: !0 }), b.debug("Setting up mutation observer", i));
        }, attachEvents: function attachEvents(n, t) {
          var o = e(n);t = e.isFunction(b[t]) ? b[t] : b.toggle, o.length > 0 ? (b.debug("Attaching checkbox events to element", n, t), o.on("click" + k, t)) : b.error(m.notFound);
        }, event: { keydown: function keydown(e) {
            var n = e.which,
                t = { enter: 13, space: 32, escape: 27 };n == t.escape && (b.verbose("Escape key pressed blurring field"), y.blur()), e.ctrlKey || n != t.enter && n != t.space || (b.verbose("Enter key pressed, toggling checkbox"), b.toggle.call(this), e.preventDefault());
          } }, is: { radio: function radio() {
            return y.hasClass(h.radio);
          }, checked: function checked() {
            return C.prop("checked") !== o && C.prop("checked");
          }, unchecked: function unchecked() {
            return !b.is.checked();
          } }, can: { change: function change() {
            return !(y.hasClass(h.disabled) || y.hasClass(h.readOnly) || C.prop("disabled"));
          }, uncheck: function uncheck() {
            return "boolean" == typeof g.uncheckable ? g.uncheckable : !b.is.radio();
          } }, set: { checked: function checked() {
            y.addClass(h.checked);
          }, tab: function tab() {
            C.attr("tabindex") === o && C.attr("tabindex", 0);
          } }, create: { label: function label() {
            C.prevAll(p.label).length > 0 ? (C.prev(p.label).detach().insertAfter(C), b.debug("Moving existing label", x)) : b.has.label() || (x = e("<label>").insertAfter(C), b.debug("Creating label", x));
          } }, has: { label: function label() {
            return x.length > 0;
          } }, add: { events: function events() {
            b.verbose("Attaching checkbox events"), y.on("click" + k, b.toggle).on("keydown" + k, p.input, b.event.keydown);
          } }, remove: { checked: function checked() {
            y.removeClass(h.checked);
          }, events: function events() {
            b.debug("Removing events"), y.off(k).removeData(v), C.off(k, b.event.keydown), x.off(k);
          } }, enable: function enable() {
          b.debug("Enabling checkbox functionality"), y.removeClass(h.disabled), C.prop("disabled", !1), g.onEnabled.call(C.get());
        }, disable: function disable() {
          b.debug("Disabling checkbox functionality"), y.addClass(h.disabled), C.prop("disabled", "disabled"), g.onDisabled.call(C.get());
        }, check: function check() {
          b.debug("Enabling checkbox", C), C.prop("checked", !0).trigger("change"), b.set.checked(), C.trigger("blur"), g.onChange.call(C.get()), g.onChecked.call(C.get());
        }, uncheck: function uncheck() {
          b.debug("Disabling checkbox"), C.prop("checked", !1).trigger("change"), b.remove.checked(), C.trigger("blur"), g.onChange.call(C.get()), g.onUnchecked.call(C.get());
        }, toggle: function toggle(e) {
          return b.can.change() ? (b.verbose("Determining new checkbox state"), void (b.is.unchecked() ? b.check() : b.is.checked() && b.can.uncheck() && b.uncheck())) : (console.log(b.can.change()), void b.debug("Checkbox is read-only or disabled, ignoring toggle"));
        }, setting: function setting(n, t) {
          if ((b.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, g, n);else {
            if (t === o) return g[n];g[n] = t;
          }
        }, internal: function internal(n, t) {
          if (e.isPlainObject(n)) e.extend(!0, b, n);else {
            if (t === o) return b[n];b[n] = t;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, g.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, o;g.performance && (n = new Date().getTime(), o = a || n, t = n - o, a = n, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: E, "Execution Time": t })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 100);
          }, display: function display() {
            var n = g.name + ":",
                t = 0;a = !1, clearTimeout(b.performance.timer), e.each(l, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", r && (n += " '" + r + "'"), (console.group !== o || console.table !== o) && l.length > 0 && (console.groupCollapsed(n), console.table ? console.table(l) : e.each(l, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(n, t, i) {
          var r,
              a,
              l,
              s = D;return (t = t || d, i = E || i, "string" == typeof n && s !== o && (n = n.split(/[\. ]/), r = n.length - 1, e.each(n, function (t, c) {
            var i = t != r ? c + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(s[i]) && t != r) s = s[i];else {
              if (s[i] !== o) return (a = s[i], !1);if (!e.isPlainObject(s[c]) || t == r) return s[c] !== o ? (a = s[c], !1) : (b.error(m.method, n), !1);s = s[c];
            }
          })), e.isFunction(a) ? l = a.apply(i, t) : a !== o && (l = a), e.isArray(c) ? c.push(l) : c !== o ? c = [c, l] : l !== o && (c = l), a);
        } }, u ? (D === o && b.initialize(), b.invoke(s)) : (D !== o && D.invoke("destroy"), b.initialize());
    }), c !== o ? c : this);
  }, e.fn.checkbox.settings = { name: "Checkbox", namespace: "checkbox", debug: !1, verbose: !0, performance: !0, uncheckable: "auto", fireOnInit: !0, onChange: function onChange() {}, onChecked: function onChecked() {}, onUnchecked: function onUnchecked() {}, onEnabled: function onEnabled() {}, onDisabled: function onDisabled() {}, className: { checked: "checked", disabled: "disabled", radio: "radio", readOnly: "read-only" }, error: { method: "The method you called is not defined" }, selector: { input: "input[type=\"checkbox\"], input[type=\"radio\"]", label: "label" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/dimmer", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.dimmer = function (parameters) {
    var $allModules = $(this),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dimmer.settings, parameters) : $.extend({}, $.fn.dimmer.settings),
          selector = settings.selector,
          namespace = settings.namespace,
          className = settings.className,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          moduleSelector = $allModules.selector || '',
          clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click',
          $module = $(this),
          $dimmer,
          $dimmable,
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        preinitialize: function preinitialize() {
          if (module.is.dimmer()) {
            $dimmable = $module.parent();
            $dimmer = $module;
          } else {
            $dimmable = $module;
            if (module.has.dimmer()) {
              if (settings.dimmerName) {
                $dimmer = $dimmable.children(selector.dimmer).filter('.' + settings.dimmerName);
              } else {
                $dimmer = $dimmable.children(selector.dimmer);
              }
            } else {
              $dimmer = module.create();
            }
          }
        },

        initialize: function initialize() {
          module.debug('Initializing dimmer', settings);
          if (settings.on == 'hover') {
            $dimmable.on('mouseenter' + eventNamespace, module.show).on('mouseleave' + eventNamespace, module.hide);
          } else if (settings.on == 'click') {
            $dimmable.on(clickEvent + eventNamespace, module.toggle);
          }
          if (module.is.page()) {
            module.debug('Setting as a page dimmer', $dimmable);
            module.set.pageDimmer();
          }

          if (module.is.closable()) {
            module.verbose('Adding dimmer close event', $dimmer);
            $dimmer.on(clickEvent + eventNamespace, module.event.click);
          }
          module.set.dimmable();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', $dimmer);
          $module.removeData(moduleNamespace);
          $dimmable.off(eventNamespace);
          $dimmer.off(eventNamespace);
        },

        event: {
          click: function click(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if ($dimmer.find(event.target).length === 0 || $(event.target).is(selector.content)) {
              module.hide();
              event.stopImmediatePropagation();
            }
          }
        },

        addContent: function addContent(element) {
          var $content = $(element);
          module.debug('Add content to dimmer', $content);
          if ($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
          }
        },

        create: function create() {
          var $element = $(settings.template.dimmer());
          if (settings.variation) {
            module.debug('Creating dimmer with variation', settings.variation);
            $element.addClass(settings.variation);
          }
          if (settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
          }
          $element.appendTo($dimmable);
          return $element;
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.debug('Showing dimmer', $dimmer, settings);
          if ((!module.is.dimmed() || module.is.animating()) && module.is.enabled()) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
          } else {
            module.debug('Dimmer is already shown or disabled');
          }
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.dimmed() || module.is.animating()) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
          } else {
            module.debug('Dimmer is not visible');
          }
        },

        toggle: function toggle() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if (!module.is.dimmed()) {
            module.show();
          } else {
            module.hide();
          }
        },

        animate: {
          show: function show(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if (settings.opacity !== 'auto') {
                module.set.opacity();
              }
              $dimmer.transition({
                animation: settings.transition + ' in',
                queue: false,
                duration: module.get.duration(),
                useFailSafe: true,
                onStart: function onStart() {
                  module.set.dimmed();
                },
                onComplete: function onComplete() {
                  module.set.active();
                  callback();
                }
              });
            } else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if (settings.opacity == 'auto') {
                settings.opacity = 0.8;
              }
              $dimmer.stop().css({
                opacity: 0,
                width: '100%',
                height: '100%'
              }).fadeTo(module.get.duration(), settings.opacity, function () {
                $dimmer.removeAttr('style');
                module.set.active();
                callback();
              });
            }
          },
          hide: function hide(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer.transition({
                animation: settings.transition + ' out',
                queue: false,
                duration: module.get.duration(),
                useFailSafe: true,
                onStart: function onStart() {
                  module.remove.dimmed();
                },
                onComplete: function onComplete() {
                  module.remove.active();
                  callback();
                }
              });
            } else {
              module.verbose('Hiding dimmer with javascript');
              module.remove.dimmed();
              $dimmer.stop().fadeOut(module.get.duration(), function () {
                module.remove.active();
                $dimmer.removeAttr('style');
                callback();
              });
            }
          }
        },

        get: {
          dimmer: function dimmer() {
            return $dimmer;
          },
          duration: function duration() {
            if (typeof settings.duration == 'object') {
              if (module.is.active()) {
                return settings.duration.hide;
              } else {
                return settings.duration.show;
              }
            }
            return settings.duration;
          }
        },

        has: {
          dimmer: function dimmer() {
            if (settings.dimmerName) {
              return $module.children(selector.dimmer).filter('.' + settings.dimmerName).length > 0;
            } else {
              return $module.children(selector.dimmer).length > 0;
            }
          }
        },

        is: {
          active: function active() {
            return $dimmer.hasClass(className.active);
          },
          animating: function animating() {
            return $dimmer.is(':animated') || $dimmer.hasClass(className.animating);
          },
          closable: function closable() {
            if (settings.closable == 'auto') {
              if (settings.on == 'hover') {
                return false;
              }
              return true;
            }
            return settings.closable;
          },
          dimmer: function dimmer() {
            return $module.is(selector.dimmer);
          },
          dimmable: function dimmable() {
            return $module.is(selector.dimmable);
          },
          dimmed: function dimmed() {
            return $dimmable.hasClass(className.dimmed);
          },
          disabled: function disabled() {
            return $dimmable.hasClass(className.disabled);
          },
          enabled: function enabled() {
            return !module.is.disabled();
          },
          page: function page() {
            return $dimmable.is('body');
          },
          pageDimmer: function pageDimmer() {
            return $dimmer.hasClass(className.pageDimmer);
          }
        },

        can: {
          show: function show() {
            return !$dimmer.hasClass(className.disabled);
          }
        },

        set: {
          opacity: function opacity(opacity) {
            var opacity = settings.opacity || opacity,
                color = $dimmer.css('background-color'),
                colorArray = color.split(','),
                isRGBA = colorArray && colorArray.length == 4;
            if (isRGBA) {
              colorArray[3] = opacity + ')';
              color = colorArray.join(',');
            } else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
            }
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
          },
          active: function active() {
            $dimmer.addClass(className.active);
          },
          dimmable: function dimmable() {
            $dimmable.addClass(className.dimmable);
          },
          dimmed: function dimmed() {
            $dimmable.addClass(className.dimmed);
          },
          pageDimmer: function pageDimmer() {
            $dimmer.addClass(className.pageDimmer);
          },
          disabled: function disabled() {
            $dimmer.addClass(className.disabled);
          }
        },

        remove: {
          active: function active() {
            $dimmer.removeClass(className.active);
          },
          dimmed: function dimmed() {
            $dimmable.removeClass(className.dimmed);
          },
          disabled: function disabled() {
            $dimmer.removeClass(className.disabled);
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      module.preinitialize();

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.dimmer.settings = {

    name: 'Dimmer',
    namespace: 'dimmer',

    debug: false,
    verbose: true,
    performance: true,

    // name to distinguish between multiple dimmers in context
    dimmerName: false,

    // whether to add a variation type
    variation: false,

    // whether to bind close events
    closable: 'auto',

    // whether to use css animations
    useCSS: true,

    // css animation to use
    transition: 'fade',

    // event to bind to
    on: false,

    // overriding opacity value
    opacity: 'auto',

    // transition durations
    duration: {
      show: 500,
      hide: 500
    },

    onChange: function onChange() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    error: {
      method: 'The method you called is not defined.'
    },

    selector: {
      dimmable: '.dimmable',
      dimmer: '.ui.dimmer',
      content: '.ui.dimmer > .content, .ui.dimmer > .content > .center'
    },

    template: {
      dimmer: function dimmer() {
        return $('<div />').attr('class', 'ui dimmer');
      }
    },

    className: {
      active: 'active',
      animating: 'animating',
      dimmable: 'dimmable',
      dimmed: 'dimmed',
      disabled: 'disabled',
      hide: 'hide',
      pageDimmer: 'page',
      show: 'show'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/dimmer.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, i, n, t) {
  "use strict";e.fn.dimmer = function (i) {
    var o,
        a = e(this),
        r = new Date().getTime(),
        m = [],
        s = arguments[0],
        d = "string" == typeof s,
        c = [].slice.call(arguments, 1);return (a.each(function () {
      var u,
          l,
          f,
          g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.dimmer.settings, i) : e.extend({}, e.fn.dimmer.settings),
          p = g.selector,
          h = g.namespace,
          b = g.className,
          v = g.error,
          y = "." + h,
          C = "module-" + h,
          w = a.selector || "",
          S = "ontouchstart" in n.documentElement ? "touchstart" : "click",
          D = e(this),
          T = this,
          N = D.data(C);f = { preinitialize: function preinitialize() {
          f.is.dimmer() ? (l = D.parent(), u = D) : (l = D, u = f.has.dimmer() ? g.dimmerName ? l.children(p.dimmer).filter("." + g.dimmerName) : l.children(p.dimmer) : f.create());
        }, initialize: function initialize() {
          f.debug("Initializing dimmer", g), "hover" == g.on ? l.on("mouseenter" + y, f.show).on("mouseleave" + y, f.hide) : "click" == g.on && l.on(S + y, f.toggle), f.is.page() && (f.debug("Setting as a page dimmer", l), f.set.pageDimmer()), f.is.closable() && (f.verbose("Adding dimmer close event", u), u.on(S + y, f.event.click)), f.set.dimmable(), f.instantiate();
        }, instantiate: function instantiate() {
          f.verbose("Storing instance of module", f), N = f, D.data(C, N);
        }, destroy: function destroy() {
          f.verbose("Destroying previous module", u), D.removeData(C), l.off(y), u.off(y);
        }, event: { click: function click(i) {
            f.verbose("Determining if event occured on dimmer", i), (0 === u.find(i.target).length || e(i.target).is(p.content)) && (f.hide(), i.stopImmediatePropagation());
          } }, addContent: function addContent(i) {
          var n = e(i);f.debug("Add content to dimmer", n), n.parent()[0] !== u[0] && n.detach().appendTo(u);
        }, create: function create() {
          var i = e(g.template.dimmer());return (g.variation && (f.debug("Creating dimmer with variation", g.variation), i.addClass(g.variation)), g.dimmerName && (f.debug("Creating named dimmer", g.dimmerName), i.addClass(g.dimmerName)), i.appendTo(l), i);
        }, show: function show(i) {
          i = e.isFunction(i) ? i : function () {}, f.debug("Showing dimmer", u, g), f.is.dimmed() && !f.is.animating() || !f.is.enabled() ? f.debug("Dimmer is already shown or disabled") : (f.animate.show(i), g.onShow.call(T), g.onChange.call(T));
        }, hide: function hide(i) {
          i = e.isFunction(i) ? i : function () {}, f.is.dimmed() || f.is.animating() ? (f.debug("Hiding dimmer", u), f.animate.hide(i), g.onHide.call(T), g.onChange.call(T)) : f.debug("Dimmer is not visible");
        }, toggle: function toggle() {
          f.verbose("Toggling dimmer visibility", u), f.is.dimmed() ? f.hide() : f.show();
        }, animate: { show: function show(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? ("auto" !== g.opacity && f.set.opacity(), u.transition({ animation: g.transition + " in", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.set.dimmed();
              }, onComplete: function onComplete() {
                f.set.active(), i();
              } })) : (f.verbose("Showing dimmer animation with javascript"), f.set.dimmed(), "auto" == g.opacity && (g.opacity = 0.8), u.stop().css({ opacity: 0, width: "100%", height: "100%" }).fadeTo(f.get.duration(), g.opacity, function () {
              u.removeAttr("style"), f.set.active(), i();
            }));
          }, hide: function hide(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? (f.verbose("Hiding dimmer with css"), u.transition({ animation: g.transition + " out", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.remove.dimmed();
              }, onComplete: function onComplete() {
                f.remove.active(), i();
              } })) : (f.verbose("Hiding dimmer with javascript"), f.remove.dimmed(), u.stop().fadeOut(f.get.duration(), function () {
              f.remove.active(), u.removeAttr("style"), i();
            }));
          } }, get: { dimmer: function dimmer() {
            return u;
          }, duration: function duration() {
            return "object" == typeof g.duration ? f.is.active() ? g.duration.hide : g.duration.show : g.duration;
          } }, has: { dimmer: function dimmer() {
            return g.dimmerName ? D.children(p.dimmer).filter("." + g.dimmerName).length > 0 : D.children(p.dimmer).length > 0;
          } }, is: { active: function active() {
            return u.hasClass(b.active);
          }, animating: function animating() {
            return u.is(":animated") || u.hasClass(b.animating);
          }, closable: function closable() {
            return "auto" == g.closable ? "hover" == g.on ? !1 : !0 : g.closable;
          }, dimmer: function dimmer() {
            return D.is(p.dimmer);
          }, dimmable: function dimmable() {
            return D.is(p.dimmable);
          }, dimmed: function dimmed() {
            return l.hasClass(b.dimmed);
          }, disabled: function disabled() {
            return l.hasClass(b.disabled);
          }, enabled: function enabled() {
            return !f.is.disabled();
          }, page: function page() {
            return l.is("body");
          }, pageDimmer: function pageDimmer() {
            return u.hasClass(b.pageDimmer);
          } }, can: { show: function show() {
            return !u.hasClass(b.disabled);
          } }, set: { opacity: function opacity(e) {
            var e = g.opacity || e,
                i = u.css("background-color"),
                n = i.split(","),
                t = n && 4 == n.length;t ? (n[3] = e + ")", i = n.join(",")) : i = "rgba(0, 0, 0, " + e + ")", f.debug("Setting opacity to", e), u.css("background-color", i);
          }, active: function active() {
            u.addClass(b.active);
          }, dimmable: function dimmable() {
            l.addClass(b.dimmable);
          }, dimmed: function dimmed() {
            l.addClass(b.dimmed);
          }, pageDimmer: function pageDimmer() {
            u.addClass(b.pageDimmer);
          }, disabled: function disabled() {
            u.addClass(b.disabled);
          } }, remove: { active: function active() {
            u.removeClass(b.active);
          }, dimmed: function dimmed() {
            l.removeClass(b.dimmed);
          }, disabled: function disabled() {
            u.removeClass(b.disabled);
          } }, setting: function setting(i, n) {
          if ((f.debug("Changing setting", i, n), e.isPlainObject(i))) e.extend(!0, g, i);else {
            if (n === t) return g[i];g[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, f, i);else {
            if (n === t) return f[i];f[i] = n;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), f.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), f.verbose.apply(console, arguments)));
        }, error: function error() {
          f.error = Function.prototype.bind.call(console.error, console, g.name + ":"), f.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var i, n, t;g.performance && (i = new Date().getTime(), t = r || i, n = i - t, r = i, m.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": n })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 100);
          }, display: function display() {
            var i = g.name + ":",
                n = 0;r = !1, clearTimeout(f.performance.timer), e.each(m, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", w && (i += " '" + w + "'"), a.length > 1 && (i += " (" + a.length + ")"), (console.group !== t || console.table !== t) && m.length > 0 && (console.groupCollapsed(i), console.table ? console.table(m) : e.each(m, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), m = [];
          } }, invoke: function invoke(i, n, a) {
          var r,
              m,
              s,
              d = N;return (n = n || c, a = T || a, "string" == typeof i && d !== t && (i = i.split(/[\. ]/), r = i.length - 1, e.each(i, function (n, o) {
            var a = n != r ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(d[a]) && n != r) d = d[a];else {
              if (d[a] !== t) return (m = d[a], !1);if (!e.isPlainObject(d[o]) || n == r) return d[o] !== t ? (m = d[o], !1) : (f.error(v.method, i), !1);d = d[o];
            }
          })), e.isFunction(m) ? s = m.apply(a, n) : m !== t && (s = m), e.isArray(o) ? o.push(s) : o !== t ? o = [o, s] : s !== t && (o = s), m);
        } }, f.preinitialize(), d ? (N === t && f.initialize(), f.invoke(s)) : (N !== t && N.invoke("destroy"), f.initialize());
    }), o !== t ? o : this);
  }, e.fn.dimmer.settings = { name: "Dimmer", namespace: "dimmer", debug: !1, verbose: !0, performance: !0, dimmerName: !1, variation: !1, closable: "auto", useCSS: !0, transition: "fade", on: !1, opacity: "auto", duration: { show: 500, hide: 500 }, onChange: function onChange() {}, onShow: function onShow() {}, onHide: function onHide() {}, error: { method: "The method you called is not defined." }, selector: { dimmable: ".dimmable", dimmer: ".ui.dimmer", content: ".ui.dimmer > .content, .ui.dimmer > .content > .center" }, template: { dimmer: function dimmer() {
        return e("<div />").attr("class", "ui dimmer");
      } }, className: { active: "active", animating: "animating", dimmable: "dimmable", dimmed: "dimmed", disabled: "disabled", hide: "hide", pageDimmer: "page", show: "show" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/dropdown", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.dropdown = function (parameters) {
    var $allModules = $(this),
        $document = $(document),
        moduleSelector = $allModules.selector || '',
        hasTouch = ('ontouchstart' in document.documentElement),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dropdown.settings, parameters) : $.extend({}, $.fn.dropdown.settings),
          className = settings.className,
          metadata = settings.metadata,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $text = $module.find(selector.text),
          $search = $module.find(selector.search),
          $input = $module.find(selector.input),
          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev(),
          $menu = $module.children(selector.menu),
          $item = $menu.find(selector.item),
          activated = false,
          itemActivated = false,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          observer,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing dropdown', settings);

          if (module.is.alreadySetup()) {
            module.setup.reference();
          } else {
            module.setup.layout();

            module.save.defaults();
            module.set.selected();

            module.create.id();

            if (hasTouch) {
              module.bind.touchEvents();
            }
            module.bind.mouseEvents();
            module.bind.keyboardEvents();

            module.observeChanges();
            module.instantiate();
          }
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of dropdown', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous dropdown for', $module);
          module.remove.tabbable();
          $module.off(eventNamespace).removeData(moduleNamespace);
          $menu.off(eventNamespace);
          $document.off(elementNamespace);
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              if (module.is.selectMutation(mutations)) {
                module.debug('<select> modified, recreating menu');
                module.setup.select();
              } else {
                module.debug('DOM tree modified, updating selector cache');
                module.refresh();
              }
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        create: {
          id: function id() {
            _id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + _id;
            module.verbose('Creating unique id for element', _id);
          }
        },

        search: function search() {
          var query;
          query = $search.val();

          module.verbose('Searching for query', query);
          module.filter(query);
          if (module.is.searchSelection() && module.can.show()) {
            module.show();
          }
        },

        setup: {
          layout: function layout() {
            if ($module.is('select')) {
              module.setup.select();
            }
            if (module.is.search() && !module.is.searchable()) {
              $search = $('<input />').addClass(className.search).insertBefore($text);
            }
            if (settings.allowTab) {
              module.set.tabbable();
            }
          },
          select: function select() {
            var selectValues = module.get.selectValues();
            module.debug('Dropdown initialized on a select', selectValues);
            if ($module.is('select')) {
              $input = $module;
            }
            // see if select is placed correctly already
            if ($input.parent(selector.dropdown).length > 0) {
              module.debug('UI dropdown already exists. Creating dropdown menu only');
              $module = $input.closest(selector.dropdown);
              $menu = $module.children(selector.menu);
              if ($menu.length === 0) {
                $menu = $('<div />').addClass(className.menu).appendTo($module);
              }
              $menu.html(settings.templates.menu(selectValues));
            } else {
              module.debug('Creating entire dropdown from select');
              $module = $('<div />').attr('class', $input.attr('class')).addClass(className.selection).addClass(className.dropdown).html(settings.templates.dropdown(selectValues)).insertBefore($input);
              $input.removeAttr('class').prependTo($module);
            }
            module.refresh();
          },
          reference: function reference() {
            var index = $allModules.index($module),
                $firstModules,
                $lastModules;
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');
            // replace module reference
            $module = $module.parent(selector.dropdown);
            module.refresh();
            // adjust all modules
            $firstModules = $allModules.slice(0, index);
            $lastModules = $allModules.slice(index + 1);
            $allModules = $firstModules.add($module).add($lastModules);
            // invoke method in context of current instance
            if (methodInvoked) {
              instance = module;
              module.invoke(query);
            }
          }
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $text = $module.find(selector.text);
          $search = $module.find(selector.search);
          $input = $module.find(selector.input);
          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev();
          $menu = $module.children(selector.menu);
          $item = $menu.find(selector.item);
        },

        toggle: function toggle() {
          module.verbose('Toggling menu visibility');
          if (!module.is.active()) {
            module.show();
          } else {
            module.hide();
          }
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.searchSelection() && module.is.allFiltered()) {
            return;
          }
          if (module.can.show() && !module.is.active()) {
            module.debug('Showing dropdown');
            module.animate.show(function () {
              if (module.can.click()) {
                module.bind.intent();
              }
              module.set.visible();
              callback.call(element);
            });
            settings.onShow.call(element);
          }
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.active()) {
            module.debug('Hiding dropdown');
            module.animate.hide(function () {
              module.remove.visible();
              callback.call(element);
            });
            settings.onHide.call(element);
          }
        },

        hideOthers: function hideOthers() {
          module.verbose('Finding other dropdowns to hide');
          $allModules.not($module).has(selector.menu + ':visible:not(.' + className.animating + ')').dropdown('hide');
        },

        hideSubMenus: function hideSubMenus() {
          var $subMenus = $menu.find(selector.menu);
          $subMenus.transition('hide');
        },

        bind: {
          keyboardEvents: function keyboardEvents() {
            module.debug('Binding keyboard events');
            $module.on('keydown' + eventNamespace, module.event.keydown);
            if (module.is.searchable()) {
              $module.on(module.get.inputEvent(), selector.search, module.event.input);
            }
          },
          touchEvents: function touchEvents() {
            module.debug('Touch device detected binding additional touch events');
            if (module.is.searchSelection()) {} else {
              $module.on('touchstart' + eventNamespace, module.event.test.toggle);
            }
            $menu.on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter);
          },
          mouseEvents: function mouseEvents() {
            module.verbose('Mouse detected binding mouse events');
            if (module.is.searchSelection()) {
              $module.on('mousedown' + eventNamespace, selector.menu, module.event.menu.activate).on('mouseup' + eventNamespace, selector.menu, module.event.menu.deactivate).on('click' + eventNamespace, selector.search, module.show).on('focus' + eventNamespace, selector.search, module.event.searchFocus).on('blur' + eventNamespace, selector.search, module.event.searchBlur).on('click' + eventNamespace, selector.text, module.event.searchTextFocus);
            } else {
              if (settings.on == 'click') {
                $module.on('click' + eventNamespace, module.event.test.toggle);
              } else if (settings.on == 'hover') {
                $module.on('mouseenter' + eventNamespace, module.delay.show).on('mouseleave' + eventNamespace, module.delay.hide);
              } else {
                $module.on(settings.on + eventNamespace, module.toggle);
              }
              $module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('focus' + eventNamespace, module.event.focus).on('blur' + eventNamespace, module.event.blur);
            }
            $menu.on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter).on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave).on('click' + eventNamespace, selector.item, module.event.item.click);
          },
          intent: function intent() {
            module.verbose('Binding hide intent event to document');
            if (hasTouch) {
              $document.on('touchstart' + elementNamespace, module.event.test.touch).on('touchmove' + elementNamespace, module.event.test.touch);
            }
            $document.on('click' + elementNamespace, module.event.test.hide);
          }
        },

        unbind: {
          intent: function intent() {
            module.verbose('Removing hide intent event from document');
            if (hasTouch) {
              $document.off('touchstart' + elementNamespace).off('touchmove' + elementNamespace);
            }
            $document.off('click' + elementNamespace);
          }
        },

        filter: function filter(searchTerm) {
          var $results = $(),
              escapedTerm = module.escape.regExp(searchTerm),
              exactRegExp = new RegExp('^' + escapedTerm, 'igm'),
              fullTextRegExp = new RegExp(escapedTerm, 'ig'),
              allItemsFiltered;
          module.verbose('Searching for matching values');
          $item.each(function () {
            var $choice = $(this),
                text = String(module.get.choiceText($choice, false)),
                value = String(module.get.choiceValue($choice, text));
            if (text.match(exactRegExp) || value.match(exactRegExp)) {
              $results = $results.add($choice);
            } else if (settings.fullTextSearch) {
              if (text.match(fullTextRegExp) || value.match(fullTextRegExp)) {
                $results = $results.add($choice);
              }
            }
          });

          module.debug('Setting filter', searchTerm);
          module.remove.filteredItem();
          $item.not($results).addClass(className.filtered);

          module.verbose('Selecting first non-filtered element');
          module.remove.selectedItem();
          $item.not('.' + className.filtered).eq(0).addClass(className.selected);
          if (module.is.allFiltered()) {
            module.debug('All items filtered, hiding dropdown', searchTerm);
            if (module.is.searchSelection()) {
              module.hide();
            }
            settings.onNoResults.call(element, searchTerm);
          }
        },

        focusSearch: function focusSearch() {
          if (module.is.search()) {
            $search.focus();
          }
        },

        forceSelection: function forceSelection() {
          var $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
              $activeItem = $item.filter('.' + className.active).eq(0),
              $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,
              hasSelected = $selectedItem.size() > 0;
          if (hasSelected) {
            module.event.item.click.call($selectedItem);
            module.remove.filteredItem();
          } else {
            module.hide();
          }
        },

        event: {
          // prevents focus callback from occuring on mousedown
          mousedown: function mousedown() {
            activated = true;
          },
          mouseup: function mouseup() {
            activated = false;
          },
          focus: function focus() {
            if (!activated && module.is.hidden()) {
              module.show();
            }
          },
          blur: function blur(event) {
            var pageLostFocus = document.activeElement === this;
            if (!activated && !pageLostFocus) {
              module.hide();
            }
          },
          searchFocus: function searchFocus() {
            activated = true;
            module.show();
          },
          searchBlur: function searchBlur(event) {
            var pageLostFocus = document.activeElement === this;
            if (!itemActivated && !pageLostFocus) {
              if (settings.forceSelection) {
                module.forceSelection();
              } else {
                module.hide();
              }
            }
          },
          searchTextFocus: function searchTextFocus(event) {
            activated = true;
            $search.focus();
          },
          input: function input(event) {
            if (module.is.searchSelection()) {
              module.set.filtered();
            }
            clearTimeout(module.timer);
            module.timer = setTimeout(module.search, settings.delay.search);
          },
          keydown: function keydown(event) {
            var $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
                $activeItem = $menu.children('.' + className.active).eq(0),
                $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,
                $visibleItems = $selectedItem.length > 0 ? $selectedItem.siblings(':not(.' + className.filtered + ')').andSelf() : $menu.children(':not(.' + className.filtered + ')'),
                $subMenu = $selectedItem.children(selector.menu),
                $parentMenu = $selectedItem.closest(selector.menu),
                isSubMenuItem = $parentMenu[0] !== $menu[0],
                inVisibleMenu = $parentMenu.is(':visible'),
                pressedKey = event.which,
                keys = {
              enter: 13,
              escape: 27,
              leftArrow: 37,
              upArrow: 38,
              rightArrow: 39,
              downArrow: 40
            },
                hasSubMenu = $subMenu.length > 0,
                hasSelectedItem = $selectedItem.length > 0,
                lastVisibleIndex = $visibleItems.size() - 1,
                $nextItem,
                newIndex;
            // visible menu keyboard shortcuts
            if (module.is.visible()) {
              // enter (select or sub-menu)
              if (pressedKey == keys.enter && hasSelectedItem) {
                if (hasSubMenu && !settings.allowCategorySelection) {
                  module.verbose('Pressed enter on unselectable category, opening sub menu');
                  pressedKey = keys.rightArrow;
                } else {
                  module.verbose('Enter key pressed, choosing selected item');
                  module.event.item.click.call($selectedItem, event);
                }
              }
              // left arrow (hide sub-menu)
              if (pressedKey == keys.leftArrow) {
                if (isSubMenuItem) {
                  module.verbose('Left key pressed, closing sub-menu');
                  module.animate.hide(false, $parentMenu);
                  $selectedItem.removeClass(className.selected);
                  $parentMenu.closest(selector.item).addClass(className.selected);
                  event.preventDefault();
                }
              }
              // right arrow (show sub-menu)
              if (pressedKey == keys.rightArrow) {
                if (hasSubMenu) {
                  module.verbose('Right key pressed, opening sub-menu');
                  module.animate.show(false, $subMenu);
                  $selectedItem.removeClass(className.selected);
                  $subMenu.find(selector.item).eq(0).addClass(className.selected);
                  event.preventDefault();
                }
              }
              // up arrow (traverse menu up)
              if (pressedKey == keys.upArrow) {
                $nextItem = hasSelectedItem && inVisibleMenu ? $selectedItem.prevAll(selector.item + ':not(.' + className.filtered + ')').eq(0) : $item.eq(0);
                if ($visibleItems.index($nextItem) < 0) {
                  module.verbose('Up key pressed but reached top of current menu');
                  return;
                } else {
                  module.verbose('Up key pressed, changing active item');
                  $selectedItem.removeClass(className.selected);
                  $nextItem.addClass(className.selected);
                  module.set.scrollPosition($nextItem);
                }
                event.preventDefault();
              }
              // down arrow (traverse menu down)
              if (pressedKey == keys.downArrow) {
                $nextItem = hasSelectedItem && inVisibleMenu ? $nextItem = $selectedItem.nextAll(selector.item + ':not(.' + className.filtered + ')').eq(0) : $item.eq(0);
                if ($nextItem.length === 0) {
                  module.verbose('Down key pressed but reached bottom of current menu');
                  return;
                } else {
                  module.verbose('Down key pressed, changing active item');
                  $item.removeClass(className.selected);
                  $nextItem.addClass(className.selected);
                  module.set.scrollPosition($nextItem);
                }
                event.preventDefault();
              }
            } else {
              // enter (open menu)
              if (pressedKey == keys.enter) {
                module.verbose('Enter key pressed, showing dropdown');
                module.show();
              }
              // escape (close menu)
              if (pressedKey == keys.escape) {
                module.verbose('Escape key pressed, closing dropdown');
                module.hide();
              }
              // down arrow (open menu)
              if (pressedKey == keys.downArrow) {
                module.verbose('Down key pressed, showing dropdown');
                module.show();
              }
            }
          },
          test: {
            toggle: function toggle(event) {
              if (module.determine.eventInMenu(event, module.toggle)) {
                event.preventDefault();
              }
            },
            touch: function touch(event) {
              module.determine.eventInMenu(event, function () {
                if (event.type == 'touchstart') {
                  module.timer = setTimeout(module.hide, settings.delay.touch);
                } else if (event.type == 'touchmove') {
                  clearTimeout(module.timer);
                }
              });
              event.stopPropagation();
            },
            hide: function hide(event) {
              module.determine.eventInModule(event, module.hide);
            }
          },

          menu: {
            activate: function activate() {
              itemActivated = true;
            },
            deactivate: function deactivate() {
              itemActivated = false;
            }
          },
          item: {
            mouseenter: function mouseenter(event) {
              var $subMenu = $(this).children(selector.menu),
                  $otherMenus = $(this).siblings(selector.item).children(selector.menu);
              if ($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function () {
                  module.verbose('Showing sub-menu', $subMenu);
                  $.each($otherMenus, function () {
                    module.animate.hide(false, $(this));
                  });
                  module.animate.show(false, $subMenu);
                }, settings.delay.show);
                event.preventDefault();
              }
            },
            mouseleave: function mouseleave(event) {
              var $subMenu = $(this).children(selector.menu);
              if ($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function () {
                  module.verbose('Hiding sub-menu', $subMenu);
                  module.animate.hide(false, $subMenu);
                }, settings.delay.hide);
              }
            },
            click: function click(event) {
              var $choice = $(this),
                  $target = event ? $(event.target) : $(''),
                  $subMenu = $choice.find(selector.menu),
                  text = module.get.choiceText($choice),
                  value = module.get.choiceValue($choice, text),
                  callback = function callback() {
                module.remove.searchTerm();
                module.determine.selectAction(text, value);
              },
                  hasSubMenu = $subMenu.length > 0,
                  isBubbledEvent = $subMenu.find($target).length > 0;
              if (!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {
                callback();
              }
            }
          },
          resetStyle: function resetStyle() {
            $(this).removeAttr('style');
          }
        },

        determine: {
          selectAction: function selectAction(text, value) {
            module.verbose('Determining action', settings.action);
            if ($.isFunction(module.action[settings.action])) {
              module.verbose('Triggering preset action', settings.action, text, value);
              module.action[settings.action](text, value);
            } else if ($.isFunction(settings.action)) {
              module.verbose('Triggering user action', settings.action, text, value);
              settings.action(text, value);
            } else {
              module.error(error.action, settings.action);
            }
          },
          eventInModule: function eventInModule(event, callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if ($(event.target).closest($module).length === 0) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            } else {
              module.verbose('Event occurred in dropdown, canceling callback');
              return false;
            }
          },
          eventInMenu: function eventInMenu(event, callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if ($(event.target).closest($menu).length === 0) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            } else {
              module.verbose('Event occurred in dropdown menu, canceling callback');
              return false;
            }
          }
        },

        action: {

          nothing: function nothing() {},

          activate: function activate(text, value) {
            value = value !== undefined ? value : text;
            module.set.selected(value);
            module.hide(function () {
              module.remove.filteredItem();
            });
          },

          select: function select(text, value) {
            value = value !== undefined ? value : text;
            module.set.selected(value);
            module.hide(function () {
              module.remove.filteredItem();
            });
          },

          combo: function combo(text, value) {
            value = value !== undefined ? value : text;
            module.set.selected(value);
            module.hide(function () {
              module.remove.filteredItem();
            });
          },

          hide: function hide() {
            module.hide(function () {
              module.remove.filteredItem();
            });
          }

        },

        get: {
          id: function id() {
            return _id;
          },
          text: function text() {
            return $text.text();
          },
          value: function value() {
            return $input.length > 0 ? $input.val() : $module.data(metadata.value);
          },
          choiceText: function choiceText($choice, preserveHTML) {
            preserveHTML = preserveHTML !== undefined ? preserveHTML : settings.preserveHTML;
            if ($choice !== undefined) {
              if ($choice.find(selector.menu).length > 0) {
                module.verbose('Retreiving text of element with sub-menu');
                $choice = $choice.clone();
                $choice.find(selector.menu).remove();
                $choice.find(selector.menuIcon).remove();
              }
              return $choice.data(metadata.text) !== undefined ? $choice.data(metadata.text) : preserveHTML ? $choice.html().trim() : $choice.text().trim();
            }
          },
          choiceValue: function choiceValue($choice, choiceText) {
            choiceText = choiceText || module.get.choiceText($choice);
            return $choice.data(metadata.value) !== undefined ? $choice.data(metadata.value) : typeof choiceText === 'string' ? choiceText.toLowerCase().trim() : choiceText.trim();
          },
          inputEvent: function inputEvent() {
            var input = $search[0];
            if (input) {
              return input.oninput !== undefined ? 'input' : input.onpropertychange !== undefined ? 'propertychange' : 'keyup';
            }
            return false;
          },
          selectValues: function selectValues() {
            var select = {};
            select.values = settings.sortSelect ? {} // properties will be sorted in object when re-accessed
            : [] // properties will keep original order in array
            ;
            $module.find('option').each(function () {
              var name = $(this).html(),
                  value = $(this).attr('value') !== undefined ? $(this).attr('value') : name;
              if (value === '') {
                select.placeholder = name;
              } else {
                if (settings.sortSelect) {
                  select.values[value] = {
                    name: name,
                    value: value
                  };
                } else {
                  select.values.push({
                    name: name,
                    value: value
                  });
                }
              }
            });
            if (settings.sortSelect) {
              module.debug('Retrieved and sorted values from select', select);
            } else {
              module.debug('Retreived values from select', select);
            }
            return select;
          },
          activeItem: function activeItem() {
            return $item.filter('.' + className.active);
          },
          item: function item(value, strict) {
            var $selectedItem = false;
            value = value !== undefined ? value : module.get.value() !== undefined ? module.get.value() : module.get.text();
            strict = value === '' || value === 0 ? true : strict || false;
            if (value !== undefined) {
              $item.each(function () {
                var $choice = $(this),
                    optionText = module.get.choiceText($choice),
                    optionValue = module.get.choiceValue($choice, optionText);
                if (strict) {
                  module.verbose('Ambiguous dropdown value using strict type check', $choice, value);
                  if (optionValue === value) {
                    $selectedItem = $(this);
                    return true;
                  } else if (!$selectedItem && optionText === value) {
                    $selectedItem = $(this);
                    return true;
                  }
                } else {
                  if (optionValue == value) {
                    module.verbose('Found select item by value', optionValue, value);
                    $selectedItem = $(this);
                    return true;
                  } else if (!$selectedItem && optionText == value) {
                    module.verbose('Found select item by text', optionText, value);
                    $selectedItem = $(this);
                    return true;
                  }
                }
              });
            } else {
              value = module.get.text();
            }
            return $selectedItem || false;
          }
        },

        restore: {
          defaults: function defaults() {
            module.restore.defaultText();
            module.restore.defaultValue();
          },
          defaultText: function defaultText() {
            var defaultText = $module.data(metadata.defaultText);
            module.debug('Restoring default text', defaultText);
            module.set.text(defaultText);
            $text.addClass(className.placeholder);
          },
          defaultValue: function defaultValue() {
            var defaultValue = $module.data(metadata.defaultValue);
            if (defaultValue !== undefined) {
              module.debug('Restoring default value', defaultValue);
              if (defaultValue.length) {
                module.set.selected(defaultValue);
              } else {
                module.remove.activeItem();
                module.remove.selectedItem();
              }
            }
          }
        },

        save: {
          defaults: function defaults() {
            module.save.defaultText();
            module.save.placeholderText();
            module.save.defaultValue();
          },
          defaultValue: function defaultValue() {
            $module.data(metadata.defaultValue, module.get.value());
          },
          defaultText: function defaultText() {
            $module.data(metadata.defaultText, $text.text());
          },
          placeholderText: function placeholderText() {
            if ($text.hasClass(className.placeholder)) {
              $module.data(metadata.placeholderText, $text.text());
            }
          }
        },

        clear: function clear() {
          var placeholderText = $module.data(metadata.placeholderText);
          module.set.text(placeholderText);
          module.set.value('');
          module.remove.activeItem();
          module.remove.selectedItem();
          $text.addClass(className.placeholder);
        },

        set: {
          filtered: function filtered() {
            var searchValue = $search.val(),
                hasSearchValue = typeof searchValue === 'string' && searchValue.length > 0;
            if (hasSearchValue) {
              $text.addClass(className.filtered);
            } else {
              $text.removeClass(className.filtered);
            }
          },
          tabbable: function tabbable() {
            if (module.is.searchable()) {
              module.debug('Searchable dropdown initialized');
              $search.val('').attr('tabindex', 0);
              $menu.attr('tabindex', '-1');
            } else {
              module.debug('Simple selection dropdown initialized');
              if (!$module.attr('tabindex')) {
                $module.attr('tabindex', 0);
                $menu.attr('tabindex', '-1');
              }
            }
          },
          scrollPosition: function scrollPosition($item, forceScroll) {
            var edgeTolerance = 5,
                hasActive,
                offset,
                itemHeight,
                itemOffset,
                menuOffset,
                menuScroll,
                menuHeight,
                abovePage,
                belowPage;

            $item = $item || module.get.activeItem();
            hasActive = $item && $item.length > 0;
            forceScroll = forceScroll !== undefined ? forceScroll : false;

            if ($item && hasActive) {

              if (!$menu.hasClass(className.visible)) {
                $menu.addClass(className.loading);
              }

              menuHeight = $menu.height();
              itemHeight = $item.height();
              menuScroll = $menu.scrollTop();
              menuOffset = $menu.offset().top;
              itemOffset = $item.offset().top;
              offset = menuScroll - menuOffset + itemOffset;
              belowPage = menuScroll + menuHeight < offset + edgeTolerance;
              abovePage = offset - edgeTolerance < menuScroll;
              module.debug('Scrolling to active item', offset);
              if (abovePage || belowPage || forceScroll) {
                $menu.scrollTop(offset).removeClass(className.loading);
              }
            }
          },
          text: function text(_text) {
            if (settings.action == 'combo') {
              module.debug('Changing combo button text', _text, $combo);
              if (settings.preserveHTML) {
                $combo.html(_text);
              } else {
                $combo.text(_text);
              }
            } else if (settings.action !== 'select') {
              module.debug('Changing text', _text, $text);
              $text.removeClass(className.filtered).removeClass(className.placeholder);
              if (settings.preserveHTML) {
                $text.html(_text);
              } else {
                $text.text(_text);
              }
            }
          },
          value: function value(_value) {
            module.debug('Adding selected value to hidden input', _value, $input);
            if ($input.length > 0) {
              $input.val(_value).trigger('change');
            } else {
              $module.data(metadata.value, _value);
            }
          },
          active: function active() {
            $module.addClass(className.active);
          },
          visible: function visible() {
            $module.addClass(className.visible);
          },
          selected: function selected(value) {
            var $selectedItem = module.get.item(value),
                selectedText,
                selectedValue;
            if ($selectedItem && !$selectedItem.hasClass(className.active)) {
              module.debug('Setting selected menu item to', $selectedItem);
              module.remove.activeItem();
              module.remove.selectedItem();
              $selectedItem.addClass(className.active).addClass(className.selected);
              selectedText = module.get.choiceText($selectedItem);
              selectedValue = module.get.choiceValue($selectedItem, selectedText);
              module.set.text(selectedText);
              module.set.value(selectedValue);
              settings.onChange.call(element, value, selectedText, $selectedItem);
            }
          }
        },

        remove: {
          active: function active() {
            $module.removeClass(className.active);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          activeItem: function activeItem() {
            $item.removeClass(className.active);
          },
          filteredItem: function filteredItem() {
            $item.removeClass(className.filtered);
          },
          searchTerm: function searchTerm() {
            $search.val('');
          },
          selectedItem: function selectedItem() {
            $item.removeClass(className.selected);
          },
          tabbable: function tabbable() {
            if (module.is.searchable()) {
              module.debug('Searchable dropdown initialized');
              $search.attr('tabindex', '-1');
              $menu.attr('tabindex', '-1');
            } else {
              module.debug('Simple selection dropdown initialized');
              $module.attr('tabindex', '-1');
              $menu.attr('tabindex', '-1');
            }
          }
        },

        is: {
          active: function active() {
            return $module.hasClass(className.active);
          },
          alreadySetup: function alreadySetup() {
            return $module.is('select') && $module.parent(selector.dropdown).length > 0;
          },
          animating: function animating($subMenu) {
            return $subMenu ? $subMenu.is(':animated') || $subMenu.transition && $subMenu.transition('is animating') : $menu.is(':animated') || $menu.transition && $menu.transition('is animating');
          },
          allFiltered: function allFiltered() {
            return $item.filter('.' + className.filtered).length === $item.length;
          },
          hidden: function hidden($subMenu) {
            return $subMenu ? $subMenu.is(':hidden') : $menu.is(':hidden');
          },
          selectMutation: function selectMutation(mutations) {
            var selectChanged = false;
            $.each(mutations, function (index, mutation) {
              if (mutation.target && $(mutation.target).is('select')) {
                selectChanged = true;
                return true;
              }
            });
            return selectChanged;
          },
          search: function search() {
            return $module.hasClass(className.search);
          },
          searchable: function searchable() {
            return $search.length > 0;
          },
          searchSelection: function searchSelection() {
            return module.is.searchable() && $search.parent().is($module);
          },
          selection: function selection() {
            return $module.hasClass(className.selection);
          },
          upward: function upward() {
            return $module.hasClass(className.upward);
          },
          visible: function visible($subMenu) {
            return $subMenu ? $subMenu.is(':visible') : $menu.is(':visible');
          }
        },

        can: {
          click: function click() {
            return hasTouch || settings.on == 'click';
          },
          show: function show() {
            return !$module.hasClass(className.disabled);
          }
        },

        animate: {
          show: function show(callback, $subMenu) {
            var $currentMenu = $subMenu || $menu,
                start = $subMenu ? function () {} : function () {
              module.hideSubMenus();
              module.hideOthers();
              module.set.active();
            };
            callback = $.isFunction(callback) ? callback : function () {};
            module.set.scrollPosition(module.get.activeItem(), true);
            module.verbose('Doing menu show animation', $currentMenu);
            if (module.is.hidden($currentMenu) || module.is.animating($currentMenu)) {

              if (settings.transition == 'auto') {
                settings.transition = module.is.upward() ? 'slide up' : 'slide down';
                module.verbose('Automatically determining animation based on animation direction', settings.transition);
              }
              if (settings.transition == 'none') {
                callback.call(element);
              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu.transition({
                  animation: settings.transition + ' in',
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration,
                  queue: true,
                  onStart: start,
                  onComplete: function onComplete() {
                    callback.call(element);
                  }
                });
              } else if (settings.transition == 'slide down') {
                start();
                $currentMenu.hide().clearQueue().children().clearQueue().css('opacity', 0).delay(50).animate({
                  opacity: 1
                }, settings.duration, 'easeOutQuad', module.event.resetStyle).end().slideDown(100, 'easeOutQuad', function () {
                  module.event.resetStyle.call(this);
                  callback.call(element);
                });
              } else if (settings.transition == 'fade') {
                start();
                $currentMenu.hide().clearQueue().fadeIn(settings.duration, function () {
                  module.event.resetStyle.call(this);
                  callback.call(element);
                });
              } else {
                module.error(error.transition, settings.transition);
              }
            }
          },
          hide: function hide(callback, $subMenu) {
            var $currentMenu = $subMenu || $menu,
                duration = $subMenu ? settings.duration * 0.9 : settings.duration,
                start = $subMenu ? function () {} : function () {
              if (module.can.click()) {
                module.unbind.intent();
              }
              module.focusSearch();
              module.remove.active();
            };
            callback = $.isFunction(callback) ? callback : function () {};
            if (module.is.visible($currentMenu) || module.is.animating($currentMenu)) {
              module.verbose('Doing menu hide animation', $currentMenu);

              if (settings.transition == 'auto') {
                settings.transition = module.is.upward() ? 'slide up' : 'slide down';
              }

              $input.trigger('blur');

              if (settings.transition == 'none') {
                callback.call(element);
              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu.transition({
                  animation: settings.transition + ' out',
                  duration: settings.duration,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  queue: true,
                  onStart: start,
                  onComplete: function onComplete() {
                    callback.call(element);
                  }
                });
              } else if (settings.transition == 'slide down') {
                start();
                $currentMenu.show().clearQueue().children().clearQueue().css('opacity', 1).animate({
                  opacity: 0
                }, 100, 'easeOutQuad', module.event.resetStyle).end().delay(50).slideUp(100, 'easeOutQuad', function () {
                  module.event.resetStyle.call(this);
                  callback.call(element);
                });
              } else if (settings.transition == 'fade') {
                start();
                $currentMenu.show().clearQueue().fadeOut(150, function () {
                  module.event.resetStyle.call(this);
                  callback.call(element);
                });
              } else {
                module.error(error.transition);
              }
            }
          }
        },

        delay: {
          show: function show() {
            module.verbose('Delaying show event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.show, settings.delay.show);
          },
          hide: function hide() {
            module.verbose('Delaying hide event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.hide, settings.delay.hide);
          }
        },

        escape: {
          regExp: function regExp(text) {
            text = String(text);
            return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : $allModules;
  };

  $.fn.dropdown.settings = {

    debug: false,
    verbose: true,
    performance: true,

    on: 'click',
    action: 'activate',

    allowTab: true,
    fullTextSearch: false,
    preserveHTML: true,
    sortSelect: false,

    allowCategorySelection: false,

    delay: {
      hide: 300,
      show: 200,
      search: 50,
      touch: 50
    },

    forceSelection: true,

    transition: 'auto',
    duration: 250,

    /* Callbacks */
    onNoResults: function onNoResults(searchTerm) {},
    onChange: function onChange(value, text) {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    /* Component */

    name: 'Dropdown',
    namespace: 'dropdown',

    error: {
      action: 'You called a dropdown action that was not defined',
      alreadySetup: 'Once a select has been initialized behaviors must be called on the created ui dropdown',
      method: 'The method you called is not defined.',
      transition: 'The requested transition was not found'
    },

    metadata: {
      defaultText: 'defaultText',
      defaultValue: 'defaultValue',
      placeholderText: 'placeholderText',
      text: 'text',
      value: 'value'
    },

    selector: {
      dropdown: '.ui.dropdown',
      input: '> input[type="hidden"], > select',
      item: '.item',
      menu: '.menu',
      menuIcon: '.dropdown.icon',
      search: '> input.search, .menu > .search > input, .menu > input.search',
      text: '> .text:not(.icon)'
    },

    className: {
      active: 'active',
      animating: 'animating',
      disabled: 'disabled',
      dropdown: 'ui dropdown',
      filtered: 'filtered',
      loading: 'loading',
      menu: 'menu',
      placeholder: 'default',
      search: 'search',
      selected: 'selected',
      selection: 'selection',
      upward: 'upward',
      visible: 'visible'
    }

  };

  /* Templates */
  $.fn.dropdown.settings.templates = {
    menu: function menu(select) {
      var placeholder = select.placeholder || false,
          values = select.values || {},
          html = '';
      $.each(select.values, function (index, option) {
        html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
      });
      return html;
    },
    dropdown: function dropdown(select) {
      var placeholder = select.placeholder || false,
          values = select.values || {},
          html = '';
      html += '<i class="dropdown icon"></i>';
      if (select.placeholder) {
        html += '<div class="default text">' + placeholder + '</div>';
      } else {
        html += '<div class="text"></div>';
      }
      html += '<div class="menu">';
      $.each(select.values, function (index, option) {
        html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
      });
      html += '</div>';
      return html;
    }
  };

  /* Dependencies */
  $.extend($.easing, {
    easeOutQuad: function easeOutQuad(x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    }
  });
})(jQuery, window, document);

// do nothing special yet
});

require.register("web/static/css/components/dropdown.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, i) {
  "use strict";e.fn.dropdown = function (o) {
    var a,
        r = e(this),
        s = e(n),
        c = r.selector || "",
        l = ("ontouchstart" in n.documentElement),
        u = new Date().getTime(),
        d = [],
        f = arguments[0],
        v = "string" == typeof f,
        h = [].slice.call(arguments, 1);return (r.each(function () {
      var m,
          g,
          p,
          b,
          w = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.dropdown.settings, o) : e.extend({}, e.fn.dropdown.settings),
          y = w.className,
          x = w.metadata,
          T = w.namespace,
          C = w.selector,
          S = w.error,
          k = "." + T,
          I = "module-" + T,
          E = e(this),
          A = E.find(C.text),
          D = E.find(C.search),
          F = E.find(C.input),
          M = E.prev().find(C.text).length > 0 ? E.prev().find(C.text) : E.prev(),
          O = E.children(C.menu),
          q = O.find(C.item),
          V = !1,
          z = !1,
          Q = this,
          R = E.data(I);b = { initialize: function initialize() {
          b.debug("Initializing dropdown", w), b.is.alreadySetup() ? b.setup.reference() : (b.setup.layout(), b.save.defaults(), b.set.selected(), b.create.id(), l && b.bind.touchEvents(), b.bind.mouseEvents(), b.bind.keyboardEvents(), b.observeChanges(), b.instantiate());
        }, instantiate: function instantiate() {
          b.verbose("Storing instance of dropdown", b), R = b, E.data(I, b);
        }, destroy: function destroy() {
          b.verbose("Destroying previous dropdown for", E), b.remove.tabbable(), E.off(k).removeData(I), O.off(k), s.off(m);
        }, observeChanges: function observeChanges() {
          "MutationObserver" in t && (p = new MutationObserver(function (e) {
            b.is.selectMutation(e) ? (b.debug("<select> modified, recreating menu"), b.setup.select()) : (b.debug("DOM tree modified, updating selector cache"), b.refresh());
          }), p.observe(Q, { childList: !0, subtree: !0 }), b.debug("Setting up mutation observer", p));
        }, create: { id: function id() {
            g = (Math.random().toString(16) + "000000000").substr(2, 8), m = "." + g, b.verbose("Creating unique id for element", g);
          } }, search: function search() {
          var e;e = D.val(), b.verbose("Searching for query", e), b.filter(e), b.is.searchSelection() && b.can.show() && b.show();
        }, setup: { layout: function layout() {
            E.is("select") && b.setup.select(), b.is.search() && !b.is.searchable() && (D = e("<input />").addClass(y.search).insertBefore(A)), w.allowTab && b.set.tabbable();
          }, select: function select() {
            var t = b.get.selectValues();b.debug("Dropdown initialized on a select", t), E.is("select") && (F = E), F.parent(C.dropdown).length > 0 ? (b.debug("UI dropdown already exists. Creating dropdown menu only"), E = F.closest(C.dropdown), O = E.children(C.menu), 0 === O.length && (O = e("<div />").addClass(y.menu).appendTo(E)), O.html(w.templates.menu(t))) : (b.debug("Creating entire dropdown from select"), E = e("<div />").attr("class", F.attr("class")).addClass(y.selection).addClass(y.dropdown).html(w.templates.dropdown(t)).insertBefore(F), F.removeAttr("class").prependTo(E)), b.refresh();
          }, reference: function reference() {
            var e,
                t,
                n = r.index(E);b.debug("Dropdown behavior was called on select, replacing with closest dropdown"), E = E.parent(C.dropdown), b.refresh(), e = r.slice(0, n), t = r.slice(n + 1), r = e.add(E).add(t), v && (R = b, b.invoke(f));
          } }, refresh: function refresh() {
          b.verbose("Refreshing selector cache"), A = E.find(C.text), D = E.find(C.search), F = E.find(C.input), M = E.prev().find(C.text).length > 0 ? E.prev().find(C.text) : E.prev(), O = E.children(C.menu), q = O.find(C.item);
        }, toggle: function toggle() {
          b.verbose("Toggling menu visibility"), b.is.active() ? b.hide() : b.show();
        }, show: function show(t) {
          t = e.isFunction(t) ? t : function () {}, b.is.searchSelection() && b.is.allFiltered() || b.can.show() && !b.is.active() && (b.debug("Showing dropdown"), b.animate.show(function () {
            b.can.click() && b.bind.intent(), b.set.visible(), t.call(Q);
          }), w.onShow.call(Q));
        }, hide: function hide(t) {
          t = e.isFunction(t) ? t : function () {}, b.is.active() && (b.debug("Hiding dropdown"), b.animate.hide(function () {
            b.remove.visible(), t.call(Q);
          }), w.onHide.call(Q));
        }, hideOthers: function hideOthers() {
          b.verbose("Finding other dropdowns to hide"), r.not(E).has(C.menu + ":visible:not(." + y.animating + ")").dropdown("hide");
        }, hideSubMenus: function hideSubMenus() {
          var e = O.find(C.menu);e.transition("hide");
        }, bind: { keyboardEvents: function keyboardEvents() {
            b.debug("Binding keyboard events"), E.on("keydown" + k, b.event.keydown), b.is.searchable() && E.on(b.get.inputEvent(), C.search, b.event.input);
          }, touchEvents: function touchEvents() {
            b.debug("Touch device detected binding additional touch events"), b.is.searchSelection() || E.on("touchstart" + k, b.event.test.toggle), O.on("touchstart" + k, C.item, b.event.item.mouseenter);
          }, mouseEvents: function mouseEvents() {
            b.verbose("Mouse detected binding mouse events"), b.is.searchSelection() ? E.on("mousedown" + k, C.menu, b.event.menu.activate).on("mouseup" + k, C.menu, b.event.menu.deactivate).on("click" + k, C.search, b.show).on("focus" + k, C.search, b.event.searchFocus).on("blur" + k, C.search, b.event.searchBlur).on("click" + k, C.text, b.event.searchTextFocus) : ("click" == w.on ? E.on("click" + k, b.event.test.toggle) : "hover" == w.on ? E.on("mouseenter" + k, b.delay.show).on("mouseleave" + k, b.delay.hide) : E.on(w.on + k, b.toggle), E.on("mousedown" + k, b.event.mousedown).on("mouseup" + k, b.event.mouseup).on("focus" + k, b.event.focus).on("blur" + k, b.event.blur)), O.on("mouseenter" + k, C.item, b.event.item.mouseenter).on("mouseleave" + k, C.item, b.event.item.mouseleave).on("click" + k, C.item, b.event.item.click);
          }, intent: function intent() {
            b.verbose("Binding hide intent event to document"), l && s.on("touchstart" + m, b.event.test.touch).on("touchmove" + m, b.event.test.touch), s.on("click" + m, b.event.test.hide);
          } }, unbind: { intent: function intent() {
            b.verbose("Removing hide intent event from document"), l && s.off("touchstart" + m).off("touchmove" + m), s.off("click" + m);
          } }, filter: function filter(t) {
          var n = e(),
              i = b.escape.regExp(t),
              o = new RegExp("^" + i, "igm"),
              a = new RegExp(i, "ig");b.verbose("Searching for matching values"), q.each(function () {
            var t = e(this),
                i = String(b.get.choiceText(t, !1)),
                r = String(b.get.choiceValue(t, i));i.match(o) || r.match(o) ? n = n.add(t) : w.fullTextSearch && (i.match(a) || r.match(a)) && (n = n.add(t));
          }), b.debug("Setting filter", t), b.remove.filteredItem(), q.not(n).addClass(y.filtered), b.verbose("Selecting first non-filtered element"), b.remove.selectedItem(), q.not("." + y.filtered).eq(0).addClass(y.selected), b.is.allFiltered() && (b.debug("All items filtered, hiding dropdown", t), b.is.searchSelection() && b.hide(), w.onNoResults.call(Q, t));
        }, focusSearch: function focusSearch() {
          b.is.search() && D.focus();
        }, forceSelection: function forceSelection() {
          var e = q.not(y.filtered).filter("." + y.selected).eq(0),
              t = q.filter("." + y.active).eq(0),
              n = e.length > 0 ? e : t,
              i = n.size() > 0;i ? (b.event.item.click.call(n), b.remove.filteredItem()) : b.hide();
        }, event: { mousedown: function mousedown() {
            V = !0;
          }, mouseup: function mouseup() {
            V = !1;
          }, focus: function focus() {
            !V && b.is.hidden() && b.show();
          }, blur: function blur(e) {
            var t = n.activeElement === this;V || t || b.hide();
          }, searchFocus: function searchFocus() {
            V = !0, b.show();
          }, searchBlur: function searchBlur(e) {
            var t = n.activeElement === this;z || t || (w.forceSelection ? b.forceSelection() : b.hide());
          }, searchTextFocus: function searchTextFocus(e) {
            V = !0, D.focus();
          }, input: function input(e) {
            b.is.searchSelection() && b.set.filtered(), clearTimeout(b.timer), b.timer = setTimeout(b.search, w.delay.search);
          }, keydown: function keydown(e) {
            {
              var t,
                  n = q.not(y.filtered).filter("." + y.selected).eq(0),
                  i = O.children("." + y.active).eq(0),
                  o = n.length > 0 ? n : i,
                  a = o.length > 0 ? o.siblings(":not(." + y.filtered + ")").andSelf() : O.children(":not(." + y.filtered + ")"),
                  r = o.children(C.menu),
                  s = o.closest(C.menu),
                  c = s[0] !== O[0],
                  l = s.is(":visible"),
                  u = e.which,
                  d = { enter: 13, escape: 27, leftArrow: 37, upArrow: 38, rightArrow: 39, downArrow: 40 },
                  f = r.length > 0,
                  v = o.length > 0;a.size() - 1;
            }if (b.is.visible()) {
              if ((u == d.enter && v && (f && !w.allowCategorySelection ? (b.verbose("Pressed enter on unselectable category, opening sub menu"), u = d.rightArrow) : (b.verbose("Enter key pressed, choosing selected item"), b.event.item.click.call(o, e))), u == d.leftArrow && c && (b.verbose("Left key pressed, closing sub-menu"), b.animate.hide(!1, s), o.removeClass(y.selected), s.closest(C.item).addClass(y.selected), e.preventDefault()), u == d.rightArrow && f && (b.verbose("Right key pressed, opening sub-menu"), b.animate.show(!1, r), o.removeClass(y.selected), r.find(C.item).eq(0).addClass(y.selected), e.preventDefault()), u == d.upArrow)) {
                if ((t = v && l ? o.prevAll(C.item + ":not(." + y.filtered + ")").eq(0) : q.eq(0), a.index(t) < 0)) return void b.verbose("Up key pressed but reached top of current menu");b.verbose("Up key pressed, changing active item"), o.removeClass(y.selected), t.addClass(y.selected), b.set.scrollPosition(t), e.preventDefault();
              }if (u == d.downArrow) {
                if ((t = v && l ? t = o.nextAll(C.item + ":not(." + y.filtered + ")").eq(0) : q.eq(0), 0 === t.length)) return void b.verbose("Down key pressed but reached bottom of current menu");b.verbose("Down key pressed, changing active item"), q.removeClass(y.selected), t.addClass(y.selected), b.set.scrollPosition(t), e.preventDefault();
              }
            } else u == d.enter && (b.verbose("Enter key pressed, showing dropdown"), b.show()), u == d.escape && (b.verbose("Escape key pressed, closing dropdown"), b.hide()), u == d.downArrow && (b.verbose("Down key pressed, showing dropdown"), b.show());
          }, test: { toggle: function toggle(e) {
              b.determine.eventInMenu(e, b.toggle) && e.preventDefault();
            }, touch: function touch(e) {
              b.determine.eventInMenu(e, function () {
                "touchstart" == e.type ? b.timer = setTimeout(b.hide, w.delay.touch) : "touchmove" == e.type && clearTimeout(b.timer);
              }), e.stopPropagation();
            }, hide: function hide(e) {
              b.determine.eventInModule(e, b.hide);
            } }, menu: { activate: function activate() {
              z = !0;
            }, deactivate: function deactivate() {
              z = !1;
            } }, item: { mouseenter: function mouseenter(t) {
              var n = e(this).children(C.menu),
                  i = e(this).siblings(C.item).children(C.menu);n.length > 0 && (clearTimeout(b.itemTimer), b.itemTimer = setTimeout(function () {
                b.verbose("Showing sub-menu", n), e.each(i, function () {
                  b.animate.hide(!1, e(this));
                }), b.animate.show(!1, n);
              }, w.delay.show), t.preventDefault());
            }, mouseleave: function mouseleave(t) {
              var n = e(this).children(C.menu);n.length > 0 && (clearTimeout(b.itemTimer), b.itemTimer = setTimeout(function () {
                b.verbose("Hiding sub-menu", n), b.animate.hide(!1, n);
              }, w.delay.hide));
            }, click: function click(t) {
              var n = e(this),
                  i = e(t ? t.target : ""),
                  o = n.find(C.menu),
                  a = b.get.choiceText(n),
                  r = b.get.choiceValue(n, a),
                  s = function s() {
                b.remove.searchTerm(), b.determine.selectAction(a, r);
              },
                  c = o.length > 0,
                  l = o.find(i).length > 0;l || c && !w.allowCategorySelection || s();
            } }, resetStyle: function resetStyle() {
            e(this).removeAttr("style");
          } }, determine: { selectAction: function selectAction(t, n) {
            b.verbose("Determining action", w.action), e.isFunction(b.action[w.action]) ? (b.verbose("Triggering preset action", w.action, t, n), b.action[w.action](t, n)) : e.isFunction(w.action) ? (b.verbose("Triggering user action", w.action, t, n), w.action(t, n)) : b.error(S.action, w.action);
          }, eventInModule: function eventInModule(t, n) {
            return (n = e.isFunction(n) ? n : function () {}, 0 === e(t.target).closest(E).length ? (b.verbose("Triggering event", n), n(), !0) : (b.verbose("Event occurred in dropdown, canceling callback"), !1));
          }, eventInMenu: function eventInMenu(t, n) {
            return (n = e.isFunction(n) ? n : function () {}, 0 === e(t.target).closest(O).length ? (b.verbose("Triggering event", n), n(), !0) : (b.verbose("Event occurred in dropdown menu, canceling callback"), !1));
          } }, action: { nothing: function nothing() {}, activate: function activate(e, t) {
            t = t !== i ? t : e, b.set.selected(t), b.hide(function () {
              b.remove.filteredItem();
            });
          }, select: function select(e, t) {
            t = t !== i ? t : e, b.set.selected(t), b.hide(function () {
              b.remove.filteredItem();
            });
          }, combo: function combo(e, t) {
            t = t !== i ? t : e, b.set.selected(t), b.hide(function () {
              b.remove.filteredItem();
            });
          }, hide: function hide() {
            b.hide(function () {
              b.remove.filteredItem();
            });
          } }, get: { id: function id() {
            return g;
          }, text: function text() {
            return A.text();
          }, value: function value() {
            return F.length > 0 ? F.val() : E.data(x.value);
          }, choiceText: function choiceText(e, t) {
            return (t = t !== i ? t : w.preserveHTML, e !== i ? (e.find(C.menu).length > 0 && (b.verbose("Retreiving text of element with sub-menu"), e = e.clone(), e.find(C.menu).remove(), e.find(C.menuIcon).remove()), e.data(x.text) !== i ? e.data(x.text) : t ? e.html().trim() : e.text().trim()) : void 0);
          }, choiceValue: function choiceValue(e, t) {
            return (t = t || b.get.choiceText(e), e.data(x.value) !== i ? e.data(x.value) : "string" == typeof t ? t.toLowerCase().trim() : t.trim());
          }, inputEvent: function inputEvent() {
            var e = D[0];return e ? e.oninput !== i ? "input" : e.onpropertychange !== i ? "propertychange" : "keyup" : !1;
          }, selectValues: function selectValues() {
            var t = {};return (t.values = w.sortSelect ? {} : [], E.find("option").each(function () {
              var n = e(this).html(),
                  o = e(this).attr("value") !== i ? e(this).attr("value") : n;"" === o ? t.placeholder = n : w.sortSelect ? t.values[o] = { name: n, value: o } : t.values.push({ name: n, value: o });
            }), w.sortSelect ? b.debug("Retrieved and sorted values from select", t) : b.debug("Retreived values from select", t), t);
          }, activeItem: function activeItem() {
            return q.filter("." + y.active);
          }, item: function item(t, n) {
            var o = !1;return (t = t !== i ? t : b.get.value() !== i ? b.get.value() : b.get.text(), n = "" === t || 0 === t ? !0 : n || !1, t !== i ? q.each(function () {
              var i = e(this),
                  a = b.get.choiceText(i),
                  r = b.get.choiceValue(i, a);if (n) {
                if ((b.verbose("Ambiguous dropdown value using strict type check", i, t), r === t)) return (o = e(this), !0);if (!o && a === t) return (o = e(this), !0);
              } else {
                if (r == t) return (b.verbose("Found select item by value", r, t), o = e(this), !0);if (!o && a == t) return (b.verbose("Found select item by text", a, t), o = e(this), !0);
              }
            }) : t = b.get.text(), o || !1);
          } }, restore: { defaults: function defaults() {
            b.restore.defaultText(), b.restore.defaultValue();
          }, defaultText: function defaultText() {
            var e = E.data(x.defaultText);b.debug("Restoring default text", e), b.set.text(e), A.addClass(y.placeholder);
          }, defaultValue: function defaultValue() {
            var e = E.data(x.defaultValue);e !== i && (b.debug("Restoring default value", e), e.length ? b.set.selected(e) : (b.remove.activeItem(), b.remove.selectedItem()));
          } }, save: { defaults: function defaults() {
            b.save.defaultText(), b.save.placeholderText(), b.save.defaultValue();
          }, defaultValue: function defaultValue() {
            E.data(x.defaultValue, b.get.value());
          }, defaultText: function defaultText() {
            E.data(x.defaultText, A.text());
          }, placeholderText: function placeholderText() {
            A.hasClass(y.placeholder) && E.data(x.placeholderText, A.text());
          } }, clear: function clear() {
          var e = E.data(x.placeholderText);b.set.text(e), b.set.value(""), b.remove.activeItem(), b.remove.selectedItem(), A.addClass(y.placeholder);
        }, set: { filtered: function filtered() {
            var e = D.val(),
                t = "string" == typeof e && e.length > 0;t ? A.addClass(y.filtered) : A.removeClass(y.filtered);
          }, tabbable: function tabbable() {
            b.is.searchable() ? (b.debug("Searchable dropdown initialized"), D.val("").attr("tabindex", 0), O.attr("tabindex", "-1")) : (b.debug("Simple selection dropdown initialized"), E.attr("tabindex") || (E.attr("tabindex", 0), O.attr("tabindex", "-1")));
          }, scrollPosition: function scrollPosition(e, t) {
            var n,
                o,
                a,
                r,
                s,
                c,
                l,
                u,
                d,
                f = 5;e = e || b.get.activeItem(), n = e && e.length > 0, t = t !== i ? t : !1, e && n && (O.hasClass(y.visible) || O.addClass(y.loading), l = O.height(), a = e.height(), c = O.scrollTop(), s = O.offset().top, r = e.offset().top, o = c - s + r, d = o + f > c + l, u = c > o - f, b.debug("Scrolling to active item", o), (u || d || t) && O.scrollTop(o).removeClass(y.loading));
          }, text: function text(e) {
            "combo" == w.action ? (b.debug("Changing combo button text", e, M), w.preserveHTML ? M.html(e) : M.text(e)) : "select" !== w.action && (b.debug("Changing text", e, A), A.removeClass(y.filtered).removeClass(y.placeholder), w.preserveHTML ? A.html(e) : A.text(e));
          }, value: function value(e) {
            b.debug("Adding selected value to hidden input", e, F), F.length > 0 ? F.val(e).trigger("change") : E.data(x.value, e);
          }, active: function active() {
            E.addClass(y.active);
          }, visible: function visible() {
            E.addClass(y.visible);
          }, selected: function selected(e) {
            var t,
                n,
                i = b.get.item(e);i && !i.hasClass(y.active) && (b.debug("Setting selected menu item to", i), b.remove.activeItem(), b.remove.selectedItem(), i.addClass(y.active).addClass(y.selected), t = b.get.choiceText(i), n = b.get.choiceValue(i, t), b.set.text(t), b.set.value(n), w.onChange.call(Q, e, t, i));
          } }, remove: { active: function active() {
            E.removeClass(y.active);
          }, visible: function visible() {
            E.removeClass(y.visible);
          }, activeItem: function activeItem() {
            q.removeClass(y.active);
          }, filteredItem: function filteredItem() {
            q.removeClass(y.filtered);
          }, searchTerm: function searchTerm() {
            D.val("");
          }, selectedItem: function selectedItem() {
            q.removeClass(y.selected);
          }, tabbable: function tabbable() {
            b.is.searchable() ? (b.debug("Searchable dropdown initialized"), D.attr("tabindex", "-1"), O.attr("tabindex", "-1")) : (b.debug("Simple selection dropdown initialized"), E.attr("tabindex", "-1"), O.attr("tabindex", "-1"));
          } }, is: { active: function active() {
            return E.hasClass(y.active);
          }, alreadySetup: function alreadySetup() {
            return E.is("select") && E.parent(C.dropdown).length > 0;
          }, animating: function animating(e) {
            return e ? e.is(":animated") || e.transition && e.transition("is animating") : O.is(":animated") || O.transition && O.transition("is animating");
          }, allFiltered: function allFiltered() {
            return q.filter("." + y.filtered).length === q.length;
          }, hidden: function hidden(e) {
            return e ? e.is(":hidden") : O.is(":hidden");
          }, selectMutation: function selectMutation(t) {
            var n = !1;return (e.each(t, function (t, i) {
              return i.target && e(i.target).is("select") ? (n = !0, !0) : void 0;
            }), n);
          }, search: function search() {
            return E.hasClass(y.search);
          }, searchable: function searchable() {
            return D.length > 0;
          }, searchSelection: function searchSelection() {
            return b.is.searchable() && D.parent().is(E);
          }, selection: function selection() {
            return E.hasClass(y.selection);
          }, upward: function upward() {
            return E.hasClass(y.upward);
          }, visible: function visible(e) {
            return e ? e.is(":visible") : O.is(":visible");
          } }, can: { click: function click() {
            return l || "click" == w.on;
          }, show: function show() {
            return !E.hasClass(y.disabled);
          } }, animate: { show: function show(t, n) {
            var o = n || O,
                a = n ? function () {} : function () {
              b.hideSubMenus(), b.hideOthers(), b.set.active();
            };t = e.isFunction(t) ? t : function () {}, b.set.scrollPosition(b.get.activeItem(), !0), b.verbose("Doing menu show animation", o), (b.is.hidden(o) || b.is.animating(o)) && ("auto" == w.transition && (w.transition = b.is.upward() ? "slide up" : "slide down", b.verbose("Automatically determining animation based on animation direction", w.transition)), "none" == w.transition ? t.call(Q) : e.fn.transition !== i && E.transition("is supported") ? o.transition({ animation: w.transition + " in", debug: w.debug, verbose: w.verbose, duration: w.duration, queue: !0, onStart: a, onComplete: function onComplete() {
                t.call(Q);
              } }) : "slide down" == w.transition ? (a(), o.hide().clearQueue().children().clearQueue().css("opacity", 0).delay(50).animate({ opacity: 1 }, w.duration, "easeOutQuad", b.event.resetStyle).end().slideDown(100, "easeOutQuad", function () {
              b.event.resetStyle.call(this), t.call(Q);
            })) : "fade" == w.transition ? (a(), o.hide().clearQueue().fadeIn(w.duration, function () {
              b.event.resetStyle.call(this), t.call(Q);
            })) : b.error(S.transition, w.transition));
          }, hide: function hide(t, n) {
            var o = n || O,
                a = (n ? 0.9 * w.duration : w.duration, n ? function () {} : function () {
              b.can.click() && b.unbind.intent(), b.focusSearch(), b.remove.active();
            });t = e.isFunction(t) ? t : function () {}, (b.is.visible(o) || b.is.animating(o)) && (b.verbose("Doing menu hide animation", o), "auto" == w.transition && (w.transition = b.is.upward() ? "slide up" : "slide down"), F.trigger("blur"), "none" == w.transition ? t.call(Q) : e.fn.transition !== i && E.transition("is supported") ? o.transition({ animation: w.transition + " out", duration: w.duration, debug: w.debug, verbose: w.verbose, queue: !0, onStart: a, onComplete: function onComplete() {
                t.call(Q);
              } }) : "slide down" == w.transition ? (a(), o.show().clearQueue().children().clearQueue().css("opacity", 1).animate({ opacity: 0 }, 100, "easeOutQuad", b.event.resetStyle).end().delay(50).slideUp(100, "easeOutQuad", function () {
              b.event.resetStyle.call(this), t.call(Q);
            })) : "fade" == w.transition ? (a(), o.show().clearQueue().fadeOut(150, function () {
              b.event.resetStyle.call(this), t.call(Q);
            })) : b.error(S.transition));
          } }, delay: { show: function show() {
            b.verbose("Delaying show event to ensure user intent"), clearTimeout(b.timer), b.timer = setTimeout(b.show, w.delay.show);
          }, hide: function hide() {
            b.verbose("Delaying hide event to ensure user intent"), clearTimeout(b.timer), b.timer = setTimeout(b.hide, w.delay.hide);
          } }, escape: { regExp: function regExp(e) {
            return (e = String(e), e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"));
          } }, setting: function setting(t, n) {
          if ((b.debug("Changing setting", t, n), e.isPlainObject(t))) e.extend(!0, w, t);else {
            if (n === i) return w[t];w[t] = n;
          }
        }, internal: function internal(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, b, t);else {
            if (n === i) return b[t];b[t] = n;
          }
        }, debug: function debug() {
          w.debug && (w.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, w.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          w.verbose && w.debug && (w.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, w.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, w.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, n, i;w.performance && (t = new Date().getTime(), i = u || t, n = t - i, u = t, d.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: Q, "Execution Time": n })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 500);
          }, display: function display() {
            var t = w.name + ":",
                n = 0;u = !1, clearTimeout(b.performance.timer), e.each(d, function (e, t) {
              n += t["Execution Time"];
            }), t += " " + n + "ms", c && (t += " '" + c + "'"), (console.group !== i || console.table !== i) && d.length > 0 && (console.groupCollapsed(t), console.table ? console.table(d) : e.each(d, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), d = [];
          } }, invoke: function invoke(t, n, o) {
          var r,
              s,
              c,
              l = R;return (n = n || h, o = Q || o, "string" == typeof t && l !== i && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (n, o) {
            var a = n != r ? o + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(l[a]) && n != r) l = l[a];else {
              if (l[a] !== i) return (s = l[a], !1);if (!e.isPlainObject(l[o]) || n == r) return l[o] !== i ? (s = l[o], !1) : (b.error(S.method, t), !1);l = l[o];
            }
          })), e.isFunction(s) ? c = s.apply(o, n) : s !== i && (c = s), e.isArray(a) ? a.push(c) : a !== i ? a = [a, c] : c !== i && (a = c), s);
        } }, v ? (R === i && b.initialize(), b.invoke(f)) : (R !== i && R.invoke("destroy"), b.initialize());
    }), a !== i ? a : r);
  }, e.fn.dropdown.settings = { debug: !1, verbose: !0, performance: !0, on: "click", action: "activate", allowTab: !0, fullTextSearch: !1, preserveHTML: !0, sortSelect: !1, allowCategorySelection: !1, delay: { hide: 300, show: 200, search: 50, touch: 50 }, forceSelection: !0, transition: "auto", duration: 250, onNoResults: function onNoResults(e) {}, onChange: function onChange(e, t) {}, onShow: function onShow() {}, onHide: function onHide() {}, name: "Dropdown", namespace: "dropdown", error: { action: "You called a dropdown action that was not defined", alreadySetup: "Once a select has been initialized behaviors must be called on the created ui dropdown", method: "The method you called is not defined.", transition: "The requested transition was not found" }, metadata: { defaultText: "defaultText", defaultValue: "defaultValue", placeholderText: "placeholderText", text: "text", value: "value" }, selector: { dropdown: ".ui.dropdown", input: "> input[type=\"hidden\"], > select", item: ".item", menu: ".menu", menuIcon: ".dropdown.icon", search: "> input.search, .menu > .search > input, .menu > input.search", text: "> .text:not(.icon)" }, className: { active: "active", animating: "animating", disabled: "disabled", dropdown: "ui dropdown", filtered: "filtered", loading: "loading", menu: "menu", placeholder: "default", search: "search", selected: "selected", selection: "selection", upward: "upward", visible: "visible" } }, e.fn.dropdown.settings.templates = { menu: function menu(t) {
      var n = (t.placeholder || !1, t.values || {}, "");return (e.each(t.values, function (e, t) {
        n += "<div class=\"item\" data-value=\"" + t.value + "\">" + t.name + "</div>";
      }), n);
    }, dropdown: function dropdown(t) {
      var n = t.placeholder || !1,
          i = (t.values || {}, "");return (i += "<i class=\"dropdown icon\"></i>", i += t.placeholder ? "<div class=\"default text\">" + n + "</div>" : "<div class=\"text\"></div>", i += "<div class=\"menu\">", e.each(t.values, function (e, t) {
        i += "<div class=\"item\" data-value=\"" + t.value + "\">" + t.name + "</div>";
      }), i += "</div>");
    } }, e.extend(e.easing, { easeOutQuad: function easeOutQuad(e, t, n, i, o) {
      return -i * (t /= o) * (t - 2) + n;
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/form", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.form = function (fields, parameters) {
    var $allModules = $(this),
        settings = $.extend(true, {}, $.fn.form.settings, parameters),
        _validation = $.extend({}, $.fn.form.settings.defaults, fields),
        namespace = settings.namespace,
        metadata = settings.metadata,
        selector = settings.selector,
        className = settings.className,
        error = settings.error,
        eventNamespace = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var $module = $(this),
          $field = $(this).find(selector.field),
          $group = $(this).find(selector.group),
          $message = $(this).find(selector.message),
          $prompt = $(this).find(selector.prompt),
          $submit = $(this).find(selector.submit),
          $clear = $(this).find(selector.clear),
          $reset = $(this).find(selector.reset),
          formErrors = [],
          keyHeldDown = false,
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing form validation', $module, _validation, settings);
          module.bindEvents();
          module.set.defaults();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $field = $module.find(selector.field);
        },

        submit: function submit() {
          module.verbose('Submitting form', $module);
          $module.submit();
        },

        attachEvents: function attachEvents(selector, action) {
          action = action || 'submit';
          $(selector).on('click', function (event) {
            module[action]();
            event.preventDefault();
          });
        },

        bindEvents: function bindEvents() {
          if (settings.keyboardShortcuts) {
            $field.on('keydown' + eventNamespace, module.event.field.keydown);
          }
          $module.on('submit' + eventNamespace, module.validate.form);
          $field.on('blur' + eventNamespace, module.event.field.blur);

          // attach events to common elements
          module.attachEvents($submit, 'submit');
          module.attachEvents($reset, 'reset');
          module.attachEvents($clear, 'clear');

          $field.each(function () {
            var type = $(this).prop('type'),
                inputEvent = module.get.changeEvent(type);
            $(this).on(inputEvent + eventNamespace, module.event.field.change);
          });
        },

        clear: function clear() {
          $field.each(function () {
            var $field = $(this),
                $element = $field.parent(),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox = $element.is(selector.uiCheckbox),
                isDropdown = $element.is(selector.uiDropdown),
                isErrored = $fieldGroup.hasClass(className.error);
            if (isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
            }
            if (isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('clear');
            } else if (isCheckbox) {
              $element.checkbox('uncheck');
            } else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val('');
            }
          });
        },

        reset: function reset() {
          $field.each(function () {
            var $field = $(this),
                $element = $field.parent(),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox = $element.is(selector.uiCheckbox),
                isDropdown = $element.is(selector.uiDropdown),
                isErrored = $fieldGroup.hasClass(className.error);
            if (isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
            }
            if (isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('restore defaults');
            } else if (isCheckbox) {
              module.verbose('Resetting checkbox value', $element, defaultValue);
              if (defaultValue === true) {
                $element.checkbox('check');
              } else {
                $element.checkbox('uncheck');
              }
            } else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val(defaultValue);
            }
          });
        },

        removeEvents: function removeEvents() {
          $module.off(eventNamespace);
          $field.off(eventNamespace);
          $submit.off(eventNamespace);
          $field.off(eventNamespace);
        },

        event: {
          field: {
            keydown: function keydown(event) {
              var $field = $(this),
                  key = event.which,
                  keyCode = {
                enter: 13,
                escape: 27
              };
              if (key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field.blur();
              }
              if (!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0) {
                $submit.addClass(className.pressed);
                if (!keyHeldDown) {
                  $field.one('keyup' + eventNamespace, module.event.field.keyup);
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
                }
                keyHeldDown = true;
              }
            },
            keyup: function keyup() {
              keyHeldDown = false;
              $submit.removeClass(className.pressed);
            },
            blur: function blur() {
              var $field = $(this),
                  $fieldGroup = $field.closest($group);
              if ($fieldGroup.hasClass(className.error)) {
                module.debug('Revalidating field', $field, module.get.validation($field));
                module.validate.field(module.get.validation($field));
              } else if (settings.on == 'blur' || settings.on == 'change') {
                module.validate.field(module.get.validation($field));
              }
            },
            change: function change() {
              var $field = $(this),
                  $fieldGroup = $field.closest($group);
              if (settings.on == 'change' || $fieldGroup.hasClass(className.error) && settings.revalidate) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function () {
                  module.debug('Revalidating field', $field, module.get.validation($field));
                  module.validate.field(module.get.validation($field));
                }, settings.delay);
              }
            }
          }

        },

        get: {
          changeEvent: function changeEvent(type) {
            if (type == 'checkbox' || type == 'radio' || type == 'hidden') {
              return 'change';
            } else {
              return module.get.inputEvent();
            }
          },
          inputEvent: function inputEvent() {
            return document.createElement('input').oninput !== undefined ? 'input' : document.createElement('input').onpropertychange !== undefined ? 'propertychange' : 'keyup';
          },
          field: function field(identifier) {
            module.verbose('Finding field with identifier', identifier);
            if ($field.filter('#' + identifier).length > 0) {
              return $field.filter('#' + identifier);
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {
              return $field.filter('[name="' + identifier + '"]');
            } else if ($field.filter('[name="' + identifier + '[]"]').length > 0) {
              return $field.filter('[name="' + identifier + '[]"]');
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {
              return $field.filter('[data-' + metadata.validate + '="' + identifier + '"]');
            }
            return $('<input/>');
          },
          fields: function fields(_fields) {
            var $fields = $();
            $.each(_fields, function (index, name) {
              $fields = $fields.add(module.get.field(name));
            });
            return $fields;
          },
          validation: function validation($field) {
            var rules;
            $.each(_validation, function (fieldName, field) {
              if (module.get.field(field.identifier).get(0) == $field.get(0)) {
                rules = field;
              }
            });
            return rules || false;
          },
          value: function value(field) {
            var fields = [],
                results;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
          },
          values: function values(fields) {
            var $fields = $.isArray(fields) ? module.get.fields(fields) : $field,
                values = {};
            $fields.each(function (index, field) {
              var $field = $(field),
                  type = $field.prop('type'),
                  name = $field.prop('name'),
                  value = $field.val(),
                  isCheckbox = $field.is(selector.checkbox),
                  isRadio = $field.is(selector.radio),
                  isMultiple = name.indexOf('[]') !== -1,
                  isChecked = isCheckbox ? $field.is(':checked') : false;
              if (name) {
                if (isMultiple) {
                  name = name.replace('[]', '');
                  if (!values[name]) {
                    values[name] = [];
                  }
                  if (isCheckbox) {
                    if (isChecked) {
                      values[name].push(value);
                    } else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  } else {
                    values[name].push(value);
                  }
                } else {
                  if (isRadio) {
                    if (isChecked) {
                      values[name] = value;
                    }
                  } else if (isCheckbox) {
                    if (isChecked) {
                      values[name] = true;
                    } else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  } else {
                    values[name] = value;
                  }
                }
              }
            });
            return values;
          }
        },

        has: {

          field: function field(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            if ($field.filter('#' + identifier).length > 0) {
              return true;
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {
              return true;
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {
              return true;
            }
            return false;
          }

        },

        add: {
          prompt: function prompt(identifier, errors) {
            var $field = module.get.field(identifier),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.children(selector.prompt),
                promptExists = $prompt.length !== 0;
            errors = typeof errors == 'string' ? [errors] : errors;
            module.verbose('Adding field error state', identifier);
            $fieldGroup.addClass(className.error);
            if (settings.inline) {
              if (!promptExists) {
                $prompt = settings.templates.prompt(errors);
                $prompt.appendTo($fieldGroup);
              }
              $prompt.html(errors[0]);
              if (!promptExists) {
                if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', settings.transition);
                  $prompt.transition(settings.transition + ' in', settings.duration);
                } else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt.fadeIn(settings.duration);
                }
              } else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
              }
            }
          },
          errors: function errors(_errors) {
            module.debug('Adding form error messages', _errors);
            $message.html(settings.templates.error(_errors));
          }
        },

        remove: {
          prompt: function prompt(field) {
            var $field = module.get.field(field.identifier),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.children(selector.prompt);
            $fieldGroup.removeClass(className.error);
            if (settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', field);
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                $prompt.transition(settings.transition + ' out', settings.duration, function () {
                  $prompt.remove();
                });
              } else {
                $prompt.fadeOut(settings.duration, function () {
                  $prompt.remove();
                });
              }
            }
          }
        },

        set: {
          success: function success() {
            $module.removeClass(className.error).addClass(className.success);
          },
          defaults: function defaults() {
            $field.each(function () {
              var $field = $(this),
                  isCheckbox = $field.filter(selector.checkbox).length > 0,
                  value = isCheckbox ? $field.is(':checked') : $field.val();
              $field.data(metadata.defaultValue, value);
            });
          },
          error: function error() {
            $module.removeClass(className.success).addClass(className.error);
          },
          value: function value(field, _value) {
            var fields = {};
            fields[field] = _value;
            return module.set.values.call(element, fields);
          },
          values: function values(fields) {
            if ($.isEmptyObject(fields)) {
              return;
            }
            $.each(fields, function (key, value) {
              var $field = module.get.field(key),
                  $element = $field.parent(),
                  isMultiple = $.isArray(value),
                  isCheckbox = $element.is(selector.uiCheckbox),
                  isDropdown = $element.is(selector.uiDropdown),
                  isRadio = $field.is(selector.radio) && isCheckbox,
                  fieldExists = $field.length > 0,
                  $multipleField;
              if (fieldExists) {
                if (isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function (index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element = $multipleField.parent();
                    if ($multipleField.length > 0) {
                      $element.checkbox('check');
                    }
                  });
                } else if (isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]').parent(selector.uiCheckbox).checkbox('check');
                } else if (isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if (value === true) {
                    $element.checkbox('check');
                  } else {
                    $element.checkbox('uncheck');
                  }
                } else if (isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
                } else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
                }
              }
            });
            module.validate.form();
          }
        },

        validate: {

          form: function form(event) {
            var allValid = true,
                apiRequest;

            // input keydown event will fire submit repeatedly by browser default
            if (keyHeldDown) {
              return false;
            }

            // reset errors
            formErrors = [];
            $.each(_validation, function (fieldName, field) {
              if (!module.validate.field(field)) {
                allValid = false;
              }
            });
            if (allValid) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              return settings.onSuccess.call(element, event);
            } else {
              module.debug('Form has errors');
              module.set.error();
              if (!settings.inline) {
                module.add.errors(formErrors);
              }
              // prevent ajax submit
              if ($module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
              }
              return settings.onFailure.call(element, formErrors);
            }
          },

          // takes a validation object and returns whether field passes validation
          field: function field(_field) {
            var $field = module.get.field(_field.identifier),
                fieldValid = true,
                fieldErrors = [];
            if ($field.prop('disabled')) {
              module.debug('Field is disabled. Skipping', _field.identifier);
              fieldValid = true;
            } else if (_field.optional && $.trim($field.val()) === '') {
              module.debug('Field is optional and empty. Skipping', _field.identifier);
              fieldValid = true;
            } else if (_field.rules !== undefined) {
              $.each(_field.rules, function (index, rule) {
                if (module.has.field(_field.identifier) && !module.validate.rule(_field, rule)) {
                  module.debug('Field is invalid', _field.identifier, rule.type);
                  fieldErrors.push(rule.prompt);
                  fieldValid = false;
                }
              });
            }
            if (fieldValid) {
              module.remove.prompt(_field, fieldErrors);
              settings.onValid.call($field);
            } else {
              formErrors = formErrors.concat(fieldErrors);
              module.add.prompt(_field.identifier, fieldErrors);
              settings.onInvalid.call($field, fieldErrors);
              return false;
            }
            return true;
          },

          // takes validation rule and returns whether field passes rule
          rule: function rule(field, validation) {
            var $field = module.get.field(field.identifier),
                type = validation.type,
                value = $.trim($field.val() + ''),
                bracketRegExp = /\[(.*)\]/i,
                bracket = bracketRegExp.exec(type),
                isValid = true,
                ancillary,
                functionType;
            // if bracket notation is used, pass in extra parameters
            if (bracket !== undefined && bracket !== null) {
              ancillary = '' + bracket[1];
              functionType = type.replace(bracket[0], '');
              isValid = settings.rules[functionType].call(element, value, ancillary);
            }
            // normal notation
            else {
              isValid = settings.rules[type].call($field, value);
            }
            return isValid;
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.form.settings = {

    name: 'Form',
    namespace: 'form',

    debug: false,
    verbose: true,
    performance: true,

    keyboardShortcuts: true,
    on: 'submit',
    inline: false,

    delay: 200,
    revalidate: true,

    transition: 'scale',
    duration: 200,

    onValid: function onValid() {},
    onInvalid: function onInvalid() {},
    onSuccess: function onSuccess() {
      return true;
    },
    onFailure: function onFailure() {
      return false;
    },

    metadata: {
      defaultValue: 'default',
      validate: 'validate'
    },

    selector: {
      checkbox: 'input[type="checkbox"], input[type="radio"]',
      clear: '.clear',
      field: 'input, textarea, select',
      group: '.field',
      input: 'input',
      message: '.error.message',
      prompt: '.prompt.label',
      radio: 'input[type="radio"]',
      reset: '.reset',
      submit: '.submit',
      uiCheckbox: '.ui.checkbox',
      uiDropdown: '.ui.dropdown'
    },

    className: {
      error: 'error',
      label: 'ui prompt label',
      pressed: 'down',
      success: 'success'
    },

    error: {
      method: 'The method you called is not defined.'
    },

    templates: {

      // template that produces error message
      error: function error(errors) {
        var html = '<ul class="list">';
        $.each(errors, function (index, value) {
          html += '<li>' + value + '</li>';
        });
        html += '</ul>';
        return $(html);
      },

      // template that produces label
      prompt: function prompt(errors) {
        return $('<div/>').addClass('ui red pointing prompt label').html(errors[0]);
      }
    },

    rules: {

      // checkbox checked
      checked: function checked() {
        return $(this).filter(':checked').length > 0;
      },

      // value contains text (insensitive)
      contains: function contains(value, text) {
        // escape regex characters
        text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        return value.search(new RegExp(text, 'i')) !== -1;
      },

      // value contains text (case sensitive)
      containsExactly: function containsExactly(value, text) {
        // escape regex characters
        text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        return value.search(new RegExp(text)) !== -1;
      },

      // is most likely an email
      email: function email(value) {
        var emailRegExp = new RegExp('[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?', 'i');
        return emailRegExp.test(value);
      },

      // is not empty or blank string
      empty: function empty(value) {
        return !(value === undefined || '' === value);
      },

      // is valid integer
      integer: function integer(value, range) {
        var intRegExp = /^\-?\d+$/,
            min,
            max,
            parts;
        if (range === undefined || range === '' || range === '..') {} else if (range.indexOf('..') == -1) {
          if (intRegExp.test(range)) {
            min = max = range - 0;
          }
        } else {
          parts = range.split('..', 2);
          if (intRegExp.test(parts[0])) {
            min = parts[0] - 0;
          }
          if (intRegExp.test(parts[1])) {
            max = parts[1] - 0;
          }
        }
        return intRegExp.test(value) && (min === undefined || value >= min) && (max === undefined || value <= max);
      },

      // is value (case insensitive)
      is: function is(value, text) {
        text = typeof text == 'string' ? text.toLowerCase() : text;
        value = typeof value == 'string' ? value.toLowerCase() : value;
        return value == text;
      },

      // is value
      isExactly: function isExactly(value, text) {
        return value == text;
      },

      // is at least string length
      length: function length(value, requiredLength) {
        return value !== undefined ? value.length >= requiredLength : false;
      },

      // matches another field
      match: function match(value, fieldIdentifier) {
        // use either id or name of field
        var $form = $(this),
            matchingValue;
        if ($form.find('#' + fieldIdentifier).length > 0) {
          matchingValue = $form.find('#' + fieldIdentifier).val();
        } else if ($form.find('[name="' + fieldIdentifier + '"]').length > 0) {
          matchingValue = $form.find('[name="' + fieldIdentifier + '"]').val();
        } else if ($form.find('[data-validate="' + fieldIdentifier + '"]').length > 0) {
          matchingValue = $form.find('[data-validate="' + fieldIdentifier + '"]').val();
        }
        return matchingValue !== undefined ? value.toString() == matchingValue.toString() : false;
      },

      // string length is less than max length
      maxLength: function maxLength(value, _maxLength) {
        return value !== undefined ? value.length <= _maxLength : false;
      },

      // value is not value (case insensitive)
      not: function not(value, notValue) {
        value = typeof value == 'string' ? value.toLowerCase() : value;
        notValue = typeof notValue == 'string' ? notValue.toLowerCase() : notValue;
        return value != notValue;
      },

      // value is not value (case sensitive)
      notExactly: function notExactly(value, notValue) {
        return value != notValue;
      },

      // value is most likely url
      url: function url(value) {
        var urlRegExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return urlRegExp.test(value);
      }
    }

  };
})(jQuery, window, document);

// do nothing
});

require.register("web/static/css/components/form.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, i) {
  "use strict";e.fn.form = function (t, r) {
    var o,
        a = e(this),
        s = e.extend(!0, {}, e.fn.form.settings, r),
        l = e.extend({}, e.fn.form.settings.defaults, t),
        c = s.namespace,
        u = s.metadata,
        d = s.selector,
        f = s.className,
        p = (s.error, "." + c),
        v = "module-" + c,
        m = a.selector || "",
        h = new Date().getTime(),
        g = [],
        b = arguments[0],
        k = "string" == typeof b,
        y = [].slice.call(arguments, 1);return (a.each(function () {
      var t,
          r = e(this),
          c = e(this).find(d.field),
          x = e(this).find(d.group),
          w = e(this).find(d.message),
          E = (e(this).find(d.prompt), e(this).find(d.submit)),
          C = e(this).find(d.clear),
          S = e(this).find(d.reset),
          R = [],
          F = !1,
          z = this,
          T = r.data(v);t = { initialize: function initialize() {
          t.verbose("Initializing form validation", r, l, s), t.bindEvents(), t.set.defaults(), t.instantiate();
        }, instantiate: function instantiate() {
          t.verbose("Storing instance of module", t), T = t, r.data(v, t);
        }, destroy: function destroy() {
          t.verbose("Destroying previous module", T), t.removeEvents(), r.removeData(v);
        }, refresh: function refresh() {
          t.verbose("Refreshing selector cache"), c = r.find(d.field);
        }, submit: function submit() {
          t.verbose("Submitting form", r), r.submit();
        }, attachEvents: function attachEvents(n, i) {
          i = i || "submit", e(n).on("click", function (e) {
            t[i](), e.preventDefault();
          });
        }, bindEvents: function bindEvents() {
          s.keyboardShortcuts && c.on("keydown" + p, t.event.field.keydown), r.on("submit" + p, t.validate.form), c.on("blur" + p, t.event.field.blur), t.attachEvents(E, "submit"), t.attachEvents(S, "reset"), t.attachEvents(C, "clear"), c.each(function () {
            var n = e(this).prop("type"),
                i = t.get.changeEvent(n);e(this).on(i + p, t.event.field.change);
          });
        }, clear: function clear() {
          c.each(function () {
            var n = e(this),
                i = n.parent(),
                r = n.closest(x),
                o = r.find(d.prompt),
                a = n.data(u.defaultValue) || "",
                s = i.is(d.uiCheckbox),
                l = i.is(d.uiDropdown),
                c = r.hasClass(f.error);c && (t.verbose("Resetting error on field", r), r.removeClass(f.error), o.remove()), l ? (t.verbose("Resetting dropdown value", i, a), i.dropdown("clear")) : s ? i.checkbox("uncheck") : (t.verbose("Resetting field value", n, a), n.val(""));
          });
        }, reset: function reset() {
          c.each(function () {
            var n = e(this),
                i = n.parent(),
                r = n.closest(x),
                o = r.find(d.prompt),
                a = n.data(u.defaultValue) || "",
                s = i.is(d.uiCheckbox),
                l = i.is(d.uiDropdown),
                c = r.hasClass(f.error);c && (t.verbose("Resetting error on field", r), r.removeClass(f.error), o.remove()), l ? (t.verbose("Resetting dropdown value", i, a), i.dropdown("restore defaults")) : s ? (t.verbose("Resetting checkbox value", i, a), i.checkbox(a === !0 ? "check" : "uncheck")) : (t.verbose("Resetting field value", n, a), n.val(a));
          });
        }, removeEvents: function removeEvents() {
          r.off(p), c.off(p), E.off(p), c.off(p);
        }, event: { field: { keydown: function keydown(n) {
              var i = e(this),
                  r = n.which,
                  o = { enter: 13, escape: 27 };r == o.escape && (t.verbose("Escape key pressed blurring field"), i.blur()), !n.ctrlKey && r == o.enter && i.is(d.input) && i.not(d.checkbox).length > 0 && (E.addClass(f.pressed), F || (i.one("keyup" + p, t.event.field.keyup), t.submit(), t.debug("Enter pressed on input submitting form")), F = !0);
            }, keyup: function keyup() {
              F = !1, E.removeClass(f.pressed);
            }, blur: function blur() {
              var n = e(this),
                  i = n.closest(x);i.hasClass(f.error) ? (t.debug("Revalidating field", n, t.get.validation(n)), t.validate.field(t.get.validation(n))) : ("blur" == s.on || "change" == s.on) && t.validate.field(t.get.validation(n));
            }, change: function change() {
              var n = e(this),
                  i = n.closest(x);("change" == s.on || i.hasClass(f.error) && s.revalidate) && (clearTimeout(t.timer), t.timer = setTimeout(function () {
                t.debug("Revalidating field", n, t.get.validation(n)), t.validate.field(t.get.validation(n));
              }, s.delay));
            } } }, get: { changeEvent: function changeEvent(e) {
            return "checkbox" == e || "radio" == e || "hidden" == e ? "change" : t.get.inputEvent();
          }, inputEvent: function inputEvent() {
            return n.createElement("input").oninput !== i ? "input" : n.createElement("input").onpropertychange !== i ? "propertychange" : "keyup";
          }, field: function field(n) {
            return (t.verbose("Finding field with identifier", n), c.filter("#" + n).length > 0 ? c.filter("#" + n) : c.filter("[name=\"" + n + "\"]").length > 0 ? c.filter("[name=\"" + n + "\"]") : c.filter("[name=\"" + n + "[]\"]").length > 0 ? c.filter("[name=\"" + n + "[]\"]") : c.filter("[data-" + u.validate + "=\"" + n + "\"]").length > 0 ? c.filter("[data-" + u.validate + "=\"" + n + "\"]") : e("<input/>"));
          }, fields: function fields(n) {
            var i = e();return (e.each(n, function (e, n) {
              i = i.add(t.get.field(n));
            }), i);
          }, validation: function validation(n) {
            var i;return (e.each(l, function (e, r) {
              t.get.field(r.identifier).get(0) == n.get(0) && (i = r);
            }), i || !1);
          }, value: function value(e) {
            var n,
                i = [];return (i.push(e), n = t.get.values.call(z, i), n[e]);
          }, values: function values(n) {
            var i = e.isArray(n) ? t.get.fields(n) : c,
                r = {};return (i.each(function (n, i) {
              var o = e(i),
                  a = (o.prop("type"), o.prop("name")),
                  s = o.val(),
                  l = o.is(d.checkbox),
                  c = o.is(d.radio),
                  u = -1 !== a.indexOf("[]"),
                  f = l ? o.is(":checked") : !1;if (a) if (u) if ((a = a.replace("[]", ""), r[a] || (r[a] = []), l)) {
                if (!f) return (t.debug("Omitted unchecked checkbox", o), !0);r[a].push(s);
              } else r[a].push(s);else if (c) f && (r[a] = s);else if (l) {
                if (!f) return (t.debug("Omitted unchecked checkbox", o), !0);r[a] = !0;
              } else r[a] = s;
            }), r);
          } }, has: { field: function field(e) {
            return (t.verbose("Checking for existence of a field with identifier", e), c.filter("#" + e).length > 0 ? !0 : c.filter("[name=\"" + e + "\"]").length > 0 ? !0 : c.filter("[data-" + u.validate + "=\"" + e + "\"]").length > 0 ? !0 : !1);
          } }, add: { prompt: function prompt(n, o) {
            var a = t.get.field(n),
                l = a.closest(x),
                c = l.children(d.prompt),
                u = 0 !== c.length;o = "string" == typeof o ? [o] : o, t.verbose("Adding field error state", n), l.addClass(f.error), s.inline && (u || (c = s.templates.prompt(o), c.appendTo(l)), c.html(o[0]), u ? t.verbose("Inline errors are disabled, no inline error added", n) : s.transition && e.fn.transition !== i && r.transition("is supported") ? (t.verbose("Displaying error with css transition", s.transition), c.transition(s.transition + " in", s.duration)) : (t.verbose("Displaying error with fallback javascript animation"), c.fadeIn(s.duration)));
          }, errors: function errors(e) {
            t.debug("Adding form error messages", e), w.html(s.templates.error(e));
          } }, remove: { prompt: function prompt(n) {
            var o = t.get.field(n.identifier),
                a = o.closest(x),
                l = a.children(d.prompt);a.removeClass(f.error), s.inline && l.is(":visible") && (t.verbose("Removing prompt for field", n), s.transition && e.fn.transition !== i && r.transition("is supported") ? l.transition(s.transition + " out", s.duration, function () {
              l.remove();
            }) : l.fadeOut(s.duration, function () {
              l.remove();
            }));
          } }, set: { success: function success() {
            r.removeClass(f.error).addClass(f.success);
          }, defaults: function defaults() {
            c.each(function () {
              var t = e(this),
                  n = t.filter(d.checkbox).length > 0,
                  i = n ? t.is(":checked") : t.val();t.data(u.defaultValue, i);
            });
          }, error: function error() {
            r.removeClass(f.success).addClass(f.error);
          }, value: function value(e, n) {
            var i = {};return (i[e] = n, t.set.values.call(z, i));
          }, values: function values(n) {
            e.isEmptyObject(n) || (e.each(n, function (n, i) {
              var r,
                  o = t.get.field(n),
                  a = o.parent(),
                  s = e.isArray(i),
                  l = a.is(d.uiCheckbox),
                  c = a.is(d.uiDropdown),
                  u = o.is(d.radio) && l,
                  f = o.length > 0;f && (s && l ? (t.verbose("Selecting multiple", i, o), a.checkbox("uncheck"), e.each(i, function (e, t) {
                r = o.filter("[value=\"" + t + "\"]"), a = r.parent(), r.length > 0 && a.checkbox("check");
              })) : u ? (t.verbose("Selecting radio value", i, o), o.filter("[value=\"" + i + "\"]").parent(d.uiCheckbox).checkbox("check")) : l ? (t.verbose("Setting checkbox value", i, a), a.checkbox(i === !0 ? "check" : "uncheck")) : c ? (t.verbose("Setting dropdown value", i, a), a.dropdown("set selected", i)) : (t.verbose("Setting field value", i, o), o.val(i)));
            }), t.validate.form());
          } }, validate: { form: function form(n) {
            var o = !0;return F ? !1 : (R = [], e.each(l, function (e, n) {
              t.validate.field(n) || (o = !1);
            }), o ? (t.debug("Form has no validation errors, submitting"), t.set.success(), s.onSuccess.call(z, n)) : (t.debug("Form has errors"), t.set.error(), s.inline || t.add.errors(R), r.data("moduleApi") !== i && n.stopImmediatePropagation(), s.onFailure.call(z, R)));
          }, field: function field(n) {
            var r = t.get.field(n.identifier),
                o = !0,
                a = [];return (r.prop("disabled") ? (t.debug("Field is disabled. Skipping", n.identifier), o = !0) : n.optional && "" === e.trim(r.val()) ? (t.debug("Field is optional and empty. Skipping", n.identifier), o = !0) : n.rules !== i && e.each(n.rules, function (e, i) {
              t.has.field(n.identifier) && !t.validate.rule(n, i) && (t.debug("Field is invalid", n.identifier, i.type), a.push(i.prompt), o = !1);
            }), o ? (t.remove.prompt(n, a), s.onValid.call(r), !0) : (R = R.concat(a), t.add.prompt(n.identifier, a), s.onInvalid.call(r, a), !1));
          }, rule: function rule(n, r) {
            var o,
                a,
                l = t.get.field(n.identifier),
                c = r.type,
                u = e.trim(l.val() + ""),
                d = /\[(.*)\]/i,
                f = d.exec(c),
                p = !0;return (f !== i && null !== f ? (o = "" + f[1], a = c.replace(f[0], ""), p = s.rules[a].call(z, u, o)) : p = s.rules[c].call(l, u), p);
          } }, setting: function setting(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, s, t);else {
            if (n === i) return s[t];s[t] = n;
          }
        }, internal: function internal(n, r) {
          if (e.isPlainObject(n)) e.extend(!0, t, n);else {
            if (r === i) return t[n];t[n] = r;
          }
        }, debug: function debug() {
          s.debug && (s.performance ? t.performance.log(arguments) : (t.debug = Function.prototype.bind.call(console.info, console, s.name + ":"), t.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          s.verbose && s.debug && (s.performance ? t.performance.log(arguments) : (t.verbose = Function.prototype.bind.call(console.info, console, s.name + ":"), t.verbose.apply(console, arguments)));
        }, error: function error() {
          t.error = Function.prototype.bind.call(console.error, console, s.name + ":"), t.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, i, r;s.performance && (n = new Date().getTime(), r = h || n, i = n - r, h = n, g.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: z, "Execution Time": i })), clearTimeout(t.performance.timer), t.performance.timer = setTimeout(t.performance.display, 100);
          }, display: function display() {
            var n = s.name + ":",
                r = 0;h = !1, clearTimeout(t.performance.timer), e.each(g, function (e, t) {
              r += t["Execution Time"];
            }), n += " " + r + "ms", m && (n += " '" + m + "'"), a.length > 1 && (n += " (" + a.length + ")"), (console.group !== i || console.table !== i) && g.length > 0 && (console.groupCollapsed(n), console.table ? console.table(g) : e.each(g, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), g = [];
          } }, invoke: function invoke(t, n, r) {
          var a,
              s,
              l,
              c = T;return (n = n || y, r = z || r, "string" == typeof t && c !== i && (t = t.split(/[\. ]/), a = t.length - 1, e.each(t, function (n, r) {
            var o = n != a ? r + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(c[o]) && n != a) c = c[o];else {
              if (c[o] !== i) return (s = c[o], !1);if (!e.isPlainObject(c[r]) || n == a) return c[r] !== i ? (s = c[r], !1) : !1;c = c[r];
            }
          })), e.isFunction(s) ? l = s.apply(r, n) : s !== i && (l = s), e.isArray(o) ? o.push(l) : o !== i ? o = [o, l] : l !== i && (o = l), s);
        } }, k ? (T === i && t.initialize(), t.invoke(b)) : (T !== i && T.invoke("destroy"), t.initialize());
    }), o !== i ? o : this);
  }, e.fn.form.settings = { name: "Form", namespace: "form", debug: !1, verbose: !0, performance: !0, keyboardShortcuts: !0, on: "submit", inline: !1, delay: 200, revalidate: !0, transition: "scale", duration: 200, onValid: function onValid() {}, onInvalid: function onInvalid() {}, onSuccess: function onSuccess() {
      return !0;
    }, onFailure: function onFailure() {
      return !1;
    }, metadata: { defaultValue: "default", validate: "validate" }, selector: { checkbox: "input[type=\"checkbox\"], input[type=\"radio\"]", clear: ".clear", field: "input, textarea, select", group: ".field", input: "input", message: ".error.message", prompt: ".prompt.label", radio: "input[type=\"radio\"]", reset: ".reset", submit: ".submit", uiCheckbox: ".ui.checkbox", uiDropdown: ".ui.dropdown" }, className: { error: "error", label: "ui prompt label", pressed: "down", success: "success" }, error: { method: "The method you called is not defined." }, templates: { error: function error(t) {
        var n = "<ul class=\"list\">";return (e.each(t, function (e, t) {
          n += "<li>" + t + "</li>";
        }), n += "</ul>", e(n));
      }, prompt: function prompt(t) {
        return e("<div/>").addClass("ui red pointing prompt label").html(t[0]);
      } }, rules: { checked: function checked() {
        return e(this).filter(":checked").length > 0;
      }, contains: function contains(e, t) {
        return (t = t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), -1 !== e.search(new RegExp(t, "i")));
      }, containsExactly: function containsExactly(e, t) {
        return (t = t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), -1 !== e.search(new RegExp(t)));
      }, email: function email(e) {
        var t = new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?", "i");return t.test(e);
      }, empty: function empty(e) {
        return !(e === i || "" === e);
      }, integer: function integer(e, t) {
        var n,
            r,
            o,
            a = /^\-?\d+$/;return (t === i || "" === t || ".." === t || (-1 == t.indexOf("..") ? a.test(t) && (n = r = t - 0) : (o = t.split("..", 2), a.test(o[0]) && (n = o[0] - 0), a.test(o[1]) && (r = o[1] - 0))), a.test(e) && (n === i || e >= n) && (r === i || r >= e));
      }, is: function is(e, t) {
        return (t = "string" == typeof t ? t.toLowerCase() : t, e = "string" == typeof e ? e.toLowerCase() : e, e == t);
      }, isExactly: function isExactly(e, t) {
        return e == t;
      }, length: function length(e, t) {
        return e !== i ? e.length >= t : !1;
      }, match: function match(t, n) {
        var r,
            o = e(this);return (o.find("#" + n).length > 0 ? r = o.find("#" + n).val() : o.find("[name=\"" + n + "\"]").length > 0 ? r = o.find("[name=\"" + n + "\"]").val() : o.find("[data-validate=\"" + n + "\"]").length > 0 && (r = o.find("[data-validate=\"" + n + "\"]").val()), r !== i ? t.toString() == r.toString() : !1);
      }, maxLength: function maxLength(e, t) {
        return e !== i ? e.length <= t : !1;
      }, not: function not(e, t) {
        return (e = "string" == typeof e ? e.toLowerCase() : e, t = "string" == typeof t ? t.toLowerCase() : t, e != t);
      }, notExactly: function notExactly(e, t) {
        return e != t;
      }, url: function url(e) {
        var t = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;return t.test(e);
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/modal", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.modal = function (parameters) {
    var $allModules = $(this),
        $window = $(window),
        $document = $(document),
        $body = $('body'),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings),
          selector = settings.selector,
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $close = $module.find(selector.close),
          $allModals,
          $otherModals,
          $focusedElement,
          $dimmable,
          $dimmer,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          observer,
          module;
      module = {

        initialize: function initialize() {
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();
          module.refreshModals();

          module.verbose('Attaching close events', $close);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        create: {
          dimmer: function dimmer() {
            var defaultSettings = {
              debug: settings.debug,
              dimmerName: 'modals',
              duration: {
                show: settings.duration,
                hide: settings.duration
              }
            },
                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);
            if ($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
            }
            module.debug('Creating dimmer with settings', dimmerSettings);
            $dimmable = $context.dimmer(dimmerSettings);
            if (settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
            }
            $dimmer = $dimmable.dimmer('get dimmer');
          },
          id: function id() {
            _id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + _id;
            module.verbose('Creating unique id for element', _id);
          }
        },

        destroy: function destroy() {
          module.verbose('Destroying previous modal');
          $module.removeData(moduleNamespace).off(eventNamespace);
          $window.off(elementNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        refresh: function refresh() {
          module.remove.scrolling();
          module.cacheSizes();
          module.set.screenHeight();
          module.set.type();
          module.set.position();
        },

        refreshModals: function refreshModals() {
          $otherModals = $module.siblings(selector.modal);
          $allModals = $otherModals.add($module);
        },

        attachEvents: function attachEvents(selector, event) {
          var $toggle = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle.off(eventNamespace).on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound, selector);
          }
        },

        bind: {
          events: function events() {
            $close.on('click' + eventNamespace, module.event.close);
            $window.on('resize' + elementNamespace, module.event.resize);
          }
        },

        get: {
          id: function id() {
            return (Math.random().toString(16) + '000000000').substr(2, 8);
          }
        },

        event: {
          close: function close() {
            module.verbose('Closing element pressed');
            if ($(this).is(selector.approve)) {
              if (settings.onApprove.call(element) !== false) {
                module.hide();
              } else {
                module.verbose('Approve callback returned false cancelling hide');
              }
            } else if ($(this).is(selector.deny)) {
              if (settings.onDeny.call(element) !== false) {
                module.hide();
              } else {
                module.verbose('Deny callback returned false cancelling hide');
              }
            } else {
              module.hide();
            }
          },
          click: function click(event) {
            if ($(event.target).closest($module).length === 0) {
              module.debug('Dimmer clicked, hiding all modals');
              if (module.is.active()) {
                module.remove.clickaway();
                if (settings.allowMultiple) {
                  module.hide();
                } else {
                  module.hideAll();
                }
              }
            }
          },
          debounce: function debounce(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
          },
          keyboard: function keyboard(event) {
            var keyCode = event.which,
                escapeKey = 27;
            if (keyCode == escapeKey) {
              if (settings.closable) {
                module.debug('Escape key pressed hiding modal');
                module.hide();
              } else {
                module.debug('Escape key pressed, but closable is set to false');
              }
              event.preventDefault();
            }
          },
          resize: function resize() {
            if ($dimmable.dimmer('is active')) {
              requestAnimationFrame(module.refresh);
            }
          }
        },

        toggle: function toggle() {
          if (module.is.active() || module.is.animating()) {
            module.hide();
          } else {
            module.show();
          }
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.refreshModals();
          module.showModal(callback);
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.refreshModals();
          module.hideModal(callback);
        },

        showModal: function showModal(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.animating() || !module.is.active()) {

            module.showDimmer();
            module.cacheSizes();
            module.set.position();
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if (!settings.allowMultiple && $otherModals.filter('.' + className.active).length > 0) {
              module.debug('Other modals visible, queueing show animation');
              module.hideOthers(module.showModal);
            } else {
              settings.onShow.call(element);
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module.transition({
                  debug: settings.debug,
                  animation: settings.transition + ' in',
                  queue: settings.queue,
                  duration: settings.duration,
                  useFailSafe: true,
                  onComplete: function onComplete() {
                    settings.onVisible.apply(element);
                    module.add.keyboardShortcuts();
                    module.save.focus();
                    module.set.active();
                    module.set.autofocus();
                    callback();
                  }
                });
              } else {
                module.debug('Showing modal with javascript');
                $module.fadeIn(settings.duration, settings.easing, function () {
                  settings.onVisible.apply(element);
                  module.add.keyboardShortcuts();
                  module.save.focus();
                  module.set.active();
                  callback();
                });
              }
            }
          } else {
            module.debug('Modal is already visible');
          }
        },

        hideModal: function hideModal(callback, keepDimmed) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.debug('Hiding modal');
          settings.onHide.call(element);

          if (module.is.animating() || module.is.active()) {
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module.transition({
                debug: settings.debug,
                animation: settings.transition + ' out',
                queue: settings.queue,
                duration: settings.duration,
                useFailSafe: true,
                onStart: function onStart() {
                  if (!module.othersActive() && !keepDimmed) {
                    module.hideDimmer();
                  }
                  module.remove.keyboardShortcuts();
                },
                onComplete: function onComplete() {
                  settings.onHidden.call(element);
                  module.restore.focus();
                  callback();
                }
              });
            } else {
              module.remove.active();
              if (!module.othersActive()) {
                module.hideDimmer();
              }
              module.remove.keyboardShortcuts();
              $module.fadeOut(settings.duration, settings.easing, function () {
                settings.onHidden.call(element);
                module.restore.focus();
                callback();
              });
            }
          }
        },

        showDimmer: function showDimmer() {
          if ($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active')) {
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
          } else {
            module.debug('Dimmer already visible');
          }
        },

        hideDimmer: function hideDimmer() {
          if ($dimmable.dimmer('is animating') || $dimmable.dimmer('is active')) {
            $dimmable.dimmer('hide', function () {
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.remove.clickaway();
                module.remove.screenHeight();
              }
            });
          } else {
            module.debug('Dimmer is not visible cannot hide');
            return;
          }
        },

        hideAll: function hideAll(callback) {
          var $visibleModals = $allModals.filter(':visible');
          callback = $.isFunction(callback) ? callback : function () {};
          if ($visibleModals.length > 0) {
            module.debug('Hiding all visible modals');
            module.hideDimmer();
            $visibleModals.modal('hide modal', callback);
          }
        },

        hideOthers: function hideOthers(callback) {
          var $visibleModals = $otherModals.filter(':visible');
          callback = $.isFunction(callback) ? callback : function () {};
          if ($visibleModals.length > 0) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals.modal('hide modal', callback, true);
          }
        },

        othersActive: function othersActive() {
          return $otherModals.filter('.' + className.active).length > 0;
        },

        add: {
          keyboardShortcuts: function keyboardShortcuts() {
            module.verbose('Adding keyboard shortcuts');
            $document.on('keyup' + eventNamespace, module.event.keyboard);
          }
        },

        save: {
          focus: function focus() {
            $focusedElement = $(document.activeElement).blur();
          }
        },

        restore: {
          focus: function focus() {
            if ($focusedElement && $focusedElement.length > 0) {
              $focusedElement.focus();
            }
          }
        },

        remove: {
          active: function active() {
            $module.removeClass(className.active);
          },
          clickaway: function clickaway() {
            if (settings.closable) {
              $dimmer.off('click' + elementNamespace);
            }
          },
          screenHeight: function screenHeight() {
            if (module.cache.height > module.cache.pageHeight) {
              module.debug('Removing page height');
              $body.css('height', '');
            }
          },
          keyboardShortcuts: function keyboardShortcuts() {
            module.verbose('Removing keyboard shortcuts');
            $document.off('keyup' + eventNamespace);
          },
          scrolling: function scrolling() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
          }
        },

        cacheSizes: function cacheSizes() {
          var modalHeight = $module.outerHeight();
          if (module.cache === undefined || modalHeight !== 0) {
            module.cache = {
              pageHeight: $(document).outerHeight(),
              height: modalHeight + settings.offset,
              contextHeight: settings.context == 'body' ? $(window).height() : $dimmable.height()
            };
          }
          module.debug('Caching modal and container sizes', module.cache);
        },

        can: {
          fit: function fit() {
            return module.cache.height + settings.padding * 2 < module.cache.contextHeight;
          }
        },

        is: {
          active: function active() {
            return $module.hasClass(className.active);
          },
          animating: function animating() {
            return $module.transition('is supported') ? $module.transition('is animating') : $module.is(':visible');
          },
          scrolling: function scrolling() {
            return $dimmable.hasClass(className.scrolling);
          },
          modernBrowser: function modernBrowser() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || 'ActiveXObject' in window);
          }
        },

        set: {
          autofocus: function autofocus() {
            if (settings.autofocus) {
              var $inputs = $module.find(':input:visible'),
                  $autofocus = $inputs.filter('[autofocus]'),
                  $input = $autofocus.length > 0 ? $autofocus : $inputs;
              $input.first().focus();
            }
          },
          clickaway: function clickaway() {
            if (settings.closable) {
              $dimmer.on('click' + elementNamespace, module.event.click);
            }
          },
          screenHeight: function screenHeight() {
            if (module.can.fit()) {
              $body.css('height', '');
            } else {
              module.debug('Modal is taller than page content, resizing page height');
              $body.css('height', module.cache.height + settings.padding / 2);
            }
          },
          active: function active() {
            $module.addClass(className.active);
          },
          scrolling: function scrolling() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
          },
          type: function type() {
            if (module.can.fit()) {
              module.verbose('Modal fits on screen');
              if (!module.othersActive) {
                module.remove.scrolling();
              }
            } else {
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
            }
          },
          position: function position() {
            module.verbose('Centering modal on page', module.cache);
            if (module.can.fit()) {
              $module.css({
                top: '',
                marginTop: -(module.cache.height / 2)
              });
            } else {
              $module.css({
                marginTop: '',
                top: $document.scrollTop()
              });
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.modal.settings = {

    name: 'Modal',
    namespace: 'modal',

    debug: false,
    verbose: true,
    performance: true,

    allowMultiple: false,
    detachable: true,
    closable: true,
    autofocus: true,

    dimmerSettings: {
      closable: false,
      useCSS: true
    },

    context: 'body',

    queue: false,
    duration: 500,
    easing: 'easeOutExpo',
    offset: 0,
    transition: 'scale',

    padding: 50,

    onShow: function onShow() {},
    onHide: function onHide() {},

    onVisible: function onVisible() {},
    onHidden: function onHidden() {},

    onApprove: function onApprove() {
      return true;
    },
    onDeny: function onDeny() {
      return true;
    },

    selector: {
      close: '.close, .actions .button',
      approve: '.actions .positive, .actions .approve, .actions .ok',
      deny: '.actions .negative, .actions .deny, .actions .cancel',
      modal: '.ui.modal'
    },
    error: {
      dimmer: 'UI Dimmer, a required component is not included in this page',
      method: 'The method you called is not defined.',
      notFound: 'The element you specified could not be found'
    },
    className: {
      active: 'active',
      animating: 'animating',
      scrolling: 'scrolling'
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/modal.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, i, n, t) {
  "use strict";e.fn.modal = function (o) {
    var a,
        s = e(this),
        r = e(i),
        c = e(n),
        l = e("body"),
        u = s.selector || "",
        d = new Date().getTime(),
        m = [],
        f = arguments[0],
        g = "string" == typeof f,
        h = [].slice.call(arguments, 1),
        v = i.requestAnimationFrame || i.mozRequestAnimationFrame || i.webkitRequestAnimationFrame || i.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (s.each(function () {
      var s,
          b,
          p,
          y,
          w,
          k,
          S,
          M,
          A,
          C = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.modal.settings, o) : e.extend({}, e.fn.modal.settings),
          D = C.selector,
          F = C.className,
          H = C.namespace,
          T = C.error,
          O = "." + H,
          x = "module-" + H,
          z = e(this),
          q = e(C.context),
          E = z.find(D.close),
          j = this,
          N = z.data(x);A = { initialize: function initialize() {
          A.verbose("Initializing dimmer", q), A.create.id(), A.create.dimmer(), A.refreshModals(), A.verbose("Attaching close events", E), A.bind.events(), A.observeChanges(), A.instantiate();
        }, instantiate: function instantiate() {
          A.verbose("Storing instance of modal"), N = A, z.data(x, N);
        }, create: { dimmer: function dimmer() {
            var i = { debug: C.debug, dimmerName: "modals", duration: { show: C.duration, hide: C.duration } },
                n = e.extend(!0, i, C.dimmerSettings);return e.fn.dimmer === t ? void A.error(T.dimmer) : (A.debug("Creating dimmer with settings", n), y = q.dimmer(n), C.detachable && (A.verbose("Modal is detachable, moving content into dimmer"), y.dimmer("add content", z)), void (w = y.dimmer("get dimmer")));
          }, id: function id() {
            S = (Math.random().toString(16) + "000000000").substr(2, 8), k = "." + S, A.verbose("Creating unique id for element", S);
          } }, destroy: function destroy() {
          A.verbose("Destroying previous modal"), z.removeData(x).off(O), r.off(k), E.off(O), q.dimmer("destroy");
        }, observeChanges: function observeChanges() {
          "MutationObserver" in i && (M = new MutationObserver(function (e) {
            A.debug("DOM tree modified, refreshing"), A.refresh();
          }), M.observe(j, { childList: !0, subtree: !0 }), A.debug("Setting up mutation observer", M));
        }, refresh: function refresh() {
          A.remove.scrolling(), A.cacheSizes(), A.set.screenHeight(), A.set.type(), A.set.position();
        }, refreshModals: function refreshModals() {
          b = z.siblings(D.modal), s = b.add(z);
        }, attachEvents: function attachEvents(i, n) {
          var t = e(i);n = e.isFunction(A[n]) ? A[n] : A.toggle, t.length > 0 ? (A.debug("Attaching modal events to element", i, n), t.off(O).on("click" + O, n)) : A.error(T.notFound, i);
        }, bind: { events: function events() {
            E.on("click" + O, A.event.close), r.on("resize" + k, A.event.resize);
          } }, get: { id: function id() {
            return (Math.random().toString(16) + "000000000").substr(2, 8);
          } }, event: { close: function close() {
            A.verbose("Closing element pressed"), e(this).is(D.approve) ? C.onApprove.call(j) !== !1 ? A.hide() : A.verbose("Approve callback returned false cancelling hide") : e(this).is(D.deny) ? C.onDeny.call(j) !== !1 ? A.hide() : A.verbose("Deny callback returned false cancelling hide") : A.hide();
          }, click: function click(i) {
            0 === e(i.target).closest(z).length && (A.debug("Dimmer clicked, hiding all modals"), A.is.active() && (A.remove.clickaway(), C.allowMultiple ? A.hide() : A.hideAll()));
          }, debounce: function debounce(e, i) {
            clearTimeout(A.timer), A.timer = setTimeout(e, i);
          }, keyboard: function keyboard(e) {
            var i = e.which,
                n = 27;i == n && (C.closable ? (A.debug("Escape key pressed hiding modal"), A.hide()) : A.debug("Escape key pressed, but closable is set to false"), e.preventDefault());
          }, resize: function resize() {
            y.dimmer("is active") && v(A.refresh);
          } }, toggle: function toggle() {
          A.is.active() || A.is.animating() ? A.hide() : A.show();
        }, show: function show(i) {
          i = e.isFunction(i) ? i : function () {}, A.refreshModals(), A.showModal(i);
        }, hide: function hide(i) {
          i = e.isFunction(i) ? i : function () {}, A.refreshModals(), A.hideModal(i);
        }, showModal: function showModal(i) {
          i = e.isFunction(i) ? i : function () {}, A.is.animating() || !A.is.active() ? (A.showDimmer(), A.cacheSizes(), A.set.position(), A.set.screenHeight(), A.set.type(), A.set.clickaway(), !C.allowMultiple && b.filter("." + F.active).length > 0 ? (A.debug("Other modals visible, queueing show animation"), A.hideOthers(A.showModal)) : (C.onShow.call(j), C.transition && e.fn.transition !== t && z.transition("is supported") ? (A.debug("Showing modal with css animations"), z.transition({ debug: C.debug, animation: C.transition + " in", queue: C.queue, duration: C.duration, useFailSafe: !0, onComplete: function onComplete() {
              C.onVisible.apply(j), A.add.keyboardShortcuts(), A.save.focus(), A.set.active(), A.set.autofocus(), i();
            } })) : (A.debug("Showing modal with javascript"), z.fadeIn(C.duration, C.easing, function () {
            C.onVisible.apply(j), A.add.keyboardShortcuts(), A.save.focus(), A.set.active(), i();
          })))) : A.debug("Modal is already visible");
        }, hideModal: function hideModal(i, n) {
          i = e.isFunction(i) ? i : function () {}, A.debug("Hiding modal"), C.onHide.call(j), (A.is.animating() || A.is.active()) && (C.transition && e.fn.transition !== t && z.transition("is supported") ? (A.remove.active(), z.transition({ debug: C.debug, animation: C.transition + " out", queue: C.queue, duration: C.duration, useFailSafe: !0, onStart: function onStart() {
              A.othersActive() || n || A.hideDimmer(), A.remove.keyboardShortcuts();
            }, onComplete: function onComplete() {
              C.onHidden.call(j), A.restore.focus(), i();
            } })) : (A.remove.active(), A.othersActive() || A.hideDimmer(), A.remove.keyboardShortcuts(), z.fadeOut(C.duration, C.easing, function () {
            C.onHidden.call(j), A.restore.focus(), i();
          })));
        }, showDimmer: function showDimmer() {
          y.dimmer("is animating") || !y.dimmer("is active") ? (A.debug("Showing dimmer"), y.dimmer("show")) : A.debug("Dimmer already visible");
        }, hideDimmer: function hideDimmer() {
          return y.dimmer("is animating") || y.dimmer("is active") ? void y.dimmer("hide", function () {
            C.transition && e.fn.transition !== t && z.transition("is supported") && (A.remove.clickaway(), A.remove.screenHeight());
          }) : void A.debug("Dimmer is not visible cannot hide");
        }, hideAll: function hideAll(i) {
          var n = s.filter(":visible");i = e.isFunction(i) ? i : function () {}, n.length > 0 && (A.debug("Hiding all visible modals"), A.hideDimmer(), n.modal("hide modal", i));
        }, hideOthers: function hideOthers(i) {
          var n = b.filter(":visible");i = e.isFunction(i) ? i : function () {}, n.length > 0 && (A.debug("Hiding other modals", b), n.modal("hide modal", i, !0));
        }, othersActive: function othersActive() {
          return b.filter("." + F.active).length > 0;
        }, add: { keyboardShortcuts: function keyboardShortcuts() {
            A.verbose("Adding keyboard shortcuts"), c.on("keyup" + O, A.event.keyboard);
          } }, save: { focus: function focus() {
            p = e(n.activeElement).blur();
          } }, restore: { focus: function focus() {
            p && p.length > 0 && p.focus();
          } }, remove: { active: function active() {
            z.removeClass(F.active);
          }, clickaway: function clickaway() {
            C.closable && w.off("click" + k);
          }, screenHeight: function screenHeight() {
            A.cache.height > A.cache.pageHeight && (A.debug("Removing page height"), l.css("height", ""));
          }, keyboardShortcuts: function keyboardShortcuts() {
            A.verbose("Removing keyboard shortcuts"), c.off("keyup" + O);
          }, scrolling: function scrolling() {
            y.removeClass(F.scrolling), z.removeClass(F.scrolling);
          } }, cacheSizes: function cacheSizes() {
          var o = z.outerHeight();(A.cache === t || 0 !== o) && (A.cache = { pageHeight: e(n).outerHeight(), height: o + C.offset, contextHeight: "body" == C.context ? e(i).height() : y.height() }), A.debug("Caching modal and container sizes", A.cache);
        }, can: { fit: function fit() {
            return A.cache.height + 2 * C.padding < A.cache.contextHeight;
          } }, is: { active: function active() {
            return z.hasClass(F.active);
          }, animating: function animating() {
            return z.transition("is supported") ? z.transition("is animating") : z.is(":visible");
          }, scrolling: function scrolling() {
            return y.hasClass(F.scrolling);
          }, modernBrowser: function modernBrowser() {
            return !(i.ActiveXObject || "ActiveXObject" in i);
          } }, set: { autofocus: function autofocus() {
            if (C.autofocus) {
              var e = z.find(":input:visible"),
                  i = e.filter("[autofocus]"),
                  n = i.length > 0 ? i : e;n.first().focus();
            }
          }, clickaway: function clickaway() {
            C.closable && w.on("click" + k, A.event.click);
          }, screenHeight: function screenHeight() {
            A.can.fit() ? l.css("height", "") : (A.debug("Modal is taller than page content, resizing page height"), l.css("height", A.cache.height + C.padding / 2));
          }, active: function active() {
            z.addClass(F.active);
          }, scrolling: function scrolling() {
            y.addClass(F.scrolling), z.addClass(F.scrolling);
          }, type: function type() {
            A.can.fit() ? (A.verbose("Modal fits on screen"), A.othersActive || A.remove.scrolling()) : (A.verbose("Modal cannot fit on screen setting to scrolling"), A.set.scrolling());
          }, position: function position() {
            A.verbose("Centering modal on page", A.cache), z.css(A.can.fit() ? { top: "", marginTop: -(A.cache.height / 2) } : { marginTop: "", top: c.scrollTop() });
          } }, setting: function setting(i, n) {
          if ((A.debug("Changing setting", i, n), e.isPlainObject(i))) e.extend(!0, C, i);else {
            if (n === t) return C[i];C[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, A, i);else {
            if (n === t) return A[i];A[i] = n;
          }
        }, debug: function debug() {
          C.debug && (C.performance ? A.performance.log(arguments) : (A.debug = Function.prototype.bind.call(console.info, console, C.name + ":"), A.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          C.verbose && C.debug && (C.performance ? A.performance.log(arguments) : (A.verbose = Function.prototype.bind.call(console.info, console, C.name + ":"), A.verbose.apply(console, arguments)));
        }, error: function error() {
          A.error = Function.prototype.bind.call(console.error, console, C.name + ":"), A.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var i, n, t;C.performance && (i = new Date().getTime(), t = d || i, n = i - t, d = i, m.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: j, "Execution Time": n })), clearTimeout(A.performance.timer), A.performance.timer = setTimeout(A.performance.display, 100);
          }, display: function display() {
            var i = C.name + ":",
                n = 0;d = !1, clearTimeout(A.performance.timer), e.each(m, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", u && (i += " '" + u + "'"), (console.group !== t || console.table !== t) && m.length > 0 && (console.groupCollapsed(i), console.table ? console.table(m) : e.each(m, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), m = [];
          } }, invoke: function invoke(i, n, o) {
          var s,
              r,
              c,
              l = N;return (n = n || h, o = j || o, "string" == typeof i && l !== t && (i = i.split(/[\. ]/), s = i.length - 1, e.each(i, function (n, o) {
            var a = n != s ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(l[a]) && n != s) l = l[a];else {
              if (l[a] !== t) return (r = l[a], !1);if (!e.isPlainObject(l[o]) || n == s) return l[o] !== t ? (r = l[o], !1) : !1;l = l[o];
            }
          })), e.isFunction(r) ? c = r.apply(o, n) : r !== t && (c = r), e.isArray(a) ? a.push(c) : a !== t ? a = [a, c] : c !== t && (a = c), r);
        } }, g ? (N === t && A.initialize(), A.invoke(f)) : (N !== t && N.invoke("destroy"), A.initialize());
    }), a !== t ? a : this);
  }, e.fn.modal.settings = { name: "Modal", namespace: "modal", debug: !1, verbose: !0, performance: !0, allowMultiple: !1, detachable: !0, closable: !0, autofocus: !0, dimmerSettings: { closable: !1, useCSS: !0 }, context: "body", queue: !1, duration: 500, easing: "easeOutExpo", offset: 0, transition: "scale", padding: 50, onShow: function onShow() {}, onHide: function onHide() {}, onVisible: function onVisible() {}, onHidden: function onHidden() {}, onApprove: function onApprove() {
      return !0;
    }, onDeny: function onDeny() {
      return !0;
    }, selector: { close: ".close, .actions .button", approve: ".actions .positive, .actions .approve, .actions .ok", deny: ".actions .negative, .actions .deny, .actions .cancel", modal: ".ui.modal" }, error: { dimmer: "UI Dimmer, a required component is not included in this page", method: "The method you called is not defined.", notFound: "The element you specified could not be found" }, className: { active: "active", animating: "animating", scrolling: "scrolling" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/nag", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.nag = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.nag.settings, parameters) : $.extend({}, $.fn.nag.settings),
          className = settings.className,
          selector = settings.selector,
          error = settings.error,
          namespace = settings.namespace,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          $close = $module.find(selector.close),
          $context = settings.context ? $(settings.context) : $('body'),
          element = this,
          instance = $module.data(moduleNamespace),
          moduleOffset,
          moduleHeight,
          contextWidth,
          contextHeight,
          contextOffset,
          yOffset,
          yPosition,
          timer,
          module,
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      };
      module = {

        initialize: function initialize() {
          module.verbose('Initializing element');

          $module.data(moduleNamespace, module);
          $close.on('click' + eventNamespace, module.dismiss);

          if (settings.detachable && $module.parent()[0] !== $context[0]) {
            $module.detach().prependTo($context);
          }

          if (settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
          }
          module.show();
        },

        destroy: function destroy() {
          module.verbose('Destroying instance');
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        show: function show() {
          if (module.should.show() && !$module.is(':visible')) {
            module.debug('Showing nag', settings.animation.show);
            if (settings.animation.show == 'fade') {
              $module.fadeIn(settings.duration, settings.easing);
            } else {
              $module.slideDown(settings.duration, settings.easing);
            }
          }
        },

        hide: function hide() {
          module.debug('Showing nag', settings.animation.hide);
          if (settings.animation.show == 'fade') {
            $module.fadeIn(settings.duration, settings.easing);
          } else {
            $module.slideUp(settings.duration, settings.easing);
          }
        },

        onHide: function onHide() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
          }
        },

        dismiss: function dismiss(event) {
          if (settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
          }
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
        },

        should: {
          show: function show() {
            if (settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
            }
            if (module.storage.get(settings.key) != settings.value.toString()) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
            }
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
          }
        },

        get: {
          storageOptions: function storageOptions() {
            var options = {};
            if (settings.expires) {
              options.expires = settings.expires;
            }
            if (settings.domain) {
              options.domain = settings.domain;
            }
            if (settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        clear: function clear() {
          module.storage.remove(settings.key);
        },

        storage: {
          set: function set(key, value) {
            var options = module.get.storageOptions();
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
            } else if ($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
            } else {
              module.error(error.noCookieStorage);
              return;
            }
          },
          get: function get(key, value) {
            var storedValue;
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
            }
            // get by cookie
            else if ($.cookie !== undefined) {
              storedValue = $.cookie(key);
            } else {
              module.error(error.noCookieStorage);
            }
            if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
            }
            return storedValue;
          },
          remove: function remove(key) {
            var options = module.get.storageOptions();
            if (settings.storageMethod == 'local' && window.store !== undefined) {
              window.localStorage.removeItem(key);
            }
            // store by cookie
            else if ($.cookie !== undefined) {
              $.removeCookie(key, options);
            } else {
              module.error(error.noStorage);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.nag.settings = {

    name: 'Nag',

    debug: false,
    verbose: true,
    performance: true,

    namespace: 'Nag',

    // allows cookie to be overriden
    persist: false,

    // set to zero to require manually dismissal, otherwise hides on its own
    displayTime: 0,

    animation: {
      show: 'slide',
      hide: 'slide'
    },

    context: false,
    detachable: false,

    expires: 30,
    domain: false,
    path: '/',

    // type of storage to use
    storageMethod: 'cookie',

    // value to store in dismissed localstorage/cookie
    key: 'nag',
    value: 'dismiss',

    error: {
      noStorage: 'Neither $.cookie or store is defined. A storage solution is required for storing state',
      method: 'The method you called is not defined.'
    },

    className: {
      bottom: 'bottom',
      fixed: 'fixed'
    },

    selector: {
      close: '.close.icon'
    },

    speed: 500,
    easing: 'easeOutQuad',

    onHide: function onHide() {}

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/nag.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, n, t) {
  "use strict";e.fn.nag = function (n) {
    var i,
        a = e(this),
        r = a.selector || "",
        s = new Date().getTime(),
        c = [],
        l = arguments[0],
        u = "string" == typeof l,
        g = [].slice.call(arguments, 1);return (a.each(function () {
      {
        var a,
            d = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.nag.settings, n) : e.extend({}, e.fn.nag.settings),
            m = (d.className, d.selector),
            f = d.error,
            p = d.namespace,
            h = "." + p,
            b = p + "-module",
            v = e(this),
            y = v.find(m.close),
            k = e(d.context ? d.context : "body"),
            w = this,
            x = v.data(b);o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
          setTimeout(e, 0);
        };
      }a = { initialize: function initialize() {
          a.verbose("Initializing element"), v.data(b, a), y.on("click" + h, a.dismiss), d.detachable && v.parent()[0] !== k[0] && v.detach().prependTo(k), d.displayTime > 0 && setTimeout(a.hide, d.displayTime), a.show();
        }, destroy: function destroy() {
          a.verbose("Destroying instance"), v.removeData(b).off(h);
        }, show: function show() {
          a.should.show() && !v.is(":visible") && (a.debug("Showing nag", d.animation.show), "fade" == d.animation.show ? v.fadeIn(d.duration, d.easing) : v.slideDown(d.duration, d.easing));
        }, hide: function hide() {
          a.debug("Showing nag", d.animation.hide), "fade" == d.animation.show ? v.fadeIn(d.duration, d.easing) : v.slideUp(d.duration, d.easing);
        }, onHide: function onHide() {
          a.debug("Removing nag", d.animation.hide), v.remove(), d.onHide && d.onHide();
        }, dismiss: function dismiss(e) {
          d.storageMethod && a.storage.set(d.key, d.value), a.hide(), e.stopImmediatePropagation(), e.preventDefault();
        }, should: { show: function show() {
            return d.persist ? (a.debug("Persistent nag is set, can show nag"), !0) : a.storage.get(d.key) != d.value.toString() ? (a.debug("Stored value is not set, can show nag", a.storage.get(d.key)), !0) : (a.debug("Stored value is set, cannot show nag", a.storage.get(d.key)), !1);
          } }, get: { storageOptions: function storageOptions() {
            var e = {};return (d.expires && (e.expires = d.expires), d.domain && (e.domain = d.domain), d.path && (e.path = d.path), e);
          } }, clear: function clear() {
          a.storage.remove(d.key);
        }, storage: { set: function set(n, i) {
            var r = a.get.storageOptions();if ("localstorage" == d.storageMethod && o.localStorage !== t) o.localStorage.setItem(n, i), a.debug("Value stored using local storage", n, i);else {
              if (e.cookie === t) return void a.error(f.noCookieStorage);e.cookie(n, i, r), a.debug("Value stored using cookie", n, i, r);
            }
          }, get: function get(n, i) {
            var r;return ("localstorage" == d.storageMethod && o.localStorage !== t ? r = o.localStorage.getItem(n) : e.cookie !== t ? r = e.cookie(n) : a.error(f.noCookieStorage), ("undefined" == r || "null" == r || r === t || null === r) && (r = t), r);
          }, remove: function remove(n) {
            var i = a.get.storageOptions();"local" == d.storageMethod && o.store !== t ? o.localStorage.removeItem(n) : e.cookie !== t ? e.removeCookie(n, i) : a.error(f.noStorage);
          } }, setting: function setting(o, n) {
          if ((a.debug("Changing setting", o, n), e.isPlainObject(o))) e.extend(!0, d, o);else {
            if (n === t) return d[o];d[o] = n;
          }
        }, internal: function internal(o, n) {
          if (e.isPlainObject(o)) e.extend(!0, a, o);else {
            if (n === t) return a[o];a[o] = n;
          }
        }, debug: function debug() {
          d.debug && (d.performance ? a.performance.log(arguments) : (a.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), a.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          d.verbose && d.debug && (d.performance ? a.performance.log(arguments) : (a.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), a.verbose.apply(console, arguments)));
        }, error: function error() {
          a.error = Function.prototype.bind.call(console.error, console, d.name + ":"), a.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, n, t;d.performance && (o = new Date().getTime(), t = s || o, n = o - t, s = o, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: w, "Execution Time": n })), clearTimeout(a.performance.timer), a.performance.timer = setTimeout(a.performance.display, 100);
          }, display: function display() {
            var o = d.name + ":",
                n = 0;s = !1, clearTimeout(a.performance.timer), e.each(c, function (e, o) {
              n += o["Execution Time"];
            }), o += " " + n + "ms", r && (o += " '" + r + "'"), (console.group !== t || console.table !== t) && c.length > 0 && (console.groupCollapsed(o), console.table ? console.table(c) : e.each(c, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(o, n, r) {
          var s,
              c,
              l,
              u = x;return (n = n || g, r = w || r, "string" == typeof o && u !== t && (o = o.split(/[\. ]/), s = o.length - 1, e.each(o, function (n, i) {
            var r = n != s ? i + o[n + 1].charAt(0).toUpperCase() + o[n + 1].slice(1) : o;if (e.isPlainObject(u[r]) && n != s) u = u[r];else {
              if (u[r] !== t) return (c = u[r], !1);if (!e.isPlainObject(u[i]) || n == s) return u[i] !== t ? (c = u[i], !1) : (a.error(f.method, o), !1);u = u[i];
            }
          })), e.isFunction(c) ? l = c.apply(r, n) : c !== t && (l = c), e.isArray(i) ? i.push(l) : i !== t ? i = [i, l] : l !== t && (i = l), c);
        } }, u ? (x === t && a.initialize(), a.invoke(l)) : (x !== t && x.invoke("destroy"), a.initialize());
    }), i !== t ? i : this);
  }, e.fn.nag.settings = { name: "Nag", debug: !1, verbose: !0, performance: !0, namespace: "Nag", persist: !1, displayTime: 0, animation: { show: "slide", hide: "slide" }, context: !1, detachable: !1, expires: 30, domain: !1, path: "/", storageMethod: "cookie", key: "nag", value: "dismiss", error: { noStorage: "Neither $.cookie or store is defined. A storage solution is required for storing state", method: "The method you called is not defined." }, className: { bottom: "bottom", fixed: "fixed" }, selector: { close: ".close.icon" }, speed: 500, easing: "easeOutQuad", onHide: function onHide() {} };
})(jQuery, window, document);
});

require.register("web/static/css/components/popup", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.popup = function (parameters) {
    var $allModules = $(this),
        $document = $(document),
        moduleSelector = $allModules.selector || '',
        hasTouch = ('ontouchstart' in document.documentElement),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.popup.settings, parameters) : $.extend({}, $.fn.popup.settings),
          selector = settings.selector,
          className = settings.className,
          error = settings.error,
          metadata = settings.metadata,
          namespace = settings.namespace,
          eventNamespace = '.' + settings.namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $target = settings.target ? $(settings.target) : $module,
          $window = $(window),
          $body = $('body'),
          $popup,
          $offsetParent,
          searchDepth = 0,
          triedPositions = false,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          module;

      module = {

        // binds events
        initialize: function initialize() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if (!module.exists() && settings.preserve) {
            module.create();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        refresh: function refresh() {
          if (settings.popup) {
            $popup = $(settings.popup).eq(0);
          } else {
            if (settings.inline) {
              $popup = $target.next(selector.popup).eq(0);
            }
          }
          if (settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if (settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');
              $popup.detach().appendTo($offsetParent);
            }
          } else {
            $offsetParent = settings.inline ? module.get.offsetParent($target) : module.has.popup() ? module.get.offsetParent($popup) : $body;
          }
          if ($offsetParent.is('html')) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
          }
        },

        reposition: function reposition() {
          module.refresh();
          module.set.position();
        },

        destroy: function destroy() {
          module.debug('Destroying previous module');
          // remove element only if was created dynamically
          if ($popup && !settings.preserve) {
            module.removePopup();
          }
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          $window.off(elementNamespace);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        event: {
          start: function start(event) {
            var delay = $.isPlainObject(settings.delay) ? settings.delay.show : settings.delay;
            clearTimeout(module.hideTimer);
            module.showTimer = setTimeout(function () {
              if (module.is.hidden() && !(module.is.active() && module.is.dropdown())) {
                module.show();
              }
            }, delay);
          },
          end: function end() {
            var delay = $.isPlainObject(settings.delay) ? settings.delay.hide : settings.delay;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(function () {
              if (module.is.visible()) {
                module.hide();
              }
            }, delay);
          },
          resize: function resize() {
            if (module.is.visible()) {
              module.set.position();
            }
          }
        },

        // generates popup html from metadata
        create: function create() {
          var html = $module.data(metadata.html) || settings.html,
              variation = $module.data(metadata.variation) || settings.variation,
              title = $module.data(metadata.title) || settings.title,
              content = $module.data(metadata.content) || $module.attr('title') || settings.content;
          if (html || content || title) {
            module.debug('Creating pop-up html');
            if (!html) {
              html = settings.templates.popup({
                title: title,
                content: content
              });
            }
            $popup = $('<div/>').addClass(className.popup).addClass(variation).data(metadata.activator, $module).html(html);
            if (variation) {
              $popup.addClass(variation);
            }
            if (settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup.insertAfter($module);
            } else {
              module.verbose('Appending popup element to body', $popup);
              $popup.appendTo($context);
            }
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
            settings.onCreate.call($popup, element);
          } else if ($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popup = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
          } else if (settings.popup) {
            settings.popup.data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
          } else {
            module.debug('No content specified skipping display', element);
          }
        },

        createID: function createID() {
          _id = (Math.random().toString(16) + '000000000').substr(2, 8);
          elementNamespace = '.' + _id;
          module.verbose('Creating unique id for element', _id);
        },

        // determines popup state
        toggle: function toggle() {
          module.debug('Toggling pop-up');
          if (module.is.hidden()) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
          } else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
          }
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.debug('Showing pop-up', settings.transition);
          if (!module.exists()) {
            module.create();
          } else if (!settings.preserve && !settings.popup) {
            module.refresh();
          }
          if ($popup && module.set.position()) {
            module.save.conditions();
            if (settings.exclusive) {
              module.hideAll();
            }
            module.animate.show(callback);
          }
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.remove.visible();
          module.unbind.close();
          if (module.is.visible()) {
            module.restore.conditions();
            module.animate.hide(callback);
          }
        },

        hideAll: function hideAll() {
          $(selector.popup).filter('.' + className.visible).each(function () {
            $(this).data(metadata.activator).popup('hide');
          });
        },

        hideGracefully: function hideGracefully(event) {
          // don't close on clicks inside popup
          if (event && $(event.target).closest(selector.popup).length === 0) {
            module.debug('Click occurred outside popup hiding popup');
            module.hide();
          } else {
            module.debug('Click was inside popup, keeping popup open');
          }
        },

        exists: function exists() {
          if (!$popup) {
            return false;
          }
          if (settings.inline || settings.popup) {
            return module.has.popup();
          } else {
            return $popup.closest($context).length >= 1 ? true : false;
          }
        },

        removePopup: function removePopup() {
          module.debug('Removing popup', $popup);
          if (module.has.popup() && !settings.popup) {
            $popup.remove();
            $popup = undefined;
          }
          settings.onRemove.call($popup, element);
        },

        save: {
          conditions: function conditions() {
            module.cache = {
              title: $module.attr('title')
            };
            if (module.cache.title) {
              $module.removeAttr('title');
            }
            module.verbose('Saving original attributes', module.cache.title);
          }
        },
        restore: {
          conditions: function conditions() {
            if (module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
            }
            return true;
          }
        },
        animate: {
          show: function show(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup.transition({
                animation: settings.transition + ' in',
                queue: false,
                debug: settings.debug,
                verbose: settings.verbose,
                duration: settings.duration,
                onComplete: function onComplete() {
                  module.bind.close();
                  callback.call($popup, element);
                  settings.onVisible.call($popup, element);
                }
              });
            } else {
              module.set.visible();
              $popup.stop().fadeIn(settings.duration, settings.easing, function () {
                module.bind.close();
                callback.call($popup, element);
                settings.onVisible.call($popup, element);
              });
            }
            settings.onShow.call($popup, element);
          },
          hide: function hide(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            module.debug('Hiding pop-up');
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup.transition({
                animation: settings.transition + ' out',
                queue: false,
                duration: settings.duration,
                debug: settings.debug,
                verbose: settings.verbose,
                onComplete: function onComplete() {
                  module.reset();
                  callback.call($popup, element);
                  settings.onHidden.call($popup, element);
                }
              });
            } else {
              $popup.stop().fadeOut(settings.duration, settings.easing, function () {
                module.reset();
                callback.call($popup, element);
                settings.onHidden.call($popup, element);
              });
            }
            settings.onHide.call($popup, element);
          }
        },

        get: {
          id: function id() {
            return _id;
          },
          startEvent: function startEvent() {
            if (settings.on == 'hover') {
              return hasTouch ? 'touchstart mouseenter' : 'mouseenter';
            } else if (settings.on == 'focus') {
              return 'focus';
            }
            return false;
          },
          scrollEvent: function scrollEvent() {
            return hasTouch ? 'touchmove scroll' : 'scroll';
          },
          endEvent: function endEvent() {
            if (settings.on == 'hover') {
              return 'mouseleave';
            } else if (settings.on == 'focus') {
              return 'blur';
            }
            return false;
          },
          offsetParent: function offsetParent($target) {
            var element = $target !== undefined ? $target[0] : $module[0],
                parentNode = element.parentNode,
                $node = $(parentNode);
            if (parentNode) {
              var is2D = $node.css('transform') === 'none',
                  isStatic = $node.css('position') === 'static',
                  isHTML = $node.is('html');
              while (parentNode && !isHTML && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node = $(parentNode);
                is2D = $node.css('transform') === 'none';
                isStatic = $node.css('position') === 'static';
                isHTML = $node.is('html');
              }
            }
            return $node && $node.length > 0 ? $node : $();
          },
          offstagePosition: function offstagePosition(position) {
            var boundary = {
              top: $(window).scrollTop(),
              bottom: $(window).scrollTop() + $(window).height(),
              left: 0,
              right: $(window).width()
            },
                popup = {
              width: $popup.width(),
              height: $popup.height(),
              offset: $popup.offset()
            },
                offstage = {},
                offstagePositions = [];
            position = position || false;
            if (popup.offset && position) {
              module.verbose('Checking if outside viewable area', popup.offset);
              offstage = {
                top: popup.offset.top < boundary.top,
                bottom: popup.offset.top + popup.height > boundary.bottom,
                right: popup.offset.left + popup.width > boundary.right,
                left: popup.offset.left < boundary.left
              };
            }
            // return only boundaries that have been surpassed
            $.each(offstage, function (direction, isOffstage) {
              if (isOffstage) {
                offstagePositions.push(direction);
              }
            });
            return offstagePositions.length > 0 ? offstagePositions.join(' ') : false;
          },
          positions: function positions() {
            return {
              'top left': false,
              'top center': false,
              'top right': false,
              'bottom left': false,
              'bottom center': false,
              'bottom right': false,
              'left center': false,
              'right center': false
            };
          },
          nextPosition: function nextPosition(position) {
            var positions = position.split(' '),
                verticalPosition = positions[0],
                horizontalPosition = positions[1],
                opposite = {
              top: 'bottom',
              bottom: 'top',
              left: 'right',
              right: 'left'
            },
                adjacent = {
              left: 'center',
              center: 'right',
              right: 'left'
            },
                backup = {
              'top left': 'top center',
              'top center': 'top right',
              'top right': 'right center',
              'right center': 'bottom right',
              'bottom right': 'bottom center',
              'bottom center': 'bottom left',
              'bottom left': 'left center',
              'left center': 'top left'
            },
                adjacentsAvailable = verticalPosition == 'top' || verticalPosition == 'bottom',
                oppositeTried = false,
                adjacentTried = false,
                nextPosition = false;
            if (!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
            }

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if (settings.prefer === 'opposite') {
              nextPosition = [opposite[verticalPosition], horizontalPosition];
              nextPosition = nextPosition.join(' ');
              oppositeTried = triedPositions[nextPosition] === true;
              module.debug('Trying opposite strategy', nextPosition);
            }
            if (settings.prefer === 'adjacent' && adjacentsAvailable) {
              nextPosition = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition = nextPosition.join(' ');
              adjacentTried = triedPositions[nextPosition] === true;
              module.debug('Trying adjacent strategy', nextPosition);
            }
            if (adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
            }
            return nextPosition;
          }
        },

        set: {
          position: function position(_position, arrowOffset) {
            var windowWidth = $(window).width(),
                windowHeight = $(window).height(),
                targetWidth = $target.outerWidth(),
                targetHeight = $target.outerHeight(),
                popupWidth = $popup.outerWidth(),
                popupHeight = $popup.outerHeight(),
                parentWidth = $offsetParent.outerWidth(),
                parentHeight = $offsetParent.outerHeight(),
                distanceAway = settings.distanceAway,
                targetElement = $target[0],
                marginTop = settings.inline ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10) : 0,
                marginLeft = settings.inline ? parseInt(window.getComputedStyle(targetElement).getPropertyValue(module.is.rtl() ? 'margin-right' : 'margin-left'), 10) : 0,
                target = settings.inline || settings.popup ? $target.position() : $target.offset(),
                computedPosition,
                positioning,
                offstagePosition;
            _position = _position || $module.data(metadata.position) || settings.position;
            arrowOffset = arrowOffset || $module.data(metadata.offset) || settings.offset;

            if (searchDepth == settings.maxSearchDepth && settings.lastResort) {
              module.debug('Using last resort position to display', settings.lastResort);
              _position = settings.lastResort;
            }

            if (settings.inline) {
              module.debug('Adding targets margin to calculation');
              if (_position == 'left center' || _position == 'right center') {
                arrowOffset += marginTop;
                distanceAway += -marginLeft;
              } else if (_position == 'top left' || _position == 'top center' || _position == 'top right') {
                arrowOffset += marginLeft;
                distanceAway -= marginTop;
              } else {
                arrowOffset += marginLeft;
                distanceAway += marginTop;
              }
            }
            module.debug('Calculating popup positioning', _position);

            computedPosition = _position;
            if (module.is.rtl()) {
              computedPosition = computedPosition.replace(/left|right/g, function (match) {
                return match == 'left' ? 'right' : 'left';
              });
              module.debug('RTL: Popup positioning updated', computedPosition);
            }
            switch (computedPosition) {
              case 'top left':
                positioning = {
                  top: 'auto',
                  bottom: parentHeight - target.top + distanceAway,
                  left: target.left + arrowOffset,
                  right: 'auto'
                };
                break;
              case 'top center':
                positioning = {
                  bottom: parentHeight - target.top + distanceAway,
                  left: target.left + targetWidth / 2 - popupWidth / 2 + arrowOffset,
                  top: 'auto',
                  right: 'auto'
                };
                break;
              case 'top right':
                positioning = {
                  bottom: parentHeight - target.top + distanceAway,
                  right: parentWidth - target.left - targetWidth - arrowOffset,
                  top: 'auto',
                  left: 'auto'
                };
                break;
              case 'left center':
                positioning = {
                  top: target.top + targetHeight / 2 - popupHeight / 2 + arrowOffset,
                  right: parentWidth - target.left + distanceAway,
                  left: 'auto',
                  bottom: 'auto'
                };
                break;
              case 'right center':
                positioning = {
                  top: target.top + targetHeight / 2 - popupHeight / 2 + arrowOffset,
                  left: target.left + targetWidth + distanceAway,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom left':
                positioning = {
                  top: target.top + targetHeight + distanceAway,
                  left: target.left + arrowOffset,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom center':
                positioning = {
                  top: target.top + targetHeight + distanceAway,
                  left: target.left + targetWidth / 2 - popupWidth / 2 + arrowOffset,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom right':
                positioning = {
                  top: target.top + targetHeight + distanceAway,
                  right: parentWidth - target.left - targetWidth - arrowOffset,
                  left: 'auto',
                  bottom: 'auto'
                };
                break;
            }
            if (positioning === undefined) {
              module.error(error.invalidPosition, _position);
            }

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup.css(positioning).removeClass(className.position).addClass(_position).addClass(className.loading);
            // check if is offstage
            offstagePosition = module.get.offstagePosition(_position);

            // recursively find new positioning
            if (offstagePosition) {
              module.debug('Popup cant fit into viewport', offstagePosition);
              if (searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                _position = module.get.nextPosition(_position);
                module.debug('Trying new position', _position);
                return $popup ? module.set.position(_position) : false;
              } else if (!settings.lastResort) {
                module.debug('Popup could not find a position in view', $popup);
                // module.error(error.cannotPlace, element);
                module.remove.attempts();
                module.remove.loading();
                module.reset();
                return false;
              }
            }

            module.debug('Position is on stage', _position);
            module.remove.attempts();
            module.set.fluidWidth();
            module.remove.loading();
            return true;
          },

          fluidWidth: function fluidWidth() {
            if (settings.setFluidWidth && $popup.hasClass(className.fluid)) {
              $popup.css('width', $offsetParent.width());
            }
          },

          visible: function visible() {
            $module.addClass(className.visible);
          }
        },

        remove: {
          loading: function loading() {
            $popup.removeClass(className.loading);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          attempts: function attempts() {
            module.verbose('Resetting all searched positions');
            searchDepth = 0;
            triedPositions = false;
          }
        },

        bind: {
          events: function events() {
            module.debug('Binding popup events to module');
            if (settings.on == 'click') {
              $module.on('click' + eventNamespace, module.toggle);
            } else if (module.get.startEvent()) {
              $module.on(module.get.startEvent() + eventNamespace, module.event.start).on(module.get.endEvent() + eventNamespace, module.event.end);
            }
            if (settings.target) {
              module.debug('Target set to element', $target);
            }
            $window.on('resize' + elementNamespace, module.event.resize);
          },
          popup: function popup() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if ($popup && module.has.popup()) {
              $popup.on('mouseenter' + eventNamespace, module.event.start).on('mouseleave' + eventNamespace, module.event.end);
            }
          },
          close: function close() {
            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document.one(module.get.scrollEvent() + elementNamespace, module.hideGracefully);
              $context.one(module.get.scrollEvent() + elementNamespace, module.hideGracefully);
            }
            if (settings.on == 'click' && settings.closable) {
              module.verbose('Binding popup close event to document');
              $document.on('click' + elementNamespace, function (event) {
                module.verbose('Pop-up clickaway intent detected');
                module.hideGracefully.call(element, event);
              });
            }
          }
        },

        unbind: {
          close: function close() {
            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document.off('scroll' + elementNamespace, module.hide);
              $context.off('scroll' + elementNamespace, module.hide);
            }
            if (settings.on == 'click' && settings.closable) {
              module.verbose('Removing close event from document');
              $document.off('click' + elementNamespace);
            }
          }
        },

        has: {
          popup: function popup() {
            return $popup && $popup.length > 0;
          }
        },

        is: {
          active: function active() {
            return $module.hasClass(className.active);
          },
          animating: function animating() {
            return $popup && $popup.is(':animated') || $popup.hasClass(className.animating);
          },
          visible: function visible() {
            return $popup && $popup.is(':visible');
          },
          dropdown: function dropdown() {
            return $module.hasClass(className.dropdown);
          },
          hidden: function hidden() {
            return !module.is.visible();
          },
          rtl: function rtl() {
            return $module.css('direction') == 'rtl';
          }
        },

        reset: function reset() {
          module.remove.visible();
          if (settings.preserve) {
            if ($.fn.transition !== undefined) {
              $popup.transition('remove transition');
            }
          } else {
            module.removePopup();
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.popup.settings = {

    name: 'Popup',

    debug: false,
    verbose: true,
    performance: true,
    namespace: 'popup',

    onCreate: function onCreate() {},
    onRemove: function onRemove() {},

    onShow: function onShow() {},
    onVisible: function onVisible() {},
    onHide: function onHide() {},
    onHidden: function onHidden() {},

    variation: '',
    content: false,
    html: false,
    title: false,

    on: 'hover',
    closable: true,
    hideOnScroll: 'auto',
    exclusive: true,

    context: 'body',

    position: 'top left',
    prefer: 'opposite',
    lastResort: false,

    delay: {
      show: 30,
      hide: 0
    },

    setFluidWidth: true,
    movePopup: true,

    target: false,
    popup: false,
    inline: false,
    preserve: false,
    hoverable: false,

    duration: 200,
    easing: 'easeOutQuint',
    transition: 'scale',

    distanceAway: 0,
    offset: 0,
    maxSearchDepth: 20,

    error: {
      invalidPosition: 'The position you specified is not a valid position',
      cannotPlace: 'No visible position could be found for the popup',
      method: 'The method you called is not defined.'
    },

    metadata: {
      activator: 'activator',
      content: 'content',
      html: 'html',
      offset: 'offset',
      position: 'position',
      title: 'title',
      variation: 'variation'
    },

    className: {
      active: 'active',
      animating: 'animating',
      dropdown: 'dropdown',
      fluid: 'fluid',
      loading: 'loading',
      popup: 'ui popup',
      position: 'top left center bottom right',
      visible: 'visible'
    },

    selector: {
      popup: '.ui.popup'
    },

    templates: {
      escape: function escape(string) {
        var badChars = /[&<>"'`]/g,
            shouldEscape = /[&<>"'`]/,
            escape = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        },
            escapedChar = function escapedChar(chr) {
          return escape[chr];
        };
        if (shouldEscape.test(string)) {
          return string.replace(badChars, escapedChar);
        }
        return string;
      },
      popup: function popup(text) {
        var html = '',
            escape = $.fn.popup.settings.templates.escape;
        if (typeof text !== undefined) {
          if (typeof text.title !== undefined && text.title) {
            text.title = escape(text.title);
            html += '<div class="header">' + text.title + '</div>';
          }
          if (typeof text.content !== undefined && text.content) {
            text.content = escape(text.content);
            html += '<div class="content">' + text.content + '</div>';
          }
        }
        return html;
      }
    }

  };

  // Adds easing
  $.extend($.easing, {
    easeOutQuad: function easeOutQuad(x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    }
  });
})(jQuery, window, document);
});

require.register("web/static/css/components/popup.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, o, n) {
  "use strict";e.fn.popup = function (i) {
    var r,
        s = e(this),
        a = e(o),
        p = s.selector || "",
        l = ("ontouchstart" in o.documentElement),
        u = new Date().getTime(),
        c = [],
        d = arguments[0],
        f = "string" == typeof d,
        g = [].slice.call(arguments, 1);return (s.each(function () {
      var o,
          s,
          h,
          m,
          b,
          v = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.popup.settings, i) : e.extend({}, e.fn.popup.settings),
          y = v.selector,
          w = v.className,
          P = v.error,
          T = v.metadata,
          C = v.namespace,
          x = "." + v.namespace,
          k = "module-" + C,
          S = e(this),
          O = e(v.context),
          E = v.target ? e(v.target) : S,
          j = e(t),
          A = e("body"),
          R = 0,
          F = !1,
          D = this,
          H = S.data(k);b = { initialize: function initialize() {
          b.debug("Initializing", S), b.createID(), b.bind.events(), !b.exists() && v.preserve && b.create(), b.instantiate();
        }, instantiate: function instantiate() {
          b.verbose("Storing instance", b), H = b, S.data(k, H);
        }, refresh: function refresh() {
          v.popup ? o = e(v.popup).eq(0) : v.inline && (o = E.next(y.popup).eq(0)), v.popup ? (o.addClass(w.loading), s = b.get.offsetParent(), o.removeClass(w.loading), v.movePopup && b.has.popup() && b.get.offsetParent(o)[0] !== s[0] && (b.debug("Moving popup to the same offset parent as activating element"), o.detach().appendTo(s))) : s = v.inline ? b.get.offsetParent(E) : b.has.popup() ? b.get.offsetParent(o) : A, s.is("html") && (b.debug("Setting page as offset parent"), s = A);
        }, reposition: function reposition() {
          b.refresh(), b.set.position();
        }, destroy: function destroy() {
          b.debug("Destroying previous module"), o && !v.preserve && b.removePopup(), clearTimeout(b.hideTimer), clearTimeout(b.showTimer), j.off(h), S.off(x).removeData(k);
        }, event: { start: function start(t) {
            var o = e.isPlainObject(v.delay) ? v.delay.show : v.delay;clearTimeout(b.hideTimer), b.showTimer = setTimeout(function () {
              !b.is.hidden() || b.is.active() && b.is.dropdown() || b.show();
            }, o);
          }, end: function end() {
            var t = e.isPlainObject(v.delay) ? v.delay.hide : v.delay;clearTimeout(b.showTimer), b.hideTimer = setTimeout(function () {
              b.is.visible() && b.hide();
            }, t);
          }, resize: function resize() {
            b.is.visible() && b.set.position();
          } }, create: function create() {
          var t = S.data(T.html) || v.html,
              n = S.data(T.variation) || v.variation,
              i = S.data(T.title) || v.title,
              r = S.data(T.content) || S.attr("title") || v.content;t || r || i ? (b.debug("Creating pop-up html"), t || (t = v.templates.popup({ title: i, content: r })), o = e("<div/>").addClass(w.popup).addClass(n).data(T.activator, S).html(t), n && o.addClass(n), v.inline ? (b.verbose("Inserting popup element inline", o), o.insertAfter(S)) : (b.verbose("Appending popup element to body", o), o.appendTo(O)), b.refresh(), v.hoverable && b.bind.popup(), v.onCreate.call(o, D)) : 0 !== E.next(y.popup).length ? (b.verbose("Pre-existing popup found"), v.inline = !0, v.popup = E.next(y.popup).data(T.activator, S), b.refresh(), v.hoverable && b.bind.popup()) : v.popup ? (v.popup.data(T.activator, S), b.verbose("Used popup specified in settings"), b.refresh(), v.hoverable && b.bind.popup()) : b.debug("No content specified skipping display", D);
        }, createID: function createID() {
          m = (Math.random().toString(16) + "000000000").substr(2, 8), h = "." + m, b.verbose("Creating unique id for element", m);
        }, toggle: function toggle() {
          b.debug("Toggling pop-up"), b.is.hidden() ? (b.debug("Popup is hidden, showing pop-up"), b.unbind.close(), b.show()) : (b.debug("Popup is visible, hiding pop-up"), b.hide());
        }, show: function show(t) {
          t = e.isFunction(t) ? t : function () {}, b.debug("Showing pop-up", v.transition), b.exists() ? v.preserve || v.popup || b.refresh() : b.create(), o && b.set.position() && (b.save.conditions(), v.exclusive && b.hideAll(), b.animate.show(t));
        }, hide: function hide(t) {
          t = e.isFunction(t) ? t : function () {}, b.remove.visible(), b.unbind.close(), b.is.visible() && (b.restore.conditions(), b.animate.hide(t));
        }, hideAll: function hideAll() {
          e(y.popup).filter("." + w.visible).each(function () {
            e(this).data(T.activator).popup("hide");
          });
        }, hideGracefully: function hideGracefully(t) {
          t && 0 === e(t.target).closest(y.popup).length ? (b.debug("Click occurred outside popup hiding popup"), b.hide()) : b.debug("Click was inside popup, keeping popup open");
        }, exists: function exists() {
          return o ? v.inline || v.popup ? b.has.popup() : o.closest(O).length >= 1 ? !0 : !1 : !1;
        }, removePopup: function removePopup() {
          b.debug("Removing popup", o), b.has.popup() && !v.popup && (o.remove(), o = n), v.onRemove.call(o, D);
        }, save: { conditions: function conditions() {
            b.cache = { title: S.attr("title") }, b.cache.title && S.removeAttr("title"), b.verbose("Saving original attributes", b.cache.title);
          } }, restore: { conditions: function conditions() {
            return (b.cache && b.cache.title && (S.attr("title", b.cache.title), b.verbose("Restoring original attributes", b.cache.title)), !0);
          } }, animate: { show: function show(t) {
            t = e.isFunction(t) ? t : function () {}, v.transition && e.fn.transition !== n && S.transition("is supported") ? (b.set.visible(), o.transition({ animation: v.transition + " in", queue: !1, debug: v.debug, verbose: v.verbose, duration: v.duration, onComplete: function onComplete() {
                b.bind.close(), t.call(o, D), v.onVisible.call(o, D);
              } })) : (b.set.visible(), o.stop().fadeIn(v.duration, v.easing, function () {
              b.bind.close(), t.call(o, D), v.onVisible.call(o, D);
            })), v.onShow.call(o, D);
          }, hide: function hide(t) {
            t = e.isFunction(t) ? t : function () {}, b.debug("Hiding pop-up"), v.transition && e.fn.transition !== n && S.transition("is supported") ? o.transition({ animation: v.transition + " out", queue: !1, duration: v.duration, debug: v.debug, verbose: v.verbose, onComplete: function onComplete() {
                b.reset(), t.call(o, D), v.onHidden.call(o, D);
              } }) : o.stop().fadeOut(v.duration, v.easing, function () {
              b.reset(), t.call(o, D), v.onHidden.call(o, D);
            }), v.onHide.call(o, D);
          } }, get: { id: function id() {
            return m;
          }, startEvent: function startEvent() {
            return "hover" == v.on ? l ? "touchstart mouseenter" : "mouseenter" : "focus" == v.on ? "focus" : !1;
          }, scrollEvent: function scrollEvent() {
            return l ? "touchmove scroll" : "scroll";
          }, endEvent: function endEvent() {
            return "hover" == v.on ? "mouseleave" : "focus" == v.on ? "blur" : !1;
          }, offsetParent: function offsetParent(t) {
            var o = t !== n ? t[0] : S[0],
                i = o.parentNode,
                r = e(i);if (i) for (var s = "none" === r.css("transform"), a = "static" === r.css("position"), p = r.is("html"); i && !p && a && s;) i = i.parentNode, r = e(i), s = "none" === r.css("transform"), a = "static" === r.css("position"), p = r.is("html");return r && r.length > 0 ? r : e();
          }, offstagePosition: function offstagePosition(n) {
            var i = { top: e(t).scrollTop(), bottom: e(t).scrollTop() + e(t).height(), left: 0, right: e(t).width() },
                r = { width: o.width(), height: o.height(), offset: o.offset() },
                s = {},
                a = [];return (n = n || !1, r.offset && n && (b.verbose("Checking if outside viewable area", r.offset), s = { top: r.offset.top < i.top, bottom: r.offset.top + r.height > i.bottom, right: r.offset.left + r.width > i.right, left: r.offset.left < i.left }), e.each(s, function (e, t) {
              t && a.push(e);
            }), a.length > 0 ? a.join(" ") : !1);
          }, positions: function positions() {
            return { "top left": !1, "top center": !1, "top right": !1, "bottom left": !1, "bottom center": !1, "bottom right": !1, "left center": !1, "right center": !1 };
          }, nextPosition: function nextPosition(e) {
            var t = e.split(" "),
                o = t[0],
                n = t[1],
                i = { top: "bottom", bottom: "top", left: "right", right: "left" },
                r = { left: "center", center: "right", right: "left" },
                s = { "top left": "top center", "top center": "top right", "top right": "right center", "right center": "bottom right", "bottom right": "bottom center", "bottom center": "bottom left", "bottom left": "left center", "left center": "top left" },
                a = "top" == o || "bottom" == o,
                p = !1,
                l = !1,
                u = !1;return (F || (b.verbose("All available positions available"), F = b.get.positions()), b.debug("Recording last position tried", e), F[e] = !0, "opposite" === v.prefer && (u = [i[o], n], u = u.join(" "), p = F[u] === !0, b.debug("Trying opposite strategy", u)), "adjacent" === v.prefer && a && (u = [o, r[n]], u = u.join(" "), l = F[u] === !0, b.debug("Trying adjacent strategy", u)), (l || p) && (b.debug("Using backup position", u), u = s[e]), u);
          } }, set: { position: function position(i, r) {
            var a,
                p,
                l,
                u = (e(t).width(), e(t).height(), E.outerWidth()),
                c = E.outerHeight(),
                d = o.outerWidth(),
                f = o.outerHeight(),
                g = s.outerWidth(),
                h = s.outerHeight(),
                m = v.distanceAway,
                y = E[0],
                C = v.inline ? parseInt(t.getComputedStyle(y).getPropertyValue("margin-top"), 10) : 0,
                x = v.inline ? parseInt(t.getComputedStyle(y).getPropertyValue(b.is.rtl() ? "margin-right" : "margin-left"), 10) : 0,
                k = v.inline || v.popup ? E.position() : E.offset();switch ((i = i || S.data(T.position) || v.position, r = r || S.data(T.offset) || v.offset, R == v.maxSearchDepth && v.lastResort && (b.debug("Using last resort position to display", v.lastResort), i = v.lastResort), v.inline && (b.debug("Adding targets margin to calculation"), "left center" == i || "right center" == i ? (r += C, m += -x) : "top left" == i || "top center" == i || "top right" == i ? (r += x, m -= C) : (r += x, m += C)), b.debug("Calculating popup positioning", i), a = i, b.is.rtl() && (a = a.replace(/left|right/g, function (e) {
              return "left" == e ? "right" : "left";
            }), b.debug("RTL: Popup positioning updated", a)), a)) {case "top left":
                p = { top: "auto", bottom: h - k.top + m, left: k.left + r, right: "auto" };break;case "top center":
                p = { bottom: h - k.top + m, left: k.left + u / 2 - d / 2 + r, top: "auto", right: "auto" };break;case "top right":
                p = { bottom: h - k.top + m, right: g - k.left - u - r, top: "auto", left: "auto" };break;case "left center":
                p = { top: k.top + c / 2 - f / 2 + r, right: g - k.left + m, left: "auto", bottom: "auto" };break;case "right center":
                p = { top: k.top + c / 2 - f / 2 + r, left: k.left + u + m, bottom: "auto", right: "auto" };break;case "bottom left":
                p = { top: k.top + c + m, left: k.left + r, bottom: "auto", right: "auto" };break;case "bottom center":
                p = { top: k.top + c + m, left: k.left + u / 2 - d / 2 + r, bottom: "auto", right: "auto" };break;case "bottom right":
                p = { top: k.top + c + m, right: g - k.left - u - r, left: "auto", bottom: "auto" };}if ((p === n && b.error(P.invalidPosition, i), b.debug("Calculated popup positioning values", p), o.css(p).removeClass(w.position).addClass(i).addClass(w.loading), l = b.get.offstagePosition(i))) {
              if ((b.debug("Popup cant fit into viewport", l), R < v.maxSearchDepth)) return (R++, i = b.get.nextPosition(i), b.debug("Trying new position", i), o ? b.set.position(i) : !1);if (!v.lastResort) return (b.debug("Popup could not find a position in view", o), b.remove.attempts(), b.remove.loading(), b.reset(), !1);
            }return (b.debug("Position is on stage", i), b.remove.attempts(), b.set.fluidWidth(), b.remove.loading(), !0);
          }, fluidWidth: function fluidWidth() {
            v.setFluidWidth && o.hasClass(w.fluid) && o.css("width", s.width());
          }, visible: function visible() {
            S.addClass(w.visible);
          } }, remove: { loading: function loading() {
            o.removeClass(w.loading);
          }, visible: function visible() {
            S.removeClass(w.visible);
          }, attempts: function attempts() {
            b.verbose("Resetting all searched positions"), R = 0, F = !1;
          } }, bind: { events: function events() {
            b.debug("Binding popup events to module"), "click" == v.on ? S.on("click" + x, b.toggle) : b.get.startEvent() && S.on(b.get.startEvent() + x, b.event.start).on(b.get.endEvent() + x, b.event.end), v.target && b.debug("Target set to element", E), j.on("resize" + h, b.event.resize);
          }, popup: function popup() {
            b.verbose("Allowing hover events on popup to prevent closing"), o && b.has.popup() && o.on("mouseenter" + x, b.event.start).on("mouseleave" + x, b.event.end);
          }, close: function close() {
            (v.hideOnScroll === !0 || "auto" == v.hideOnScroll && "click" != v.on) && (a.one(b.get.scrollEvent() + h, b.hideGracefully), O.one(b.get.scrollEvent() + h, b.hideGracefully)), "click" == v.on && v.closable && (b.verbose("Binding popup close event to document"), a.on("click" + h, function (e) {
              b.verbose("Pop-up clickaway intent detected"), b.hideGracefully.call(D, e);
            }));
          } }, unbind: { close: function close() {
            (v.hideOnScroll === !0 || "auto" == v.hideOnScroll && "click" != v.on) && (a.off("scroll" + h, b.hide), O.off("scroll" + h, b.hide)), "click" == v.on && v.closable && (b.verbose("Removing close event from document"), a.off("click" + h));
          } }, has: { popup: function popup() {
            return o && o.length > 0;
          } }, is: { active: function active() {
            return S.hasClass(w.active);
          }, animating: function animating() {
            return o && o.is(":animated") || o.hasClass(w.animating);
          }, visible: function visible() {
            return o && o.is(":visible");
          }, dropdown: function dropdown() {
            return S.hasClass(w.dropdown);
          }, hidden: function hidden() {
            return !b.is.visible();
          }, rtl: function rtl() {
            return "rtl" == S.css("direction");
          } }, reset: function reset() {
          b.remove.visible(), v.preserve ? e.fn.transition !== n && o.transition("remove transition") : b.removePopup();
        }, setting: function setting(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, v, t);else {
            if (o === n) return v[t];v[t] = o;
          }
        }, internal: function internal(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, b, t);else {
            if (o === n) return b[t];b[t] = o;
          }
        }, debug: function debug() {
          v.debug && (v.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, v.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          v.verbose && v.debug && (v.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, v.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, v.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, o, n;v.performance && (t = new Date().getTime(), n = u || t, o = t - n, u = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: D, "Execution Time": o })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 100);
          }, display: function display() {
            var t = v.name + ":",
                o = 0;u = !1, clearTimeout(b.performance.timer), e.each(c, function (e, t) {
              o += t["Execution Time"];
            }), t += " " + o + "ms", p && (t += " '" + p + "'"), (console.group !== n || console.table !== n) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, o, i) {
          var s,
              a,
              p,
              l = H;return (o = o || g, i = D || i, "string" == typeof t && l !== n && (t = t.split(/[\. ]/), s = t.length - 1, e.each(t, function (o, i) {
            var r = o != s ? i + t[o + 1].charAt(0).toUpperCase() + t[o + 1].slice(1) : t;if (e.isPlainObject(l[r]) && o != s) l = l[r];else {
              if (l[r] !== n) return (a = l[r], !1);if (!e.isPlainObject(l[i]) || o == s) return l[i] !== n ? (a = l[i], !1) : !1;l = l[i];
            }
          })), e.isFunction(a) ? p = a.apply(i, o) : a !== n && (p = a), e.isArray(r) ? r.push(p) : r !== n ? r = [r, p] : p !== n && (r = p), a);
        } }, f ? (H === n && b.initialize(), b.invoke(d)) : (H !== n && H.invoke("destroy"), b.initialize());
    }), r !== n ? r : this);
  }, e.fn.popup.settings = { name: "Popup", debug: !1, verbose: !0, performance: !0, namespace: "popup", onCreate: function onCreate() {}, onRemove: function onRemove() {}, onShow: function onShow() {}, onVisible: function onVisible() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, variation: "", content: !1, html: !1, title: !1, on: "hover", closable: !0, hideOnScroll: "auto", exclusive: !0, context: "body", position: "top left", prefer: "opposite", lastResort: !1, delay: { show: 30, hide: 0 }, setFluidWidth: !0, movePopup: !0, target: !1, popup: !1, inline: !1, preserve: !1, hoverable: !1, duration: 200, easing: "easeOutQuint", transition: "scale", distanceAway: 0, offset: 0, maxSearchDepth: 20, error: { invalidPosition: "The position you specified is not a valid position", cannotPlace: "No visible position could be found for the popup", method: "The method you called is not defined." }, metadata: { activator: "activator", content: "content", html: "html", offset: "offset", position: "position", title: "title", variation: "variation" }, className: { active: "active", animating: "animating", dropdown: "dropdown", fluid: "fluid", loading: "loading", popup: "ui popup", position: "top left center bottom right", visible: "visible" }, selector: { popup: ".ui.popup" }, templates: { escape: function escape(e) {
        var t = /[&<>"'`]/g,
            o = /[&<>"'`]/,
            n = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;", "`": "&#x60;" },
            i = function i(e) {
          return n[e];
        };return o.test(e) ? e.replace(t, i) : e;
      }, popup: function popup(t) {
        var o = "",
            i = e.fn.popup.settings.templates.escape;return (typeof t !== n && (typeof t.title !== n && t.title && (t.title = i(t.title), o += "<div class=\"header\">" + t.title + "</div>"), typeof t.content !== n && t.content && (t.content = i(t.content), o += "<div class=\"content\">" + t.content + "</div>")), o);
      } } }, e.extend(e.easing, { easeOutQuad: function easeOutQuad(e, t, o, n, i) {
      return -n * (t /= i) * (t - 2) + o;
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/progress", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.progress = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.progress.settings, parameters) : $.extend({}, $.fn.progress.settings),
          className = settings.className,
          _metadata = settings.metadata,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $bar = $(this).find(selector.bar),
          $progress = $(this).find(selector.progress),
          $label = $(this).find(selector.label),
          element = this,
          instance = $module.data(moduleNamespace),
          animating = false,
          transitionEnd,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing progress bar', settings);

          transitionEnd = module.get.transitionEnd();

          module.read.metadata();
          module.set.duration();
          module.set.initials();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },
        destroy: function destroy() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
        },

        reset: function reset() {
          module.set.percent(0);
        },

        complete: function complete() {
          if (module.percent === undefined || module.percent < 100) {
            module.set.percent(100);
          }
        },

        read: {
          metadata: function metadata() {
            if ($module.data(_metadata.percent)) {
              module.verbose('Current percent value set from metadata');
              module.percent = $module.data(_metadata.percent);
            }
            if ($module.data(_metadata.total)) {
              module.verbose('Total value set from metadata');
              module.total = $module.data(_metadata.total);
            }
            if ($module.data(_metadata.value)) {
              module.verbose('Current value set from metadata');
              module.value = $module.data(_metadata.value);
            }
          },
          currentValue: function currentValue() {
            return module.value !== undefined ? module.value : false;
          }
        },

        increment: function increment(incrementValue) {
          var total = module.total || false,
              edgeValue,
              startValue,
              newValue;
          if (total) {
            startValue = module.value || 0;
            incrementValue = incrementValue || 1;
            newValue = startValue + incrementValue;
            edgeValue = module.total;
            module.debug('Incrementing value by', incrementValue, startValue, edgeValue);
            if (newValue > edgeValue) {
              module.debug('Value cannot increment above total', edgeValue);
              newValue = edgeValue;
            }
            module.set.progress(newValue);
          } else {
            startValue = module.percent || 0;
            incrementValue = incrementValue || module.get.randomValue();
            newValue = startValue + incrementValue;
            edgeValue = 100;
            module.debug('Incrementing percentage by', incrementValue, startValue);
            if (newValue > edgeValue) {
              module.debug('Value cannot increment above 100 percent');
              newValue = edgeValue;
            }
            module.set.progress(newValue);
          }
        },
        decrement: function decrement(decrementValue) {
          var total = module.total || false,
              edgeValue = 0,
              startValue,
              newValue;
          if (total) {
            startValue = module.value || 0;
            decrementValue = decrementValue || 1;
            newValue = startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
          } else {
            startValue = module.percent || 0;
            decrementValue = decrementValue || module.get.randomValue();
            newValue = startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
          }

          if (newValue < edgeValue) {
            module.debug('Value cannot decrement below 0');
            newValue = 0;
          }
          module.set.progress(newValue);
        },

        get: {
          text: function text(templateText) {
            var value = module.value || 0,
                total = module.total || 0,
                percent = module.is.visible() && animating ? module.get.displayPercent() : module.percent || 0,
                left = module.total > 0 ? total - value : 100 - percent;
            templateText = templateText || '';
            templateText = templateText.replace('{value}', value).replace('{total}', total).replace('{left}', left).replace('{percent}', percent);
            module.debug('Adding variables to progress bar text', templateText);
            return templateText;
          },
          randomValue: function randomValue() {
            module.debug('Generating random increment percentage');
            return Math.floor(Math.random() * settings.random.max + settings.random.min);
          },

          transitionEnd: function transitionEnd() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          },

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function displayPercent() {
            var barWidth = $bar.width(),
                totalWidth = $module.width(),
                minDisplay = parseInt($bar.css('min-width'), 10),
                displayPercent = barWidth > minDisplay ? barWidth / totalWidth * 100 : module.percent;
            if (settings.precision === 0) {
              return Math.round(displayPercent);
            }
            return Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision);
          },

          percent: function percent() {
            return module.percent || 0;
          },
          value: function value() {
            return module.value || false;
          },
          total: function total() {
            return module.total || false;
          }
        },

        is: {
          success: function success() {
            return $module.hasClass(className.success);
          },
          warning: function warning() {
            return $module.hasClass(className.warning);
          },
          error: function error() {
            return $module.hasClass(className.error);
          },
          active: function active() {
            return $module.hasClass(className.active);
          },
          visible: function visible() {
            return $module.is(':visible');
          }
        },

        remove: {
          state: function state() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
          },
          active: function active() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
          },
          success: function success() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
          },
          warning: function warning() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
          },
          error: function error() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
          }
        },

        set: {
          barWidth: function barWidth(value) {
            if (value > 100) {
              module.error(error.tooHigh, value);
            } else if (value < 0) {
              module.error(error.tooLow, value);
            } else {
              $bar.css('width', value + '%');
              $module.attr('data-percent', parseInt(value, 10));
            }
          },
          duration: function duration(_duration) {
            _duration = _duration || settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            module.verbose('Setting progress bar transition duration', _duration);
            $bar.css({
              '-webkit-transition-duration': _duration,
              '-moz-transition-duration': _duration,
              '-ms-transition-duration': _duration,
              '-o-transition-duration': _duration,
              'transition-duration': _duration
            });
          },
          initials: function initials() {
            if (settings.total !== false) {
              module.verbose('Current total set in settings', settings.total);
              module.total = settings.total;
            }
            if (settings.value !== false) {
              module.verbose('Current value set in settings', settings.value);
              module.value = settings.value;
            }
            if (settings.percent !== false) {
              module.verbose('Current percent set in settings', settings.percent);
              module.percent = settings.percent;
            }
            if (module.percent !== undefined) {
              module.set.percent(module.percent);
            } else if (module.value !== undefined) {
              module.set.progress(module.value);
            }
          },
          percent: function percent(_percent) {
            _percent = typeof _percent == 'string' ? +_percent.replace('%', '') : _percent;
            if (_percent > 0 && _percent < 1) {
              module.verbose('Module percentage passed as decimal, converting');
              _percent = _percent * 100;
            }
            // round percentage
            if (settings.precision === 0) {
              _percent = Math.round(_percent);
            } else {
              _percent = Math.round(_percent * (10 * settings.precision)) / (10 * settings.precision);
            }
            module.percent = _percent;
            if (module.total) {
              module.value = Math.round(_percent / 100 * module.total * (10 * settings.precision)) / (10 * settings.precision);
            } else if (settings.limitValues) {
              module.value = module.value > 100 ? 100 : module.value < 0 ? 0 : module.value;
            }
            module.set.barWidth(_percent);
            if (module.is.visible()) {
              module.set.labelInterval();
            }
            module.set.labels();
            settings.onChange.call(element, _percent, module.value, module.total);
          },
          labelInterval: function labelInterval() {
            var animationCallback = function animationCallback() {
              module.verbose('Bar finished animating, removing continuous label updates');
              clearInterval(module.interval);
              animating = false;
              module.set.labels();
            };
            clearInterval(module.interval);
            $bar.one(transitionEnd + eventNamespace, animationCallback);
            module.timer = setTimeout(animationCallback, settings.duration + 100);
            animating = true;
            module.interval = setInterval(module.set.labels, settings.framerate);
          },
          labels: function labels() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
          },
          label: function label(text) {
            text = text || '';
            if (text) {
              text = module.get.text(text);
              module.debug('Setting label to text', text);
              $label.text(text);
            }
          },
          state: function state(percent) {
            percent = percent !== undefined ? percent : module.percent;
            if (percent === 100) {
              if (settings.autoSuccess && !(module.is.warning() || module.is.error())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
              } else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
              }
            } else if (percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
            } else {
              module.remove.active();
              module.set.label(settings.text.active);
            }
          },
          barLabel: function barLabel(text) {
            if (text !== undefined) {
              $progress.text(module.get.text(text));
            } else if (settings.label == 'ratio' && module.total) {
              module.debug('Adding ratio to bar label');
              $progress.text(module.get.text(settings.text.ratio));
            } else if (settings.label == 'percent') {
              module.debug('Adding percentage to bar label');
              $progress.text(module.get.text(settings.text.percent));
            }
          },
          active: function active(text) {
            text = text || settings.text.active;
            module.debug('Setting active state');
            if (settings.showActivity && !module.is.active()) {
              $module.addClass(className.active);
            }
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            if (text) {
              module.set.label(text);
            }
            settings.onActive.call(element, module.value, module.total);
          },
          success: function success(text) {
            text = text || settings.text.success;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            settings.onSuccess.call(element, module.total);
          },
          warning: function warning(text) {
            text = text || settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            settings.onWarning.call(element, module.value, module.total);
          },
          error: function error(text) {
            text = text || settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            settings.onError.call(element, module.value, module.total);
          },
          total: function total(totalValue) {
            module.total = totalValue;
          },
          progress: function progress(value) {
            var numericValue = typeof value === 'string' ? value.replace(/[^\d.]/g, '') !== '' ? +value.replace(/[^\d.]/g, '') : false : value,
                percentComplete;
            if (numericValue === false) {
              module.error(error.nonNumeric, value);
            }
            if (module.total) {
              module.value = numericValue;
              percentComplete = numericValue / module.total * 100;
              module.debug('Calculating percent complete from total', percentComplete);
              module.set.percent(percentComplete);
            } else {
              percentComplete = numericValue;
              module.debug('Setting value to exact percentage value', percentComplete);
              module.set.percent(percentComplete);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.progress.settings = {

    name: 'Progress',
    namespace: 'progress',

    debug: false,
    verbose: true,
    performance: true,

    random: {
      min: 2,
      max: 5
    },

    duration: 300,

    autoSuccess: true,
    showActivity: true,
    limitValues: true,

    label: 'percent',
    precision: 1,
    framerate: 1000 / 30, /// 30 fps

    percent: false,
    total: false,
    value: false,

    onChange: function onChange(percent, value, total) {},
    onSuccess: function onSuccess(total) {},
    onActive: function onActive(value, total) {},
    onError: function onError(value, total) {},
    onWarning: function onWarning(value, total) {},

    error: {
      method: 'The method you called is not defined.',
      nonNumeric: 'Progress value is non numeric',
      tooHigh: 'Value specified is above 100%',
      tooLow: 'Value specified is below 0%'
    },

    regExp: {
      variable: /\{\$*[A-z0-9]+\}/g
    },

    metadata: {
      percent: 'percent',
      total: 'total',
      value: 'value'
    },

    selector: {
      bar: '> .bar',
      label: '> .label',
      progress: '.bar > .progress'
    },

    text: {
      active: false,
      error: false,
      success: false,
      warning: false,
      percent: '{percent}%',
      ratio: '{value} of {total}'
    },

    className: {
      active: 'active',
      error: 'error',
      success: 'success',
      warning: 'warning'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/progress.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, r) {
  "use strict";e.fn.progress = function (t) {
    var a,
        o = e(this),
        i = o.selector || "",
        s = new Date().getTime(),
        c = [],
        l = arguments[0],
        u = "string" == typeof l,
        g = [].slice.call(arguments, 1);return (o.each(function () {
      var o,
          v,
          d = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.progress.settings, t) : e.extend({}, e.fn.progress.settings),
          p = d.className,
          m = d.metadata,
          b = d.namespace,
          f = d.selector,
          h = d.error,
          w = "." + b,
          x = "module-" + b,
          y = e(this),
          C = e(this).find(f.bar),
          T = e(this).find(f.progress),
          A = e(this).find(f.label),
          E = this,
          S = y.data(x),
          I = !1;v = { initialize: function initialize() {
          v.debug("Initializing progress bar", d), o = v.get.transitionEnd(), v.read.metadata(), v.set.duration(), v.set.initials(), v.instantiate();
        }, instantiate: function instantiate() {
          v.verbose("Storing instance of progress", v), S = v, y.data(x, v);
        }, destroy: function destroy() {
          v.verbose("Destroying previous progress for", y), clearInterval(S.interval), v.remove.state(), y.removeData(x), S = r;
        }, reset: function reset() {
          v.set.percent(0);
        }, complete: function complete() {
          (v.percent === r || v.percent < 100) && v.set.percent(100);
        }, read: { metadata: function metadata() {
            y.data(m.percent) && (v.verbose("Current percent value set from metadata"), v.percent = y.data(m.percent)), y.data(m.total) && (v.verbose("Total value set from metadata"), v.total = y.data(m.total)), y.data(m.value) && (v.verbose("Current value set from metadata"), v.value = y.data(m.value));
          }, currentValue: function currentValue() {
            return v.value !== r ? v.value : !1;
          } }, increment: function increment(e) {
          var t,
              n,
              r,
              a = v.total || !1;a ? (n = v.value || 0, e = e || 1, r = n + e, t = v.total, v.debug("Incrementing value by", e, n, t), r > t && (v.debug("Value cannot increment above total", t), r = t), v.set.progress(r)) : (n = v.percent || 0, e = e || v.get.randomValue(), r = n + e, t = 100, v.debug("Incrementing percentage by", e, n), r > t && (v.debug("Value cannot increment above 100 percent"), r = t), v.set.progress(r));
        }, decrement: function decrement(e) {
          var t,
              n,
              r = v.total || !1,
              a = 0;r ? (t = v.value || 0, e = e || 1, n = t - e, v.debug("Decrementing value by", e, t)) : (t = v.percent || 0, e = e || v.get.randomValue(), n = t - e, v.debug("Decrementing percentage by", e, t)), a > n && (v.debug("Value cannot decrement below 0"), n = 0), v.set.progress(n);
        }, get: { text: function text(e) {
            var t = v.value || 0,
                n = v.total || 0,
                r = v.is.visible() && I ? v.get.displayPercent() : v.percent || 0,
                a = v.total > 0 ? n - t : 100 - r;return (e = e || "", e = e.replace("{value}", t).replace("{total}", n).replace("{left}", a).replace("{percent}", r), v.debug("Adding variables to progress bar text", e), e);
          }, randomValue: function randomValue() {
            return (v.debug("Generating random increment percentage"), Math.floor(Math.random() * d.random.max + d.random.min));
          }, transitionEnd: function transitionEnd() {
            var e,
                t = n.createElement("element"),
                a = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in a) if (t.style[e] !== r) return a[e];
          }, displayPercent: function displayPercent() {
            var e = C.width(),
                t = y.width(),
                n = parseInt(C.css("min-width"), 10),
                r = e > n ? e / t * 100 : v.percent;return 0 === d.precision ? Math.round(r) : Math.round(10 * r * d.precision) / (10 * d.precision);
          }, percent: function percent() {
            return v.percent || 0;
          }, value: function value() {
            return v.value || !1;
          }, total: function total() {
            return v.total || !1;
          } }, is: { success: function success() {
            return y.hasClass(p.success);
          }, warning: function warning() {
            return y.hasClass(p.warning);
          }, error: function error() {
            return y.hasClass(p.error);
          }, active: function active() {
            return y.hasClass(p.active);
          }, visible: function visible() {
            return y.is(":visible");
          } }, remove: { state: function state() {
            v.verbose("Removing stored state"), delete v.total, delete v.percent, delete v.value;
          }, active: function active() {
            v.verbose("Removing active state"), y.removeClass(p.active);
          }, success: function success() {
            v.verbose("Removing success state"), y.removeClass(p.success);
          }, warning: function warning() {
            v.verbose("Removing warning state"), y.removeClass(p.warning);
          }, error: function error() {
            v.verbose("Removing error state"), y.removeClass(p.error);
          } }, set: { barWidth: function barWidth(e) {
            e > 100 ? v.error(h.tooHigh, e) : 0 > e ? v.error(h.tooLow, e) : (C.css("width", e + "%"), y.attr("data-percent", parseInt(e, 10)));
          }, duration: function duration(e) {
            e = e || d.duration, e = "number" == typeof e ? e + "ms" : e, v.verbose("Setting progress bar transition duration", e), C.css({ "-webkit-transition-duration": e, "-moz-transition-duration": e, "-ms-transition-duration": e, "-o-transition-duration": e, "transition-duration": e });
          }, initials: function initials() {
            d.total !== !1 && (v.verbose("Current total set in settings", d.total), v.total = d.total), d.value !== !1 && (v.verbose("Current value set in settings", d.value), v.value = d.value), d.percent !== !1 && (v.verbose("Current percent set in settings", d.percent), v.percent = d.percent), v.percent !== r ? v.set.percent(v.percent) : v.value !== r && v.set.progress(v.value);
          }, percent: function percent(e) {
            e = "string" == typeof e ? +e.replace("%", "") : e, e > 0 && 1 > e && (v.verbose("Module percentage passed as decimal, converting"), e = 100 * e), e = 0 === d.precision ? Math.round(e) : Math.round(10 * e * d.precision) / (10 * d.precision), v.percent = e, v.total ? v.value = Math.round(e / 100 * v.total * 10 * d.precision) / (10 * d.precision) : d.limitValues && (v.value = v.value > 100 ? 100 : v.value < 0 ? 0 : v.value), v.set.barWidth(e), v.is.visible() && v.set.labelInterval(), v.set.labels(), d.onChange.call(E, e, v.value, v.total);
          }, labelInterval: function labelInterval() {
            var e = function e() {
              v.verbose("Bar finished animating, removing continuous label updates"), clearInterval(v.interval), I = !1, v.set.labels();
            };clearInterval(v.interval), C.one(o + w, e), v.timer = setTimeout(e, d.duration + 100), I = !0, v.interval = setInterval(v.set.labels, d.framerate);
          }, labels: function labels() {
            v.verbose("Setting both bar progress and outer label text"), v.set.barLabel(), v.set.state();
          }, label: function label(e) {
            e = e || "", e && (e = v.get.text(e), v.debug("Setting label to text", e), A.text(e));
          }, state: function state(e) {
            e = e !== r ? e : v.percent, 100 === e ? !d.autoSuccess || v.is.warning() || v.is.error() ? (v.verbose("Reached 100% removing active state"), v.remove.active()) : (v.set.success(), v.debug("Automatically triggering success at 100%")) : e > 0 ? (v.verbose("Adjusting active progress bar label", e), v.set.active()) : (v.remove.active(), v.set.label(d.text.active));
          }, barLabel: function barLabel(e) {
            e !== r ? T.text(v.get.text(e)) : "ratio" == d.label && v.total ? (v.debug("Adding ratio to bar label"), T.text(v.get.text(d.text.ratio))) : "percent" == d.label && (v.debug("Adding percentage to bar label"), T.text(v.get.text(d.text.percent)));
          }, active: function active(e) {
            e = e || d.text.active, v.debug("Setting active state"), d.showActivity && !v.is.active() && y.addClass(p.active), v.remove.warning(), v.remove.error(), v.remove.success(), e && v.set.label(e), d.onActive.call(E, v.value, v.total);
          }, success: function success(e) {
            e = e || d.text.success, v.debug("Setting success state"), y.addClass(p.success), v.remove.active(), v.remove.warning(), v.remove.error(), v.complete(), e && v.set.label(e), d.onSuccess.call(E, v.total);
          }, warning: function warning(e) {
            e = e || d.text.warning, v.debug("Setting warning state"), y.addClass(p.warning), v.remove.active(), v.remove.success(), v.remove.error(), v.complete(), e && v.set.label(e), d.onWarning.call(E, v.value, v.total);
          }, error: function error(e) {
            e = e || d.text.error, v.debug("Setting error state"), y.addClass(p.error), v.remove.active(), v.remove.success(), v.remove.warning(), v.complete(), e && v.set.label(e), d.onError.call(E, v.value, v.total);
          }, total: function total(e) {
            v.total = e;
          }, progress: function progress(e) {
            var t,
                n = "string" == typeof e ? "" !== e.replace(/[^\d.]/g, "") ? +e.replace(/[^\d.]/g, "") : !1 : e;n === !1 && v.error(h.nonNumeric, e), v.total ? (v.value = n, t = n / v.total * 100, v.debug("Calculating percent complete from total", t), v.set.percent(t)) : (t = n, v.debug("Setting value to exact percentage value", t), v.set.percent(t));
          } }, setting: function setting(t, n) {
          if ((v.debug("Changing setting", t, n), e.isPlainObject(t))) e.extend(!0, d, t);else {
            if (n === r) return d[t];d[t] = n;
          }
        }, internal: function internal(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, v, t);else {
            if (n === r) return v[t];v[t] = n;
          }
        }, debug: function debug() {
          d.debug && (d.performance ? v.performance.log(arguments) : (v.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), v.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          d.verbose && d.debug && (d.performance ? v.performance.log(arguments) : (v.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), v.verbose.apply(console, arguments)));
        }, error: function error() {
          v.error = Function.prototype.bind.call(console.error, console, d.name + ":"), v.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, n, r;d.performance && (t = new Date().getTime(), r = s || t, n = t - r, s = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: E, "Execution Time": n })), clearTimeout(v.performance.timer), v.performance.timer = setTimeout(v.performance.display, 100);
          }, display: function display() {
            var t = d.name + ":",
                n = 0;s = !1, clearTimeout(v.performance.timer), e.each(c, function (e, t) {
              n += t["Execution Time"];
            }), t += " " + n + "ms", i && (t += " '" + i + "'"), (console.group !== r || console.table !== r) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, n, o) {
          var i,
              s,
              c,
              l = S;return (n = n || g, o = E || o, "string" == typeof t && l !== r && (t = t.split(/[\. ]/), i = t.length - 1, e.each(t, function (n, a) {
            var o = n != i ? a + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(l[o]) && n != i) l = l[o];else {
              if (l[o] !== r) return (s = l[o], !1);if (!e.isPlainObject(l[a]) || n == i) return l[a] !== r ? (s = l[a], !1) : (v.error(h.method, t), !1);l = l[a];
            }
          })), e.isFunction(s) ? c = s.apply(o, n) : s !== r && (c = s), e.isArray(a) ? a.push(c) : a !== r ? a = [a, c] : c !== r && (a = c), s);
        } }, u ? (S === r && v.initialize(), v.invoke(l)) : (S !== r && S.invoke("destroy"), v.initialize());
    }), a !== r ? a : this);
  }, e.fn.progress.settings = { name: "Progress", namespace: "progress", debug: !1, verbose: !0, performance: !0, random: { min: 2, max: 5 }, duration: 300, autoSuccess: !0, showActivity: !0, limitValues: !0, label: "percent", precision: 1, framerate: 1000 / 30, percent: !1, total: !1, value: !1, onChange: function onChange(e, t, n) {}, onSuccess: function onSuccess(e) {}, onActive: function onActive(e, t) {}, onError: function onError(e, t) {}, onWarning: function onWarning(e, t) {}, error: { method: "The method you called is not defined.", nonNumeric: "Progress value is non numeric", tooHigh: "Value specified is above 100%", tooLow: "Value specified is below 0%" }, regExp: { variable: /\{\$*[A-z0-9]+\}/g }, metadata: { percent: "percent", total: "total", value: "value" }, selector: { bar: "> .bar", label: "> .label", progress: ".bar > .progress" }, text: { active: !1, error: !1, success: !1, warning: !1, percent: "{percent}%", ratio: "{value} of {total}" }, className: { active: "active", error: "error", success: "success", warning: "warning" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/rating", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.rating = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.rating.settings, parameters) : $.extend({}, $.fn.rating.settings),
          namespace = settings.namespace,
          className = settings.className,
          metadata = settings.metadata,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          element = this,
          instance = $(this).data(moduleNamespace),
          $module = $(this),
          $icon = $module.find(selector.icon),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing rating module', settings);

          if ($icon.length === 0) {
            module.setup.layout();
          }

          if (settings.interactive) {
            module.enable();
          } else {
            module.disable();
          }
          if (settings.initialRating) {
            module.debug('Setting initial rating');
            module.setRating(settings.initialRating);
          }
          if ($module.data(metadata.rating)) {
            module.debug('Rating found in metadata');
            module.setRating($module.data(metadata.rating));
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance', instance);
          $module.removeData(moduleNamespace);
          $icon.off(eventNamespace);
        },

        refresh: function refresh() {
          $icon = $module.find(selector.icon);
        },

        setup: {
          layout: function layout() {
            var maxRating = $module.data(metadata.maxRating) || settings.maxRating;
            module.debug('Generating icon html dynamically');
            $module.html($.fn.rating.settings.templates.icon(maxRating));
            module.refresh();
          }
        },

        event: {
          mouseenter: function mouseenter() {
            var $activeIcon = $(this);
            $activeIcon.nextAll().removeClass(className.selected);
            $module.addClass(className.selected);
            $activeIcon.addClass(className.selected).prevAll().addClass(className.selected);
          },
          mouseleave: function mouseleave() {
            $module.removeClass(className.selected);
            $icon.removeClass(className.selected);
          },
          click: function click() {
            var $activeIcon = $(this),
                currentRating = module.getRating(),
                rating = $icon.index($activeIcon) + 1,
                canClear = settings.clearable == 'auto' ? $icon.length === 1 : settings.clearable;
            if (canClear && currentRating == rating) {
              module.clearRating();
            } else {
              module.setRating(rating);
            }
          }
        },

        clearRating: function clearRating() {
          module.debug('Clearing current rating');
          module.setRating(0);
        },

        getRating: function getRating() {
          var currentRating = $icon.filter('.' + className.active).length;
          module.verbose('Current rating retrieved', currentRating);
          return currentRating;
        },

        enable: function enable() {
          module.debug('Setting rating to interactive mode');
          $icon.on('mouseenter' + eventNamespace, module.event.mouseenter).on('mouseleave' + eventNamespace, module.event.mouseleave).on('click' + eventNamespace, module.event.click);
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          module.debug('Setting rating to read-only mode');
          $icon.off(eventNamespace);
          $module.addClass(className.disabled);
        },

        setRating: function setRating(rating) {
          var ratingIndex = rating - 1 >= 0 ? rating - 1 : 0,
              $activeIcon = $icon.eq(ratingIndex);
          $module.removeClass(className.selected);
          $icon.removeClass(className.selected).removeClass(className.active);
          if (rating > 0) {
            module.verbose('Setting current rating to', rating);
            $activeIcon.prevAll().andSelf().addClass(className.active);
          }
          settings.onRate.call(element, rating);
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.rating.settings = {

    name: 'Rating',
    namespace: 'rating',

    debug: false,
    verbose: true,
    performance: true,

    initialRating: 0,
    interactive: true,
    maxRating: 4,
    clearable: 'auto',

    onRate: function onRate(rating) {},

    error: {
      method: 'The method you called is not defined',
      noMaximum: 'No maximum rating specified. Cannot generate HTML automatically'
    },

    metadata: {
      rating: 'rating',
      maxRating: 'maxRating'
    },

    className: {
      active: 'active',
      disabled: 'disabled',
      selected: 'selected',
      loading: 'loading'
    },

    selector: {
      icon: '.icon'
    },

    templates: {
      icon: function icon(maxRating) {
        var icon = 1,
            html = '';
        while (icon <= maxRating) {
          html += '<i class="icon"></i>';
          icon++;
        }
        return html;
      }
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/rating.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, a) {
  "use strict";e.fn.rating = function (n) {
    var t,
        i = e(this),
        o = i.selector || "",
        r = new Date().getTime(),
        s = [],
        l = arguments[0],
        c = "string" == typeof l,
        u = [].slice.call(arguments, 1);return (i.each(function () {
      var g,
          d = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.rating.settings, n) : e.extend({}, e.fn.rating.settings),
          m = d.namespace,
          f = d.className,
          v = d.metadata,
          p = d.selector,
          b = (d.error, "." + m),
          h = "module-" + m,
          y = this,
          R = e(this).data(h),
          C = e(this),
          x = C.find(p.icon);g = { initialize: function initialize() {
          g.verbose("Initializing rating module", d), 0 === x.length && g.setup.layout(), d.interactive ? g.enable() : g.disable(), d.initialRating && (g.debug("Setting initial rating"), g.setRating(d.initialRating)), C.data(v.rating) && (g.debug("Rating found in metadata"), g.setRating(C.data(v.rating))), g.instantiate();
        }, instantiate: function instantiate() {
          g.verbose("Instantiating module", d), R = g, C.data(h, g);
        }, destroy: function destroy() {
          g.verbose("Destroying previous instance", R), C.removeData(h), x.off(b);
        }, refresh: function refresh() {
          x = C.find(p.icon);
        }, setup: { layout: function layout() {
            var n = C.data(v.maxRating) || d.maxRating;g.debug("Generating icon html dynamically"), C.html(e.fn.rating.settings.templates.icon(n)), g.refresh();
          } }, event: { mouseenter: function mouseenter() {
            var n = e(this);n.nextAll().removeClass(f.selected), C.addClass(f.selected), n.addClass(f.selected).prevAll().addClass(f.selected);
          }, mouseleave: function mouseleave() {
            C.removeClass(f.selected), x.removeClass(f.selected);
          }, click: function click() {
            var n = e(this),
                t = g.getRating(),
                a = x.index(n) + 1,
                i = "auto" == d.clearable ? 1 === x.length : d.clearable;i && t == a ? g.clearRating() : g.setRating(a);
          } }, clearRating: function clearRating() {
          g.debug("Clearing current rating"), g.setRating(0);
        }, getRating: function getRating() {
          var e = x.filter("." + f.active).length;return (g.verbose("Current rating retrieved", e), e);
        }, enable: function enable() {
          g.debug("Setting rating to interactive mode"), x.on("mouseenter" + b, g.event.mouseenter).on("mouseleave" + b, g.event.mouseleave).on("click" + b, g.event.click), C.removeClass(f.disabled);
        }, disable: function disable() {
          g.debug("Setting rating to read-only mode"), x.off(b), C.addClass(f.disabled);
        }, setRating: function setRating(e) {
          var n = e - 1 >= 0 ? e - 1 : 0,
              t = x.eq(n);C.removeClass(f.selected), x.removeClass(f.selected).removeClass(f.active), e > 0 && (g.verbose("Setting current rating to", e), t.prevAll().andSelf().addClass(f.active)), d.onRate.call(y, e);
        }, setting: function setting(n, t) {
          if ((g.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, d, n);else {
            if (t === a) return d[n];d[n] = t;
          }
        }, internal: function internal(n, t) {
          if (e.isPlainObject(n)) e.extend(!0, g, n);else {
            if (t === a) return g[n];g[n] = t;
          }
        }, debug: function debug() {
          d.debug && (d.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), g.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          d.verbose && d.debug && (d.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), g.verbose.apply(console, arguments)));
        }, error: function error() {
          g.error = Function.prototype.bind.call(console.error, console, d.name + ":"), g.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, a;d.performance && (n = new Date().getTime(), a = r || n, t = n - a, r = n, s.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: y, "Execution Time": t })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 100);
          }, display: function display() {
            var n = d.name + ":",
                t = 0;r = !1, clearTimeout(g.performance.timer), e.each(s, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", o && (n += " '" + o + "'"), i.length > 1 && (n += " (" + i.length + ")"), (console.group !== a || console.table !== a) && s.length > 0 && (console.groupCollapsed(n), console.table ? console.table(s) : e.each(s, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), s = [];
          } }, invoke: function invoke(n, i, o) {
          var r,
              s,
              l,
              c = R;return (i = i || u, o = y || o, "string" == typeof n && c !== a && (n = n.split(/[\. ]/), r = n.length - 1, e.each(n, function (t, i) {
            var o = t != r ? i + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(c[o]) && t != r) c = c[o];else {
              if (c[o] !== a) return (s = c[o], !1);if (!e.isPlainObject(c[i]) || t == r) return c[i] !== a ? (s = c[i], !1) : !1;c = c[i];
            }
          })), e.isFunction(s) ? l = s.apply(o, i) : s !== a && (l = s), e.isArray(t) ? t.push(l) : t !== a ? t = [t, l] : l !== a && (t = l), s);
        } }, c ? (R === a && g.initialize(), g.invoke(l)) : (R !== a && R.invoke("destroy"), g.initialize());
    }), t !== a ? t : this);
  }, e.fn.rating.settings = { name: "Rating", namespace: "rating", debug: !1, verbose: !0, performance: !0, initialRating: 0, interactive: !0, maxRating: 4, clearable: "auto", onRate: function onRate(e) {}, error: { method: "The method you called is not defined", noMaximum: "No maximum rating specified. Cannot generate HTML automatically" }, metadata: { rating: "rating", maxRating: "maxRating" }, className: { active: "active", disabled: "disabled", selected: "selected", loading: "loading" }, selector: { icon: ".icon" }, templates: { icon: function icon(e) {
        for (var n = 1, t = ""; e >= n;) t += "<i class=\"icon\"></i>", n++;return t;
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/search", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.search = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $(this).each(function () {
      var settings = $.extend(true, {}, $.fn.search.settings, parameters),
          className = settings.className,
          metadata = settings.metadata,
          regExp = settings.regExp,
          selector = settings.selector,
          error = settings.error,
          namespace = settings.namespace,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          $prompt = $module.find(selector.prompt),
          $searchButton = $module.find(selector.searchButton),
          $results = $module.find(selector.results),
          $result = $module.find(selector.result),
          $category = $module.find(selector.category),
          element = this,
          instance = $module.data(moduleNamespace),
          module;
      module = {

        initialize: function initialize() {
          module.verbose('Initializing module');
          var prompt = $prompt[0],
              inputEvent = prompt !== undefined && prompt.oninput !== undefined ? 'input' : prompt !== undefined && prompt.onpropertychange !== undefined ? 'propertychange' : 'keyup';
          if (settings.automatic) {
            $prompt.on(inputEvent + eventNamespace, module.throttle).attr('autocomplete', 'off');
          }
          $prompt.on('focus' + eventNamespace, module.event.focus).on('blur' + eventNamespace, module.event.blur).on('keydown' + eventNamespace, module.handleKeyboard);
          $searchButton.on('click' + eventNamespace, module.query);
          $results.on('mousedown' + eventNamespace, module.event.result.mousedown).on('mouseup' + eventNamespace, module.event.result.mouseup).on('click' + eventNamespace, selector.result, module.event.result.click);
          module.instantiate();
        },
        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },
        destroy: function destroy() {
          module.verbose('Destroying instance');
          $module.removeData(moduleNamespace);
          $prompt.off(eventNamespace);
          $searchButton.off(eventNamespace);
          $results.off(eventNamespace);
        },
        event: {
          focus: function focus() {
            module.set.focus();
            clearTimeout(module.timer);
            module.throttle();
            if (module.has.minimumCharacters()) {
              module.showResults();
            }
          },
          blur: function blur(event) {
            var pageLostFocus = document.activeElement === this;
            if (!pageLostFocus && !module.resultsClicked) {
              module.cancel.query();
              module.remove.focus();
              module.timer = setTimeout(module.hideResults, settings.hideDelay);
            }
          },
          result: {
            mousedown: function mousedown() {
              module.resultsClicked = true;
            },
            mouseup: function mouseup() {
              module.resultsClicked = false;
            },
            click: function click(event) {
              module.debug('Search result selected');
              var $result = $(this),
                  $title = $result.find(selector.title).eq(0),
                  $link = $result.find('a[href]').eq(0),
                  href = $link.attr('href') || false,
                  target = $link.attr('target') || false,
                  title = $title.html(),
                  name = $title.length > 0 ? $title.text() : false,
                  results = module.get.results(),
                  result = module.get.result(name, results),
                  returnedValue;
              if ($.isFunction(settings.onSelect)) {
                if (settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  return;
                }
              }
              module.hideResults();
              if (name) {
                module.set.value(name);
              }
              if (href) {
                module.verbose('Opening search link found in result', $link);
                if (target == '_blank' || event.ctrlKey) {
                  window.open(href);
                } else {
                  window.location.href = href;
                }
              }
            }
          }
        },
        handleKeyboard: function handleKeyboard(event) {
          var
          // force selector refresh
          $result = $module.find(selector.result),
              $category = $module.find(selector.category),
              currentIndex = $result.index($result.filter('.' + className.active)),
              resultSize = $result.length,
              keyCode = event.which,
              keys = {
            backspace: 8,
            enter: 13,
            escape: 27,
            upArrow: 38,
            downArrow: 40
          },
              newIndex;
          // search shortcuts
          if (keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            $prompt.trigger('blur');
          }
          if (module.is.visible()) {
            if (keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if ($result.filter('.' + className.active).length > 0) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
              }
            } else if (keyCode == keys.upArrow) {
              module.verbose('Up key pressed, changing active result');
              newIndex = currentIndex - 1 < 0 ? currentIndex : currentIndex - 1;
              $category.removeClass(className.active);
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();
            } else if (keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = currentIndex + 1 >= resultSize ? currentIndex : currentIndex + 1;
              $category.removeClass(className.active);
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();
            }
          } else {
            // query shortcuts
            if (keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
            }
          }
        },

        setup: {
          api: function api() {
            var apiSettings = {
              on: false,
              action: 'search',
              onFailure: module.error
            },
                searchHTML;
            module.verbose('First request, initializing API');
            $module.api(apiSettings);
          }
        },

        can: {
          useAPI: function useAPI() {
            return $.fn.api !== undefined;
          },
          transition: function transition() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
          }
        },

        is: {
          empty: function empty() {
            return $results.html() === '';
          },
          visible: function visible() {
            return $results.filter(':visible').length > 0;
          },
          focused: function focused() {
            return $prompt.filter(':focus').length > 0;
          }
        },

        get: {
          value: function value() {
            return $prompt.val();
          },
          results: function results() {
            var results = $module.data(metadata.results);
            return results;
          },
          result: function result(value, results) {
            var result = false;
            value = value || module.get.value();
            results = results || module.get.results();
            if (settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function (index, category) {
                if ($.isArray(category.results)) {
                  result = module.search.object(value, category.results)[0];
                  if (result && result.length > 0) {
                    return true;
                  }
                }
              });
            } else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results)[0];
            }
            return result;
          }
        },

        set: {
          focus: function focus() {
            $module.addClass(className.focus);
          },
          loading: function loading() {
            $module.addClass(className.loading);
          },
          value: function value(_value) {
            module.verbose('Setting search input value', _value);
            $prompt.val(_value);
            module.query();
          },
          buttonPressed: function buttonPressed() {
            $searchButton.addClass(className.pressed);
          }
        },

        remove: {
          loading: function loading() {
            $module.removeClass(className.loading);
          },
          focus: function focus() {
            $module.removeClass(className.focus);
          },
          buttonPressed: function buttonPressed() {
            $searchButton.removeClass(className.pressed);
          }
        },

        query: function query() {
          var searchTerm = module.get.value(),
              cache = module.read.cache(searchTerm);
          if (cache) {
            module.debug('Reading result for ' + searchTerm + ' from cache');
            module.save.results(cache.results);
            module.addResults(cache.html);
          } else {
            module.debug('Querying for ' + searchTerm);
            if ($.isPlainObject(settings.source) || $.isArray(settings.source)) {
              module.search.local(searchTerm);
            } else if (module.can.useAPI()) {
              if (settings.apiSettings) {
                module.debug('Searching with specified API settings', settings.apiSettings);
                module.search.remote(searchTerm);
              } else if ($.api.settings.api.search !== undefined) {
                module.debug('Searching with default search API endpoint');
                module.search.remote(searchTerm);
              } else {
                module.error(error.noEndpoint);
              }
            } else {
              module.error(error.source);
            }
            settings.onSearchQuery.call(element, searchTerm);
          }
        },

        search: {
          local: function local(searchTerm) {
            var searchResults = module.search.object(searchTerm, settings.content),
                searchHTML;
            module.set.loading();
            module.save.results(searchResults);
            module.debug('Returned local search results', searchResults);

            searchHTML = module.generateResults({
              results: searchResults
            });
            module.remove.loading();
            module.write.cache(searchTerm, {
              html: searchHTML,
              results: searchResults
            });
            module.addResults(searchHTML);
          },
          remote: function remote(searchTerm) {
            var apiSettings = {
              onSuccess: function onSuccess(response) {
                module.parse.response.call(element, response, searchTerm);
              },
              urlData: {
                query: searchTerm
              }
            };
            if (!$module.api('get request')) {
              module.setup.api();
            }
            $.extend(true, apiSettings, settings.apiSettings);
            module.debug('Executing search', apiSettings);
            module.cancel.query();
            $module.api('setting', apiSettings).api('query');
          },
          object: function object(searchTerm, source) {
            var results = [],
                fullTextResults = [],
                searchFields = $.isArray(settings.searchFields) ? settings.searchFields : [settings.searchFields],
                searchExp = searchTerm.replace(regExp.escape, '\\$&'),
                searchRegExp = new RegExp(regExp.exact + searchExp, 'i');

            source = source || settings.source;

            // exit conditions on no source
            if (source === undefined) {
              module.error(error.source);
              return [];
            }

            // iterate through search fields in array order
            $.each(searchFields, function (index, field) {
              $.each(source, function (label, content) {
                var fieldExists = typeof content[field] == 'string',
                    notAlreadyResult = $.inArray(content, results) == -1 && $.inArray(content, fullTextResults) == -1;
                if (fieldExists && notAlreadyResult) {
                  if (content[field].match(searchRegExp)) {
                    results.push(content);
                  } else if (settings.searchFullText && module.fuzzySearch(searchTerm, content[field])) {
                    fullTextResults.push(content);
                  }
                }
              });
            });
            return $.merge(results, fullTextResults);
          }
        },

        fuzzySearch: function fuzzySearch(query, term) {
          var termLength = term.length,
              queryLength = query.length;
          query = query.toLowerCase();
          term = term.toLowerCase();
          if (queryLength > termLength) {
            return false;
          }
          if (queryLength === termLength) {
            return query === term;
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var queryCharacter = query.charCodeAt(characterIndex);
            while (nextCharacterIndex < termLength) {
              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        parse: {
          response: function response(_response, searchTerm) {
            var searchHTML = module.generateResults(_response);
            module.verbose('Parsing server response', _response);
            if (_response !== undefined) {
              if (searchTerm !== undefined && _response.results !== undefined) {
                module.write.cache(searchTerm, {
                  html: searchHTML,
                  results: _response.results
                });
                module.save.results(_response.results);
                module.addResults(searchHTML);
              }
            }
          }
        },

        throttle: function throttle() {
          clearTimeout(module.timer);
          if (module.has.minimumCharacters()) {
            module.timer = setTimeout(module.query, settings.searchDelay);
          } else {
            module.hideResults();
          }
        },

        cancel: {
          query: function query() {
            if (module.can.useAPI()) {
              $module.api('abort');
            }
          }
        },

        has: {
          minimumCharacters: function minimumCharacters() {
            var searchTerm = module.get.value(),
                numCharacters = searchTerm.length;
            return numCharacters >= settings.minCharacters;
          }
        },

        read: {
          cache: function cache(name) {
            var cache = $module.data(metadata.cache);
            if (settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return typeof cache == 'object' && cache[name] !== undefined ? cache[name] : false;
            }
            return false;
          }
        },

        save: {
          results: function results(_results) {
            module.verbose('Saving current search results to metadata', _results);
            $module.data(metadata.results, _results);
          }
        },

        write: {
          cache: function cache(name, value) {
            var cache = $module.data(metadata.cache) !== undefined ? $module.data(metadata.cache) : {};
            if (settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module.data(metadata.cache, cache);
            }
          }
        },

        addResults: function addResults(html) {
          if ($.isFunction(settings.onResultsAdd)) {
            if (settings.onResultsAdd.call($results, html) === false) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
            }
          }
          $results.html(html);
          module.showResults();
        },

        showResults: function showResults() {
          if (!module.is.visible() && module.is.focused() && !module.is.empty()) {
            if (module.can.transition()) {
              module.debug('Showing results with css animations');
              $results.transition({
                animation: settings.transition + ' in',
                duration: settings.duration,
                queue: true
              });
            } else {
              module.debug('Showing results with javascript');
              $results.stop().fadeIn(settings.duration, settings.easing);
            }
            settings.onResultsOpen.call($results);
          }
        },
        hideResults: function hideResults() {
          if (module.is.visible()) {
            if (module.can.transition()) {
              module.debug('Hiding results with css animations');
              $results.transition({
                animation: settings.transition + ' out',
                duration: settings.duration,
                queue: true
              });
            } else {
              module.debug('Hiding results with javascript');
              $results.stop().fadeOut(settings.duration, settings.easing);
            }
            settings.onResultsClose.call($results);
          }
        },

        generateResults: function generateResults(response) {
          module.debug('Generating html from response', response);
          var template = settings.templates[settings.type],
              isProperObject = $.isPlainObject(response.results) && !$.isEmptyObject(response.results),
              isProperArray = $.isArray(response.results) && response.results.length > 0,
              html = '';
          if (isProperObject || isProperArray) {
            if (settings.maxResults > 0) {
              if (isProperObject) {
                if (settings.type == 'standard') {
                  module.error(error.maxResults);
                }
              } else {
                response.results = response.results.slice(0, settings.maxResults);
              }
            }
            if ($.isFunction(template)) {
              html = template(response);
            } else {
              module.error(error.noTemplate, false);
            }
          } else {
            html = module.displayMessage(error.noResults, 'empty');
          }
          settings.onResults.call(element, response);
          return html;
        },

        displayMessage: function displayMessage(text, type) {
          type = type || 'standard';
          module.debug('Displaying message', text, type);
          module.addResults(settings.templates.message(text, type));
          return settings.templates.message(text, type);
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.search.settings = {

    name: 'Search Module',
    namespace: 'search',

    debug: false,
    verbose: true,
    performance: true,

    type: 'standard',
    minCharacters: 1,

    // api config
    apiSettings: false,

    source: false,
    searchFields: ['title', 'description'],
    searchFullText: true,

    automatic: 'true',
    hideDelay: 0,
    searchDelay: 100,
    maxResults: 7,
    cache: true,

    transition: 'scale',
    duration: 300,
    easing: 'easeOutExpo',

    onSelect: false,
    onResultsAdd: false,

    onSearchQuery: function onSearchQuery() {},
    onResults: function onResults(response) {},

    onResultsOpen: function onResultsOpen() {},
    onResultsClose: function onResultsClose() {},

    className: {
      active: 'active',
      empty: 'empty',
      focus: 'focus',
      loading: 'loading',
      pressed: 'down'
    },

    error: {
      source: 'Cannot search. No source used, and Semantic API module was not included',
      noResults: 'Your search returned no results',
      logging: 'Error in debug logging, exiting.',
      noEndpoint: 'No search endpoint was specified',
      noTemplate: 'A valid template name was not specified.',
      serverError: 'There was an issue with querying the server.',
      maxResults: 'Results must be an array to use maxResults setting',
      method: 'The method you called is not defined.'
    },

    metadata: {
      cache: 'cache',
      results: 'results'
    },

    regExp: {
      escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
      exact: '(?:s|^)'
    },

    selector: {
      prompt: '.prompt',
      searchButton: '.search.button',
      results: '.results',
      category: '.category',
      result: '.result',
      title: '.title, .name'
    },

    templates: {
      escape: function escape(string) {
        var badChars = /[&<>"'`]/g,
            shouldEscape = /[&<>"'`]/,
            escape = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        },
            escapedChar = function escapedChar(chr) {
          return escape[chr];
        };
        if (shouldEscape.test(string)) {
          return string.replace(badChars, escapedChar);
        }
        return string;
      },
      message: function message(_message, type) {
        var html = '';
        if (_message !== undefined && type !== undefined) {
          html += '' + '<div class="message ' + type + '">';
          // message type
          if (type == 'empty') {
            html += '' + '<div class="header">No Results</div class="header">' + '<div class="description">' + _message + '</div class="description">';
          } else {
            html += ' <div class="description">' + _message + '</div>';
          }
          html += '</div>';
        }
        return html;
      },
      category: function category(response) {
        var html = '',
            escape = $.fn.search.settings.templates.escape;
        if (response.results !== undefined) {
          // each category
          $.each(response.results, function (index, category) {
            if (category.results !== undefined && category.results.length > 0) {
              html += '' + '<div class="category">' + '<div class="name">' + category.name + '</div>';
              // each item inside category
              $.each(category.results, function (index, result) {
                html += '<div class="result">';
                if (result.url) {
                  html += '<a href="' + result.url + '"></a>';
                }
                if (result.image !== undefined) {
                  result.image = escape(result.image);
                  html += '' + '<div class="image">' + ' <img src="' + result.image + '" alt="">' + '</div>';
                }
                html += '<div class="content">';
                if (result.price !== undefined) {
                  result.price = escape(result.price);
                  html += '<div class="price">' + result.price + '</div>';
                }
                if (result.title !== undefined) {
                  result.title = escape(result.title);
                  html += '<div class="title">' + result.title + '</div>';
                }
                if (result.description !== undefined) {
                  html += '<div class="description">' + result.description + '</div>';
                }
                html += '' + '</div>' + '</div>';
              });
              html += '' + '</div>';
            }
          });
          if (response.action) {
            html += '' + '<a href="' + response.action.url + '" class="action">' + response.action.text + '</a>';
          }
          return html;
        }
        return false;
      },
      standard: function standard(response) {
        var html = '';
        if (response.results !== undefined) {

          // each result
          $.each(response.results, function (index, result) {
            if (result.url) {
              html += '<a class="result" href="' + result.url + '">';
            } else {
              html += '<a class="result">';
            }
            if (result.image !== undefined) {
              html += '' + '<div class="image">' + ' <img src="' + result.image + '">' + '</div>';
            }
            html += '<div class="content">';
            if (result.price !== undefined) {
              html += '<div class="price">' + result.price + '</div>';
            }
            if (result.title !== undefined) {
              html += '<div class="title">' + result.title + '</div>';
            }
            if (result.description !== undefined) {
              html += '<div class="description">' + result.description + '</div>';
            }
            html += '' + '</div>';
            html += '</a>';
          });

          if (response.action) {
            html += '' + '<a href="' + response.action.url + '" class="action">' + response.action.text + '</a>';
          }
          return html;
        }
        return false;
      }
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/search.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, s, n) {
  "use strict";e.fn.search = function (r) {
    var a,
        i = e(this),
        o = i.selector || "",
        c = new Date().getTime(),
        u = [],
        l = arguments[0],
        d = "string" == typeof l,
        f = [].slice.call(arguments, 1);return (e(this).each(function () {
      var p,
          g = e.extend(!0, {}, e.fn.search.settings, r),
          h = g.className,
          m = g.metadata,
          v = g.regExp,
          b = g.selector,
          y = g.error,
          w = g.namespace,
          R = "." + w,
          C = w + "-module",
          x = e(this),
          A = x.find(b.prompt),
          k = x.find(b.searchButton),
          S = x.find(b.results),
          q = (x.find(b.result), x.find(b.category), this),
          E = x.data(C);p = { initialize: function initialize() {
          p.verbose("Initializing module");var e = A[0],
              t = e !== n && e.oninput !== n ? "input" : e !== n && e.onpropertychange !== n ? "propertychange" : "keyup";g.automatic && A.on(t + R, p.throttle).attr("autocomplete", "off"), A.on("focus" + R, p.event.focus).on("blur" + R, p.event.blur).on("keydown" + R, p.handleKeyboard), k.on("click" + R, p.query), S.on("mousedown" + R, p.event.result.mousedown).on("mouseup" + R, p.event.result.mouseup).on("click" + R, b.result, p.event.result.click), p.instantiate();
        }, instantiate: function instantiate() {
          p.verbose("Storing instance of module", p), E = p, x.data(C, p);
        }, destroy: function destroy() {
          p.verbose("Destroying instance"), x.removeData(C), A.off(R), k.off(R), S.off(R);
        }, event: { focus: function focus() {
            p.set.focus(), clearTimeout(p.timer), p.throttle(), p.has.minimumCharacters() && p.showResults();
          }, blur: function blur(e) {
            var t = s.activeElement === this;t || p.resultsClicked || (p.cancel.query(), p.remove.focus(), p.timer = setTimeout(p.hideResults, g.hideDelay));
          }, result: { mousedown: function mousedown() {
              p.resultsClicked = !0;
            }, mouseup: function mouseup() {
              p.resultsClicked = !1;
            }, click: function click(s) {
              p.debug("Search result selected");var n = e(this),
                  r = n.find(b.title).eq(0),
                  a = n.find("a[href]").eq(0),
                  i = a.attr("href") || !1,
                  o = a.attr("target") || !1,
                  c = (r.html(), r.length > 0 ? r.text() : !1),
                  u = p.get.results(),
                  l = p.get.result(c, u);return e.isFunction(g.onSelect) && g.onSelect.call(q, l, u) === !1 ? void p.debug("Custom onSelect callback cancelled default select action") : (p.hideResults(), c && p.set.value(c), void (i && (p.verbose("Opening search link found in result", a), "_blank" == o || s.ctrlKey ? t.open(i) : t.location.href = i)));
            } } }, handleKeyboard: function handleKeyboard(e) {
          var t,
              s = x.find(b.result),
              n = x.find(b.category),
              r = s.index(s.filter("." + h.active)),
              a = s.length,
              i = e.which,
              o = { backspace: 8, enter: 13, escape: 27, upArrow: 38, downArrow: 40 };if ((i == o.escape && (p.verbose("Escape key pressed, blurring search field"), A.trigger("blur")), p.is.visible())) if (i == o.enter) {
            if ((p.verbose("Enter key pressed, selecting active result"), s.filter("." + h.active).length > 0)) return (p.event.result.click.call(s.filter("." + h.active), e), e.preventDefault(), !1);
          } else i == o.upArrow ? (p.verbose("Up key pressed, changing active result"), t = 0 > r - 1 ? r : r - 1, n.removeClass(h.active), s.removeClass(h.active).eq(t).addClass(h.active).closest(n).addClass(h.active), e.preventDefault()) : i == o.downArrow && (p.verbose("Down key pressed, changing active result"), t = r + 1 >= a ? r : r + 1, n.removeClass(h.active), s.removeClass(h.active).eq(t).addClass(h.active).closest(n).addClass(h.active), e.preventDefault());else i == o.enter && (p.verbose("Enter key pressed, executing query"), p.query(), p.set.buttonPressed(), A.one("keyup", p.remove.buttonFocus));
        }, setup: { api: function api() {
            var e = { on: !1, action: "search", onFailure: p.error };p.verbose("First request, initializing API"), x.api(e);
          } }, can: { useAPI: function useAPI() {
            return e.fn.api !== n;
          }, transition: function transition() {
            return g.transition && e.fn.transition !== n && x.transition("is supported");
          } }, is: { empty: function empty() {
            return "" === S.html();
          }, visible: function visible() {
            return S.filter(":visible").length > 0;
          }, focused: function focused() {
            return A.filter(":focus").length > 0;
          } }, get: { value: function value() {
            return A.val();
          }, results: function results() {
            var e = x.data(m.results);return e;
          }, result: function result(t, s) {
            var n = !1;return (t = t || p.get.value(), s = s || p.get.results(), "category" === g.type ? (p.debug("Finding result that matches", t), e.each(s, function (s, r) {
              return e.isArray(r.results) && (n = p.search.object(t, r.results)[0], n && n.length > 0) ? !0 : void 0;
            })) : (p.debug("Finding result in results object", t), n = p.search.object(t, s)[0]), n);
          } }, set: { focus: function focus() {
            x.addClass(h.focus);
          }, loading: function loading() {
            x.addClass(h.loading);
          }, value: function value(e) {
            p.verbose("Setting search input value", e), A.val(e), p.query();
          }, buttonPressed: function buttonPressed() {
            k.addClass(h.pressed);
          } }, remove: { loading: function loading() {
            x.removeClass(h.loading);
          }, focus: function focus() {
            x.removeClass(h.focus);
          }, buttonPressed: function buttonPressed() {
            k.removeClass(h.pressed);
          } }, query: function query() {
          var t = p.get.value(),
              s = p.read.cache(t);s ? (p.debug("Reading result for " + t + " from cache"), p.save.results(s.results), p.addResults(s.html)) : (p.debug("Querying for " + t), e.isPlainObject(g.source) || e.isArray(g.source) ? p.search.local(t) : p.can.useAPI() ? g.apiSettings ? (p.debug("Searching with specified API settings", g.apiSettings), p.search.remote(t)) : e.api.settings.api.search !== n ? (p.debug("Searching with default search API endpoint"), p.search.remote(t)) : p.error(y.noEndpoint) : p.error(y.source), g.onSearchQuery.call(q, t));
        }, search: { local: function local(e) {
            var t,
                s = p.search.object(e, g.content);p.set.loading(), p.save.results(s), p.debug("Returned local search results", s), t = p.generateResults({ results: s }), p.remove.loading(), p.write.cache(e, { html: t, results: s }), p.addResults(t);
          }, remote: function remote(t) {
            var s = { onSuccess: function onSuccess(e) {
                p.parse.response.call(q, e, t);
              }, urlData: { query: t } };x.api("get request") || p.setup.api(), e.extend(!0, s, g.apiSettings), p.debug("Executing search", s), p.cancel.query(), x.api("setting", s).api("query");
          }, object: function object(t, s) {
            var r = [],
                a = [],
                i = e.isArray(g.searchFields) ? g.searchFields : [g.searchFields],
                o = t.replace(v.escape, "\\$&"),
                c = new RegExp(v.exact + o, "i");return (s = s || g.source, s === n ? (p.error(y.source), []) : (e.each(i, function (n, i) {
              e.each(s, function (s, n) {
                var o = "string" == typeof n[i],
                    u = -1 == e.inArray(n, r) && -1 == e.inArray(n, a);o && u && (n[i].match(c) ? r.push(n) : g.searchFullText && p.fuzzySearch(t, n[i]) && a.push(n));
              });
            }), e.merge(r, a)));
          } }, fuzzySearch: function fuzzySearch(e, t) {
          var s = t.length,
              n = e.length;if ((e = e.toLowerCase(), t = t.toLowerCase(), n > s)) return !1;if (n === s) return e === t;e: for (var r = 0, a = 0; n > r; r++) {
            for (var i = e.charCodeAt(r); s > a;) if (t.charCodeAt(a++) === i) continue e;return !1;
          }return !0;
        }, parse: { response: function response(e, t) {
            var s = p.generateResults(e);p.verbose("Parsing server response", e), e !== n && t !== n && e.results !== n && (p.write.cache(t, { html: s, results: e.results }), p.save.results(e.results), p.addResults(s));
          } }, throttle: function throttle() {
          clearTimeout(p.timer), p.has.minimumCharacters() ? p.timer = setTimeout(p.query, g.searchDelay) : p.hideResults();
        }, cancel: { query: function query() {
            p.can.useAPI() && x.api("abort");
          } }, has: { minimumCharacters: function minimumCharacters() {
            var e = p.get.value(),
                t = e.length;return t >= g.minCharacters;
          } }, read: { cache: function cache(e) {
            var t = x.data(m.cache);return g.cache ? (p.verbose("Checking cache for generated html for query", e), "object" == typeof t && t[e] !== n ? t[e] : !1) : !1;
          } }, save: { results: function results(e) {
            p.verbose("Saving current search results to metadata", e), x.data(m.results, e);
          } }, write: { cache: function cache(e, t) {
            var s = x.data(m.cache) !== n ? x.data(m.cache) : {};g.cache && (p.verbose("Writing generated html to cache", e, t), s[e] = t, x.data(m.cache, s));
          } }, addResults: function addResults(t) {
          return e.isFunction(g.onResultsAdd) && g.onResultsAdd.call(S, t) === !1 ? (p.debug("onResultsAdd callback cancelled default action"), !1) : (S.html(t), void p.showResults());
        }, showResults: function showResults() {
          p.is.visible() || !p.is.focused() || p.is.empty() || (p.can.transition() ? (p.debug("Showing results with css animations"), S.transition({ animation: g.transition + " in", duration: g.duration, queue: !0 })) : (p.debug("Showing results with javascript"), S.stop().fadeIn(g.duration, g.easing)), g.onResultsOpen.call(S));
        }, hideResults: function hideResults() {
          p.is.visible() && (p.can.transition() ? (p.debug("Hiding results with css animations"), S.transition({ animation: g.transition + " out", duration: g.duration, queue: !0 })) : (p.debug("Hiding results with javascript"), S.stop().fadeOut(g.duration, g.easing)), g.onResultsClose.call(S));
        }, generateResults: function generateResults(t) {
          p.debug("Generating html from response", t);var s = g.templates[g.type],
              n = e.isPlainObject(t.results) && !e.isEmptyObject(t.results),
              r = e.isArray(t.results) && t.results.length > 0,
              a = "";return (n || r ? (g.maxResults > 0 && (n ? "standard" == g.type && p.error(y.maxResults) : t.results = t.results.slice(0, g.maxResults)), e.isFunction(s) ? a = s(t) : p.error(y.noTemplate, !1)) : a = p.displayMessage(y.noResults, "empty"), g.onResults.call(q, t), a);
        }, displayMessage: function displayMessage(e, t) {
          return (t = t || "standard", p.debug("Displaying message", e, t), p.addResults(g.templates.message(e, t)), g.templates.message(e, t));
        }, setting: function setting(t, s) {
          if (e.isPlainObject(t)) e.extend(!0, g, t);else {
            if (s === n) return g[t];g[t] = s;
          }
        }, internal: function internal(t, s) {
          if (e.isPlainObject(t)) e.extend(!0, p, t);else {
            if (s === n) return p[t];p[t] = s;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? p.performance.log(arguments) : (p.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), p.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? p.performance.log(arguments) : (p.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), p.verbose.apply(console, arguments)));
        }, error: function error() {
          p.error = Function.prototype.bind.call(console.error, console, g.name + ":"), p.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, s, n;g.performance && (t = new Date().getTime(), n = c || t, s = t - n, c = t, u.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: q, "Execution Time": s })), clearTimeout(p.performance.timer), p.performance.timer = setTimeout(p.performance.display, 100);
          }, display: function display() {
            var t = g.name + ":",
                s = 0;c = !1, clearTimeout(p.performance.timer), e.each(u, function (e, t) {
              s += t["Execution Time"];
            }), t += " " + s + "ms", o && (t += " '" + o + "'"), i.length > 1 && (t += " (" + i.length + ")"), (console.group !== n || console.table !== n) && u.length > 0 && (console.groupCollapsed(t), console.table ? console.table(u) : e.each(u, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), u = [];
          } }, invoke: function invoke(t, s, r) {
          var i,
              o,
              c,
              u = E;return (s = s || f, r = q || r, "string" == typeof t && u !== n && (t = t.split(/[\. ]/), i = t.length - 1, e.each(t, function (s, r) {
            var a = s != i ? r + t[s + 1].charAt(0).toUpperCase() + t[s + 1].slice(1) : t;if (e.isPlainObject(u[a]) && s != i) u = u[a];else {
              if (u[a] !== n) return (o = u[a], !1);if (!e.isPlainObject(u[r]) || s == i) return u[r] !== n ? (o = u[r], !1) : !1;u = u[r];
            }
          })), e.isFunction(o) ? c = o.apply(r, s) : o !== n && (c = o), e.isArray(a) ? a.push(c) : a !== n ? a = [a, c] : c !== n && (a = c), o);
        } }, d ? (E === n && p.initialize(), p.invoke(l)) : (E !== n && E.invoke("destroy"), p.initialize());
    }), a !== n ? a : this);
  }, e.fn.search.settings = { name: "Search Module", namespace: "search", debug: !1, verbose: !0, performance: !0, type: "standard", minCharacters: 1, apiSettings: !1, source: !1, searchFields: ["title", "description"], searchFullText: !0, automatic: "true", hideDelay: 0, searchDelay: 100, maxResults: 7, cache: !0, transition: "scale", duration: 300, easing: "easeOutExpo", onSelect: !1, onResultsAdd: !1, onSearchQuery: function onSearchQuery() {}, onResults: function onResults(e) {}, onResultsOpen: function onResultsOpen() {}, onResultsClose: function onResultsClose() {}, className: { active: "active", empty: "empty", focus: "focus", loading: "loading", pressed: "down" }, error: { source: "Cannot search. No source used, and Semantic API module was not included", noResults: "Your search returned no results", logging: "Error in debug logging, exiting.", noEndpoint: "No search endpoint was specified", noTemplate: "A valid template name was not specified.", serverError: "There was an issue with querying the server.", maxResults: "Results must be an array to use maxResults setting", method: "The method you called is not defined." }, metadata: { cache: "cache", results: "results" }, regExp: { escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, exact: "(?:s|^)" }, selector: { prompt: ".prompt", searchButton: ".search.button", results: ".results", category: ".category", result: ".result", title: ".title, .name" }, templates: { escape: function escape(e) {
        var t = /[&<>"'`]/g,
            s = /[&<>"'`]/,
            n = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;", "`": "&#x60;" },
            r = function r(e) {
          return n[e];
        };return s.test(e) ? e.replace(t, r) : e;
      }, message: function message(e, t) {
        var s = "";return (e !== n && t !== n && (s += "<div class=\"message " + t + "\">", s += "empty" == t ? "<div class=\"header\">No Results</div class=\"header\"><div class=\"description\">" + e + "</div class=\"description\">" : " <div class=\"description\">" + e + "</div>", s += "</div>"), s);
      }, category: function category(t) {
        var s = "",
            r = e.fn.search.settings.templates.escape;return t.results !== n ? (e.each(t.results, function (t, a) {
          a.results !== n && a.results.length > 0 && (s += "<div class=\"category\"><div class=\"name\">" + a.name + "</div>", e.each(a.results, function (e, t) {
            s += "<div class=\"result\">", t.url && (s += "<a href=\"" + t.url + "\"></a>"), t.image !== n && (t.image = r(t.image), s += "<div class=\"image\"> <img src=\"" + t.image + "\" alt=\"\"></div>"), s += "<div class=\"content\">", t.price !== n && (t.price = r(t.price), s += "<div class=\"price\">" + t.price + "</div>"), t.title !== n && (t.title = r(t.title), s += "<div class=\"title\">" + t.title + "</div>"), t.description !== n && (s += "<div class=\"description\">" + t.description + "</div>"), s += "</div></div>";
          }), s += "</div>");
        }), t.action && (s += "<a href=\"" + t.action.url + "\" class=\"action\">" + t.action.text + "</a>"), s) : !1;
      }, standard: function standard(t) {
        var s = "";return t.results !== n ? (e.each(t.results, function (e, t) {
          s += t.url ? "<a class=\"result\" href=\"" + t.url + "\">" : "<a class=\"result\">", t.image !== n && (s += "<div class=\"image\"> <img src=\"" + t.image + "\"></div>"), s += "<div class=\"content\">", t.price !== n && (s += "<div class=\"price\">" + t.price + "</div>"), t.title !== n && (s += "<div class=\"title\">" + t.title + "</div>"), t.description !== n && (s += "<div class=\"description\">" + t.description + "</div>"), s += "</div>", s += "</a>";
        }), t.action && (s += "<a href=\"" + t.action.url + "\" class=\"action\">" + t.action.text + "</a>"), s) : !1;
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/shape", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.shape = function (parameters) {
    var $allModules = $(this),
        $body = $('body'),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var moduleSelector = $allModules.selector || '',
          settings = $.extend(true, {}, $.fn.shape.settings, parameters),

      // internal aliases
      namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          className = settings.className,

      // define namespaces for modules
      eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,

      // selector cache
      $module = $(this),
          $sides = $module.find(selector.sides),
          $side = $module.find(selector.side),

      // private variables
      nextIndex = false,
          $activeSide,
          $nextSide,

      // standard module
      element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides = $(this).find(selector.shape);
          $side = $(this).find(selector.side);
        },

        repaint: function repaint() {
          module.verbose('Forcing repaint event');
          var shape = $sides.get(0) || document.createElement('div'),
              fakeAssignment = shape.offsetWidth;
        },

        animate: function animate(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function (event) {
            module.verbose('Executing animation callback');
            if (event !== undefined) {
              event.stopPropagation();
            }
            module.reset();
            module.set.active();
          };
          settings.beforeChange.call($nextSide.get());
          if (module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module.addClass(className.animating);
            $sides.css(propertyObject).one(module.get.transitionEvent(), callback);
            module.set.duration(settings.duration);
            requestAnimationFrame(function () {
              $module.addClass(className.animating);
              $activeSide.addClass(className.hidden);
            });
          } else {
            callback();
          }
        },

        queue: function queue(method) {
          module.debug('Queueing animation of', method);
          $sides.one(module.get.transitionEvent(), function () {
            module.debug('Executing queued animation');
            setTimeout(function () {
              $module.shape(method);
            }, 0);
          });
        },

        reset: function reset() {
          module.verbose('Animating states reset');
          $module.removeClass(className.animating).attr('style', '').removeAttr('style');
          // removeAttr style does not consistently work in safari
          $sides.attr('style', '').removeAttr('style');
          $side.attr('style', '').removeAttr('style').removeClass(className.hidden);
          $nextSide.removeClass(className.animating).attr('style', '').removeAttr('style');
        },

        is: {
          complete: function complete() {
            return $side.filter('.' + className.active)[0] == $nextSide[0];
          },
          animating: function animating() {
            return $module.hasClass(className.animating);
          }
        },

        set: {

          defaultSide: function defaultSide() {
            $activeSide = $module.find('.' + settings.className.active);
            $nextSide = $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
          },

          duration: function duration(_duration) {
            _duration = _duration || settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            module.verbose('Setting animation duration', _duration);
            $sides.add($side).css({
              '-webkit-transition-duration': _duration,
              '-moz-transition-duration': _duration,
              '-ms-transition-duration': _duration,
              '-o-transition-duration': _duration,
              'transition-duration': _duration
            });
          },

          stageSize: function stageSize() {
            var $clone = $module.clone().addClass(className.loading),
                $activeSide = $clone.find('.' + settings.className.active),
                $nextSide = nextIndex ? $clone.find(selector.side).eq(nextIndex) : $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $clone.find(selector.side).first(),
                newSize = {};
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            newSize = {
              width: $nextSide.outerWidth(),
              height: $nextSide.outerHeight()
            };
            $clone.remove();
            $module.css(newSize);
            module.verbose('Resizing stage to fit new content', newSize);
          },

          nextSide: function nextSide(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if ($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
            }
            module.verbose('Next side manually set to', $nextSide);
          },

          active: function active() {
            module.verbose('Setting new side to active', $nextSide);
            $side.removeClass(className.active);
            $nextSide.addClass(className.active);
            settings.onChange.call($nextSide.get());
            module.set.defaultSide();
          }
        },

        flip: {

          up: function up() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping up', $nextSide);
              module.set.stageSize();
              module.stage.above();
              module.animate(module.get.transform.up());
            } else {
              module.queue('flip up');
            }
          },

          down: function down() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping down', $nextSide);
              module.set.stageSize();
              module.stage.below();
              module.animate(module.get.transform.down());
            } else {
              module.queue('flip down');
            }
          },

          left: function left() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping left', $nextSide);
              module.set.stageSize();
              module.stage.left();
              module.animate(module.get.transform.left());
            } else {
              module.queue('flip left');
            }
          },

          right: function right() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping right', $nextSide);
              module.set.stageSize();
              module.stage.right();
              module.animate(module.get.transform.right());
            } else {
              module.queue('flip right');
            }
          },

          over: function over() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping over', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.over());
            } else {
              module.queue('flip over');
            }
          },

          back: function back() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping back', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.back());
            } else {
              module.queue('flip back');
            }
          }

        },

        get: {

          transform: {
            up: function up() {
              var translate = {
                y: -(($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                z: -($activeSide.outerHeight() / 2)
              };
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(-90deg)'
              };
            },

            down: function down() {
              var translate = {
                y: -(($activeSide.outerHeight() - $nextSide.outerHeight()) / 2),
                z: -($activeSide.outerHeight() / 2)
              };
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(90deg)'
              };
            },

            left: function left() {
              var translate = {
                x: -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2),
                z: -($activeSide.outerWidth() / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'
              };
            },

            right: function right() {
              var translate = {
                x: -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2),
                z: -($activeSide.outerWidth() / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'
              };
            },

            over: function over() {
              var translate = {
                x: -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
              };
            },

            back: function back() {
              var translate = {
                x: -(($activeSide.outerWidth() - $nextSide.outerWidth()) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
              };
            }
          },

          transitionEvent: function transitionEvent() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          },

          nextSide: function nextSide() {
            return $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
          }

        },

        stage: {

          above: function above() {
            var box = {
              origin: ($activeSide.outerHeight() - $nextSide.outerHeight()) / 2,
              depth: {
                active: $nextSide.outerHeight() / 2,
                next: $activeSide.outerHeight() / 2
              }
            };
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'display': 'block',
              'top': box.origin + 'px',
              'transform': 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          below: function below() {
            var box = {
              origin: ($activeSide.outerHeight() - $nextSide.outerHeight()) / 2,
              depth: {
                active: $nextSide.outerHeight() / 2,
                next: $activeSide.outerHeight() / 2
              }
            };
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'display': 'block',
              'top': box.origin + 'px',
              'transform': 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          left: function left() {
            var box = {
              origin: ($activeSide.outerWidth() - $nextSide.outerWidth()) / 2,
              depth: {
                active: $nextSide.outerWidth() / 2,
                next: $activeSide.outerWidth() / 2
              }
            };
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'display': 'block',
              'left': box.origin + 'px',
              'transform': 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          right: function right() {
            var box = {
              origin: ($activeSide.outerWidth() - $nextSide.outerWidth()) / 2,
              depth: {
                active: $nextSide.outerWidth() / 2,
                next: $activeSide.outerWidth() / 2
              }
            };
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'display': 'block',
              'left': box.origin + 'px',
              'transform': 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          behind: function behind() {
            var box = {
              origin: ($activeSide.outerWidth() - $nextSide.outerWidth()) / 2,
              depth: {
                active: $nextSide.outerWidth() / 2,
                next: $activeSide.outerWidth() / 2
              }
            };
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg)'
            });
            $nextSide.addClass(className.animating).css({
              'display': 'block',
              'left': box.origin + 'px',
              'transform': 'rotateY(-180deg)'
            });
          }
        },
        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.shape.settings = {

    // module info
    name: 'Shape',

    // debug content outputted to console
    debug: false,

    // verbose debug output
    verbose: true,

    // performance data output
    performance: true,

    // event namespace
    namespace: 'shape',

    // callback occurs on side change
    beforeChange: function beforeChange() {},
    onChange: function onChange() {},

    // allow animation to same side
    allowRepeats: false,

    // animation duration
    duration: 700,

    // possible errors
    error: {
      side: 'You tried to switch to a side that does not exist.',
      method: 'The method you called is not defined'
    },

    // classnames used
    className: {
      animating: 'animating',
      hidden: 'hidden',
      loading: 'loading',
      active: 'active'
    },

    // selectors used
    selector: {
      sides: '.sides',
      side: '.side'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/shape.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, i, n) {
  "use strict";e.fn.shape = function (a) {
    var o,
        r = e(this),
        s = (e("body"), new Date().getTime()),
        d = [],
        l = arguments[0],
        u = "string" == typeof l,
        g = [].slice.call(arguments, 1),
        c = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (r.each(function () {
      var t,
          f,
          m,
          p = r.selector || "",
          h = e.extend(!0, {}, e.fn.shape.settings, a),
          v = h.namespace,
          b = h.selector,
          x = h.error,
          y = h.className,
          S = "." + v,
          w = "module-" + v,
          C = e(this),
          W = C.find(b.sides),
          z = C.find(b.side),
          k = !1,
          T = this,
          A = C.data(w);m = { initialize: function initialize() {
          m.verbose("Initializing module for", T), m.set.defaultSide(), m.instantiate();
        }, instantiate: function instantiate() {
          m.verbose("Storing instance of module", m), A = m, C.data(w, A);
        }, destroy: function destroy() {
          m.verbose("Destroying previous module for", T), C.removeData(w).off(S);
        }, refresh: function refresh() {
          m.verbose("Refreshing selector cache for", T), C = e(T), W = e(this).find(b.shape), z = e(this).find(b.side);
        }, repaint: function repaint() {
          m.verbose("Forcing repaint event");{
            var e = W.get(0) || i.createElement("div");e.offsetWidth;
          }
        }, animate: function animate(e, i) {
          m.verbose("Animating box with properties", e), i = i || function (e) {
            m.verbose("Executing animation callback"), e !== n && e.stopPropagation(), m.reset(), m.set.active();
          }, h.beforeChange.call(f.get()), m.get.transitionEvent() ? (m.verbose("Starting CSS animation"), C.addClass(y.animating), W.css(e).one(m.get.transitionEvent(), i), m.set.duration(h.duration), c(function () {
            C.addClass(y.animating), t.addClass(y.hidden);
          })) : i();
        }, queue: function queue(e) {
          m.debug("Queueing animation of", e), W.one(m.get.transitionEvent(), function () {
            m.debug("Executing queued animation"), setTimeout(function () {
              C.shape(e);
            }, 0);
          });
        }, reset: function reset() {
          m.verbose("Animating states reset"), C.removeClass(y.animating).attr("style", "").removeAttr("style"), W.attr("style", "").removeAttr("style"), z.attr("style", "").removeAttr("style").removeClass(y.hidden), f.removeClass(y.animating).attr("style", "").removeAttr("style");
        }, is: { complete: function complete() {
            return z.filter("." + y.active)[0] == f[0];
          }, animating: function animating() {
            return C.hasClass(y.animating);
          } }, set: { defaultSide: function defaultSide() {
            t = C.find("." + h.className.active), f = t.next(b.side).length > 0 ? t.next(b.side) : C.find(b.side).first(), k = !1, m.verbose("Active side set to", t), m.verbose("Next side set to", f);
          }, duration: function duration(e) {
            e = e || h.duration, e = "number" == typeof e ? e + "ms" : e, m.verbose("Setting animation duration", e), W.add(z).css({ "-webkit-transition-duration": e, "-moz-transition-duration": e, "-ms-transition-duration": e, "-o-transition-duration": e, "transition-duration": e });
          }, stageSize: function stageSize() {
            var e = C.clone().addClass(y.loading),
                t = e.find("." + h.className.active),
                i = k ? e.find(b.side).eq(k) : t.next(b.side).length > 0 ? t.next(b.side) : e.find(b.side).first(),
                n = {};t.removeClass(y.active), i.addClass(y.active), e.insertAfter(C), n = { width: i.outerWidth(), height: i.outerHeight() }, e.remove(), C.css(n), m.verbose("Resizing stage to fit new content", n);
          }, nextSide: function nextSide(e) {
            k = e, f = z.filter(e), k = z.index(f), 0 === f.length && (m.set.defaultSide(), m.error(x.side)), m.verbose("Next side manually set to", f);
          }, active: function active() {
            m.verbose("Setting new side to active", f), z.removeClass(y.active), f.addClass(y.active), h.onChange.call(f.get()), m.set.defaultSide();
          } }, flip: { up: function up() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip up") : (m.debug("Flipping up", f), m.set.stageSize(), m.stage.above(), m.animate(m.get.transform.up()))) : void m.debug("Side already visible", f);
          }, down: function down() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip down") : (m.debug("Flipping down", f), m.set.stageSize(), m.stage.below(), m.animate(m.get.transform.down()))) : void m.debug("Side already visible", f);
          }, left: function left() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip left") : (m.debug("Flipping left", f), m.set.stageSize(), m.stage.left(), m.animate(m.get.transform.left()))) : void m.debug("Side already visible", f);
          }, right: function right() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip right") : (m.debug("Flipping right", f), m.set.stageSize(), m.stage.right(), m.animate(m.get.transform.right()))) : void m.debug("Side already visible", f);
          }, over: function over() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip over") : (m.debug("Flipping over", f), m.set.stageSize(), m.stage.behind(), m.animate(m.get.transform.over()))) : void m.debug("Side already visible", f);
          }, back: function back() {
            return !m.is.complete() || m.is.animating() || h.allowRepeats ? void (m.is.animating() ? m.queue("flip back") : (m.debug("Flipping back", f), m.set.stageSize(), m.stage.behind(), m.animate(m.get.transform.back()))) : void m.debug("Side already visible", f);
          } }, get: { transform: { up: function up() {
              var e = { y: -((t.outerHeight() - f.outerHeight()) / 2), z: -(t.outerHeight() / 2) };return { transform: "translateY(" + e.y + "px) translateZ(" + e.z + "px) rotateX(-90deg)" };
            }, down: function down() {
              var e = { y: -((t.outerHeight() - f.outerHeight()) / 2), z: -(t.outerHeight() / 2) };return { transform: "translateY(" + e.y + "px) translateZ(" + e.z + "px) rotateX(90deg)" };
            }, left: function left() {
              var e = { x: -((t.outerWidth() - f.outerWidth()) / 2), z: -(t.outerWidth() / 2) };return { transform: "translateX(" + e.x + "px) translateZ(" + e.z + "px) rotateY(90deg)" };
            }, right: function right() {
              var e = { x: -((t.outerWidth() - f.outerWidth()) / 2), z: -(t.outerWidth() / 2) };return { transform: "translateX(" + e.x + "px) translateZ(" + e.z + "px) rotateY(-90deg)" };
            }, over: function over() {
              var e = { x: -((t.outerWidth() - f.outerWidth()) / 2) };return { transform: "translateX(" + e.x + "px) rotateY(180deg)" };
            }, back: function back() {
              var e = { x: -((t.outerWidth() - f.outerWidth()) / 2) };return { transform: "translateX(" + e.x + "px) rotateY(-180deg)" };
            } }, transitionEvent: function transitionEvent() {
            var e,
                t = i.createElement("element"),
                a = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in a) if (t.style[e] !== n) return a[e];
          }, nextSide: function nextSide() {
            return t.next(b.side).length > 0 ? t.next(b.side) : C.find(b.side).first();
          } }, stage: { above: function above() {
            var e = { origin: (t.outerHeight() - f.outerHeight()) / 2, depth: { active: f.outerHeight() / 2, next: t.outerHeight() / 2 } };m.verbose("Setting the initial animation position as above", f, e), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ display: "block", top: e.origin + "px", transform: "rotateX(90deg) translateZ(" + e.depth.next + "px)" });
          }, below: function below() {
            var e = { origin: (t.outerHeight() - f.outerHeight()) / 2, depth: { active: f.outerHeight() / 2, next: t.outerHeight() / 2 } };m.verbose("Setting the initial animation position as below", f, e), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ display: "block", top: e.origin + "px", transform: "rotateX(-90deg) translateZ(" + e.depth.next + "px)" });
          }, left: function left() {
            var e = { origin: (t.outerWidth() - f.outerWidth()) / 2, depth: { active: f.outerWidth() / 2, next: t.outerWidth() / 2 } };m.verbose("Setting the initial animation position as left", f, e), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ display: "block", left: e.origin + "px", transform: "rotateY(-90deg) translateZ(" + e.depth.next + "px)" });
          }, right: function right() {
            var e = { origin: (t.outerWidth() - f.outerWidth()) / 2, depth: { active: f.outerWidth() / 2, next: t.outerWidth() / 2 } };m.verbose("Setting the initial animation position as left", f, e), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ display: "block", left: e.origin + "px", transform: "rotateY(90deg) translateZ(" + e.depth.next + "px)" });
          }, behind: function behind() {
            var e = { origin: (t.outerWidth() - f.outerWidth()) / 2, depth: { active: f.outerWidth() / 2, next: t.outerWidth() / 2 } };m.verbose("Setting the initial animation position as behind", f, e), t.css({ transform: "rotateY(0deg)" }), f.addClass(y.animating).css({ display: "block", left: e.origin + "px", transform: "rotateY(-180deg)" });
          } }, setting: function setting(t, i) {
          if ((m.debug("Changing setting", t, i), e.isPlainObject(t))) e.extend(!0, h, t);else {
            if (i === n) return h[t];h[t] = i;
          }
        }, internal: function internal(t, i) {
          if (e.isPlainObject(t)) e.extend(!0, m, t);else {
            if (i === n) return m[t];m[t] = i;
          }
        }, debug: function debug() {
          h.debug && (h.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, h.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          h.verbose && h.debug && (h.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, h.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, h.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, i, n;h.performance && (t = new Date().getTime(), n = s || t, i = t - n, s = t, d.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": i })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 100);
          }, display: function display() {
            var t = h.name + ":",
                i = 0;s = !1, clearTimeout(m.performance.timer), e.each(d, function (e, t) {
              i += t["Execution Time"];
            }), t += " " + i + "ms", p && (t += " '" + p + "'"), r.length > 1 && (t += " (" + r.length + ")"), (console.group !== n || console.table !== n) && d.length > 0 && (console.groupCollapsed(t), console.table ? console.table(d) : e.each(d, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), d = [];
          } }, invoke: function invoke(t, i, a) {
          var r,
              s,
              d,
              l = A;return (i = i || g, a = T || a, "string" == typeof t && l !== n && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (i, a) {
            var o = i != r ? a + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;if (e.isPlainObject(l[o]) && i != r) l = l[o];else {
              if (l[o] !== n) return (s = l[o], !1);if (!e.isPlainObject(l[a]) || i == r) return l[a] !== n ? (s = l[a], !1) : !1;l = l[a];
            }
          })), e.isFunction(s) ? d = s.apply(a, i) : s !== n && (d = s), e.isArray(o) ? o.push(d) : o !== n ? o = [o, d] : d !== n && (o = d), s);
        } }, u ? (A === n && m.initialize(), m.invoke(l)) : (A !== n && A.invoke("destroy"), m.initialize());
    }), o !== n ? o : this);
  }, e.fn.shape.settings = { name: "Shape", debug: !1, verbose: !0, performance: !0, namespace: "shape", beforeChange: function beforeChange() {}, onChange: function onChange() {}, allowRepeats: !1, duration: 700, error: { side: "You tried to switch to a side that does not exist.", method: "The method you called is not defined" }, className: { animating: "animating", hidden: "hidden", loading: "loading", active: "active" }, selector: { sides: ".sides", side: ".side" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/sidebar", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.sidebar = function (parameters) {
    var $allModules = $(this),
        $window = $(window),
        $document = $(document),
        $html = $('html'),
        $head = $('head'),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sidebar.settings, parameters) : $.extend({}, $.fn.sidebar.settings),
          selector = settings.selector,
          className = settings.className,
          namespace = settings.namespace,
          regExp = settings.regExp,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $sidebars = $module.children(selector.sidebar),
          $fixed = $context.children(selector.fixed),
          $pusher = $context.children(selector.pusher),
          $style,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          currentScroll,
          transitionEvent,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          // cache on initialize
          if (settings.useLegacy == 'auto' && module.is.legacy() || settings.useLegacy === true) {
            settings.transition = 'overlay';
            settings.useLegacy = true;
          }

          if (module.is.ios()) {
            module.set.ios();
          }

          // avoids locking rendering if initialized in onReady
          if (settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
          } else {
            module.setup.layout();
          }

          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        create: {
          id: function id() {
            _id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + _id;
            module.verbose('Creating unique id for element', _id);
          }
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', $module);
          module.remove.direction();
          $module.off(eventNamespace).removeData(moduleNamespace);
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
        },

        event: {
          clickaway: function clickaway(event) {
            var clickedInPusher = $pusher.find(event.target).length > 0 || $pusher.is(event.target),
                clickedContext = $context.is(event.target);
            if (clickedInPusher) {
              module.verbose('User clicked on dimmed page');
              module.hide();
            }
            if (clickedContext) {
              module.verbose('User clicked on dimmable context (scaled out page)');
              module.hide();
            }
          },
          touch: function touch(event) {},
          containScroll: function containScroll(event) {
            if (element.scrollTop <= 0) {
              element.scrollTop = 1;
            }
            if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
            }
          },
          scroll: function scroll(event) {
            if ($(event.target).closest(selector.sidebar).length === 0) {
              event.preventDefault();
            }
          }
        },

        bind: {
          clickaway: function clickaway() {
            module.verbose('Adding clickaway events to context', $context);
            if (settings.closable) {
              $context.on('click' + elementNamespace, module.event.clickaway).on('touchend' + elementNamespace, module.event.clickaway);
            }
          },
          scrollLock: function scrollLock() {
            if (settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window.on('DOMMouseScroll' + elementNamespace, module.event.scroll);
            }
            module.verbose('Adding events to contain sidebar scroll');
            $document.on('touchmove' + elementNamespace, module.event.touch);
            $module.on('scroll' + eventNamespace, module.event.containScroll);
          }
        },
        unbind: {
          clickaway: function clickaway() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
          },
          scrollLock: function scrollLock() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
          }
        },

        add: {
          bodyCSS: function bodyCSS() {
            var width = $module.outerWidth(),
                height = $module.outerHeight(),
                direction = module.get.direction(),
                distance = {
              left: width,
              right: -width,
              top: height,
              bottom: -height
            },
                style;
            if (module.is.rtl()) {
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
            }

            style = '<style title="' + namespace + '">';

            if (direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
            } else if (direction === 'top' || direction == 'bottom') {
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
            }

            /* IE is only browser not to create context with transforms */
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
            if (module.is.ie()) {
              if (direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
              } else if (direction === 'top' || direction == 'bottom') {
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
              }
              /* opposite sides visible forces content overlay */
              style += '' + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,' + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0px, 0, 0);' + '           transform: translate3d(0px, 0, 0);' + ' }';
            }
            style += '</style>';
            $head.append(style);
            $style = $('style[title=' + namespace + ']');
            module.debug('Adding sizing css to head', $style);
          }
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $context = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher = $context.children(selector.pusher);
          $fixed = $context.children(selector.fixed);
        },

        refreshSidebars: function refreshSidebars() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
        },

        repaint: function repaint() {
          module.verbose('Forcing repaint event');
          element.style.display = 'none';
          element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display = '';
        },

        setup: {
          layout: function layout() {
            if ($context.children(selector.pusher).length === 0) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context.children().not(selector.omitted).not($sidebars).wrapAll($pusher);
              module.refresh();
            }
            if ($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
            }
            module.set.pushable();
            module.set.direction();
          }
        },

        attachEvents: function attachEvents(selector, event) {
          var $toggle = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle.on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound, selector);
          }
        },

        show: function show(callback) {
          var animateMethod = settings.useLegacy === true ? module.legacyPushPage : module.pushPage;
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.hidden()) {
            module.refreshSidebars();
            if (settings.overlay) {
              module.error(error.overlay);
              settings.transition = 'overlay';
            }
            module.refresh();
            if (module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if (settings.exclusive) {
                // if not overlay queue animation after hide
                if (settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
                } else {
                  module.hideOthers();
                }
              } else {
                settings.transition = 'overlay';
              }
            }
            animateMethod(function () {
              callback.call(element);
              settings.onShow.call(element);
            });
            settings.onChange.call(element);
            settings.onVisible.call(element);
          } else {
            module.debug('Sidebar is already visible');
          }
        },

        hide: function hide(callback) {
          var animateMethod = settings.useLegacy === true ? module.legacyPullPage : module.pullPage;
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            animateMethod(function () {
              callback.call(element);
              settings.onHidden.call(element);
            });
            settings.onChange.call(element);
            settings.onHide.call(element);
          }
        },

        othersAnimating: function othersAnimating() {
          return $sidebars.not($module).filter('.' + className.animating).length > 0;
        },
        othersVisible: function othersVisible() {
          return $sidebars.not($module).filter('.' + className.visible).length > 0;
        },
        othersActive: function othersActive() {
          return module.othersVisible() || module.othersAnimating();
        },

        hideOthers: function hideOthers(callback) {
          var $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
              sidebarCount = $otherSidebars.length,
              callbackCount = 0;
          callback = callback || function () {};
          $otherSidebars.sidebar('hide', function () {
            callbackCount++;
            if (callbackCount == sidebarCount) {
              callback();
            }
          });
        },

        toggle: function toggle() {
          module.verbose('Determining toggled direction');
          if (module.is.hidden()) {
            module.show();
          } else {
            module.hide();
          }
        },

        pushPage: function pushPage(callback) {
          var transition = module.get.transition(),
              $transition = transition == 'safe' ? $context : transition === 'overlay' || module.othersActive() ? $module : $pusher,
              animate,
              transitionEnd;
          callback = $.isFunction(callback) ? callback : function () {};
          if (settings.transition == 'scale down') {
            module.scrollToTop();
          }
          module.set.transition(transition);
          module.repaint();
          animate = function () {
            module.bind.clickaway();
            module.add.bodyCSS();
            module.set.animating();
            module.set.visible();
            if (!module.othersVisible()) {
              if (settings.dimPage) {
                $pusher.addClass(className.dimmed);
              }
            }
          };
          transitionEnd = function (event) {
            if (event.target == $transition[0]) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        pullPage: function pullPage(callback) {
          var transition = module.get.transition(),
              $transition = transition == 'safe' ? $context : transition == 'overlay' || module.othersActive() ? $module : $pusher,
              animate,
              transitionEnd;
          callback = $.isFunction(callback) ? callback : function () {};
          module.verbose('Removing context push state', module.get.direction());

          module.set.transition(transition);
          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function () {
            module.set.animating();
            module.remove.visible();
            if (settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
            }
          };
          transitionEnd = function (event) {
            if (event.target == $transition[0]) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.bodyCSS();
              if (transition == 'scale down' || settings.returnScroll && module.is.mobile()) {
                module.scrollBack();
              }
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        legacyPushPage: function legacyPushPage(callback) {
          var distance = $module.width(),
              direction = module.get.direction(),
              properties = {};
          distance = distance || $module.width();
          callback = $.isFunction(callback) ? callback : function () {};
          properties[direction] = distance;
          module.debug('Using javascript to push context', properties);
          module.set.visible();
          module.set.transition();
          module.set.animating();
          if (settings.dimPage) {
            $pusher.addClass(className.dimmed);
          }
          $context.css('position', 'relative').animate(properties, settings.duration, settings.easing, function () {
            module.remove.animating();
            module.bind.clickaway();
            callback.call(element);
          });
        },
        legacyPullPage: function legacyPullPage(callback) {
          var distance = 0,
              direction = module.get.direction(),
              properties = {};
          distance = distance || $module.width();
          callback = $.isFunction(callback) ? callback : function () {};
          properties[direction] = '0px';
          module.debug('Using javascript to pull context', properties);
          module.unbind.clickaway();
          module.set.animating();
          module.remove.visible();
          if (settings.dimPage && !module.othersActive()) {
            $pusher.removeClass(className.dimmed);
          }
          $context.css('position', 'relative').animate(properties, settings.duration, settings.easing, function () {
            module.remove.animating();
            callback.call(element);
          });
        },

        scrollToTop: function scrollToTop() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
        },

        scrollBack: function scrollBack() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
        },

        set: {
          // html
          ios: function ios() {
            $html.addClass(className.ios);
          },

          // container
          pushed: function pushed() {
            $context.addClass(className.pushed);
          },
          pushable: function pushable() {
            $context.addClass(className.pushable);
          },

          // sidebar
          active: function active() {
            $module.addClass(className.active);
          },
          animating: function animating() {
            $module.addClass(className.animating);
          },
          transition: function transition(_transition) {
            _transition = _transition || module.get.transition();
            $module.addClass(_transition);
          },
          direction: function direction(_direction) {
            _direction = _direction || module.get.direction();
            $module.addClass(className[_direction]);
          },
          visible: function visible() {
            $module.addClass(className.visible);
          },
          overlay: function overlay() {
            $module.addClass(className.overlay);
          }
        },
        remove: {

          bodyCSS: function bodyCSS() {
            module.debug('Removing body css styles', $style);
            if ($style && $style.length > 0) {
              $style.remove();
            }
          },

          // context
          pushed: function pushed() {
            $context.removeClass(className.pushed);
          },
          pushable: function pushable() {
            $context.removeClass(className.pushable);
          },

          // sidebar
          active: function active() {
            $module.removeClass(className.active);
          },
          animating: function animating() {
            $module.removeClass(className.animating);
          },
          transition: function transition(_transition2) {
            _transition2 = _transition2 || module.get.transition();
            $module.removeClass(_transition2);
          },
          direction: function direction(_direction2) {
            _direction2 = _direction2 || module.get.direction();
            $module.removeClass(className[_direction2]);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          overlay: function overlay() {
            $module.removeClass(className.overlay);
          }
        },

        get: {
          direction: function direction() {
            if ($module.hasClass(className.top)) {
              return className.top;
            } else if ($module.hasClass(className.right)) {
              return className.right;
            } else if ($module.hasClass(className.bottom)) {
              return className.bottom;
            }
            return className.left;
          },
          transition: function transition() {
            var direction = module.get.direction(),
                transition;
            transition = module.is.mobile() ? settings.mobileTransition == 'auto' ? settings.defaultTransition.mobile[direction] : settings.mobileTransition : settings.transition == 'auto' ? settings.defaultTransition.computer[direction] : settings.transition;
            module.verbose('Determined transition', transition);
            return transition;
          },
          transitionEvent: function transitionEvent() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          }
        },

        is: {

          ie: function ie() {
            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,
                isIE = ('ActiveXObject' in window);
            return isIE11 || isIE;
          },

          legacy: function legacy() {
            var element = document.createElement('div'),
                transforms = {
              'webkitTransform': '-webkit-transform',
              'OTransform': '-o-transform',
              'msTransform': '-ms-transform',
              'MozTransform': '-moz-transform',
              'transform': 'transform'
            },
                has3D;

            // Add it to the body to get the computed style.
            document.body.insertBefore(element, null);
            for (var transform in transforms) {
              if (element.style[transform] !== undefined) {
                element.style[transform] = 'translate3d(1px,1px,1px)';
                has3D = window.getComputedStyle(element).getPropertyValue(transforms[transform]);
              }
            }
            document.body.removeChild(element);
            return !(has3D !== undefined && has3D.length > 0 && has3D !== 'none');
          },
          ios: function ios() {
            var userAgent = navigator.userAgent,
                isIOS = userAgent.match(regExp.ios);
            if (isIOS) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
            } else {
              return false;
            }
          },
          mobile: function mobile() {
            var userAgent = navigator.userAgent,
                isMobile = userAgent.match(regExp.mobile);
            if (isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
            } else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
            }
          },
          hidden: function hidden() {
            return !module.is.visible();
          },
          visible: function visible() {
            return $module.hasClass(className.visible);
          },
          // alias
          open: function open() {
            return module.is.visible();
          },
          closed: function closed() {
            return module.is.hidden();
          },
          vertical: function vertical() {
            return $module.hasClass(className.top);
          },
          animating: function animating() {
            return $context.hasClass(className.animating);
          },
          rtl: function rtl() {
            return $module.css('direction') == 'rtl';
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          module.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.sidebar.settings = {

    name: 'Sidebar',
    namespace: 'sidebar',

    debug: false,
    verbose: true,
    performance: true,

    transition: 'auto',
    mobileTransition: 'auto',

    defaultTransition: {
      computer: {
        left: 'uncover',
        right: 'uncover',
        top: 'overlay',
        bottom: 'overlay'
      },
      mobile: {
        left: 'uncover',
        right: 'uncover',
        top: 'overlay',
        bottom: 'overlay'
      }
    },

    context: 'body',
    exclusive: false,
    closable: true,
    dimPage: true,
    scrollLock: false,
    returnScroll: false,
    delaySetup: false,

    useLegacy: 'auto',
    duration: 500,
    easing: 'easeInOutQuint',

    onChange: function onChange() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    onHidden: function onHidden() {},
    onVisible: function onVisible() {},

    className: {
      active: 'active',
      animating: 'animating',
      dimmed: 'dimmed',
      ios: 'ios',
      pushable: 'pushable',
      pushed: 'pushed',
      right: 'right',
      top: 'top',
      left: 'left',
      bottom: 'bottom',
      visible: 'visible'
    },

    selector: {
      fixed: '.fixed',
      omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
      pusher: '.pusher',
      sidebar: '.ui.sidebar'
    },

    regExp: {
      ios: /(iPad|iPhone|iPod)/g,
      mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
    },

    error: {
      method: 'The method you called is not defined.',
      pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
      movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
      overlay: 'The overlay setting is no longer supported, use animation: overlay',
      notFound: 'There were no elements that matched the specified selector'
    }

  };

  // Adds easing
  $.extend($.easing, {
    easeInOutQuint: function easeInOutQuint(x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    }
  });
})(jQuery, window, document);

//event.stopPropagation();
});

require.register("web/static/css/components/sidebar.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, i, n, t) {
  "use strict";e.fn.sidebar = function (o) {
    var r,
        s = e(this),
        a = e(i),
        l = e(n),
        c = e("html"),
        u = e("head"),
        d = s.selector || "",
        f = new Date().getTime(),
        m = [],
        b = arguments[0],
        g = "string" == typeof b,
        v = [].slice.call(arguments, 1),
        h = i.requestAnimationFrame || i.mozRequestAnimationFrame || i.webkitRequestAnimationFrame || i.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (s.each(function () {
      var s,
          p,
          y,
          w,
          k,
          x,
          T = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.sidebar.settings, o) : e.extend({}, e.fn.sidebar.settings),
          C = T.selector,
          S = T.className,
          A = T.namespace,
          P = T.regExp,
          F = T.error,
          O = "." + A,
          E = "module-" + A,
          H = e(this),
          L = e(T.context),
          j = H.children(C.sidebar),
          D = L.children(C.fixed),
          z = L.children(C.pusher),
          M = this,
          R = H.data(E);x = { initialize: function initialize() {
          x.debug("Initializing sidebar", o), x.create.id(), k = x.get.transitionEvent(), ("auto" == T.useLegacy && x.is.legacy() || T.useLegacy === !0) && (T.transition = "overlay", T.useLegacy = !0), x.is.ios() && x.set.ios(), T.delaySetup ? h(x.setup.layout) : x.setup.layout(), x.instantiate();
        }, instantiate: function instantiate() {
          x.verbose("Storing instance of module", x), R = x, H.data(E, x);
        }, create: { id: function id() {
            y = (Math.random().toString(16) + "000000000").substr(2, 8), p = "." + y, x.verbose("Creating unique id for element", y);
          } }, destroy: function destroy() {
          x.verbose("Destroying previous module for", H), x.remove.direction(), H.off(O).removeData(E), L.off(p), a.off(p), l.off(p);
        }, event: { clickaway: function clickaway(e) {
            var i = z.find(e.target).length > 0 || z.is(e.target),
                n = L.is(e.target);i && (x.verbose("User clicked on dimmed page"), x.hide()), n && (x.verbose("User clicked on dimmable context (scaled out page)"), x.hide());
          }, touch: function touch(e) {}, containScroll: function containScroll(e) {
            M.scrollTop <= 0 && (M.scrollTop = 1), M.scrollTop + M.offsetHeight >= M.scrollHeight && (M.scrollTop = M.scrollHeight - M.offsetHeight - 1);
          }, scroll: function scroll(i) {
            0 === e(i.target).closest(C.sidebar).length && i.preventDefault();
          } }, bind: { clickaway: function clickaway() {
            x.verbose("Adding clickaway events to context", L), T.closable && L.on("click" + p, x.event.clickaway).on("touchend" + p, x.event.clickaway);
          }, scrollLock: function scrollLock() {
            T.scrollLock && (x.debug("Disabling page scroll"), a.on("DOMMouseScroll" + p, x.event.scroll)), x.verbose("Adding events to contain sidebar scroll"), l.on("touchmove" + p, x.event.touch), H.on("scroll" + O, x.event.containScroll);
          } }, unbind: { clickaway: function clickaway() {
            x.verbose("Removing clickaway events from context", L), L.off(p);
          }, scrollLock: function scrollLock() {
            x.verbose("Removing scroll lock from page"), l.off(p), a.off(p), H.off("scroll" + O);
          } }, add: { bodyCSS: function bodyCSS() {
            var i,
                n = H.outerWidth(),
                t = H.outerHeight(),
                o = x.get.direction(),
                r = { left: n, right: -n, top: t, bottom: -t };x.is.rtl() && (x.verbose("RTL detected, flipping widths"), r.left = -n, r.right = n), i = "<style title=\"" + A + "\">", "left" === o || "right" === o ? (x.debug("Adding CSS rules for animation distance", n), i += " .ui.visible." + o + ".sidebar ~ .fixed, .ui.visible." + o + ".sidebar ~ .pusher {   -webkit-transform: translate3d(" + r[o] + "px, 0, 0);           transform: translate3d(" + r[o] + "px, 0, 0); }") : ("top" === o || "bottom" == o) && (i += " .ui.visible." + o + ".sidebar ~ .fixed, .ui.visible." + o + ".sidebar ~ .pusher {   -webkit-transform: translate3d(0, " + r[o] + "px, 0);           transform: translate3d(0, " + r[o] + "px, 0); }"), x.is.ie() && ("left" === o || "right" === o ? (x.debug("Adding CSS rules for animation distance", n), i += " body.pushable > .ui.visible." + o + ".sidebar ~ .pusher:after {   -webkit-transform: translate3d(" + r[o] + "px, 0, 0);           transform: translate3d(" + r[o] + "px, 0, 0); }") : ("top" === o || "bottom" == o) && (i += " body.pushable > .ui.visible." + o + ".sidebar ~ .pusher:after {   -webkit-transform: translate3d(0, " + r[o] + "px, 0);           transform: translate3d(0, " + r[o] + "px, 0); }"), i += " body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after, body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {   -webkit-transform: translate3d(0px, 0, 0);           transform: translate3d(0px, 0, 0); }"), i += "</style>", u.append(i), s = e("style[title=" + A + "]"), x.debug("Adding sizing css to head", s);
          } }, refresh: function refresh() {
          x.verbose("Refreshing selector cache"), L = e(T.context), j = L.children(C.sidebar), z = L.children(C.pusher), D = L.children(C.fixed);
        }, refreshSidebars: function refreshSidebars() {
          x.verbose("Refreshing other sidebars"), j = L.children(C.sidebar);
        }, repaint: function repaint() {
          x.verbose("Forcing repaint event"), M.style.display = "none", M.offsetHeight, M.scrollTop = M.scrollTop, M.style.display = "";
        }, setup: { layout: function layout() {
            0 === L.children(C.pusher).length && (x.debug("Adding wrapper element for sidebar"), x.error(F.pusher), z = e("<div class=\"pusher\" />"), L.children().not(C.omitted).not(j).wrapAll(z), x.refresh()), (0 === H.nextAll(C.pusher).length || H.nextAll(C.pusher)[0] !== z[0]) && (x.debug("Moved sidebar to correct parent element"), x.error(F.movedSidebar, M), H.detach().prependTo(L), x.refresh()), x.set.pushable(), x.set.direction();
          } }, attachEvents: function attachEvents(i, n) {
          var t = e(i);n = e.isFunction(x[n]) ? x[n] : x.toggle, t.length > 0 ? (x.debug("Attaching sidebar events to element", i, n), t.on("click" + O, n)) : x.error(F.notFound, i);
        }, show: function show(i) {
          var n = T.useLegacy === !0 ? x.legacyPushPage : x.pushPage;if ((i = e.isFunction(i) ? i : function () {}, x.is.hidden())) {
            if ((x.refreshSidebars(), T.overlay && (x.error(F.overlay), T.transition = "overlay"), x.refresh(), x.othersActive())) if ((x.debug("Other sidebars currently visible"), T.exclusive)) {
              if ("overlay" != T.transition) return void x.hideOthers(x.show);x.hideOthers();
            } else T.transition = "overlay";n(function () {
              i.call(M), T.onShow.call(M);
            }), T.onChange.call(M), T.onVisible.call(M);
          } else x.debug("Sidebar is already visible");
        }, hide: function hide(i) {
          var n = T.useLegacy === !0 ? x.legacyPullPage : x.pullPage;i = e.isFunction(i) ? i : function () {}, (x.is.visible() || x.is.animating()) && (x.debug("Hiding sidebar", i), x.refreshSidebars(), n(function () {
            i.call(M), T.onHidden.call(M);
          }), T.onChange.call(M), T.onHide.call(M));
        }, othersAnimating: function othersAnimating() {
          return j.not(H).filter("." + S.animating).length > 0;
        }, othersVisible: function othersVisible() {
          return j.not(H).filter("." + S.visible).length > 0;
        }, othersActive: function othersActive() {
          return x.othersVisible() || x.othersAnimating();
        }, hideOthers: function hideOthers(e) {
          var i = j.not(H).filter("." + S.visible),
              n = i.length,
              t = 0;e = e || function () {}, i.sidebar("hide", function () {
            t++, t == n && e();
          });
        }, toggle: function toggle() {
          x.verbose("Determining toggled direction"), x.is.hidden() ? x.show() : x.hide();
        }, pushPage: function pushPage(i) {
          var n,
              t,
              o = x.get.transition(),
              r = "safe" == o ? L : "overlay" === o || x.othersActive() ? H : z;i = e.isFunction(i) ? i : function () {}, "scale down" == T.transition && x.scrollToTop(), x.set.transition(o), x.repaint(), n = function () {
            x.bind.clickaway(), x.add.bodyCSS(), x.set.animating(), x.set.visible(), x.othersVisible() || T.dimPage && z.addClass(S.dimmed);
          }, t = function (e) {
            e.target == r[0] && (r.off(k + p, t), x.remove.animating(), x.bind.scrollLock(), i.call(M));
          }, r.off(k + p), r.on(k + p, t), h(n);
        }, pullPage: function pullPage(i) {
          var n,
              t,
              o = x.get.transition(),
              r = "safe" == o ? L : "overlay" == o || x.othersActive() ? H : z;i = e.isFunction(i) ? i : function () {}, x.verbose("Removing context push state", x.get.direction()), x.set.transition(o), x.unbind.clickaway(), x.unbind.scrollLock(), n = function () {
            x.set.animating(), x.remove.visible(), T.dimPage && !x.othersVisible() && z.removeClass(S.dimmed);
          }, t = function (e) {
            e.target == r[0] && (r.off(k + p, t), x.remove.animating(), x.remove.transition(), x.remove.bodyCSS(), ("scale down" == o || T.returnScroll && x.is.mobile()) && x.scrollBack(), i.call(M));
          }, r.off(k + p), r.on(k + p, t), h(n);
        }, legacyPushPage: function legacyPushPage(i) {
          var n = H.width(),
              t = x.get.direction(),
              o = {};n = n || H.width(), i = e.isFunction(i) ? i : function () {}, o[t] = n, x.debug("Using javascript to push context", o), x.set.visible(), x.set.transition(), x.set.animating(), T.dimPage && z.addClass(S.dimmed), L.css("position", "relative").animate(o, T.duration, T.easing, function () {
            x.remove.animating(), x.bind.clickaway(), i.call(M);
          });
        }, legacyPullPage: function legacyPullPage(i) {
          var n = 0,
              t = x.get.direction(),
              o = {};n = n || H.width(), i = e.isFunction(i) ? i : function () {}, o[t] = "0px", x.debug("Using javascript to pull context", o), x.unbind.clickaway(), x.set.animating(), x.remove.visible(), T.dimPage && !x.othersActive() && z.removeClass(S.dimmed), L.css("position", "relative").animate(o, T.duration, T.easing, function () {
            x.remove.animating(), i.call(M);
          });
        }, scrollToTop: function scrollToTop() {
          x.verbose("Scrolling to top of page to avoid animation issues"), w = e(i).scrollTop(), H.scrollTop(0), i.scrollTo(0, 0);
        }, scrollBack: function scrollBack() {
          x.verbose("Scrolling back to original page position"), i.scrollTo(0, w);
        }, set: { ios: function ios() {
            c.addClass(S.ios);
          }, pushed: function pushed() {
            L.addClass(S.pushed);
          }, pushable: function pushable() {
            L.addClass(S.pushable);
          }, active: function active() {
            H.addClass(S.active);
          }, animating: function animating() {
            H.addClass(S.animating);
          }, transition: function transition(e) {
            e = e || x.get.transition(), H.addClass(e);
          }, direction: function direction(e) {
            e = e || x.get.direction(), H.addClass(S[e]);
          }, visible: function visible() {
            H.addClass(S.visible);
          }, overlay: function overlay() {
            H.addClass(S.overlay);
          } }, remove: { bodyCSS: function bodyCSS() {
            x.debug("Removing body css styles", s), s && s.length > 0 && s.remove();
          }, pushed: function pushed() {
            L.removeClass(S.pushed);
          }, pushable: function pushable() {
            L.removeClass(S.pushable);
          }, active: function active() {
            H.removeClass(S.active);
          }, animating: function animating() {
            H.removeClass(S.animating);
          }, transition: function transition(e) {
            e = e || x.get.transition(), H.removeClass(e);
          }, direction: function direction(e) {
            e = e || x.get.direction(), H.removeClass(S[e]);
          }, visible: function visible() {
            H.removeClass(S.visible);
          }, overlay: function overlay() {
            H.removeClass(S.overlay);
          } }, get: { direction: function direction() {
            return H.hasClass(S.top) ? S.top : H.hasClass(S.right) ? S.right : H.hasClass(S.bottom) ? S.bottom : S.left;
          }, transition: function transition() {
            var e,
                i = x.get.direction();return (e = x.is.mobile() ? "auto" == T.mobileTransition ? T.defaultTransition.mobile[i] : T.mobileTransition : "auto" == T.transition ? T.defaultTransition.computer[i] : T.transition, x.verbose("Determined transition", e), e);
          }, transitionEvent: function transitionEvent() {
            var e,
                i = n.createElement("element"),
                o = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in o) if (i.style[e] !== t) return o[e];
          } }, is: { ie: function ie() {
            var e = !i.ActiveXObject && "ActiveXObject" in i,
                n = ("ActiveXObject" in i);return e || n;
          }, legacy: function legacy() {
            var e,
                o = n.createElement("div"),
                r = { webkitTransform: "-webkit-transform", OTransform: "-o-transform", msTransform: "-ms-transform", MozTransform: "-moz-transform", transform: "transform" };n.body.insertBefore(o, null);for (var s in r) o.style[s] !== t && (o.style[s] = "translate3d(1px,1px,1px)", e = i.getComputedStyle(o).getPropertyValue(r[s]));return (n.body.removeChild(o), !(e !== t && e.length > 0 && "none" !== e));
          }, ios: function ios() {
            var e = navigator.userAgent,
                i = e.match(P.ios);return i ? (x.verbose("Browser was found to be iOS", e), !0) : !1;
          }, mobile: function mobile() {
            var e = navigator.userAgent,
                i = e.match(P.mobile);return i ? (x.verbose("Browser was found to be mobile", e), !0) : (x.verbose("Browser is not mobile, using regular transition", e), !1);
          }, hidden: function hidden() {
            return !x.is.visible();
          }, visible: function visible() {
            return H.hasClass(S.visible);
          }, open: function open() {
            return x.is.visible();
          }, closed: function closed() {
            return x.is.hidden();
          }, vertical: function vertical() {
            return H.hasClass(S.top);
          }, animating: function animating() {
            return L.hasClass(S.animating);
          }, rtl: function rtl() {
            return "rtl" == H.css("direction");
          } }, setting: function setting(i, n) {
          if ((x.debug("Changing setting", i, n), e.isPlainObject(i))) e.extend(!0, T, i);else {
            if (n === t) return T[i];T[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, x, i);else {
            if (n === t) return x[i];x[i] = n;
          }
        }, debug: function debug() {
          T.debug && (T.performance ? x.performance.log(arguments) : (x.debug = Function.prototype.bind.call(console.info, console, T.name + ":"), x.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          T.verbose && T.debug && (T.performance ? x.performance.log(arguments) : (x.verbose = Function.prototype.bind.call(console.info, console, T.name + ":"), x.verbose.apply(console, arguments)));
        }, error: function error() {
          x.error = Function.prototype.bind.call(console.error, console, T.name + ":"), x.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var i, n, t;T.performance && (i = new Date().getTime(), t = f || i, n = i - t, f = i, m.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: M, "Execution Time": n })), clearTimeout(x.performance.timer), x.performance.timer = setTimeout(x.performance.display, 100);
          }, display: function display() {
            var i = T.name + ":",
                n = 0;f = !1, clearTimeout(x.performance.timer), e.each(m, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", d && (i += " '" + d + "'"), (console.group !== t || console.table !== t) && m.length > 0 && (console.groupCollapsed(i), console.table ? console.table(m) : e.each(m, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), m = [];
          } }, invoke: function invoke(i, n, o) {
          var s,
              a,
              l,
              c = R;return (n = n || v, o = M || o, "string" == typeof i && c !== t && (i = i.split(/[\. ]/), s = i.length - 1, e.each(i, function (n, o) {
            var r = n != s ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(c[r]) && n != s) c = c[r];else {
              if (c[r] !== t) return (a = c[r], !1);if (!e.isPlainObject(c[o]) || n == s) return c[o] !== t ? (a = c[o], !1) : (x.error(F.method, i), !1);c = c[o];
            }
          })), e.isFunction(a) ? l = a.apply(o, n) : a !== t && (l = a), e.isArray(r) ? r.push(l) : r !== t ? r = [r, l] : l !== t && (r = l), a);
        } }, g ? (R === t && x.initialize(), x.invoke(b)) : (R !== t && x.invoke("destroy"), x.initialize());
    }), r !== t ? r : this);
  }, e.fn.sidebar.settings = { name: "Sidebar", namespace: "sidebar", debug: !1, verbose: !0, performance: !0, transition: "auto", mobileTransition: "auto", defaultTransition: { computer: { left: "uncover", right: "uncover", top: "overlay", bottom: "overlay" }, mobile: { left: "uncover", right: "uncover", top: "overlay", bottom: "overlay" } }, context: "body", exclusive: !1, closable: !0, dimPage: !0, scrollLock: !1, returnScroll: !1, delaySetup: !1, useLegacy: "auto", duration: 500, easing: "easeInOutQuint", onChange: function onChange() {}, onShow: function onShow() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, onVisible: function onVisible() {}, className: { active: "active", animating: "animating", dimmed: "dimmed", ios: "ios", pushable: "pushable", pushed: "pushed", right: "right", top: "top", left: "left", bottom: "bottom", visible: "visible" }, selector: { fixed: ".fixed", omitted: "script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed", pusher: ".pusher", sidebar: ".ui.sidebar" }, regExp: { ios: /(iPad|iPhone|iPod)/g, mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g }, error: { method: "The method you called is not defined.", pusher: "Had to add pusher element. For optimal performance make sure body content is inside a pusher element", movedSidebar: "Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag", overlay: "The overlay setting is no longer supported, use animation: overlay", notFound: "There were no elements that matched the specified selector" } }, e.extend(e.easing, { easeInOutQuint: function easeInOutQuint(e, i, n, t, o) {
      return (i /= o / 2) < 1 ? t / 2 * i * i * i * i * i + n : t / 2 * ((i -= 2) * i * i * i * i + 2) + n;
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/site", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
'use strict';

;(function ($, window, document, undefined) {

  $.site = $.fn.site = function (parameters) {
    var time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.site.settings, parameters) : $.extend({}, $.site.settings),
        namespace = _settings.namespace,
        error = _settings.error,
        eventNamespace = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        $document = $(document),
        $module = $document,
        element = this,
        instance = $module.data(moduleNamespace),
        module,
        returnedValue;
    module = {

      initialize: function initialize() {
        module.instantiate();
      },

      instantiate: function instantiate() {
        module.verbose('Storing instance of site', module);
        instance = module;
        $module.data(moduleNamespace, module);
      },

      normalize: function normalize() {
        module.fix.console();
        module.fix.requestAnimationFrame();
      },

      fix: {
        console: (function (_console) {
          function console() {
            return _console.apply(this, arguments);
          }

          console.toString = function () {
            return _console.toString();
          };

          return console;
        })(function () {
          module.debug('Normalizing window.console');
          if (console === undefined || console.log === undefined) {
            module.verbose('Console not available, normalizing events');
            module.disable.console();
          }
          if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
            module.verbose('Console group not available, normalizing events');
            window.console.group = function () {};
            window.console.groupEnd = function () {};
            window.console.groupCollapsed = function () {};
          }
          if (typeof console.markTimeline == 'undefined') {
            module.verbose('Mark timeline not available, normalizing events');
            window.console.markTimeline = function () {};
          }
        }),
        consoleClear: function consoleClear() {
          module.debug('Disabling programmatic console clearing');
          window.console.clear = function () {};
        },
        requestAnimationFrame: function requestAnimationFrame() {
          module.debug('Normalizing requestAnimationFrame');
          if (window.requestAnimationFrame === undefined) {
            module.debug('RequestAnimationFrame not available, normailizing event');
            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
              setTimeout(callback, 0);
            };
          }
        }
      },

      moduleExists: function moduleExists(name) {
        return $.fn[name] !== undefined && $.fn[name].settings !== undefined;
      },

      enabled: {
        modules: function modules(_modules) {
          var enabledModules = [];
          _modules = _modules || _settings.modules;
          $.each(_modules, function (index, name) {
            if (module.moduleExists(name)) {
              enabledModules.push(name);
            }
          });
          return enabledModules;
        }
      },

      disabled: {
        modules: function modules(_modules2) {
          var disabledModules = [];
          _modules2 = _modules2 || _settings.modules;
          $.each(_modules2, function (index, name) {
            if (!module.moduleExists(name)) {
              disabledModules.push(name);
            }
          });
          return disabledModules;
        }
      },

      change: {
        setting: function setting(_setting, value, modules, modifyExisting) {
          modules = typeof modules === 'string' ? modules === 'all' ? _settings.modules : [modules] : modules || _settings.modules;
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;
          $.each(modules, function (index, name) {
            var namespace = module.moduleExists(name) ? $.fn[name].settings.namespace || false : true,
                $existingModules;
            if (module.moduleExists(name)) {
              module.verbose('Changing default setting', _setting, value, name);
              $.fn[name].settings[_setting] = value;
              if (modifyExisting && namespace) {
                $existingModules = $(':data(module-' + namespace + ')');
                if ($existingModules.length > 0) {
                  module.verbose('Modifying existing settings', $existingModules);
                  $existingModules[name]('setting', _setting, value);
                }
              }
            }
          });
        },
        settings: function settings(newSettings, modules, modifyExisting) {
          modules = typeof modules === 'string' ? [modules] : modules || _settings.modules;
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;
          $.each(modules, function (index, name) {
            var $existingModules;
            if (module.moduleExists(name)) {
              module.verbose('Changing default setting', newSettings, name);
              $.extend(true, $.fn[name].settings, newSettings);
              if (modifyExisting && namespace) {
                $existingModules = $(':data(module-' + namespace + ')');
                if ($existingModules.length > 0) {
                  module.verbose('Modifying existing settings', $existingModules);
                  $existingModules[name]('setting', newSettings);
                }
              }
            }
          });
        }
      },

      enable: {
        console: function console() {
          module.console(true);
        },
        debug: function debug(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Enabling debug for modules', modules);
          module.change.setting('debug', true, modules, modifyExisting);
        },
        verbose: function verbose(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Enabling verbose debug for modules', modules);
          module.change.setting('verbose', true, modules, modifyExisting);
        }
      },
      disable: {
        console: function console() {
          module.console(false);
        },
        debug: function debug(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Disabling debug for modules', modules);
          module.change.setting('debug', false, modules, modifyExisting);
        },
        verbose: function verbose(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Disabling verbose debug for modules', modules);
          module.change.setting('verbose', false, modules, modifyExisting);
        }
      },

      console: function console(enable) {
        if (enable) {
          if (instance.cache.console === undefined) {
            module.error(error.console);
            return;
          }
          module.debug('Restoring console function');
          window.console = instance.cache.console;
        } else {
          module.debug('Disabling console function');
          instance.cache.console = window.console;
          window.console = {
            clear: function clear() {},
            error: function error() {},
            group: function group() {},
            groupCollapsed: function groupCollapsed() {},
            groupEnd: function groupEnd() {},
            info: function info() {},
            log: function log() {},
            markTimeline: function markTimeline() {},
            warn: function warn() {}
          };
        }
      },

      destroy: function destroy() {
        module.verbose('Destroying previous site for', $module);
        $module.removeData(moduleNamespace);
      },

      cache: {},

      setting: function setting(name, value) {
        if ($.isPlainObject(name)) {
          $.extend(true, _settings, name);
        } else if (value !== undefined) {
          _settings[name] = value;
        } else {
          return _settings[name];
        }
      },
      internal: function internal(name, value) {
        if ($.isPlainObject(name)) {
          $.extend(true, module, name);
        } else if (value !== undefined) {
          module[name] = value;
        } else {
          return module[name];
        }
      },
      debug: function debug() {
        if (_settings.debug) {
          if (_settings.performance) {
            module.performance.log(arguments);
          } else {
            module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
            module.debug.apply(console, arguments);
          }
        }
      },
      verbose: function verbose() {
        if (_settings.verbose && _settings.debug) {
          if (_settings.performance) {
            module.performance.log(arguments);
          } else {
            module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
            module.verbose.apply(console, arguments);
          }
        }
      },
      error: function error() {
        module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
        module.error.apply(console, arguments);
      },
      performance: {
        log: function log(message) {
          var currentTime, executionTime, previousTime;
          if (_settings.performance) {
            currentTime = new Date().getTime();
            previousTime = time || currentTime;
            executionTime = currentTime - previousTime;
            time = currentTime;
            performance.push({
              'Element': element,
              'Name': message[0],
              'Arguments': [].slice.call(message, 1) || '',
              'Execution Time': executionTime
            });
          }
          clearTimeout(module.performance.timer);
          module.performance.timer = setTimeout(module.performance.display, 100);
        },
        display: function display() {
          var title = _settings.name + ':',
              totalTime = 0;
          time = false;
          clearTimeout(module.performance.timer);
          $.each(performance, function (index, data) {
            totalTime += data['Execution Time'];
          });
          title += ' ' + totalTime + 'ms';
          if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
            console.groupCollapsed(title);
            if (console.table) {
              console.table(performance);
            } else {
              $.each(performance, function (index, data) {
                console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
              });
            }
            console.groupEnd();
          }
          performance = [];
        }
      },
      invoke: function invoke(query, passedArguments, context) {
        var object = instance,
            maxDepth,
            found,
            response;
        passedArguments = passedArguments || queryArguments;
        context = element || context;
        if (typeof query == 'string' && object !== undefined) {
          query = query.split(/[\. ]/);
          maxDepth = query.length - 1;
          $.each(query, function (depth, value) {
            var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
            if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
              object = object[camelCaseValue];
            } else if (object[camelCaseValue] !== undefined) {
              found = object[camelCaseValue];
              return false;
            } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
              object = object[value];
            } else if (object[value] !== undefined) {
              found = object[value];
              return false;
            } else {
              module.error(error.method, query);
              return false;
            }
          });
        }
        if ($.isFunction(found)) {
          response = found.apply(context, passedArguments);
        } else if (found !== undefined) {
          response = found;
        }
        if ($.isArray(returnedValue)) {
          returnedValue.push(response);
        } else if (returnedValue !== undefined) {
          returnedValue = [returnedValue, response];
        } else if (response !== undefined) {
          returnedValue = response;
        }
        return found;
      }
    };

    if (methodInvoked) {
      if (instance === undefined) {
        module.initialize();
      }
      module.invoke(query);
    } else {
      if (instance !== undefined) {
        module.destroy();
      }
      module.initialize();
    }
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.site.settings = {

    name: 'Site',
    namespace: 'site',

    error: {
      console: 'Console cannot be restored, most likely it was overwritten outside of module',
      method: 'The method you called is not defined.'
    },

    debug: false,
    verbose: true,
    performance: true,

    modules: ['accordion', 'api', 'checkbox', 'dimmer', 'dropdown', 'form', 'modal', 'nag', 'popup', 'rating', 'shape', 'sidebar', 'state', 'sticky', 'tab', 'transition', 'video', 'visit', 'visibility'],

    siteNamespace: 'site',
    namespaceStub: {
      cache: {},
      config: {},
      sections: {},
      section: {},
      utilities: {}
    }

  };

  // allows for selection of elements with data attributes
  $.extend($.expr[':'], {
    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
      return function (elem) {
        return !!$.data(elem, dataName);
      };
    }) : function (elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[3]);
    }
  });
})(jQuery, window, document);
});

require.register("web/static/css/components/site.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, o, i) {
  e.site = e.fn.site = function (t) {
    var s,
        r,
        a = new Date().getTime(),
        c = [],
        u = arguments[0],
        l = "string" == typeof u,
        m = [].slice.call(arguments, 1),
        d = e.isPlainObject(t) ? e.extend(!0, {}, e.site.settings, t) : e.extend({}, e.site.settings),
        f = d.namespace,
        g = d.error,
        b = "module-" + f,
        p = e(o),
        v = p,
        h = this,
        y = v.data(b);return (s = { initialize: function initialize() {
        s.instantiate();
      }, instantiate: function instantiate() {
        s.verbose("Storing instance of site", s), y = s, v.data(b, s);
      }, normalize: function normalize() {
        s.fix.console(), s.fix.requestAnimationFrame();
      }, fix: { console: (function (_console) {
          function console() {
            return _console.apply(this, arguments);
          }

          console.toString = function () {
            return _console.toString();
          };

          return console;
        })(function () {
          s.debug("Normalizing window.console"), (console === i || console.log === i) && (s.verbose("Console not available, normalizing events"), s.disable.console()), ("undefined" == typeof console.group || "undefined" == typeof console.groupEnd || "undefined" == typeof console.groupCollapsed) && (s.verbose("Console group not available, normalizing events"), n.console.group = function () {}, n.console.groupEnd = function () {}, n.console.groupCollapsed = function () {}), "undefined" == typeof console.markTimeline && (s.verbose("Mark timeline not available, normalizing events"), n.console.markTimeline = function () {});
        }), consoleClear: function consoleClear() {
          s.debug("Disabling programmatic console clearing"), n.console.clear = function () {};
        }, requestAnimationFrame: function requestAnimationFrame() {
          s.debug("Normalizing requestAnimationFrame"), n.requestAnimationFrame === i && (s.debug("RequestAnimationFrame not available, normailizing event"), n.requestAnimationFrame = n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame || function (e) {
            setTimeout(e, 0);
          });
        } }, moduleExists: function moduleExists(n) {
        return e.fn[n] !== i && e.fn[n].settings !== i;
      }, enabled: { modules: function modules(n) {
          var o = [];return (n = n || d.modules, e.each(n, function (e, n) {
            s.moduleExists(n) && o.push(n);
          }), o);
        } }, disabled: { modules: function modules(n) {
          var o = [];return (n = n || d.modules, e.each(n, function (e, n) {
            s.moduleExists(n) || o.push(n);
          }), o);
        } }, change: { setting: function setting(n, o, t, r) {
          t = "string" == typeof t ? "all" === t ? d.modules : [t] : t || d.modules, r = r !== i ? r : !0, e.each(t, function (i, t) {
            var a,
                c = s.moduleExists(t) ? e.fn[t].settings.namespace || !1 : !0;s.moduleExists(t) && (s.verbose("Changing default setting", n, o, t), e.fn[t].settings[n] = o, r && c && (a = e(":data(module-" + c + ")"), a.length > 0 && (s.verbose("Modifying existing settings", a), a[t]("setting", n, o))));
          });
        }, settings: function settings(n, o, t) {
          o = "string" == typeof o ? [o] : o || d.modules, t = t !== i ? t : !0, e.each(o, function (o, i) {
            var r;s.moduleExists(i) && (s.verbose("Changing default setting", n, i), e.extend(!0, e.fn[i].settings, n), t && f && (r = e(":data(module-" + f + ")"), r.length > 0 && (s.verbose("Modifying existing settings", r), r[i]("setting", n))));
          });
        } }, enable: { console: function console() {
          s.console(!0);
        }, debug: function debug(e, n) {
          e = e || d.modules, s.debug("Enabling debug for modules", e), s.change.setting("debug", !0, e, n);
        }, verbose: function verbose(e, n) {
          e = e || d.modules, s.debug("Enabling verbose debug for modules", e), s.change.setting("verbose", !0, e, n);
        } }, disable: { console: function console() {
          s.console(!1);
        }, debug: function debug(e, n) {
          e = e || d.modules, s.debug("Disabling debug for modules", e), s.change.setting("debug", !1, e, n);
        }, verbose: function verbose(e, n) {
          e = e || d.modules, s.debug("Disabling verbose debug for modules", e), s.change.setting("verbose", !1, e, n);
        } }, console: function console(e) {
        if (e) {
          if (y.cache.console === i) return void s.error(g.console);s.debug("Restoring console function"), n.console = y.cache.console;
        } else s.debug("Disabling console function"), y.cache.console = n.console, n.console = { clear: function clear() {}, error: function error() {}, group: function group() {}, groupCollapsed: function groupCollapsed() {}, groupEnd: function groupEnd() {}, info: function info() {}, log: function log() {}, markTimeline: function markTimeline() {}, warn: function warn() {} };
      }, destroy: function destroy() {
        s.verbose("Destroying previous site for", v), v.removeData(b);
      }, cache: {}, setting: function setting(n, o) {
        if (e.isPlainObject(n)) e.extend(!0, d, n);else {
          if (o === i) return d[n];d[n] = o;
        }
      }, internal: function internal(n, o) {
        if (e.isPlainObject(n)) e.extend(!0, s, n);else {
          if (o === i) return s[n];s[n] = o;
        }
      }, debug: function debug() {
        d.debug && (d.performance ? s.performance.log(arguments) : (s.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), s.debug.apply(console, arguments)));
      }, verbose: function verbose() {
        d.verbose && d.debug && (d.performance ? s.performance.log(arguments) : (s.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), s.verbose.apply(console, arguments)));
      }, error: function error() {
        s.error = Function.prototype.bind.call(console.error, console, d.name + ":"), s.error.apply(console, arguments);
      }, performance: { log: function log(e) {
          var n, o, i;d.performance && (n = new Date().getTime(), i = a || n, o = n - i, a = n, c.push({ Element: h, Name: e[0], Arguments: [].slice.call(e, 1) || "", "Execution Time": o })), clearTimeout(s.performance.timer), s.performance.timer = setTimeout(s.performance.display, 100);
        }, display: function display() {
          var n = d.name + ":",
              o = 0;a = !1, clearTimeout(s.performance.timer), e.each(c, function (e, n) {
            o += n["Execution Time"];
          }), n += " " + o + "ms", (console.group !== i || console.table !== i) && c.length > 0 && (console.groupCollapsed(n), console.table ? console.table(c) : e.each(c, function (e, n) {
            console.log(n.Name + ": " + n["Execution Time"] + "ms");
          }), console.groupEnd()), c = [];
        } }, invoke: function invoke(n, o, t) {
        var a,
            c,
            u,
            l = y;return (o = o || m, t = h || t, "string" == typeof n && l !== i && (n = n.split(/[\. ]/), a = n.length - 1, e.each(n, function (o, t) {
          var r = o != a ? t + n[o + 1].charAt(0).toUpperCase() + n[o + 1].slice(1) : n;if (e.isPlainObject(l[r]) && o != a) l = l[r];else {
            if (l[r] !== i) return (c = l[r], !1);if (!e.isPlainObject(l[t]) || o == a) return l[t] !== i ? (c = l[t], !1) : (s.error(g.method, n), !1);l = l[t];
          }
        })), e.isFunction(c) ? u = c.apply(t, o) : c !== i && (u = c), e.isArray(r) ? r.push(u) : r !== i ? r = [r, u] : u !== i && (r = u), c);
      } }, l ? (y === i && s.initialize(), s.invoke(u)) : (y !== i && s.destroy(), s.initialize()), r !== i ? r : this);
  }, e.site.settings = { name: "Site", namespace: "site", error: { console: "Console cannot be restored, most likely it was overwritten outside of module", method: "The method you called is not defined." }, debug: !1, verbose: !0, performance: !0, modules: ["accordion", "api", "checkbox", "dimmer", "dropdown", "form", "modal", "nag", "popup", "rating", "shape", "sidebar", "state", "sticky", "tab", "transition", "video", "visit", "visibility"], siteNamespace: "site", namespaceStub: { cache: {}, config: {}, sections: {}, section: {}, utilities: {} } }, e.extend(e.expr[":"], { data: e.expr.createPseudo ? e.expr.createPseudo(function (n) {
      return function (o) {
        return !!e.data(o, n);
      };
    }) : function (n, o, i) {
      return !!e.data(n, i[3]);
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/state", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.state = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        hasTouch = ('ontouchstart' in document.documentElement),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.state.settings, parameters) : $.extend({}, $.fn.state.settings),
          error = settings.error,
          metadata = settings.metadata,
          className = settings.className,
          namespace = settings.namespace,
          states = settings.states,
          _text = settings.text,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          element = this,
          instance = $module.data(moduleNamespace),
          module;
      module = {

        initialize: function initialize() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if (settings.automatic) {
            module.add.defaults();
          }

          // bind events with delegated events
          if (settings.context && moduleSelector !== '') {
            $(settings.context).on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text).on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text).on(moduleSelector, 'click' + eventNamespace, module.toggle.state);
          } else {
            $module.on('mouseenter' + eventNamespace, module.change.text).on('mouseleave' + eventNamespace, module.reset.text).on('click' + eventNamespace, module.toggle.state);
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', instance);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
        },

        add: {
          defaults: function defaults() {
            var userStates = parameters && $.isPlainObject(parameters.states) ? parameters.states : {};
            $.each(settings.defaults, function (type, typeStates) {
              if (module.is[type] !== undefined && module.is[type]()) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
              }
            });
          }
        },

        is: {

          active: function active() {
            return $module.hasClass(className.active);
          },
          loading: function loading() {
            return $module.hasClass(className.loading);
          },
          inactive: function inactive() {
            return !$module.hasClass(className.active);
          },
          state: function state(_state) {
            if (className[_state] === undefined) {
              return false;
            }
            return $module.hasClass(className[_state]);
          },

          enabled: function enabled() {
            return !$module.is(settings.filter.active);
          },
          disabled: function disabled() {
            return $module.is(settings.filter.active);
          },
          textEnabled: function textEnabled() {
            return !$module.is(settings.filter.text);
          },

          // definitions for automatic type detection
          button: function button() {
            return $module.is('.button:not(a, .submit)');
          },
          input: function input() {
            return $module.is('input');
          },
          progress: function progress() {
            return $module.is('.ui.progress');
          }
        },

        allow: function allow(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
        },
        disallow: function disallow(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
        },

        allows: function allows(state) {
          return states[state] || false;
        },

        enable: function enable() {
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          $module.addClass(className.disabled);
        },

        setState: function setState(state) {
          if (module.allows(state)) {
            $module.addClass(className[state]);
          }
        },

        removeState: function removeState(state) {
          if (module.allows(state)) {
            $module.removeClass(className[state]);
          }
        },

        toggle: {
          state: function state() {
            var apiRequest, requestCancelled;
            if (module.allows('active') && module.is.enabled()) {
              module.refresh();
              if ($.fn.api !== undefined) {
                apiRequest = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if (requestCancelled) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest = function () {
                    return false;
                  };
                  settings.deactivateTest = function () {
                    return false;
                  };
                } else if (apiRequest) {
                  module.listenTo(apiRequest);
                  return;
                }
              }
              module.change.state();
            }
          }
        },

        listenTo: function listenTo(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if (apiRequest) {
            if (_text.loading) {
              module.update.text(_text.loading);
            }
            $.when(apiRequest).then(function () {
              if (apiRequest.state() == 'resolved') {
                module.debug('API request succeeded');
                settings.activateTest = function () {
                  return true;
                };
                settings.deactivateTest = function () {
                  return true;
                };
              } else {
                module.debug('API request failed');
                settings.activateTest = function () {
                  return false;
                };
                settings.deactivateTest = function () {
                  return false;
                };
              }
              module.change.state();
            });
          }
        },

        // checks whether active/inactive state can be given
        change: {

          state: function state() {
            module.debug('Determining state change direction');
            // inactive to active change
            if (module.is.inactive()) {
              module.activate();
            } else {
              module.deactivate();
            }
            if (settings.sync) {
              module.sync();
            }
            settings.onChange.call(element);
          },

          text: function text() {
            if (module.is.textEnabled()) {
              if (module.is.disabled()) {
                module.verbose('Changing text to disabled text', _text.hover);
                module.update.text(_text.disabled);
              } else if (module.is.active()) {
                if (_text.hover) {
                  module.verbose('Changing text to hover text', _text.hover);
                  module.update.text(_text.hover);
                } else if (_text.deactivate) {
                  module.verbose('Changing text to deactivating text', _text.deactivate);
                  module.update.text(_text.deactivate);
                }
              } else {
                if (_text.hover) {
                  module.verbose('Changing text to hover text', _text.hover);
                  module.update.text(_text.hover);
                } else if (_text.activate) {
                  module.verbose('Changing text to activating text', _text.activate);
                  module.update.text(_text.activate);
                }
              }
            }
          }

        },

        activate: function activate() {
          if (settings.activateTest.call(element)) {
            module.debug('Setting state to active');
            $module.addClass(className.active);
            module.update.text(_text.active);
            settings.onActivate.call(element);
          }
        },

        deactivate: function deactivate() {
          if (settings.deactivateTest.call(element)) {
            module.debug('Setting state to inactive');
            $module.removeClass(className.active);
            module.update.text(_text.inactive);
            settings.onDeactivate.call(element);
          }
        },

        sync: function sync() {
          module.verbose('Syncing other buttons to current state');
          if (module.is.active()) {
            $allModules.not($module).state('activate');
          } else {
            $allModules.not($module).state('deactivate');
          }
        },

        get: {
          text: function text() {
            return settings.selector.text ? $module.find(settings.selector.text).text() : $module.html();
          },
          textFor: function textFor(state) {
            return _text[state] || false;
          }
        },

        flash: {
          text: function text(_text2, duration, callback) {
            var previousText = module.get.text();
            module.debug('Flashing text message', _text2, duration);
            _text2 = _text2 || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function () {};
            module.update.text(_text2);
            setTimeout(function () {
              module.update.text(previousText);
              callback.call(element);
            }, duration);
          }
        },

        reset: {
          // on mouseout sets text to previous value
          text: function text() {
            var activeText = _text.active || $module.data(metadata.storedText),
                inactiveText = _text.inactive || $module.data(metadata.storedText);
            if (module.is.textEnabled()) {
              if (module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
              } else if (inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
              }
            }
          }
        },

        update: {
          text: function text(_text3) {
            var currentText = module.get.text();
            if (_text3 && _text3 !== currentText) {
              module.debug('Updating text', _text3);
              if (settings.selector.text) {
                $module.data(metadata.storedText, _text3).find(settings.selector.text).text(_text3);
              } else {
                $module.data(metadata.storedText, _text3).html(_text3);
              }
            } else {
              module.debug('Text is already set, ignoring update', _text3);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.state.settings = {

    // module info
    name: 'State',

    // debug output
    debug: false,

    // verbose debug output
    verbose: true,

    // namespace for events
    namespace: 'state',

    // debug data includes performance
    performance: true,

    // callback occurs on state change
    onActivate: function onActivate() {},
    onDeactivate: function onDeactivate() {},
    onChange: function onChange() {},

    // state test functions
    activateTest: function activateTest() {
      return true;
    },
    deactivateTest: function deactivateTest() {
      return true;
    },

    // whether to automatically map default states
    automatic: true,

    // activate / deactivate changes all elements instantiated at same time
    sync: false,

    // default flash text duration, used for temporarily changing text of an element
    flashDuration: 1000,

    // selector filter
    filter: {
      text: '.loading, .disabled',
      active: '.disabled'
    },

    context: false,

    // error
    error: {
      beforeSend: 'The before send function has cancelled state change',
      method: 'The method you called is not defined.'
    },

    // metadata
    metadata: {
      promise: 'promise',
      storedText: 'stored-text'
    },

    // change class on state
    className: {
      active: 'active',
      disabled: 'disabled',
      error: 'error',
      loading: 'loading',
      success: 'success',
      warning: 'warning'
    },

    selector: {
      // selector for text node
      text: false
    },

    defaults: {
      input: {
        disabled: true,
        loading: true,
        active: true
      },
      button: {
        disabled: true,
        loading: true,
        active: true
      },
      progress: {
        active: true,
        success: true,
        warning: true,
        error: true
      }
    },

    states: {
      active: true,
      disabled: true,
      error: true,
      loading: true,
      success: true,
      warning: true
    },

    text: {
      disabled: false,
      flash: false,
      hover: false,
      active: false,
      inactive: false,
      activate: false,
      deactivate: false
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/state.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, a) {
  "use strict";e.fn.state = function (t) {
    var i,
        o = e(this),
        s = o.selector || "",
        r = ("ontouchstart" in n.documentElement, new Date().getTime()),
        c = [],
        u = arguments[0],
        l = "string" == typeof u,
        d = [].slice.call(arguments, 1);return (o.each(function () {
      var n,
          f = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.state.settings, t) : e.extend({}, e.fn.state.settings),
          g = f.error,
          v = f.metadata,
          b = f.className,
          m = f.namespace,
          x = f.states,
          p = f.text,
          h = "." + m,
          T = m + "-module",
          y = e(this),
          w = this,
          C = y.data(T);n = { initialize: function initialize() {
          n.verbose("Initializing module"), f.automatic && n.add.defaults(), f.context && "" !== s ? e(f.context).on(s, "mouseenter" + h, n.change.text).on(s, "mouseleave" + h, n.reset.text).on(s, "click" + h, n.toggle.state) : y.on("mouseenter" + h, n.change.text).on("mouseleave" + h, n.reset.text).on("click" + h, n.toggle.state), n.instantiate();
        }, instantiate: function instantiate() {
          n.verbose("Storing instance of module", n), C = n, y.data(T, n);
        }, destroy: function destroy() {
          n.verbose("Destroying previous module", C), y.off(h).removeData(T);
        }, refresh: function refresh() {
          n.verbose("Refreshing selector cache"), y = e(w);
        }, add: { defaults: function defaults() {
            var i = t && e.isPlainObject(t.states) ? t.states : {};e.each(f.defaults, function (t, o) {
              n.is[t] !== a && n.is[t]() && (n.verbose("Adding default states", t, w), e.extend(f.states, o, i));
            });
          } }, is: { active: function active() {
            return y.hasClass(b.active);
          }, loading: function loading() {
            return y.hasClass(b.loading);
          }, inactive: function inactive() {
            return !y.hasClass(b.active);
          }, state: function state(e) {
            return b[e] === a ? !1 : y.hasClass(b[e]);
          }, enabled: function enabled() {
            return !y.is(f.filter.active);
          }, disabled: function disabled() {
            return y.is(f.filter.active);
          }, textEnabled: function textEnabled() {
            return !y.is(f.filter.text);
          }, button: function button() {
            return y.is(".button:not(a, .submit)");
          }, input: function input() {
            return y.is("input");
          }, progress: function progress() {
            return y.is(".ui.progress");
          } }, allow: function allow(e) {
          n.debug("Now allowing state", e), x[e] = !0;
        }, disallow: function disallow(e) {
          n.debug("No longer allowing", e), x[e] = !1;
        }, allows: function allows(e) {
          return x[e] || !1;
        }, enable: function enable() {
          y.removeClass(b.disabled);
        }, disable: function disable() {
          y.addClass(b.disabled);
        }, setState: function setState(e) {
          n.allows(e) && y.addClass(b[e]);
        }, removeState: function removeState(e) {
          n.allows(e) && y.removeClass(b[e]);
        }, toggle: { state: function state() {
            var t, i;if (n.allows("active") && n.is.enabled()) {
              if ((n.refresh(), e.fn.api !== a)) if ((t = y.api("get request"), i = y.api("was cancelled"))) n.debug("API Request cancelled by beforesend"), f.activateTest = function () {
                return !1;
              }, f.deactivateTest = function () {
                return !1;
              };else if (t) return void n.listenTo(t);n.change.state();
            }
          } }, listenTo: function listenTo(t) {
          n.debug("API request detected, waiting for state signal", t), t && (p.loading && n.update.text(p.loading), e.when(t).then(function () {
            "resolved" == t.state() ? (n.debug("API request succeeded"), f.activateTest = function () {
              return !0;
            }, f.deactivateTest = function () {
              return !0;
            }) : (n.debug("API request failed"), f.activateTest = function () {
              return !1;
            }, f.deactivateTest = function () {
              return !1;
            }), n.change.state();
          }));
        }, change: { state: function state() {
            n.debug("Determining state change direction"), n.is.inactive() ? n.activate() : n.deactivate(), f.sync && n.sync(), f.onChange.call(w);
          }, text: function text() {
            n.is.textEnabled() && (n.is.disabled() ? (n.verbose("Changing text to disabled text", p.hover), n.update.text(p.disabled)) : n.is.active() ? p.hover ? (n.verbose("Changing text to hover text", p.hover), n.update.text(p.hover)) : p.deactivate && (n.verbose("Changing text to deactivating text", p.deactivate), n.update.text(p.deactivate)) : p.hover ? (n.verbose("Changing text to hover text", p.hover), n.update.text(p.hover)) : p.activate && (n.verbose("Changing text to activating text", p.activate), n.update.text(p.activate)));
          } }, activate: function activate() {
          f.activateTest.call(w) && (n.debug("Setting state to active"), y.addClass(b.active), n.update.text(p.active), f.onActivate.call(w));
        }, deactivate: function deactivate() {
          f.deactivateTest.call(w) && (n.debug("Setting state to inactive"), y.removeClass(b.active), n.update.text(p.inactive), f.onDeactivate.call(w));
        }, sync: function sync() {
          n.verbose("Syncing other buttons to current state"), o.not(y).state(n.is.active() ? "activate" : "deactivate");
        }, get: { text: function text() {
            return f.selector.text ? y.find(f.selector.text).text() : y.html();
          }, textFor: function textFor(e) {
            return p[e] || !1;
          } }, flash: { text: function text(e, t, a) {
            var i = n.get.text();n.debug("Flashing text message", e, t), e = e || f.text.flash, t = t || f.flashDuration, a = a || function () {}, n.update.text(e), setTimeout(function () {
              n.update.text(i), a.call(w);
            }, t);
          } }, reset: { text: function text() {
            var e = p.active || y.data(v.storedText),
                t = p.inactive || y.data(v.storedText);n.is.textEnabled() && (n.is.active() && e ? (n.verbose("Resetting active text", e), n.update.text(e)) : t && (n.verbose("Resetting inactive text", e), n.update.text(t)));
          } }, update: { text: function text(e) {
            var t = n.get.text();e && e !== t ? (n.debug("Updating text", e), f.selector.text ? y.data(v.storedText, e).find(f.selector.text).text(e) : y.data(v.storedText, e).html(e)) : n.debug("Text is already set, ignoring update", e);
          } }, setting: function setting(t, i) {
          if ((n.debug("Changing setting", t, i), e.isPlainObject(t))) e.extend(!0, f, t);else {
            if (i === a) return f[t];f[t] = i;
          }
        }, internal: function internal(t, i) {
          if (e.isPlainObject(t)) e.extend(!0, n, t);else {
            if (i === a) return n[t];n[t] = i;
          }
        }, debug: function debug() {
          f.debug && (f.performance ? n.performance.log(arguments) : (n.debug = Function.prototype.bind.call(console.info, console, f.name + ":"), n.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          f.verbose && f.debug && (f.performance ? n.performance.log(arguments) : (n.verbose = Function.prototype.bind.call(console.info, console, f.name + ":"), n.verbose.apply(console, arguments)));
        }, error: function error() {
          n.error = Function.prototype.bind.call(console.error, console, f.name + ":"), n.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, a, i;f.performance && (t = new Date().getTime(), i = r || t, a = t - i, r = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: w, "Execution Time": a })), clearTimeout(n.performance.timer), n.performance.timer = setTimeout(n.performance.display, 100);
          }, display: function display() {
            var t = f.name + ":",
                i = 0;r = !1, clearTimeout(n.performance.timer), e.each(c, function (e, t) {
              i += t["Execution Time"];
            }), t += " " + i + "ms", s && (t += " '" + s + "'"), (console.group !== a || console.table !== a) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, o, s) {
          var r,
              c,
              u,
              l = C;return (o = o || d, s = w || s, "string" == typeof t && l !== a && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (i, o) {
            var s = i != r ? o + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;if (e.isPlainObject(l[s]) && i != r) l = l[s];else {
              if (l[s] !== a) return (c = l[s], !1);if (!e.isPlainObject(l[o]) || i == r) return l[o] !== a ? (c = l[o], !1) : (n.error(g.method, t), !1);l = l[o];
            }
          })), e.isFunction(c) ? u = c.apply(s, o) : c !== a && (u = c), e.isArray(i) ? i.push(u) : i !== a ? i = [i, u] : u !== a && (i = u), c);
        } }, l ? (C === a && n.initialize(), n.invoke(u)) : (C !== a && C.invoke("destroy"), n.initialize());
    }), i !== a ? i : this);
  }, e.fn.state.settings = { name: "State", debug: !1, verbose: !0, namespace: "state", performance: !0, onActivate: function onActivate() {}, onDeactivate: function onDeactivate() {}, onChange: function onChange() {}, activateTest: function activateTest() {
      return !0;
    }, deactivateTest: function deactivateTest() {
      return !0;
    }, automatic: !0, sync: !1, flashDuration: 1000, filter: { text: ".loading, .disabled", active: ".disabled" }, context: !1, error: { beforeSend: "The before send function has cancelled state change", method: "The method you called is not defined." }, metadata: { promise: "promise", storedText: "stored-text" }, className: { active: "active", disabled: "disabled", error: "error", loading: "loading", success: "success", warning: "warning" }, selector: { text: !1 }, defaults: { input: { disabled: !0, loading: !0, active: !0 }, button: { disabled: !0, loading: !0, active: !0 }, progress: { active: !0, success: !0, warning: !0, error: !0 } }, states: { active: !0, disabled: !0, error: !0, loading: !0, success: !0, warning: !0 }, text: { disabled: !1, flash: !1, hover: !1, active: !1, inactive: !1, activate: !1, deactivate: !1 } };
})(jQuery, window, document);
});

require.register("web/static/css/components/sticky", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.sticky = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sticky.settings, parameters) : $.extend({}, $.fn.sticky.settings),
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $window = $(window),
          $container = $module.offsetParent(),
          $scroll = $(settings.scrollContext),
          $context,
          selector = $module.selector || '',
          instance = $module.data(moduleNamespace),
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      },
          element = this,
          observer,
          module;

      module = {

        initialize: function initialize() {

          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if (settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance');
          module.reset();
          if (observer) {
            observer.disconnect();
          }
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $scroll.off('scrollchange' + eventNamespace, module.event.scrollchange);
          $module.removeData(moduleNamespace);
        },

        observeChanges: function observeChanges() {
          var context = $context[0];
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function () {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            observer.observe(context, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        determineContext: function determineContext() {
          if (settings.context) {
            $context = $(settings.context);
          } else {
            $context = $container;
          }
          if ($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
          }
        },

        checkErrors: function checkErrors() {
          if (module.is.hidden()) {
            module.error(error.visible, $module);
          }
          if (module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
          }
        },

        bind: {
          events: function events() {
            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize);
            // pub/sub pattern
            $scroll.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          }
        },

        event: {
          load: function load() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
          },
          resize: function resize() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
          },
          scroll: function scroll() {
            requestAnimationFrame(function () {
              $scroll.trigger('scrollchange' + eventNamespace, $scroll.scrollTop());
            });
          },
          scrollchange: function scrollchange(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
          }
        },

        refresh: function refresh(hardRefresh) {
          module.reset();
          if (hardRefresh) {
            $container = $module.offsetParent();
          }
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
        },

        supports: {
          sticky: function sticky() {
            var $element = $('<div/>'),
                element = $element.get();
            $element.addClass(className.supported);
            return $element.css('position').match('sticky');
          }
        },

        save: {
          lastScroll: function lastScroll(scroll) {
            module.lastScroll = scroll;
          },
          positions: function positions() {
            var window = {
              height: $window.height()
            },
                element = {
              margin: {
                top: parseInt($module.css('margin-top'), 10),
                bottom: parseInt($module.css('margin-bottom'), 10)
              },
              offset: $module.offset(),
              width: $module.outerWidth(),
              height: $module.outerHeight()
            },
                context = {
              offset: $context.offset(),
              height: $context.outerHeight(),
              bottomPadding: parseInt($context.css('padding-bottom'), 10)
            };
            module.cache = {
              fits: element.height < window.height,
              window: {
                height: window.height
              },
              element: {
                margin: element.margin,
                top: element.offset.top - element.margin.top,
                left: element.offset.left,
                width: element.width,
                height: element.height,
                bottom: element.offset.top + element.height
              },
              context: {
                top: context.offset.top,
                height: context.height,
                bottomPadding: context.bottomPadding,
                bottom: context.offset.top + context.height - context.bottomPadding
              }
            };
            module.set.containerSize();
            module.set.size();
            module.stick();
            module.debug('Caching element positions', module.cache);
          }
        },

        get: {
          direction: function direction(scroll) {
            var direction = 'down';
            scroll = scroll || $scroll.scrollTop();
            if (module.lastScroll !== undefined) {
              if (module.lastScroll < scroll) {
                direction = 'down';
              } else if (module.lastScroll > scroll) {
                direction = 'up';
              }
            }
            return direction;
          },
          scrollChange: function scrollChange(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return module.lastScroll ? scroll - module.lastScroll : 0;
          },
          currentElementScroll: function currentElementScroll() {
            return module.is.top() ? Math.abs(parseInt($module.css('top'), 10)) || 0 : Math.abs(parseInt($module.css('bottom'), 10)) || 0;
          },

          elementScroll: function elementScroll(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var element = module.cache.element,
                window = module.cache.window,
                delta = module.get.scrollChange(scroll),
                maxScroll = element.height - window.height + settings.offset,
                elementScroll = module.get.currentElementScroll(),
                possibleScroll = elementScroll + delta,
                elementScroll;
            if (module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
            } else if (possibleScroll > maxScroll) {
              elementScroll = maxScroll;
            } else {
              elementScroll = possibleScroll;
            }
            return elementScroll;
          }
        },

        remove: {
          offset: function offset() {
            $module.css('margin-top', '');
          }
        },

        set: {
          offset: function offset() {
            module.verbose('Setting offset on element', settings.offset);
            $module.css('margin-top', settings.offset);
          },
          containerSize: function containerSize() {
            var tagName = $container.get(0).tagName;
            if (tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              $container = $module.offsetParent();
            } else {
              if (Math.abs($container.height() - module.cache.context.height) > 5) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
                });
              }
            }
          },
          scroll: function scroll(_scroll) {
            module.debug('Setting scroll on element', _scroll);
            if (module.is.top()) {
              $module.css('bottom', '').css('top', -_scroll);
            }
            if (module.is.bottom()) {
              $module.css('top', '').css('bottom', _scroll);
            }
          },
          size: function size() {
            if (module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              $module.css({
                width: module.cache.element.width,
                height: module.cache.element.height
              });
            }
          }
        },

        is: {
          top: function top() {
            return $module.hasClass(className.top);
          },
          bottom: function bottom() {
            return $module.hasClass(className.bottom);
          },
          initialPosition: function initialPosition() {
            return !module.is.fixed() && !module.is.bound();
          },
          hidden: function hidden() {
            return !$module.is(':visible');
          },
          bound: function bound() {
            return $module.hasClass(className.bound);
          },
          fixed: function fixed() {
            return $module.hasClass(className.fixed);
          }
        },

        stick: function stick(scroll) {
          var cachedPosition = scroll || $scroll.scrollTop(),
              cache = module.cache,
              fits = cache.fits,
              element = cache.element,
              window = cache.window,
              context = cache.context,
              offset = module.is.bottom() && settings.pushing ? settings.bottomOffset : settings.offset,
              scroll = {
            top: cachedPosition + offset,
            bottom: cachedPosition + offset + window.height
          },
              direction = module.get.direction(scroll.top),
              elementScroll = fits ? 0 : module.get.elementScroll(scroll.top),

          // shorthand
          doesntFit = !fits,
              elementVisible = element.height !== 0;

          // save current scroll for next run
          module.save.lastScroll(scroll.top);

          if (elementVisible) {

            if (module.is.initialPosition()) {
              if (scroll.top >= context.bottom) {
                module.debug('Element bottom of container');
                module.bindBottom();
              } else if (scroll.top >= element.top) {
                module.debug('Element passed, fixing element to page');
                module.fixTop();
              }
            } else if (module.is.fixed()) {

              // currently fixed top
              if (module.is.top()) {
                if (scroll.top < element.top) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
                } else if (element.height + scroll.top - elementScroll > context.bottom) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if (doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }

              // currently fixed bottom
              else if (module.is.bottom()) {

                // top edge
                if (scroll.bottom - element.height < element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
                }
                // bottom edge
                else if (scroll.bottom > context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if (doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }
            } else if (module.is.bottom()) {
              if (settings.pushing) {
                if (module.is.bound() && scroll.bottom < context.bottom) {
                  module.debug('Fixing bottom attached element to bottom of browser.');
                  module.fixBottom();
                }
              } else {
                if (module.is.bound() && scroll.top < context.bottom - element.height) {
                  module.debug('Fixing bottom attached element to top of browser.');
                  module.fixTop();
                }
              }
            }
          }
        },

        bindTop: function bindTop() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module.css('left', '').css('top', '').css('margin-bottom', '').removeClass(className.fixed).removeClass(className.bottom).addClass(className.bound).addClass(className.top);
          settings.onTop.call(element);
          settings.onUnstick.call(element);
        },
        bindBottom: function bindBottom() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module.css('left', '').css('top', '').css('margin-bottom', module.cache.context.bottomPadding).removeClass(className.fixed).removeClass(className.top).addClass(className.bound).addClass(className.bottom);
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
        },

        setInitialPosition: function setInitialPosition() {
          module.unfix();
          module.unbind();
        },

        fixTop: function fixTop() {
          module.debug('Fixing element to top of page');
          module.set.offset();
          $module.css('left', module.cache.element.left).css('bottom', '').removeClass(className.bound).removeClass(className.bottom).addClass(className.fixed).addClass(className.top);
          settings.onStick.call(element);
        },

        fixBottom: function fixBottom() {
          module.debug('Sticking element to bottom of page');
          module.set.offset();
          $module.css('left', module.cache.element.left).css('bottom', '').removeClass(className.bound).removeClass(className.top).addClass(className.fixed).addClass(className.bottom);
          settings.onStick.call(element);
        },

        unbind: function unbind() {
          module.debug('Removing absolute position on element');
          module.remove.offset();
          $module.removeClass(className.bound).removeClass(className.top).removeClass(className.bottom);
        },

        unfix: function unfix() {
          module.debug('Removing fixed position on element');
          module.remove.offset();
          $module.removeClass(className.fixed).removeClass(className.top).removeClass(className.bottom);
          settings.onUnstick.call(element);
        },

        reset: function reset() {
          module.debug('Reseting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
        },

        resetCSS: function resetCSS() {
          $module.css({
            width: '',
            height: ''
          });
          $container.css({
            height: ''
          });
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.sticky.settings = {

    name: 'Sticky',
    namespace: 'sticky',

    debug: false,
    verbose: false,
    performance: false,

    pushing: false,
    context: false,
    scrollContext: window,

    offset: 0,
    bottomOffset: 0,

    observeChanges: true,

    onReposition: function onReposition() {},
    onScroll: function onScroll() {},
    onStick: function onStick() {},
    onUnstick: function onUnstick() {},
    onTop: function onTop() {},
    onBottom: function onBottom() {},

    error: {
      container: 'Sticky element must be inside a relative container',
      visible: 'Element is hidden, you must call refresh after element becomes visible',
      method: 'The method you called is not defined.',
      invalidContext: 'Context specified does not exist',
      elementSize: 'Sticky element is larger than its container, cannot create sticky.'
    },

    className: {
      bound: 'bound',
      fixed: 'fixed',
      supported: 'native',
      top: 'top',
      bottom: 'bottom'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/sticky.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, o, n) {
  "use strict";e.fn.sticky = function (o) {
    var i,
        s = e(this),
        c = s.selector || "",
        r = new Date().getTime(),
        a = [],
        l = arguments[0],
        f = "string" == typeof l,
        m = [].slice.call(arguments, 1);return (s.each(function () {
      var s,
          u,
          d,
          h = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.sticky.settings, o) : e.extend({}, e.fn.sticky.settings),
          g = h.className,
          b = h.namespace,
          p = h.error,
          v = "." + b,
          x = "module-" + b,
          C = e(this),
          y = e(t),
          S = C.offsetParent(),
          k = e(h.scrollContext),
          w = (C.selector || "", C.data(x)),
          T = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      },
          P = this;d = { initialize: function initialize() {
          d.determineContext(), d.verbose("Initializing sticky", h, S), d.save.positions(), d.checkErrors(), d.bind.events(), h.observeChanges && d.observeChanges(), d.instantiate();
        }, instantiate: function instantiate() {
          d.verbose("Storing instance of module", d), w = d, C.data(x, d);
        }, destroy: function destroy() {
          d.verbose("Destroying previous instance"), d.reset(), u && u.disconnect(), y.off("load" + v, d.event.load).off("resize" + v, d.event.resize), k.off("scrollchange" + v, d.event.scrollchange), C.removeData(x);
        }, observeChanges: function observeChanges() {
          var e = s[0];"MutationObserver" in t && (u = new MutationObserver(function (e) {
            clearTimeout(d.timer), d.timer = setTimeout(function () {
              d.verbose("DOM tree modified, updating sticky menu"), d.refresh();
            }, 100);
          }), u.observe(P, { childList: !0, subtree: !0 }), u.observe(e, { childList: !0, subtree: !0 }), d.debug("Setting up mutation observer", u));
        }, determineContext: function determineContext() {
          return (s = h.context ? e(h.context) : S, 0 === s.length ? void d.error(p.invalidContext, h.context, C) : void 0);
        }, checkErrors: function checkErrors() {
          return (d.is.hidden() && d.error(p.visible, C), d.cache.element.height > d.cache.context.height ? (d.reset(), void d.error(p.elementSize, C)) : void 0);
        }, bind: { events: function events() {
            y.on("load" + v, d.event.load).on("resize" + v, d.event.resize), k.off("scroll" + v).on("scroll" + v, d.event.scroll).on("scrollchange" + v, d.event.scrollchange);
          } }, event: { load: function load() {
            d.verbose("Page contents finished loading"), T(d.refresh);
          }, resize: function resize() {
            d.verbose("Window resized"), T(d.refresh);
          }, scroll: function scroll() {
            T(function () {
              k.trigger("scrollchange" + v, k.scrollTop());
            });
          }, scrollchange: function scrollchange(e, t) {
            d.stick(t), h.onScroll.call(P);
          } }, refresh: function refresh(e) {
          d.reset(), e && (S = C.offsetParent()), d.save.positions(), d.stick(), h.onReposition.call(P);
        }, supports: { sticky: function sticky() {
            {
              var t = e("<div/>");t.get();
            }return (t.addClass(g.supported), t.css("position").match("sticky"));
          } }, save: { lastScroll: function lastScroll(e) {
            d.lastScroll = e;
          }, positions: function positions() {
            var e = { height: y.height() },
                t = { margin: { top: parseInt(C.css("margin-top"), 10), bottom: parseInt(C.css("margin-bottom"), 10) }, offset: C.offset(), width: C.outerWidth(), height: C.outerHeight() },
                o = { offset: s.offset(), height: s.outerHeight(), bottomPadding: parseInt(s.css("padding-bottom"), 10) };d.cache = { fits: t.height < e.height, window: { height: e.height }, element: { margin: t.margin, top: t.offset.top - t.margin.top, left: t.offset.left, width: t.width, height: t.height, bottom: t.offset.top + t.height }, context: { top: o.offset.top, height: o.height, bottomPadding: o.bottomPadding, bottom: o.offset.top + o.height - o.bottomPadding } }, d.set.containerSize(), d.set.size(), d.stick(), d.debug("Caching element positions", d.cache);
          } }, get: { direction: function direction(e) {
            var t = "down";return (e = e || k.scrollTop(), d.lastScroll !== n && (d.lastScroll < e ? t = "down" : d.lastScroll > e && (t = "up")), t);
          }, scrollChange: function scrollChange(e) {
            return (e = e || k.scrollTop(), d.lastScroll ? e - d.lastScroll : 0);
          }, currentElementScroll: function currentElementScroll() {
            return d.is.top() ? Math.abs(parseInt(C.css("top"), 10)) || 0 : Math.abs(parseInt(C.css("bottom"), 10)) || 0;
          }, elementScroll: function elementScroll(e) {
            e = e || k.scrollTop();var t,
                o = d.cache.element,
                n = d.cache.window,
                i = d.get.scrollChange(e),
                s = o.height - n.height + h.offset,
                t = d.get.currentElementScroll(),
                c = t + i;return t = d.cache.fits || 0 > c ? 0 : c > s ? s : c;
          } }, remove: { offset: function offset() {
            C.css("margin-top", "");
          } }, set: { offset: function offset() {
            d.verbose("Setting offset on element", h.offset), C.css("margin-top", h.offset);
          }, containerSize: function containerSize() {
            var e = S.get(0).tagName;"HTML" === e || "body" == e ? S = C.offsetParent() : Math.abs(S.height() - d.cache.context.height) > 5 && (d.debug("Context has padding, specifying exact height for container", d.cache.context.height), S.css({ height: d.cache.context.height }));
          }, scroll: function scroll(e) {
            d.debug("Setting scroll on element", e), d.is.top() && C.css("bottom", "").css("top", -e), d.is.bottom() && C.css("top", "").css("bottom", e);
          }, size: function size() {
            0 !== d.cache.element.height && 0 !== d.cache.element.width && C.css({ width: d.cache.element.width, height: d.cache.element.height });
          } }, is: { top: function top() {
            return C.hasClass(g.top);
          }, bottom: function bottom() {
            return C.hasClass(g.bottom);
          }, initialPosition: function initialPosition() {
            return !d.is.fixed() && !d.is.bound();
          }, hidden: function hidden() {
            return !C.is(":visible");
          }, bound: function bound() {
            return C.hasClass(g.bound);
          }, fixed: function fixed() {
            return C.hasClass(g.fixed);
          } }, stick: function stick(e) {
          var t = e || k.scrollTop(),
              o = d.cache,
              n = o.fits,
              i = o.element,
              s = o.window,
              c = o.context,
              r = d.is.bottom() && h.pushing ? h.bottomOffset : h.offset,
              e = { top: t + r, bottom: t + r + s.height },
              a = (d.get.direction(e.top), n ? 0 : d.get.elementScroll(e.top)),
              l = !n,
              f = 0 !== i.height;d.save.lastScroll(e.top), f && (d.is.initialPosition() ? e.top >= c.bottom ? (d.debug("Element bottom of container"), d.bindBottom()) : e.top >= i.top && (d.debug("Element passed, fixing element to page"), d.fixTop()) : d.is.fixed() ? d.is.top() ? e.top < i.top ? (d.debug("Fixed element reached top of container"), d.setInitialPosition()) : i.height + e.top - a > c.bottom ? (d.debug("Fixed element reached bottom of container"), d.bindBottom()) : l && d.set.scroll(a) : d.is.bottom() && (e.bottom - i.height < i.top ? (d.debug("Bottom fixed rail has reached top of container"), d.setInitialPosition()) : e.bottom > c.bottom ? (d.debug("Bottom fixed rail has reached bottom of container"), d.bindBottom()) : l && d.set.scroll(a)) : d.is.bottom() && (h.pushing ? d.is.bound() && e.bottom < c.bottom && (d.debug("Fixing bottom attached element to bottom of browser."), d.fixBottom()) : d.is.bound() && e.top < c.bottom - i.height && (d.debug("Fixing bottom attached element to top of browser."), d.fixTop())));
        }, bindTop: function bindTop() {
          d.debug("Binding element to top of parent container"), d.remove.offset(), C.css("left", "").css("top", "").css("margin-bottom", "").removeClass(g.fixed).removeClass(g.bottom).addClass(g.bound).addClass(g.top), h.onTop.call(P), h.onUnstick.call(P);
        }, bindBottom: function bindBottom() {
          d.debug("Binding element to bottom of parent container"), d.remove.offset(), C.css("left", "").css("top", "").css("margin-bottom", d.cache.context.bottomPadding).removeClass(g.fixed).removeClass(g.top).addClass(g.bound).addClass(g.bottom), h.onBottom.call(P), h.onUnstick.call(P);
        }, setInitialPosition: function setInitialPosition() {
          d.unfix(), d.unbind();
        }, fixTop: function fixTop() {
          d.debug("Fixing element to top of page"), d.set.offset(), C.css("left", d.cache.element.left).css("bottom", "").removeClass(g.bound).removeClass(g.bottom).addClass(g.fixed).addClass(g.top), h.onStick.call(P);
        }, fixBottom: function fixBottom() {
          d.debug("Sticking element to bottom of page"), d.set.offset(), C.css("left", d.cache.element.left).css("bottom", "").removeClass(g.bound).removeClass(g.top).addClass(g.fixed).addClass(g.bottom), h.onStick.call(P);
        }, unbind: function unbind() {
          d.debug("Removing absolute position on element"), d.remove.offset(), C.removeClass(g.bound).removeClass(g.top).removeClass(g.bottom);
        }, unfix: function unfix() {
          d.debug("Removing fixed position on element"), d.remove.offset(), C.removeClass(g.fixed).removeClass(g.top).removeClass(g.bottom), h.onUnstick.call(P);
        }, reset: function reset() {
          d.debug("Reseting elements position"), d.unbind(), d.unfix(), d.resetCSS(), d.remove.offset();
        }, resetCSS: function resetCSS() {
          C.css({ width: "", height: "" }), S.css({ height: "" });
        }, setting: function setting(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, h, t);else {
            if (o === n) return h[t];h[t] = o;
          }
        }, internal: function internal(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, d, t);else {
            if (o === n) return d[t];d[t] = o;
          }
        }, debug: function debug() {
          h.debug && (h.performance ? d.performance.log(arguments) : (d.debug = Function.prototype.bind.call(console.info, console, h.name + ":"), d.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          h.verbose && h.debug && (h.performance ? d.performance.log(arguments) : (d.verbose = Function.prototype.bind.call(console.info, console, h.name + ":"), d.verbose.apply(console, arguments)));
        }, error: function error() {
          d.error = Function.prototype.bind.call(console.error, console, h.name + ":"), d.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, o, n;h.performance && (t = new Date().getTime(), n = r || t, o = t - n, r = t, a.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: P, "Execution Time": o })), clearTimeout(d.performance.timer), d.performance.timer = setTimeout(d.performance.display, 0);
          }, display: function display() {
            var t = h.name + ":",
                o = 0;r = !1, clearTimeout(d.performance.timer), e.each(a, function (e, t) {
              o += t["Execution Time"];
            }), t += " " + o + "ms", c && (t += " '" + c + "'"), (console.group !== n || console.table !== n) && a.length > 0 && (console.groupCollapsed(t), console.table ? console.table(a) : e.each(a, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), a = [];
          } }, invoke: function invoke(t, o, s) {
          var c,
              r,
              a,
              l = w;return (o = o || m, s = P || s, "string" == typeof t && l !== n && (t = t.split(/[\. ]/), c = t.length - 1, e.each(t, function (o, i) {
            var s = o != c ? i + t[o + 1].charAt(0).toUpperCase() + t[o + 1].slice(1) : t;if (e.isPlainObject(l[s]) && o != c) l = l[s];else {
              if (l[s] !== n) return (r = l[s], !1);if (!e.isPlainObject(l[i]) || o == c) return l[i] !== n ? (r = l[i], !1) : !1;l = l[i];
            }
          })), e.isFunction(r) ? a = r.apply(s, o) : r !== n && (a = r), e.isArray(i) ? i.push(a) : i !== n ? i = [i, a] : a !== n && (i = a), r);
        } }, f ? (w === n && d.initialize(), d.invoke(l)) : (w !== n && w.invoke("destroy"), d.initialize());
    }), i !== n ? i : this);
  }, e.fn.sticky.settings = { name: "Sticky", namespace: "sticky", debug: !1, verbose: !1, performance: !1, pushing: !1, context: !1, scrollContext: t, offset: 0, bottomOffset: 0, observeChanges: !0, onReposition: function onReposition() {}, onScroll: function onScroll() {}, onStick: function onStick() {}, onUnstick: function onUnstick() {}, onTop: function onTop() {}, onBottom: function onBottom() {}, error: { container: "Sticky element must be inside a relative container", visible: "Element is hidden, you must call refresh after element becomes visible", method: "The method you called is not defined.", invalidContext: "Context specified does not exist", elementSize: "Sticky element is larger than its container, cannot create sticky." }, className: { bound: "bound", fixed: "fixed", supported: "native", top: "top", bottom: "bottom" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/tab", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.tab = function (parameters) {

    var
    // use window context if none specified
    $allModules = $.isFunction(this) ? $(window) : $(this),
        settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.tab.settings, parameters) : $.extend({}, $.fn.tab.settings),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        module,
        returnedValue;

    $allModules.each(function () {
      var className = settings.className,
          metadata = settings.metadata,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + settings.namespace,
          moduleNamespace = 'module-' + settings.namespace,
          $module = $(this),
          cache = {},
          firstLoad = true,
          recursionDepth = 0,
          $context,
          $tabs,
          activeTabPath,
          parameterArray,
          historyEvent,
          element = this,
          instance = $module.data(moduleNamespace);

      module = {

        initialize: function initialize() {
          module.debug('Initializing tab menu item', $module);

          module.determineTabs();
          module.debug('Determining tabs', settings.context, $tabs);

          // set up automatic routing
          if (settings.auto) {
            module.set.auto();
          }

          // attach events if navigation wasn't set to window
          if (!$.isWindow(element)) {
            module.debug('Attaching tab activation events to element', $module);
            $module.on('click' + eventNamespace, module.event.click);
          }
          module.instantiate();
        },

        determineTabs: function determineTabs() {
          var $reference;

          // determine tab context
          if (settings.context === 'parent') {
            if ($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element for determining parent', $reference);
            } else {
              $reference = $module;
            }
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
          } else if (settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
          } else {
            $context = $('body');
          }

          // find tabs
          if (settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
          } else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
          }
        },

        initializeHistory: function initializeHistory() {
          if (settings.history) {
            module.debug('Initializing page state');
            if ($.address === undefined) {
              module.error(error.state);
              return false;
            } else {
              if (settings.historyType == 'state') {
                module.debug('Using HTML5 to manage state');
                if (settings.path !== false) {
                  $.address.history(true).state(settings.path);
                } else {
                  module.error(error.path);
                  return false;
                }
              }
              $.address.bind('change', module.event.history.change);
            }
          }
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.debug('Destroying tabs', $module);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        event: {
          click: function click(event) {
            var tabPath = $(this).data(metadata.tab);
            if (tabPath !== undefined) {
              if (settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
              } else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
              }
              event.preventDefault();
            } else {
              module.debug('No tab specified');
            }
          },
          history: {
            change: function change(event) {
              var tabPath = event.pathNames.join('/') || module.get.initialPath(),
                  pageTitle = settings.templates.determineTitle(tabPath) || false;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if (tabPath !== undefined) {
                module.changeTab(tabPath);
              }
              if (pageTitle) {
                $.address.title(pageTitle);
              }
            }
          }
        },

        refresh: function refresh() {
          if (activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
          }
        },

        cache: {

          read: function read(cacheKey) {
            return cacheKey !== undefined ? cache[cacheKey] : false;
          },
          add: function add(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
          },
          remove: function remove(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
          }
        },

        set: {
          auto: function auto() {
            var url = typeof settings.path == 'string' ? settings.path.replace(/\/$/, '') + '/{$tab}' : '/{$tab}';
            module.verbose('Setting up automatic tab retrieval from server', url);
            if ($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
            } else {
              settings.apiSettings = {
                url: url
              };
            }
          },
          state: function state(_state) {
            $.address.value(_state);
          }
        },

        changeTab: function changeTab(tabPath) {
          var pushStateAvailable = window.history && window.history.pushState,
              shouldIgnoreLoad = pushStateAvailable && settings.ignoreFirstLoad && firstLoad,
              remoteContent = settings.auto || $.isPlainObject(settings.apiSettings),

          // only get default path if not remote content
          pathArray = remoteContent && !shouldIgnoreLoad ? module.utilities.pathToArray(tabPath) : module.get.defaultPathArray(tabPath);
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function (index, tab) {
            var currentPathArray = pathArray.slice(0, index + 1),
                currentPath = module.utilities.arrayToPath(currentPathArray),
                isTab = module.is.tab(currentPath),
                isLastIndex = index + 1 == pathArray.length,
                $tab = module.get.tabElement(currentPath),
                $anchor,
                nextPathArray,
                nextPath,
                isLastTab;
            module.verbose('Looking for tab', tab);
            if (isTab) {

              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if (isLastIndex) {
                isLastTab = true;
              } else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath = module.utilities.arrayToPath(nextPathArray);
                isLastTab = !module.is.tab(nextPath);
                if (isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
                }
              }
              if (isLastTab && remoteContent) {
                if (!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.content.fetch(currentPath, tabPath);
                } else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                  settings.onTabLoad.call($tab, currentPath, parameterArray, historyEvent);
                }
                return false;
              } else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if (!module.cache.read(currentPath)) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                }
                settings.onTabLoad.call($tab, currentPath, parameterArray, historyEvent);
              }
            } else if (tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              $anchor = $('#' + tabPath + ', a[name="' + tabPath + '"]'), currentPath = $anchor.closest('[data-tab]').data('tab');
              $tab = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if ($anchor && $anchor.length > 0 && currentPath) {
                module.debug('No tab found, but deep anchor link present, opening parent tab');
                module.activate.all(currentPath);
                if (!module.cache.read(currentPath)) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onTabInit.call($tab, currentPath, parameterArray, historyEvent);
                }
                return false;
              }
            } else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
            }
          });
        },

        content: {

          fetch: function fetch(tabPath, fullTabPath) {
            var $tab = module.get.tabElement(tabPath),
                apiSettings = {
              dataType: 'html',
              on: 'now',
              onSuccess: function onSuccess(response) {
                module.cache.add(fullTabPath, response);
                module.content.update(tabPath, response);
                if (tabPath == activeTabPath) {
                  module.debug('Content loaded', tabPath);
                  module.activate.tab(tabPath);
                } else {
                  module.debug('Content loaded in background', tabPath);
                }
                settings.onTabInit.call($tab, tabPath, parameterArray, historyEvent);
                settings.onTabLoad.call($tab, tabPath, parameterArray, historyEvent);
              },
              urlData: { tab: fullTabPath }
            },
                request = $tab.api('get request') || false,
                existingRequest = request && request.state() === 'pending',
                requestSettings,
                cachedContent;

            fullTabPath = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);

            module.activate.tab(tabPath);

            if (settings.cache && cachedContent) {
              module.debug('Showing existing content', fullTabPath);
              module.content.update(tabPath, cachedContent);
              settings.onTabLoad.call($tab, tabPath, parameterArray, historyEvent);
            } else if (existingRequest) {
              module.debug('Content is already loading', fullTabPath);
              $tab.addClass(className.loading);
            } else if ($.api !== undefined) {
              requestSettings = $.extend(true, {
                headers: { 'X-Remote': true }
              }, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              $tab.api(requestSettings);
            } else {
              module.error(error.api);
            }
          },

          update: function update(tabPath, html) {
            module.debug('Updating html for', tabPath);
            var $tab = module.get.tabElement(tabPath);
            $tab.html(html);
          }
        },

        activate: {
          all: function all(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
          },
          tab: function tab(tabPath) {
            var $tab = module.get.tabElement(tabPath);
            module.verbose('Showing tab content for', $tab);
            $tab.addClass(className.active).siblings($tabs).removeClass(className.active + ' ' + className.loading);
          },
          navigation: function navigation(tabPath) {
            var $navigation = module.get.navElement(tabPath);
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            $navigation.addClass(className.active).siblings($allModules).removeClass(className.active + ' ' + className.loading);
          }
        },

        deactivate: {
          all: function all() {
            module.deactivate.navigation();
            module.deactivate.tabs();
          },
          navigation: function navigation() {
            $allModules.removeClass(className.active);
          },
          tabs: function tabs() {
            $tabs.removeClass(className.active + ' ' + className.loading);
          }
        },

        is: {
          tab: function tab(tabName) {
            return tabName !== undefined ? module.get.tabElement(tabName).length > 0 : false;
          }
        },

        get: {
          initialPath: function initialPath() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
          },
          path: function path() {
            return $.address.value();
          },
          // adds default tabs to tab path
          defaultPathArray: function defaultPathArray(tabPath) {
            return module.utilities.pathToArray(module.get.defaultPath(tabPath));
          },
          defaultPath: function defaultPath(tabPath) {
            var $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),
                defaultTab = $defaultNav.data(metadata.tab) || false;
            if (defaultTab) {
              module.debug('Found default tab', defaultTab);
              if (recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
              }
              module.error(error.recursion);
            } else {
              module.debug('No default tabs found for', tabPath, $tabs);
            }
            recursionDepth = 0;
            return tabPath;
          },
          navElement: function navElement(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
          },
          tabElement: function tabElement(tabPath) {
            var $fullPathTab, $simplePathTab, tabPathArray, lastTab;
            tabPath = tabPath || activeTabPath;
            tabPathArray = module.utilities.pathToArray(tabPath);
            lastTab = module.utilities.last(tabPathArray);
            $fullPathTab = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
            return $fullPathTab.length > 0 ? $fullPathTab : $simplePathTab;
          },
          tab: function tab() {
            return activeTabPath;
          }
        },

        utilities: {
          filterArray: function filterArray(keepArray, removeArray) {
            return $.grep(keepArray, function (keepValue) {
              return $.inArray(keepValue, removeArray) == -1;
            });
          },
          last: function last(array) {
            return $.isArray(array) ? array[array.length - 1] : false;
          },
          pathToArray: function pathToArray(pathName) {
            if (pathName === undefined) {
              pathName = activeTabPath;
            }
            return typeof pathName == 'string' ? pathName.split('/') : [pathName];
          },
          arrayToPath: function arrayToPath(pathArray) {
            return $.isArray(pathArray) ? pathArray.join('/') : false;
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    if (module && !methodInvoked) {
      module.initializeHistory();
    }
    return returnedValue !== undefined ? returnedValue : this;
  };

  // shortcut for tabbed content with no defined navigation
  $.tab = function () {
    $(window).tab.apply(this, arguments);
  };

  $.fn.tab.settings = {

    name: 'Tab',
    namespace: 'tab',

    debug: false,
    verbose: true,
    performance: true,

    auto: false, // uses pjax style endpoints fetching content from same url with remote-content headers
    history: false, // use browser history
    historyType: 'hash', // #/ or html5 state
    path: false, // base path of url

    context: false, // specify a context that tabs must appear inside
    childrenOnly: false, // use only tabs that are children of context
    maxDepth: 25, // max depth a tab can be nested

    alwaysRefresh: false, // load tab content new every tab click
    cache: true, // cache the content requests to pull locally
    ignoreFirstLoad: false, // don't load remote content on first load
    apiSettings: false, // settings for api call

    onTabInit: function onTabInit(tabPath, parameterArray, historyEvent) {}, // called first time loaded
    onTabLoad: function onTabLoad(tabPath, parameterArray, historyEvent) {}, // called on every load

    templates: {
      determineTitle: function determineTitle(tabArray) {} // returns page title for path
    },

    error: {
      api: 'You attempted to load content without API module',
      method: 'The method you called is not defined',
      missingTab: 'Activated tab cannot be found for this context.',
      noContent: 'The tab you specified is missing a content url.',
      path: 'History enabled, but no path was specified',
      recursion: 'Max recursive depth reached',
      state: 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
    },

    metadata: {
      tab: 'tab',
      loaded: 'loaded',
      promise: 'promise'
    },

    className: {
      loading: 'loading',
      active: 'active'
    },

    selector: {
      tabs: '.ui.tab',
      ui: '.ui'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/tab.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, a, n) {
  "use strict";e.fn.tab = function (a) {
    var i,
        o,
        r = e(e.isFunction(this) ? t : this),
        s = e.isPlainObject(a) ? e.extend(!0, {}, e.fn.tab.settings, a) : e.extend({}, e.fn.tab.settings),
        c = r.selector || "",
        l = new Date().getTime(),
        u = [],
        d = arguments[0],
        b = "string" == typeof d,
        g = [].slice.call(arguments, 1);return (r.each(function () {
      var a,
          f,
          h,
          p,
          m,
          v = s.className,
          y = s.metadata,
          T = s.selector,
          x = s.error,
          A = "." + s.namespace,
          P = "module-" + s.namespace,
          C = e(this),
          E = {},
          S = !0,
          w = 0,
          j = this,
          D = C.data(P);i = { initialize: function initialize() {
          i.debug("Initializing tab menu item", C), i.determineTabs(), i.debug("Determining tabs", s.context, f), s.auto && i.set.auto(), e.isWindow(j) || (i.debug("Attaching tab activation events to element", C), C.on("click" + A, i.event.click)), i.instantiate();
        }, determineTabs: function determineTabs() {
          var t;"parent" === s.context ? (C.closest(T.ui).length > 0 ? (t = C.closest(T.ui), i.verbose("Using closest UI element for determining parent", t)) : t = C, a = t.parent(), i.verbose("Determined parent element for creating context", a)) : s.context ? (a = e(s.context), i.verbose("Using selector for tab context", s.context, a)) : a = e("body"), s.childrenOnly ? (f = a.children(T.tabs), i.debug("Searching tab context children for tabs", a, f)) : (f = a.find(T.tabs), i.debug("Searching tab context for tabs", a, f));
        }, initializeHistory: function initializeHistory() {
          if (s.history) {
            if ((i.debug("Initializing page state"), e.address === n)) return (i.error(x.state), !1);if ("state" == s.historyType) {
              if ((i.debug("Using HTML5 to manage state"), s.path === !1)) return (i.error(x.path), !1);e.address.history(!0).state(s.path);
            }e.address.bind("change", i.event.history.change);
          }
        }, instantiate: function instantiate() {
          i.verbose("Storing instance of module", i), D = i, C.data(P, i);
        }, destroy: function destroy() {
          i.debug("Destroying tabs", C), C.removeData(P).off(A);
        }, event: { click: function click(t) {
            var a = e(this).data(y.tab);a !== n ? (s.history ? (i.verbose("Updating page state", t), e.address.value(a)) : (i.verbose("Changing tab", t), i.changeTab(a)), t.preventDefault()) : i.debug("No tab specified");
          }, history: { change: function change(t) {
              var a = t.pathNames.join("/") || i.get.initialPath(),
                  o = s.templates.determineTitle(a) || !1;i.performance.display(), i.debug("History change event", a, t), m = t, a !== n && i.changeTab(a), o && e.address.title(o);
            } } }, refresh: function refresh() {
          h && (i.debug("Refreshing tab", h), i.changeTab(h));
        }, cache: { read: function read(e) {
            return e !== n ? E[e] : !1;
          }, add: function add(e, t) {
            e = e || h, i.debug("Adding cached content for", e), E[e] = t;
          }, remove: function remove(e) {
            e = e || h, i.debug("Removing cached content for", e), delete E[e];
          } }, set: { auto: function auto() {
            var t = "string" == typeof s.path ? s.path.replace(/\/$/, "") + "/{$tab}" : "/{$tab}";i.verbose("Setting up automatic tab retrieval from server", t), e.isPlainObject(s.apiSettings) ? s.apiSettings.url = t : s.apiSettings = { url: t };
          }, state: function state(t) {
            e.address.value(t);
          } }, changeTab: function changeTab(n) {
          var o = t.history && t.history.pushState,
              r = o && s.ignoreFirstLoad && S,
              c = s.auto || e.isPlainObject(s.apiSettings),
              l = c && !r ? i.utilities.pathToArray(n) : i.get.defaultPathArray(n);n = i.utilities.arrayToPath(l), e.each(l, function (t, o) {
            var u,
                d,
                b,
                g,
                f = l.slice(0, t + 1),
                v = i.utilities.arrayToPath(f),
                y = i.is.tab(v),
                T = t + 1 == l.length,
                A = i.get.tabElement(v);if ((i.verbose("Looking for tab", o), y)) {
              if ((i.verbose("Tab was found", o), h = v, p = i.utilities.filterArray(l, f), T ? g = !0 : (d = l.slice(0, t + 2), b = i.utilities.arrayToPath(d), g = !i.is.tab(b), g && i.verbose("Tab parameters found", d)), g && c)) return (r ? (i.debug("Ignoring remote content on first tab load", v), S = !1, i.cache.add(n, A.html()), i.activate.all(v), s.onTabInit.call(A, v, p, m), s.onTabLoad.call(A, v, p, m)) : (i.activate.navigation(v), i.content.fetch(v, n)), !1);i.debug("Opened local tab", v), i.activate.all(v), i.cache.read(v) || (i.cache.add(v, !0), i.debug("First time tab loaded calling tab init"), s.onTabInit.call(A, v, p, m)), s.onTabLoad.call(A, v, p, m);
            } else {
              if (-1 != n.search("/") || "" === n) return (i.error(x.missingTab, C, a, v), !1);if ((u = e("#" + n + ", a[name=\"" + n + "\"]"), v = u.closest("[data-tab]").data("tab"), A = i.get.tabElement(v), u && u.length > 0 && v)) return (i.debug("No tab found, but deep anchor link present, opening parent tab"), i.activate.all(v), i.cache.read(v) || (i.cache.add(v, !0), i.debug("First time tab loaded calling tab init"), s.onTabInit.call(A, v, p, m)), !1);
            }
          });
        }, content: { fetch: function fetch(t, a) {
            var o,
                r,
                c = i.get.tabElement(t),
                l = { dataType: "html", on: "now", onSuccess: function onSuccess(e) {
                i.cache.add(a, e), i.content.update(t, e), t == h ? (i.debug("Content loaded", t), i.activate.tab(t)) : i.debug("Content loaded in background", t), s.onTabInit.call(c, t, p, m), s.onTabLoad.call(c, t, p, m);
              }, urlData: { tab: a } },
                u = c.api("get request") || !1,
                d = u && "pending" === u.state();a = a || t, r = i.cache.read(a), i.activate.tab(t), s.cache && r ? (i.debug("Showing existing content", a), i.content.update(t, r), s.onTabLoad.call(c, t, p, m)) : d ? (i.debug("Content is already loading", a), c.addClass(v.loading)) : e.api !== n ? (o = e.extend(!0, { headers: { "X-Remote": !0 } }, s.apiSettings, l), i.debug("Retrieving remote content", a, o), c.api(o)) : i.error(x.api);
          }, update: function update(e, t) {
            i.debug("Updating html for", e);var a = i.get.tabElement(e);a.html(t);
          } }, activate: { all: function all(e) {
            i.activate.tab(e), i.activate.navigation(e);
          }, tab: function tab(e) {
            var t = i.get.tabElement(e);i.verbose("Showing tab content for", t), t.addClass(v.active).siblings(f).removeClass(v.active + " " + v.loading);
          }, navigation: function navigation(e) {
            var t = i.get.navElement(e);i.verbose("Activating tab navigation for", t, e), t.addClass(v.active).siblings(r).removeClass(v.active + " " + v.loading);
          } }, deactivate: { all: function all() {
            i.deactivate.navigation(), i.deactivate.tabs();
          }, navigation: function navigation() {
            r.removeClass(v.active);
          }, tabs: function tabs() {
            f.removeClass(v.active + " " + v.loading);
          } }, is: { tab: function tab(e) {
            return e !== n ? i.get.tabElement(e).length > 0 : !1;
          } }, get: { initialPath: function initialPath() {
            return r.eq(0).data(y.tab) || f.eq(0).data(y.tab);
          }, path: function path() {
            return e.address.value();
          }, defaultPathArray: function defaultPathArray(e) {
            return i.utilities.pathToArray(i.get.defaultPath(e));
          }, defaultPath: function defaultPath(e) {
            var t = r.filter("[data-" + y.tab + "^=\"" + e + "/\"]").eq(0),
                a = t.data(y.tab) || !1;if (a) {
              if ((i.debug("Found default tab", a), w < s.maxDepth)) return (w++, i.get.defaultPath(a));i.error(x.recursion);
            } else i.debug("No default tabs found for", e, f);return (w = 0, e);
          }, navElement: function navElement(e) {
            return (e = e || h, r.filter("[data-" + y.tab + "=\"" + e + "\"]"));
          }, tabElement: function tabElement(e) {
            var t, a, n, o;return (e = e || h, n = i.utilities.pathToArray(e), o = i.utilities.last(n), t = f.filter("[data-" + y.tab + "=\"" + o + "\"]"), a = f.filter("[data-" + y.tab + "=\"" + e + "\"]"), t.length > 0 ? t : a);
          }, tab: function tab() {
            return h;
          } }, utilities: { filterArray: function filterArray(t, a) {
            return e.grep(t, function (t) {
              return -1 == e.inArray(t, a);
            });
          }, last: function last(t) {
            return e.isArray(t) ? t[t.length - 1] : !1;
          }, pathToArray: function pathToArray(e) {
            return (e === n && (e = h), "string" == typeof e ? e.split("/") : [e]);
          }, arrayToPath: function arrayToPath(t) {
            return e.isArray(t) ? t.join("/") : !1;
          } }, setting: function setting(t, a) {
          if ((i.debug("Changing setting", t, a), e.isPlainObject(t))) e.extend(!0, s, t);else {
            if (a === n) return s[t];s[t] = a;
          }
        }, internal: function internal(t, a) {
          if (e.isPlainObject(t)) e.extend(!0, i, t);else {
            if (a === n) return i[t];i[t] = a;
          }
        }, debug: function debug() {
          s.debug && (s.performance ? i.performance.log(arguments) : (i.debug = Function.prototype.bind.call(console.info, console, s.name + ":"), i.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          s.verbose && s.debug && (s.performance ? i.performance.log(arguments) : (i.verbose = Function.prototype.bind.call(console.info, console, s.name + ":"), i.verbose.apply(console, arguments)));
        }, error: function error() {
          i.error = Function.prototype.bind.call(console.error, console, s.name + ":"), i.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, a, n;s.performance && (t = new Date().getTime(), n = l || t, a = t - n, l = t, u.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: j, "Execution Time": a })), clearTimeout(i.performance.timer), i.performance.timer = setTimeout(i.performance.display, 100);
          }, display: function display() {
            var t = s.name + ":",
                a = 0;l = !1, clearTimeout(i.performance.timer), e.each(u, function (e, t) {
              a += t["Execution Time"];
            }), t += " " + a + "ms", c && (t += " '" + c + "'"), (console.group !== n || console.table !== n) && u.length > 0 && (console.groupCollapsed(t), console.table ? console.table(u) : e.each(u, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), u = [];
          } }, invoke: function invoke(t, a, r) {
          var s,
              c,
              l,
              u = D;return (a = a || g, r = j || r, "string" == typeof t && u !== n && (t = t.split(/[\. ]/), s = t.length - 1, e.each(t, function (a, o) {
            var r = a != s ? o + t[a + 1].charAt(0).toUpperCase() + t[a + 1].slice(1) : t;if (e.isPlainObject(u[r]) && a != s) u = u[r];else {
              if (u[r] !== n) return (c = u[r], !1);if (!e.isPlainObject(u[o]) || a == s) return u[o] !== n ? (c = u[o], !1) : (i.error(x.method, t), !1);u = u[o];
            }
          })), e.isFunction(c) ? l = c.apply(r, a) : c !== n && (l = c), e.isArray(o) ? o.push(l) : o !== n ? o = [o, l] : l !== n && (o = l), c);
        } }, b ? (D === n && i.initialize(), i.invoke(d)) : (D !== n && D.invoke("destroy"), i.initialize());
    }), i && !b && i.initializeHistory(), o !== n ? o : this);
  }, e.tab = function () {
    e(t).tab.apply(this, arguments);
  }, e.fn.tab.settings = { name: "Tab", namespace: "tab", debug: !1, verbose: !0, performance: !0, auto: !1, history: !1, historyType: "hash", path: !1, context: !1, childrenOnly: !1, maxDepth: 25, alwaysRefresh: !1, cache: !0, ignoreFirstLoad: !1, apiSettings: !1, onTabInit: function onTabInit(e, t, a) {}, onTabLoad: function onTabLoad(e, t, a) {}, templates: { determineTitle: function determineTitle(e) {} }, error: { api: "You attempted to load content without API module", method: "The method you called is not defined", missingTab: "Activated tab cannot be found for this context.", noContent: "The tab you specified is missing a content url.", path: "History enabled, but no path was specified", recursion: "Max recursive depth reached", state: "History requires Asual's Address library <https://github.com/asual/jquery-address>" }, metadata: { tab: "tab", loaded: "loaded", promise: "promise" }, className: { loading: "loading", active: "active" }, selector: { tabs: ".ui.tab", ui: ".ui" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/transition", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.transition = function () {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        moduleArguments = arguments,
        query = moduleArguments[0],
        queryArguments = [].slice.call(arguments, 1),
        methodInvoked = typeof query === 'string',
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;
    $allModules.each(function (index) {
      var $module = $(this),
          element = this,

      // set at run time
      settings,
          instance,
          error,
          className,
          metadata,
          animationStart,
          animationEnd,
          animationName,
          namespace,
          moduleNamespace,
          eventNamespace,
          module;

      module = {

        initialize: function initialize() {

          // get full settings
          settings = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className = settings.className;
          error = settings.error;
          metadata = settings.metadata;

          // define namespace
          eventNamespace = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd = module.get.animationEndEvent();
          animationName = module.get.animationName();
          animationStart = module.get.animationStartEvent();

          if (methodInvoked) {
            methodInvoked = module.invoke(query);
          }

          // method not invoked, lets run an animation
          if (methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if (settings.interval) {
              module.delay(settings.animate);
            } else {
              module.animate();
            }
            module.instantiate();
          }
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
        },

        forceRepaint: function forceRepaint() {
          module.verbose('Forcing element repaint');
          var $parentElement = $module.parent(),
              $nextElement = $module.next();
          if ($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
          } else {
            $module.detach().insertBefore($nextElement);
          }
        },

        repaint: function repaint() {
          module.verbose('Repainting element');
          var fakeAssignment = element.offsetWidth;
        },

        delay: function delay(interval) {
          var isReverse = settings.reverse === true,
              shouldReverse = settings.reverse == 'auto' && module.get.direction() == className.outward,
              delay;
          interval = typeof interval !== undefined ? interval : settings.interval;
          delay = isReverse || shouldReverse ? ($allModules.length - index) * settings.interval : index * settings.interval;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
        },

        animate: function animate(overrideSettings) {
          settings = overrideSettings || settings;
          if (!module.is.supported()) {
            module.error(error.support);
            return false;
          }
          module.debug('Preparing animation', settings.animation);
          if (module.is.animating()) {
            if (settings.queue) {
              if (!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              } else {
                module.queue(settings.animation);
              }
              return false;
            } else if (!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
            } else {
              module.debug('New animation started, completing previous early', settings.animation);
              module.complete();
            }
          }
          if (module.can.animate()) {
            module.set.animating(settings.animation);
          } else {
            module.error(error.noAnimation, settings.animation, element);
          }
        },

        reset: function reset() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
        },

        queue: function queue(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module.one(animationEnd + '.queue' + eventNamespace, function () {
            module.queuing = false;
            module.repaint();
            module.animate.apply(this, settings);
          });
        },

        complete: function complete(event) {
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if (!module.is.looping()) {
            if (module.is.outward()) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
              settings.onHide.call(this);
            } else if (module.is.inward()) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
              settings.onShow.call(this);
            } else {
              module.restore.conditions();
            }
            module.remove.animation();
            module.remove.animating();
          }
          settings.onComplete.call(this);
        },

        has: {
          direction: function direction(animation) {
            var hasDirection = false;
            animation = animation || settings.animation;
            if (typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function (index, word) {
                if (word === className.inward || word === className.outward) {
                  hasDirection = true;
                }
              });
            }
            return hasDirection;
          },
          inlineDisplay: function inlineDisplay() {
            var style = $module.attr('style') || '';
            return $.isArray(style.match(/display.*?;/, ''));
          }
        },

        set: {
          animating: function animating(animation) {
            animation = animation || settings.animation;
            if (!module.is.animating()) {
              module.save.conditions();
            }
            module.remove.direction();
            module.remove.completeCallback();
            if (module.can.transition() && !module.has.direction()) {
              module.set.direction();
            }
            module.remove.hidden();
            module.set.display();
            $module.addClass(className.animating + ' ' + className.transition + ' ' + animation).addClass(animation).one(animationEnd + '.complete' + eventNamespace, module.complete);
            if (settings.useFailSafe) {
              module.add.failSafe();
            }
            module.set.duration(settings.duration);
            settings.onStart.call(this);
            module.debug('Starting tween', animation, $module.attr('class'));
          },
          duration: function duration(animationName, _duration) {
            _duration = _duration || settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            if (_duration || _duration === 0) {
              module.verbose('Setting animation duration', _duration);
              $module.css({
                '-webkit-animation-duration': _duration,
                '-moz-animation-duration': _duration,
                '-ms-animation-duration': _duration,
                '-o-animation-duration': _duration,
                'animation-duration': _duration
              });
            }
          },
          display: function display() {
            var style = module.get.style(),
                displayType = module.get.displayType(),
                overrideStyle = style + 'display: ' + displayType + ' !important;';
            $module.css('display', '');
            module.refresh();
            if ($module.css('display') !== displayType) {
              module.verbose('Setting inline visibility to', displayType);
              $module.attr('style', overrideStyle);
            }
          },
          direction: function direction() {
            if ($module.is(':visible') && !module.is.hidden()) {
              module.debug('Automatically determining the direction of animation', 'Outward');
              $module.removeClass(className.inward).addClass(className.outward);
            } else {
              module.debug('Automatically determining the direction of animation', 'Inward');
              $module.removeClass(className.outward).addClass(className.inward);
            }
          },
          looping: function looping() {
            module.debug('Transition set to loop');
            $module.addClass(className.looping);
          },
          hidden: function hidden() {
            if (!module.is.hidden()) {
              $module.addClass(className.transition).addClass(className.hidden);
            }
            if ($module.css('display') !== 'none') {
              module.verbose('Overriding default display to hide element');
              $module.css('display', 'none');
            }
          },
          visible: function visible() {
            $module.addClass(className.transition).addClass(className.visible);
          }
        },

        save: {
          displayType: function displayType(_displayType) {
            $module.data(metadata.displayType, _displayType);
          },
          transitionExists: function transitionExists(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
          },
          conditions: function conditions() {
            var clasName = $module.attr('class') || false,
                style = $module.attr('style') || '';
            $module.removeClass(settings.animation);
            module.remove.direction();
            module.cache = {
              className: $module.attr('class'),
              style: module.get.style()
            };
            module.verbose('Saving original attributes', module.cache);
          }
        },

        restore: {
          conditions: function conditions() {
            if (module.cache === undefined) {
              return false;
            }
            if (module.cache.className) {
              $module.attr('class', module.cache.className);
            } else {
              $module.removeAttr('class');
            }
            if (module.cache.style) {
              module.verbose('Restoring original style attribute', module.cache.style);
              $module.attr('style', module.cache.style);
            } else {
              module.verbose('Clearing style attribute');
              $module.removeAttr('style');
            }
            module.verbose('Restoring original attributes', module.cache);
          }
        },

        add: {
          failSafe: function failSafe() {
            var duration = module.get.duration();
            module.timer = setTimeout(function () {
              $module.trigger(animationEnd);
            }, duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
          }
        },

        remove: {
          animating: function animating() {
            $module.removeClass(className.animating);
          },
          animation: function animation() {
            $module.css({
              '-webkit-animation': '',
              '-moz-animation': '',
              '-ms-animation': '',
              '-o-animation': '',
              'animation': ''
            });
          },
          animationCallbacks: function animationCallbacks() {
            module.remove.queueCallback();
            module.remove.completeCallback();
          },
          queueCallback: function queueCallback() {
            $module.off('.queue' + eventNamespace);
          },
          completeCallback: function completeCallback() {
            $module.off('.complete' + eventNamespace);
          },
          display: function display() {
            $module.css('display', '');
          },
          direction: function direction() {
            $module.removeClass(className.inward).removeClass(className.outward);
          },
          failSafe: function failSafe() {
            module.verbose('Removing fail safe timer', module.timer);
            if (module.timer) {
              clearTimeout(module.timer);
            }
          },
          hidden: function hidden() {
            $module.removeClass(className.hidden);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          looping: function looping() {
            module.debug('Transitions are no longer looping');
            if (module.is.looping()) {
              module.reset();
              $module.removeClass(className.looping);
            }
          },
          transition: function transition() {
            $module.removeClass(className.visible).removeClass(className.hidden);
          }
        },
        get: {
          settings: function settings(animation, duration, onComplete) {
            // single settings object
            if (typeof animation == 'object') {
              return $.extend(true, {}, $.fn.transition.settings, animation);
            }
            // all arguments provided
            else if (typeof onComplete == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                onComplete: onComplete,
                duration: duration
              });
            }
            // only duration provided
            else if (typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                duration: duration
              });
            }
            // duration is actually settings object
            else if (typeof duration == 'object') {
              return $.extend({}, $.fn.transition.settings, duration, {
                animation: animation
              });
            }
            // duration is actually callback
            else if (typeof duration == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                onComplete: duration
              });
            }
            // only animation provided
            else {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation
              });
            }
            return $.fn.transition.settings;
          },
          direction: function direction(animation) {
            // quickest manually specified direction
            animation = animation || settings.animation;
            if (typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function (index, word) {
                if (word === className.inward) {
                  return className.inward;
                } else if (word === className.outward) {
                  return className.outward;
                }
              });
            }
            // slower backup
            if (!module.can.transition()) {
              return 'static';
            }
            if ($module.is(':visible') && !module.is.hidden()) {
              return className.outward;
            } else {
              return className.inward;
            }
          },
          duration: function duration(_duration2) {
            _duration2 = _duration2 || settings.duration;
            if (_duration2 === false) {
              _duration2 = $module.css('animation-duration') || 0;
            }
            return typeof _duration2 === 'string' ? _duration2.indexOf('ms') > -1 ? parseFloat(_duration2) : parseFloat(_duration2) * 1000 : _duration2;
          },
          displayType: function displayType() {
            if (settings.displayType) {
              return settings.displayType;
            }
            if ($module.data(metadata.displayType) === undefined) {
              // create fake element to determine display state
              module.can.transition(true);
            }
            return $module.data(metadata.displayType);
          },
          style: function style() {
            var style = $module.attr('style') || '';
            return style.replace(/display.*?;/, '');
          },
          transitionExists: function transitionExists(animation) {
            return $.fn.transition.exists[animation];
          },
          animationName: function animationName() {
            var element = document.createElement('div'),
                animations = {
              'animation': 'animationName',
              'OAnimation': 'oAnimationName',
              'MozAnimation': 'mozAnimationName',
              'WebkitAnimation': 'webkitAnimationName'
            },
                animation;
            for (animation in animations) {
              if (element.style[animation] !== undefined) {
                return animations[animation];
              }
            }
            return false;
          },
          animationStartEvent: function animationStartEvent() {
            var element = document.createElement('div'),
                animations = {
              'animation': 'animationstart',
              'OAnimation': 'oAnimationStart',
              'MozAnimation': 'mozAnimationStart',
              'WebkitAnimation': 'webkitAnimationStart'
            },
                animation;
            for (animation in animations) {
              if (element.style[animation] !== undefined) {
                return animations[animation];
              }
            }
            return false;
          },
          animationEndEvent: function animationEndEvent() {
            var element = document.createElement('div'),
                animations = {
              'animation': 'animationend',
              'OAnimation': 'oAnimationEnd',
              'MozAnimation': 'mozAnimationEnd',
              'WebkitAnimation': 'webkitAnimationEnd'
            },
                animation;
            for (animation in animations) {
              if (element.style[animation] !== undefined) {
                return animations[animation];
              }
            }
            return false;
          }

        },

        can: {
          transition: function transition(forced) {
            var elementClass = $module.attr('class'),
                tagName = $module.prop('tagName'),
                animation = settings.animation,
                transitionExists = module.get.transitionExists(animation),
                $clone,
                currentAnimation,
                inAnimation,
                directionExists,
                displayType;
            if (transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              $clone = $('<' + tagName + ' />').addClass(elementClass).insertAfter($module);
              currentAnimation = $clone.addClass(animation).removeClass(className.inward).removeClass(className.outward).addClass(className.animating).addClass(className.transition).css(animationName);
              inAnimation = $clone.addClass(className.inward).css(animationName);
              displayType = $clone.attr('class', elementClass).removeAttr('style').removeClass(className.hidden).removeClass(className.visible).show().css('display');
              module.verbose('Determining final display state', displayType);
              module.save.displayType(displayType);

              $clone.remove();
              if (currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
              } else if (currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
              } else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
              }
              module.save.transitionExists(animation, directionExists);
            }
            return transitionExists !== undefined ? transitionExists : directionExists;
          },
          animate: function animate() {
            // can transition does not return a value if animation does not exist
            return module.can.transition() !== undefined;
          }
        },

        is: {
          animating: function animating() {
            return $module.hasClass(className.animating);
          },
          inward: function inward() {
            return $module.hasClass(className.inward);
          },
          outward: function outward() {
            return $module.hasClass(className.outward);
          },
          looping: function looping() {
            return $module.hasClass(className.looping);
          },
          occurring: function occurring(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return $module.filter(animation).length > 0;
          },
          visible: function visible() {
            return $module.is(':visible');
          },
          hidden: function hidden() {
            return $module.css('visibility') === 'hidden';
          },
          supported: function supported() {
            return animationName !== false && animationEnd !== false;
          }
        },

        hide: function hide() {
          module.verbose('Hiding element');
          if (module.is.animating()) {
            module.reset();
          }
          module.remove.display();
          module.remove.visible();
          module.set.hidden();
          module.repaint();
        },

        show: function show(display) {
          module.verbose('Showing element', display);
          module.remove.hidden();
          module.set.visible();
          module.set.display();
          module.repaint();
        },

        toggle: function toggle() {
          if (module.is.visible()) {
            module.hide();
          } else {
            module.show();
          }
        },

        stop: function stop() {
          module.debug('Stopping current animation');
          $module.trigger(animationEnd);
        },

        stopAll: function stopAll() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.trigger(animationEnd);
        },

        clear: {
          queue: function queue() {
            module.debug('Clearing animation queue');
            module.remove.queueCallback();
          }
        },

        enable: function enable() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        // modified for transition to return invoke success
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }

          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found !== undefined ? found : false;
        }
      };
      module.initialize();
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  // Records if CSS transition is available
  $.fn.transition.exists = {};

  $.fn.transition.settings = {

    // module info
    name: 'Transition',

    // debug content outputted to console
    debug: false,

    // verbose debug output
    verbose: true,

    // performance data output
    performance: true,

    // event namespace
    namespace: 'transition',

    // delay between animations in group
    interval: 0,

    // whether group animations should be reversed
    reverse: 'auto',

    // animation callback event
    onStart: function onStart() {},
    onComplete: function onComplete() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    // whether timeout should be used to ensure callback fires in cases animationend does not
    useFailSafe: true,

    // delay in ms for fail safe
    failSafeDelay: 100,

    // whether EXACT animation can occur twice in a row
    allowRepeats: false,

    // Override final display type on visible
    displayType: false,

    // animation duration
    animation: 'fade',
    duration: false,

    // new animations will occur after previous ones
    queue: true,

    metadata: {
      displayType: 'display'
    },

    className: {
      animating: 'animating',
      disabled: 'disabled',
      hidden: 'hidden',
      inward: 'in',
      loading: 'loading',
      looping: 'looping',
      outward: 'out',
      transition: 'transition',
      visible: 'visible'
    },

    // possible errors
    error: {
      noAnimation: 'There is no css animation matching the one you specified.',
      repeated: 'That animation is already occurring, cancelling repeated animation',
      method: 'The method you called is not defined',
      support: 'This browser does not support CSS animations'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/transition.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (n, e, i, t) {
  "use strict";n.fn.transition = function () {
    {
      var a,
          o = n(this),
          s = o.selector || "",
          r = new Date().getTime(),
          l = [],
          u = arguments,
          m = u[0],
          c = [].slice.call(arguments, 1),
          d = "string" == typeof m;e.requestAnimationFrame || e.mozRequestAnimationFrame || e.webkitRequestAnimationFrame || e.msRequestAnimationFrame || function (n) {
        setTimeout(n, 0);
      };
    }return (o.each(function (e) {
      var f,
          p,
          g,
          v,
          b,
          y,
          h,
          w,
          C,
          A,
          T,
          S = n(this),
          x = this;T = { initialize: function initialize() {
          f = T.get.settings.apply(x, u), v = f.className, g = f.error, b = f.metadata, A = "." + f.namespace, C = "module-" + f.namespace, p = S.data(C) || T, h = T.get.animationEndEvent(), w = T.get.animationName(), y = T.get.animationStartEvent(), d && (d = T.invoke(m)), d === !1 && (T.verbose("Converted arguments into settings object", f), f.interval ? T.delay(f.animate) : T.animate(), T.instantiate());
        }, instantiate: function instantiate() {
          T.verbose("Storing instance of module", T), p = T, S.data(C, p);
        }, destroy: function destroy() {
          T.verbose("Destroying previous module for", x), S.removeData(C);
        }, refresh: function refresh() {
          T.verbose("Refreshing display type on next animation"), delete T.displayType;
        }, forceRepaint: function forceRepaint() {
          T.verbose("Forcing element repaint");var n = S.parent(),
              e = S.next();0 === e.length ? S.detach().appendTo(n) : S.detach().insertBefore(e);
        }, repaint: function repaint() {
          T.verbose("Repainting element");x.offsetWidth;
        }, delay: function delay(n) {
          var i,
              a = f.reverse === !0,
              s = "auto" == f.reverse && T.get.direction() == v.outward;n = typeof n !== t ? n : f.interval, i = a || s ? (o.length - e) * f.interval : e * f.interval, T.debug("Delaying animation by", i), setTimeout(T.animate, i);
        }, animate: function animate(n) {
          if ((f = n || f, !T.is.supported())) return (T.error(g.support), !1);if ((T.debug("Preparing animation", f.animation), T.is.animating())) {
            if (f.queue) return (!f.allowRepeats && T.has.direction() && T.is.occurring() && T.queuing !== !0 ? T.debug("Animation is currently occurring, preventing queueing same animation", f.animation) : T.queue(f.animation), !1);if (!f.allowRepeats && T.is.occurring()) return (T.debug("Animation is already occurring, will not execute repeated animation", f.animation), !1);T.debug("New animation started, completing previous early", f.animation), T.complete();
          }T.can.animate() ? T.set.animating(f.animation) : T.error(g.noAnimation, f.animation, x);
        }, reset: function reset() {
          T.debug("Resetting animation to beginning conditions"), T.remove.animationCallbacks(), T.restore.conditions(), T.remove.animating();
        }, queue: function queue(n) {
          T.debug("Queueing animation of", n), T.queuing = !0, S.one(h + ".queue" + A, function () {
            T.queuing = !1, T.repaint(), T.animate.apply(this, f);
          });
        }, complete: function complete(n) {
          T.debug("Animation complete", f.animation), T.remove.completeCallback(), T.remove.failSafe(), T.is.looping() || (T.is.outward() ? (T.verbose("Animation is outward, hiding element"), T.restore.conditions(), T.hide(), f.onHide.call(this)) : T.is.inward() ? (T.verbose("Animation is outward, showing element"), T.restore.conditions(), T.show(), f.onShow.call(this)) : T.restore.conditions(), T.remove.animation(), T.remove.animating()), f.onComplete.call(this);
        }, has: { direction: function direction(e) {
            var i = !1;return (e = e || f.animation, "string" == typeof e && (e = e.split(" "), n.each(e, function (n, e) {
              (e === v.inward || e === v.outward) && (i = !0);
            })), i);
          }, inlineDisplay: function inlineDisplay() {
            var e = S.attr("style") || "";return n.isArray(e.match(/display.*?;/, ""));
          } }, set: { animating: function animating(n) {
            n = n || f.animation, T.is.animating() || T.save.conditions(), T.remove.direction(), T.remove.completeCallback(), T.can.transition() && !T.has.direction() && T.set.direction(), T.remove.hidden(), T.set.display(), S.addClass(v.animating + " " + v.transition + " " + n).addClass(n).one(h + ".complete" + A, T.complete), f.useFailSafe && T.add.failSafe(), T.set.duration(f.duration), f.onStart.call(this), T.debug("Starting tween", n, S.attr("class"));
          }, duration: function duration(n, e) {
            e = e || f.duration, e = "number" == typeof e ? e + "ms" : e, (e || 0 === e) && (T.verbose("Setting animation duration", e), S.css({ "-webkit-animation-duration": e, "-moz-animation-duration": e, "-ms-animation-duration": e, "-o-animation-duration": e, "animation-duration": e }));
          }, display: function display() {
            var n = T.get.style(),
                e = T.get.displayType(),
                i = n + "display: " + e + " !important;";S.css("display", ""), T.refresh(), S.css("display") !== e && (T.verbose("Setting inline visibility to", e), S.attr("style", i));
          }, direction: function direction() {
            S.is(":visible") && !T.is.hidden() ? (T.debug("Automatically determining the direction of animation", "Outward"), S.removeClass(v.inward).addClass(v.outward)) : (T.debug("Automatically determining the direction of animation", "Inward"), S.removeClass(v.outward).addClass(v.inward));
          }, looping: function looping() {
            T.debug("Transition set to loop"), S.addClass(v.looping);
          }, hidden: function hidden() {
            T.is.hidden() || S.addClass(v.transition).addClass(v.hidden), "none" !== S.css("display") && (T.verbose("Overriding default display to hide element"), S.css("display", "none"));
          }, visible: function visible() {
            S.addClass(v.transition).addClass(v.visible);
          } }, save: { displayType: function displayType(n) {
            S.data(b.displayType, n);
          }, transitionExists: function transitionExists(e, i) {
            n.fn.transition.exists[e] = i, T.verbose("Saving existence of transition", e, i);
          }, conditions: function conditions() {
            S.attr("class") || !1, S.attr("style") || "";S.removeClass(f.animation), T.remove.direction(), T.cache = { className: S.attr("class"), style: T.get.style() }, T.verbose("Saving original attributes", T.cache);
          } }, restore: { conditions: function conditions() {
            return T.cache === t ? !1 : (T.cache.className ? S.attr("class", T.cache.className) : S.removeAttr("class"), T.cache.style ? (T.verbose("Restoring original style attribute", T.cache.style), S.attr("style", T.cache.style)) : (T.verbose("Clearing style attribute"), S.removeAttr("style")), void T.verbose("Restoring original attributes", T.cache));
          } }, add: { failSafe: function failSafe() {
            var n = T.get.duration();T.timer = setTimeout(function () {
              S.trigger(h);
            }, n + f.failSafeDelay), T.verbose("Adding fail safe timer", T.timer);
          } }, remove: { animating: function animating() {
            S.removeClass(v.animating);
          }, animation: function animation() {
            S.css({ "-webkit-animation": "", "-moz-animation": "", "-ms-animation": "", "-o-animation": "", animation: "" });
          }, animationCallbacks: function animationCallbacks() {
            T.remove.queueCallback(), T.remove.completeCallback();
          }, queueCallback: function queueCallback() {
            S.off(".queue" + A);
          }, completeCallback: function completeCallback() {
            S.off(".complete" + A);
          }, display: function display() {
            S.css("display", "");
          }, direction: function direction() {
            S.removeClass(v.inward).removeClass(v.outward);
          }, failSafe: function failSafe() {
            T.verbose("Removing fail safe timer", T.timer), T.timer && clearTimeout(T.timer);
          }, hidden: function hidden() {
            S.removeClass(v.hidden);
          }, visible: function visible() {
            S.removeClass(v.visible);
          }, looping: function looping() {
            T.debug("Transitions are no longer looping"), T.is.looping() && (T.reset(), S.removeClass(v.looping));
          }, transition: function transition() {
            S.removeClass(v.visible).removeClass(v.hidden);
          } }, get: { settings: function settings(e, i, t) {
            return "object" == typeof e ? n.extend(!0, {}, n.fn.transition.settings, e) : "function" == typeof t ? n.extend({}, n.fn.transition.settings, { animation: e, onComplete: t, duration: i }) : "string" == typeof i || "number" == typeof i ? n.extend({}, n.fn.transition.settings, { animation: e, duration: i }) : "object" == typeof i ? n.extend({}, n.fn.transition.settings, i, { animation: e }) : "function" == typeof i ? n.extend({}, n.fn.transition.settings, { animation: e, onComplete: i }) : n.extend({}, n.fn.transition.settings, { animation: e });
          }, direction: function direction(e) {
            return (e = e || f.animation, "string" == typeof e && (e = e.split(" "), n.each(e, function (n, e) {
              return e === v.inward ? v.inward : e === v.outward ? v.outward : void 0;
            })), T.can.transition() ? S.is(":visible") && !T.is.hidden() ? v.outward : v.inward : "static");
          }, duration: function duration(n) {
            return (n = n || f.duration, n === !1 && (n = S.css("animation-duration") || 0), "string" == typeof n ? n.indexOf("ms") > -1 ? parseFloat(n) : 1000 * parseFloat(n) : n);
          }, displayType: function displayType() {
            return f.displayType ? f.displayType : (S.data(b.displayType) === t && T.can.transition(!0), S.data(b.displayType));
          }, style: function style() {
            var n = S.attr("style") || "";return n.replace(/display.*?;/, "");
          }, transitionExists: function transitionExists(e) {
            return n.fn.transition.exists[e];
          }, animationName: function animationName() {
            var n,
                e = i.createElement("div"),
                a = { animation: "animationName", OAnimation: "oAnimationName", MozAnimation: "mozAnimationName", WebkitAnimation: "webkitAnimationName" };for (n in a) if (e.style[n] !== t) return a[n];return !1;
          }, animationStartEvent: function animationStartEvent() {
            var n,
                e = i.createElement("div"),
                a = { animation: "animationstart", OAnimation: "oAnimationStart", MozAnimation: "mozAnimationStart", WebkitAnimation: "webkitAnimationStart" };for (n in a) if (e.style[n] !== t) return a[n];return !1;
          }, animationEndEvent: function animationEndEvent() {
            var n,
                e = i.createElement("div"),
                a = { animation: "animationend", OAnimation: "oAnimationEnd", MozAnimation: "mozAnimationEnd", WebkitAnimation: "webkitAnimationEnd" };for (n in a) if (e.style[n] !== t) return a[n];return !1;
          } }, can: { transition: function transition(e) {
            var i,
                a,
                o,
                s,
                r,
                l = S.attr("class"),
                u = S.prop("tagName"),
                m = f.animation,
                c = T.get.transitionExists(m);if (c === t || e) {
              if ((T.verbose("Determining whether animation exists"), i = n("<" + u + " />").addClass(l).insertAfter(S), a = i.addClass(m).removeClass(v.inward).removeClass(v.outward).addClass(v.animating).addClass(v.transition).css(w), o = i.addClass(v.inward).css(w), r = i.attr("class", l).removeAttr("style").removeClass(v.hidden).removeClass(v.visible).show().css("display"), T.verbose("Determining final display state", r), T.save.displayType(r), i.remove(), a != o)) T.debug("Direction exists for animation", m), s = !0;else {
                if ("none" == a || !a) return void T.debug("No animation defined in css", m);T.debug("Static animation found", m, r), s = !1;
              }T.save.transitionExists(m, s);
            }return c !== t ? c : s;
          }, animate: function animate() {
            return T.can.transition() !== t;
          } }, is: { animating: function animating() {
            return S.hasClass(v.animating);
          }, inward: function inward() {
            return S.hasClass(v.inward);
          }, outward: function outward() {
            return S.hasClass(v.outward);
          }, looping: function looping() {
            return S.hasClass(v.looping);
          }, occurring: function occurring(n) {
            return (n = n || f.animation, n = "." + n.replace(" ", "."), S.filter(n).length > 0);
          }, visible: function visible() {
            return S.is(":visible");
          }, hidden: function hidden() {
            return "hidden" === S.css("visibility");
          }, supported: function supported() {
            return w !== !1 && h !== !1;
          } }, hide: function hide() {
          T.verbose("Hiding element"), T.is.animating() && T.reset(), T.remove.display(), T.remove.visible(), T.set.hidden(), T.repaint();
        }, show: function show(n) {
          T.verbose("Showing element", n), T.remove.hidden(), T.set.visible(), T.set.display(), T.repaint();
        }, toggle: function toggle() {
          T.is.visible() ? T.hide() : T.show();
        }, stop: function stop() {
          T.debug("Stopping current animation"), S.trigger(h);
        }, stopAll: function stopAll() {
          T.debug("Stopping all animation"), T.remove.queueCallback(), S.trigger(h);
        }, clear: { queue: function queue() {
            T.debug("Clearing animation queue"), T.remove.queueCallback();
          } }, enable: function enable() {
          T.verbose("Starting animation"), S.removeClass(v.disabled);
        }, disable: function disable() {
          T.debug("Stopping animation"), S.addClass(v.disabled);
        }, setting: function setting(e, i) {
          if ((T.debug("Changing setting", e, i), n.isPlainObject(e))) n.extend(!0, f, e);else {
            if (i === t) return f[e];f[e] = i;
          }
        }, internal: function internal(e, i) {
          if (n.isPlainObject(e)) n.extend(!0, T, e);else {
            if (i === t) return T[e];T[e] = i;
          }
        }, debug: function debug() {
          f.debug && (f.performance ? T.performance.log(arguments) : (T.debug = Function.prototype.bind.call(console.info, console, f.name + ":"), T.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          f.verbose && f.debug && (f.performance ? T.performance.log(arguments) : (T.verbose = Function.prototype.bind.call(console.info, console, f.name + ":"), T.verbose.apply(console, arguments)));
        }, error: function error() {
          T.error = Function.prototype.bind.call(console.error, console, f.name + ":"), T.error.apply(console, arguments);
        }, performance: { log: function log(n) {
            var e, i, t;f.performance && (e = new Date().getTime(), t = r || e, i = e - t, r = e, l.push({ Name: n[0], Arguments: [].slice.call(n, 1) || "", Element: x, "Execution Time": i })), clearTimeout(T.performance.timer), T.performance.timer = setTimeout(T.performance.display, 100);
          }, display: function display() {
            var e = f.name + ":",
                i = 0;r = !1, clearTimeout(T.performance.timer), n.each(l, function (n, e) {
              i += e["Execution Time"];
            }), e += " " + i + "ms", s && (e += " '" + s + "'"), o.length > 1 && (e += " (" + o.length + ")"), (console.group !== t || console.table !== t) && l.length > 0 && (console.groupCollapsed(e), console.table ? console.table(l) : n.each(l, function (n, e) {
              console.log(e.Name + ": " + e["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(e, i, o) {
          var s,
              r,
              l,
              u = p;return (i = i || c, o = x || o, "string" == typeof e && u !== t && (e = e.split(/[\. ]/), s = e.length - 1, n.each(e, function (i, a) {
            var o = i != s ? a + e[i + 1].charAt(0).toUpperCase() + e[i + 1].slice(1) : e;if (n.isPlainObject(u[o]) && i != s) u = u[o];else {
              if (u[o] !== t) return (r = u[o], !1);if (!n.isPlainObject(u[a]) || i == s) return u[a] !== t ? (r = u[a], !1) : !1;u = u[a];
            }
          })), n.isFunction(r) ? l = r.apply(o, i) : r !== t && (l = r), n.isArray(a) ? a.push(l) : a !== t ? a = [a, l] : l !== t && (a = l), r !== t ? r : !1);
        } }, T.initialize();
    }), a !== t ? a : this);
  }, n.fn.transition.exists = {}, n.fn.transition.settings = { name: "Transition", debug: !1, verbose: !0, performance: !0, namespace: "transition", interval: 0, reverse: "auto", onStart: function onStart() {}, onComplete: function onComplete() {}, onShow: function onShow() {}, onHide: function onHide() {}, useFailSafe: !0, failSafeDelay: 100, allowRepeats: !1, displayType: !1, animation: "fade", duration: !1, queue: !0, metadata: { displayType: "display" }, className: { animating: "animating", disabled: "disabled", hidden: "hidden", inward: "in", loading: "loading", looping: "looping", outward: "out", transition: "transition", visible: "visible" }, error: { noAnimation: "There is no css animation matching the one you specified.", repeated: "That animation is already occurring, cancelling repeated animation", method: "The method you called is not defined", support: "This browser does not support CSS animations" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/video", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.video = function (parameters) {

    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.video.settings, parameters) : $.extend({}, $.fn.video.settings),
          selector = settings.selector,
          className = settings.className,
          error = settings.error,
          metadata = settings.metadata,
          namespace = settings.namespace,
          templates = settings.templates,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $window = $(window),
          $module = $(this),
          $placeholder = $module.find(selector.placeholder),
          $playButton = $module.find(selector.playButton),
          $embed = $module.find(selector.embed),
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing video');
          module.create();
          $placeholder.on('click' + eventNamespace, module.play);
          $playButton.on('click' + eventNamespace, module.play);
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        create: function create() {
          var image = $module.data(metadata.image),
              html = templates.video(image);
          $module.html(html);
          module.refresh();
          if (!image) {
            module.play();
          }
          module.debug('Creating html for video element', html);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance of video');
          module.reset();
          $module.removeData(moduleNamespace).off(eventNamespace);
          $placeholder.off(eventNamespace);
          $playButton.off(eventNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $playButton = $module.find(selector.playButton);
          $embed = $module.find(selector.embed);
        },

        // sets new video
        change: function change(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module.data(metadata.source, source).data(metadata.id, id).data(metadata.url, url);
          settings.onChange();
        },

        // clears video embed
        reset: function reset() {
          module.debug('Clearing video embed and showing placeholder');
          $module.removeClass(className.active);
          $embed.html(' ');
          $placeholder.show();
          settings.onReset();
        },

        // plays current video
        play: function play() {
          module.debug('Playing video');
          var source = $module.data(metadata.source) || false,
              url = $module.data(metadata.url) || false,
              id = $module.data(metadata.id) || false;
          $embed.html(module.generate.html(source, id, url));
          $module.addClass(className.active);
          settings.onPlay();
        },

        get: {
          source: function source(url) {
            if (typeof url !== 'string') {
              return false;
            }
            if (url.search('youtube.com') !== -1) {
              return 'youtube';
            } else if (url.search('vimeo.com') !== -1) {
              return 'vimeo';
            }
            return false;
          },
          id: function id(url) {
            if (url.match(settings.regExp.youtube)) {
              return url.match(settings.regExp.youtube)[1];
            } else if (url.match(settings.regExp.vimeo)) {
              return url.match(settings.regExp.vimeo)[2];
            }
            return false;
          }
        },

        generate: {
          // generates iframe html
          html: function html(source, id, url) {
            module.debug('Generating embed html');
            var html;
            // allow override of settings
            source = source || settings.source;
            id = id || settings.id;
            if (source && id || url) {
              if (!source || !id) {
                source = module.get.source(url);
                id = module.get.id(url);
              }
              if (source == 'vimeo') {
                html = '' + '<iframe src="//player.vimeo.com/video/' + id + '?=' + module.generate.url(source) + '"' + ' width="100%" height="100%"' + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
              } else if (source == 'youtube') {
                html = '' + '<iframe src="//www.youtube.com/embed/' + id + '?=' + module.generate.url(source) + '"' + ' width="100%" height="100%"' + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
              }
            } else {
              module.error(error.noVideo);
            }
            return html;
          },

          // generate url parameters
          url: function url(source) {
            var api = settings.api ? 1 : 0,
                autoplay = settings.autoplay === 'auto' ? $module.data('image') !== undefined : settings.autoplay,
                hd = settings.hd ? 1 : 0,
                showUI = settings.showUI ? 1 : 0,

            // opposite used for some params
            hideUI = !settings.showUI ? 1 : 0,
                url = '';
            if (source == 'vimeo') {
              url = '' + 'api=' + api + '&amp;title=' + showUI + '&amp;byline=' + showUI + '&amp;portrait=' + showUI + '&amp;autoplay=' + autoplay;
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            if (source == 'ustream') {
              url = '' + 'autoplay=' + autoplay;
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            } else if (source == 'youtube') {
              url = '' + 'enablejsapi=' + api + '&amp;autoplay=' + autoplay + '&amp;autohide=' + hideUI + '&amp;hq=' + hd + '&amp;modestbranding=1';
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            return url;
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 100);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.video.settings = {

    name: 'Video',
    namespace: 'video',

    debug: false,
    verbose: true,
    performance: true,

    metadata: {
      id: 'id',
      image: 'image',
      source: 'source',
      url: 'url'
    },

    source: false,
    url: false,
    id: false,

    aspectRatio: 16 / 9,

    onPlay: function onPlay() {},
    onReset: function onReset() {},
    onChange: function onChange() {},

    // callbacks not coded yet (needs to use jsapi)
    onPause: function onPause() {},
    onStop: function onStop() {},

    width: 'auto',
    height: 'auto',

    autoplay: 'auto',
    color: '#442359',
    hd: true,
    showUI: false,
    api: true,

    regExp: {
      youtube: /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/,
      vimeo: /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/
    },

    error: {
      noVideo: 'No video specified',
      method: 'The method you called is not defined'
    },

    className: {
      active: 'active'
    },

    selector: {
      embed: '.embed',
      placeholder: '.placeholder',
      playButton: '.play'
    }
  };

  $.fn.video.settings.templates = {
    video: function video(image) {
      var html = '';
      if (image) {
        html += '' + '<i class="video play icon"></i>' + '<img class="placeholder" src="' + image + '">';
      }
      html += '<div class="embed"></div>';
      return html;
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/video.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, t, n) {
  "use strict";e.fn.video = function (t) {
    {
      var a,
          i = e(this),
          r = i.selector || "",
          l = new Date().getTime(),
          c = [],
          u = arguments[0],
          s = "string" == typeof u,
          m = [].slice.call(arguments, 1);o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      };
    }return (i.each(function () {
      var d,
          p = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.video.settings, t) : e.extend({}, e.fn.video.settings),
          f = p.selector,
          g = p.className,
          h = p.error,
          v = p.metadata,
          b = p.namespace,
          y = p.templates,
          w = "." + b,
          x = "module-" + b,
          F = (e(o), e(this)),
          C = F.find(f.placeholder),
          E = F.find(f.playButton),
          T = F.find(f.embed),
          A = this,
          P = F.data(x);d = { initialize: function initialize() {
          d.debug("Initializing video"), d.create(), C.on("click" + w, d.play), E.on("click" + w, d.play), d.instantiate();
        }, instantiate: function instantiate() {
          d.verbose("Storing instance of module", d), P = d, F.data(x, d);
        }, create: function create() {
          var e = F.data(v.image),
              o = y.video(e);F.html(o), d.refresh(), e || d.play(), d.debug("Creating html for video element", o);
        }, destroy: function destroy() {
          d.verbose("Destroying previous instance of video"), d.reset(), F.removeData(x).off(w), C.off(w), E.off(w);
        }, refresh: function refresh() {
          d.verbose("Refreshing selector cache"), C = F.find(f.placeholder), E = F.find(f.playButton), T = F.find(f.embed);
        }, change: function change(e, o, t) {
          d.debug("Changing video to ", e, o, t), F.data(v.source, e).data(v.id, o).data(v.url, t), p.onChange();
        }, reset: function reset() {
          d.debug("Clearing video embed and showing placeholder"), F.removeClass(g.active), T.html(" "), C.show(), p.onReset();
        }, play: function play() {
          d.debug("Playing video");var e = F.data(v.source) || !1,
              o = F.data(v.url) || !1,
              t = F.data(v.id) || !1;T.html(d.generate.html(e, t, o)), F.addClass(g.active), p.onPlay();
        }, get: { source: function source(e) {
            return "string" != typeof e ? !1 : -1 !== e.search("youtube.com") ? "youtube" : -1 !== e.search("vimeo.com") ? "vimeo" : !1;
          }, id: function id(e) {
            return e.match(p.regExp.youtube) ? e.match(p.regExp.youtube)[1] : e.match(p.regExp.vimeo) ? e.match(p.regExp.vimeo)[2] : !1;
          } }, generate: { html: function html(e, o, t) {
            d.debug("Generating embed html");var n;return (e = e || p.source, o = o || p.id, e && o || t ? (e && o || (e = d.get.source(t), o = d.get.id(t)), "vimeo" == e ? n = "<iframe src=\"//player.vimeo.com/video/" + o + "?=" + d.generate.url(e) + "\" width=\"100%\" height=\"100%\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>" : "youtube" == e && (n = "<iframe src=\"//www.youtube.com/embed/" + o + "?=" + d.generate.url(e) + "\" width=\"100%\" height=\"100%\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>")) : d.error(h.noVideo), n);
          }, url: function url(e) {
            var o = p.api ? 1 : 0,
                t = "auto" === p.autoplay ? F.data("image") !== n : p.autoplay,
                a = p.hd ? 1 : 0,
                i = p.showUI ? 1 : 0,
                r = p.showUI ? 0 : 1,
                l = "";return ("vimeo" == e && (l = "api=" + o + "&amp;title=" + i + "&amp;byline=" + i + "&amp;portrait=" + i + "&amp;autoplay=" + t, p.color && (l += "&amp;color=" + p.color)), "ustream" == e ? (l = "autoplay=" + t, p.color && (l += "&amp;color=" + p.color)) : "youtube" == e && (l = "enablejsapi=" + o + "&amp;autoplay=" + t + "&amp;autohide=" + r + "&amp;hq=" + a + "&amp;modestbranding=1", p.color && (l += "&amp;color=" + p.color)), l);
          } }, setting: function setting(o, t) {
          if ((d.debug("Changing setting", o, t), e.isPlainObject(o))) e.extend(!0, p, o);else {
            if (t === n) return p[o];p[o] = t;
          }
        }, internal: function internal(o, t) {
          if (e.isPlainObject(o)) e.extend(!0, d, o);else {
            if (t === n) return d[o];d[o] = t;
          }
        }, debug: function debug() {
          p.debug && (p.performance ? d.performance.log(arguments) : (d.debug = Function.prototype.bind.call(console.info, console, p.name + ":"), d.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          p.verbose && p.debug && (p.performance ? d.performance.log(arguments) : (d.verbose = Function.prototype.bind.call(console.info, console, p.name + ":"), d.verbose.apply(console, arguments)));
        }, error: function error() {
          d.error = Function.prototype.bind.call(console.error, console, p.name + ":"), d.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, t, n;p.performance && (o = new Date().getTime(), n = l || o, t = o - n, l = o, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: A, "Execution Time": t })), clearTimeout(d.performance.timer), d.performance.timer = setTimeout(d.performance.display, 100);
          }, display: function display() {
            var o = p.name + ":",
                t = 0;l = !1, clearTimeout(d.performance.timer), e.each(c, function (e, o) {
              t += o["Execution Time"];
            }), o += " " + t + "ms", r && (o += " '" + r + "'"), i.length > 1 && (o += " (" + i.length + ")"), (console.group !== n || console.table !== n) && c.length > 0 && (console.groupCollapsed(o), console.table ? console.table(c) : e.each(c, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(o, t, i) {
          var r,
              l,
              c,
              u = P;return (t = t || m, i = A || i, "string" == typeof o && u !== n && (o = o.split(/[\. ]/), r = o.length - 1, e.each(o, function (t, a) {
            var i = t != r ? a + o[t + 1].charAt(0).toUpperCase() + o[t + 1].slice(1) : o;if (e.isPlainObject(u[i]) && t != r) u = u[i];else {
              if (u[i] !== n) return (l = u[i], !1);if (!e.isPlainObject(u[a]) || t == r) return u[a] !== n ? (l = u[a], !1) : (d.error(h.method, o), !1);u = u[a];
            }
          })), e.isFunction(l) ? c = l.apply(i, t) : l !== n && (c = l), e.isArray(a) ? a.push(c) : a !== n ? a = [a, c] : c !== n && (a = c), l);
        } }, s ? (P === n && d.initialize(), d.invoke(u)) : (P !== n && P.invoke("destroy"), d.initialize());
    }), a !== n ? a : this);
  }, e.fn.video.settings = { name: "Video", namespace: "video", debug: !1, verbose: !0, performance: !0, metadata: { id: "id", image: "image", source: "source", url: "url" }, source: !1, url: !1, id: !1, aspectRatio: 16 / 9, onPlay: function onPlay() {}, onReset: function onReset() {}, onChange: function onChange() {}, onPause: function onPause() {}, onStop: function onStop() {}, width: "auto", height: "auto", autoplay: "auto", color: "#442359", hd: !0, showUI: !1, api: !0, regExp: { youtube: /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/, vimeo: /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/ }, error: { noVideo: "No video specified", method: "The method you called is not defined" }, className: { active: "active" }, selector: { embed: ".embed", placeholder: ".placeholder", playButton: ".play" } }, e.fn.video.settings.templates = { video: function video(e) {
      var o = "";return (e && (o += "<i class=\"video play icon\"></i><img class=\"placeholder\" src=\"" + e + "\">"), o += "<div class=\"embed\"></div>");
    } };
})(jQuery, window, document);
});

require.register("web/static/css/components/visibility", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.visibility = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visibility.settings, parameters) : $.extend({}, $.fn.visibility.settings),
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $window = $(window),
          $module = $(this),
          $context = $(settings.context),
          selector = $module.selector || '',
          instance = $module.data(moduleNamespace),
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      },
          element = this,
          observer,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing', settings);

          module.setup.cache();
          module.save.position();

          if (module.should.trackChanges()) {
            module.bind.events();
            if (settings.type == 'image') {
              module.setup.image();
            }
            if (settings.type == 'fixed') {
              module.setup.fixed();
            }
            if (settings.observeChanges) {
              module.observeChanges();
            }
            if (!module.is.visible()) {
              module.error(error.visible, $module);
            }
          }
          if (settings.initialCheck) {
            module.checkVisibility();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.debug('Storing instance', module);
          $module.data(moduleNamespace, module);
          instance = module;
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module');
          if (observer) {
            observer.disconnect();
          }
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $context.off('scrollchange' + eventNamespace, module.event.scrollchange);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        observeChanges: function observeChanges() {
          var context = $context[0];
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.verbose('DOM tree modified, updating visibility calculations');
              module.timer = setTimeout(function () {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function events() {
            module.verbose('Binding visibility events to scroll and resize');
            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize);
            // pub/sub pattern
            $context.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          },
          imageLoad: function imageLoad() {
            var $images = $module.find('img'),
                imageCount = $images.length,
                index = imageCount,
                loadedCount = 0,
                images = [],
                cache = [],
                cacheImage = document.createElement('img'),
                handleLoad = function handleLoad() {
              loadedCount++;
              if (loadedCount >= imageCount) {
                module.debug('Images finished loading inside element, refreshing position');
                module.refresh();
              }
            };
            if (imageCount > 0) {
              $images.each(function () {
                images.push($(this).attr('src'));
              });
              while (index--) {
                cacheImage = document.createElement('img');
                cacheImage.onload = handleLoad;
                cacheImage.onerror = handleLoad;
                cacheImage.src = images[index];
                cache.push(cacheImage);
              }
            }
          }
        },

        event: {
          resize: function resize() {
            module.debug('Window resized');
            requestAnimationFrame(module.refresh);
          },
          load: function load() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
          },
          // publishes scrollchange event on one scroll
          scroll: function scroll() {
            if (settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function () {
                $context.trigger('scrollchange' + eventNamespace, [$context.scrollTop()]);
              }, settings.throttle);
            } else {
              requestAnimationFrame(function () {
                $context.trigger('scrollchange' + eventNamespace, [$context.scrollTop()]);
              });
            }
          },
          // subscribes to scrollchange
          scrollchange: function scrollchange(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
          }
        },

        precache: function precache(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
          }
          var imagesLength = images.length,
              loadedCounter = 0,
              cache = [],
              cacheImage = document.createElement('img'),
              handleLoad = function handleLoad() {
            loadedCounter++;
            if (loadedCounter >= images.length) {
              if ($.isFunction(callback)) {
                callback();
              }
            }
          };
          while (imagesLength--) {
            cacheImage = document.createElement('img');
            cacheImage.onload = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src = images[imagesLength];
            cache.push(cacheImage);
          }
        },

        should: {
          trackChanges: function trackChanges() {
            if (methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
            }
            module.debug('Callbacks being attached');
            return true;
          }
        },

        setup: {
          cache: function cache() {
            module.cache = {
              occurred: {},
              screen: {},
              element: {}
            };
          },
          image: function image() {
            var src = $module.data('src');
            if (src) {
              module.verbose('Lazy loading image', src);
              settings.observeChanges = false;
              // show when top visible
              module.topVisible(function () {
                module.debug('Image top visible', element);
                module.precache(src, function () {
                  module.set.image(src);
                  settings.onTopVisible = false;
                });
              });
            }
          },
          fixed: function fixed() {
            module.verbose('Setting up fixed on element pass');
            settings.once = false;
            settings.onTopPassed = function () {
              $module.addClass(className.fixed).css({
                top: settings.offset + 'px'
              });
              if (settings.transition) {
                if ($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                }
              }
            };
            settings.onTopPassedReverse = function () {
              $module.removeClass(className.fixed).css({
                position: '',
                top: ''
              });
            };
          }
        },

        set: {
          image: function image(src) {
            var offScreen = module.cache.screen.bottom < module.cache.element.top;
            $module.attr('src', src);
            if (offScreen) {
              module.verbose('Image outside browser, no show animation');
              $module.show();
            } else {
              if (settings.transition) {
                if ($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                } else {
                  $module.fadeIn(settings.duration);
                }
              } else {
                $module.show();
              }
            }
          }
        },

        is: {
          visible: function visible() {
            if (module.cache && module.cache.element) {
              return module.cache.element.width > 0;
            }
            return false;
          }
        },

        refresh: function refresh() {
          module.debug('Refreshing constants (width/height)');
          module.reset();
          module.save.position();
          module.checkVisibility();
          settings.onRefresh.call(element);
        },

        reset: function reset() {
          module.verbose('Reseting all cached values');
          if ($.isPlainObject(module.cache)) {
            module.cache.screen = {};
            module.cache.element = {};
          }
        },

        checkVisibility: function checkVisibility(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if (module.is.visible()) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if (settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
            }
          }
        },

        passed: function passed(amount, newCallback) {
          var calculations = module.get.elementCalculations(),
              amountInPixels;
          // assign callback
          if (amount !== undefined && newCallback !== undefined) {
            settings.onPassed[amount] = newCallback;
          } else if (amount !== undefined) {
            return module.get.pixelsPassed(amount) > calculations.pixelsPassed;
          } else if (calculations.passing) {
            $.each(settings.onPassed, function (amount, callback) {
              if (calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
              } else if (!settings.once) {
                module.remove.occurred(callback);
              }
            });
          }
        },

        passing: function passing(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onPassing,
              callbackName = 'passing';
          if (newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
          }
          if (calculations.passing) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return calculations.passing;
          }
        },

        topVisible: function topVisible(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopVisible,
              callbackName = 'topVisible';
          if (newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
          }
          if (calculations.topVisible) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.topVisible;
          }
        },

        bottomVisible: function bottomVisible(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomVisible,
              callbackName = 'bottomVisible';
          if (newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
          }
          if (calculations.bottomVisible) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.bottomVisible;
          }
        },

        topPassed: function topPassed(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopPassed,
              callbackName = 'topPassed';
          if (newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
          }
          if (calculations.topPassed) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.topPassed;
          }
        },

        bottomPassed: function bottomPassed(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomPassed,
              callbackName = 'bottomPassed';
          if (newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
          }
          if (calculations.bottomPassed) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.bottomPassed;
          }
        },

        passingReverse: function passingReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onPassingReverse,
              callbackName = 'passingReverse';
          if (newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
          }
          if (!calculations.passing) {
            if (module.get.occurred('passing')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return !calculations.passing;
          }
        },

        topVisibleReverse: function topVisibleReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopVisibleReverse,
              callbackName = 'topVisibleReverse';
          if (newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
          }
          if (!calculations.topVisible) {
            if (module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.topVisible;
          }
        },

        bottomVisibleReverse: function bottomVisibleReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomVisibleReverse,
              callbackName = 'bottomVisibleReverse';
          if (newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
          }
          if (!calculations.bottomVisible) {
            if (module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.bottomVisible;
          }
        },

        topPassedReverse: function topPassedReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopPassedReverse,
              callbackName = 'topPassedReverse';
          if (newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
          }
          if (!calculations.topPassed) {
            if (module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.onTopPassed;
          }
        },

        bottomPassedReverse: function bottomPassedReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomPassedReverse,
              callbackName = 'bottomPassedReverse';
          if (newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
          }
          if (!calculations.bottomPassed) {
            if (module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.bottomPassed;
          }
        },

        execute: function execute(callback, callbackName) {
          var calculations = module.get.elementCalculations(),
              screen = module.get.screenCalculations();
          callback = callback || false;
          if (callback) {
            if (settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
            } else if (!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
          }
          module.save.occurred(callbackName);
        },

        remove: {
          occurred: function occurred(callback) {
            if (callback) {
              if (module.cache.occurred[callback] !== undefined && module.cache.occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
              }
            } else {
              module.cache.occurred = {};
            }
          }
        },

        save: {
          calculations: function calculations() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
          },
          occurred: function occurred(callback) {
            if (callback) {
              if (module.cache.occurred[callback] === undefined || module.cache.occurred[callback] !== true) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
              }
            }
          },
          scroll: function scroll(scrollPosition) {
            scrollPosition = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
          },
          direction: function direction() {
            var scroll = module.get.scroll(),
                lastScroll = module.get.lastScroll(),
                direction;
            if (scroll > lastScroll && lastScroll) {
              direction = 'down';
            } else if (scroll < lastScroll && lastScroll) {
              direction = 'up';
            } else {
              direction = 'static';
            }
            module.cache.direction = direction;
            return module.cache.direction;
          },
          elementPosition: function elementPosition() {
            var element = module.cache.element,
                screen = module.get.screenSize();
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits = element.height < screen.height;
            element.offset = $module.offset();
            element.width = $module.outerWidth();
            element.height = $module.outerHeight();
            // store
            module.cache.element = element;
            return element;
          },
          elementCalculations: function elementCalculations() {
            var screen = module.get.screenCalculations(),
                element = module.get.elementPosition();
            // offset
            if (settings.includeMargin) {
              element.margin = {};
              element.margin.top = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
            } else {
              element.top = element.offset.top;
              element.bottom = element.offset.top + element.height;
            }

            // visibility
            element.topVisible = screen.bottom >= element.top;
            element.topPassed = screen.top >= element.top;
            element.bottomVisible = screen.bottom >= element.bottom;
            element.bottomPassed = screen.top >= element.bottom;
            element.pixelsPassed = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.visible = element.topVisible || element.bottomVisible;
            element.passing = element.topPassed && !element.bottomPassed;
            element.hidden = !element.topVisible && !element.bottomVisible;

            // passing calculations
            if (element.passing) {
              element.pixelsPassed = screen.top - element.top;
              element.percentagePassed = (screen.top - element.top) / element.height;
            }
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
          },
          screenCalculations: function screenCalculations() {
            var scroll = module.get.scroll();
            module.save.direction();
            module.cache.screen.top = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
          },
          screenSize: function screenSize() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
            };
          },
          position: function position() {
            module.save.screenSize();
            module.save.elementPosition();
          }
        },

        get: {
          pixelsPassed: function pixelsPassed(amount) {
            var element = module.get.elementCalculations();
            if (amount.search('%') > -1) {
              return element.height * (parseInt(amount, 10) / 100);
            }
            return parseInt(amount, 10);
          },
          occurred: function occurred(callback) {
            return module.cache.occurred !== undefined ? module.cache.occurred[callback] || false : false;
          },
          direction: function direction() {
            if (module.cache.direction === undefined) {
              module.save.direction();
            }
            return module.cache.direction;
          },
          elementPosition: function elementPosition() {
            if (module.cache.element === undefined) {
              module.save.elementPosition();
            }
            return module.cache.element;
          },
          elementCalculations: function elementCalculations() {
            if (module.cache.element === undefined) {
              module.save.elementCalculations();
            }
            return module.cache.element;
          },
          screenCalculations: function screenCalculations() {
            if (module.cache.screen === undefined) {
              module.save.screenCalculations();
            }
            return module.cache.screen;
          },
          screenSize: function screenSize() {
            if (module.cache.screen === undefined) {
              module.save.screenSize();
            }
            return module.cache.screen;
          },
          scroll: function scroll() {
            if (module.cache.scroll === undefined) {
              module.save.scroll();
            }
            return module.cache.scroll;
          },
          lastScroll: function lastScroll() {
            if (module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
            }
            return module.cache.screen.top;
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.visibility.settings = {

    name: 'Visibility',
    namespace: 'visibility',

    debug: false,
    verbose: false,
    performance: true,

    // whether to use mutation observers to follow changes
    observeChanges: true,

    // whether to refresh calculations after all page images load
    refreshOnLoad: true,

    // callback should only occur one time
    once: true,

    // callback should fire continuously whe evaluates to true
    continuous: false,

    // offset to use with scroll top
    offset: 0,

    // whether to include margin in elements position
    includeMargin: false,

    // scroll context for visibility checks
    context: window,

    // check position immediately on init
    initialCheck: true,

    // visibility check delay in ms (defaults to animationFrame)
    throttle: false,

    // special visibility type (image, fixed)
    type: false,

    // image only animation settings
    transition: false,
    duration: 1000,

    // array of callbacks for percentage
    onPassed: {},

    // standard callbacks
    onPassing: false,
    onTopVisible: false,
    onBottomVisible: false,
    onTopPassed: false,
    onBottomPassed: false,

    // reverse callbacks
    onPassingReverse: false,
    onTopVisibleReverse: false,
    onBottomVisibleReverse: false,
    onTopPassedReverse: false,
    onBottomPassedReverse: false,

    // utility callbacks
    onUpdate: false, // disabled by default for performance
    onRefresh: function onRefresh() {},

    className: {
      fixed: 'fixed'
    },

    error: {
      method: 'The method you called is not defined.',
      visible: 'Element is hidden, you must call refresh after element becomes visible'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/visibility.min", function(exports, require, module) {
/*!
 * # Semantic UI 1.12.3 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, t, n) {
  "use strict";e.fn.visibility = function (i) {
    var s,
        c = e(this),
        r = c.selector || "",
        a = new Date().getTime(),
        l = [],
        u = arguments[0],
        d = "string" == typeof u,
        m = [].slice.call(arguments, 1);return (c.each(function () {
      var c,
          b,
          g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.visibility.settings, i) : e.extend({}, e.fn.visibility.settings),
          f = g.className,
          p = g.namespace,
          v = g.error,
          h = "." + p,
          P = "module-" + p,
          V = e(o),
          C = e(this),
          y = e(g.context),
          R = (C.selector || "", C.data(P)),
          x = o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      },
          T = this;b = { initialize: function initialize() {
          b.debug("Initializing", g), b.setup.cache(), b.save.position(), b.should.trackChanges() && (b.bind.events(), "image" == g.type && b.setup.image(), "fixed" == g.type && b.setup.fixed(), g.observeChanges && b.observeChanges(), b.is.visible() || b.error(v.visible, C)), g.initialCheck && b.checkVisibility(), b.instantiate();
        }, instantiate: function instantiate() {
          b.debug("Storing instance", b), C.data(P, b), R = b;
        }, destroy: function destroy() {
          b.verbose("Destroying previous module"), c && c.disconnect(), V.off("load" + h, b.event.load).off("resize" + h, b.event.resize), y.off("scrollchange" + h, b.event.scrollchange), C.off(h).removeData(P);
        }, observeChanges: function observeChanges() {
          y[0];"MutationObserver" in o && (c = new MutationObserver(function (e) {
            b.verbose("DOM tree modified, updating visibility calculations"), b.timer = setTimeout(function () {
              b.verbose("DOM tree modified, updating sticky menu"), b.refresh();
            }, 100);
          }), c.observe(T, { childList: !0, subtree: !0 }), b.debug("Setting up mutation observer", c));
        }, bind: { events: function events() {
            b.verbose("Binding visibility events to scroll and resize"), V.on("load" + h, b.event.load).on("resize" + h, b.event.resize), y.off("scroll" + h).on("scroll" + h, b.event.scroll).on("scrollchange" + h, b.event.scrollchange);
          }, imageLoad: function imageLoad() {
            var o = C.find("img"),
                n = o.length,
                i = n,
                s = 0,
                c = [],
                r = [],
                a = t.createElement("img"),
                l = function l() {
              s++, s >= n && (b.debug("Images finished loading inside element, refreshing position"), b.refresh());
            };if (n > 0) for (o.each(function () {
              c.push(e(this).attr("src"));
            }); i--;) a = t.createElement("img"), a.onload = l, a.onerror = l, a.src = c[i], r.push(a);
          } }, event: { resize: function resize() {
            b.debug("Window resized"), x(b.refresh);
          }, load: function load() {
            b.debug("Page finished loading"), x(b.refresh);
          }, scroll: function scroll() {
            g.throttle ? (clearTimeout(b.timer), b.timer = setTimeout(function () {
              y.trigger("scrollchange" + h, [y.scrollTop()]);
            }, g.throttle)) : x(function () {
              y.trigger("scrollchange" + h, [y.scrollTop()]);
            });
          }, scrollchange: function scrollchange(e, o) {
            b.checkVisibility(o);
          } }, precache: function precache(o, n) {
          o instanceof Array || (o = [o]);for (var i = o.length, s = 0, c = [], r = t.createElement("img"), a = function a() {
            s++, s >= o.length && e.isFunction(n) && n();
          }; i--;) r = t.createElement("img"), r.onload = a, r.onerror = a, r.src = o[i], c.push(r);
        }, should: { trackChanges: function trackChanges() {
            return d ? (b.debug("One time query, no need to bind events"), !1) : (b.debug("Callbacks being attached"), !0);
          } }, setup: { cache: function cache() {
            b.cache = { occurred: {}, screen: {}, element: {} };
          }, image: function image() {
            var e = C.data("src");e && (b.verbose("Lazy loading image", e), g.observeChanges = !1, b.topVisible(function () {
              b.debug("Image top visible", T), b.precache(e, function () {
                b.set.image(e), g.onTopVisible = !1;
              });
            }));
          }, fixed: function fixed() {
            b.verbose("Setting up fixed on element pass"), g.once = !1, g.onTopPassed = function () {
              C.addClass(f.fixed).css({ top: g.offset + "px" }), g.transition && e.fn.transition !== n && C.transition(g.transition, g.duration);
            }, g.onTopPassedReverse = function () {
              C.removeClass(f.fixed).css({ position: "", top: "" });
            };
          } }, set: { image: function image(o) {
            var t = b.cache.screen.bottom < b.cache.element.top;C.attr("src", o), t ? (b.verbose("Image outside browser, no show animation"), C.show()) : g.transition ? e.fn.transition !== n ? C.transition(g.transition, g.duration) : C.fadeIn(g.duration) : C.show();
          } }, is: { visible: function visible() {
            return b.cache && b.cache.element ? b.cache.element.width > 0 : !1;
          } }, refresh: function refresh() {
          b.debug("Refreshing constants (width/height)"), b.reset(), b.save.position(), b.checkVisibility(), g.onRefresh.call(T);
        }, reset: function reset() {
          b.verbose("Reseting all cached values"), e.isPlainObject(b.cache) && (b.cache.screen = {}, b.cache.element = {});
        }, checkVisibility: function checkVisibility(e) {
          b.verbose("Checking visibility of element", b.cache.element), b.is.visible() && (b.save.scroll(e), b.save.calculations(), b.passed(), b.passingReverse(), b.topVisibleReverse(), b.bottomVisibleReverse(), b.topPassedReverse(), b.bottomPassedReverse(), b.passing(), b.topVisible(), b.bottomVisible(), b.topPassed(), b.bottomPassed(), g.onUpdate && g.onUpdate.call(T, b.get.elementCalculations()));
        }, passed: function passed(o, t) {
          var i = b.get.elementCalculations();if (o !== n && t !== n) g.onPassed[o] = t;else {
            if (o !== n) return b.get.pixelsPassed(o) > i.pixelsPassed;i.passing && e.each(g.onPassed, function (e, o) {
              i.bottomVisible || i.pixelsPassed > b.get.pixelsPassed(e) ? b.execute(o, e) : g.once || b.remove.occurred(o);
            });
          }
        }, passing: function passing(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onPassing,
              i = "passing";return (e && (b.debug("Adding callback for passing", e), g.onPassing = e), o.passing ? b.execute(t, i) : g.once || b.remove.occurred(i), e !== n ? o.passing : void 0);
        }, topVisible: function topVisible(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onTopVisible,
              i = "topVisible";return (e && (b.debug("Adding callback for top visible", e), g.onTopVisible = e), o.topVisible ? b.execute(t, i) : g.once || b.remove.occurred(i), e === n ? o.topVisible : void 0);
        }, bottomVisible: function bottomVisible(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onBottomVisible,
              i = "bottomVisible";return (e && (b.debug("Adding callback for bottom visible", e), g.onBottomVisible = e), o.bottomVisible ? b.execute(t, i) : g.once || b.remove.occurred(i), e === n ? o.bottomVisible : void 0);
        }, topPassed: function topPassed(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onTopPassed,
              i = "topPassed";return (e && (b.debug("Adding callback for top passed", e), g.onTopPassed = e), o.topPassed ? b.execute(t, i) : g.once || b.remove.occurred(i), e === n ? o.topPassed : void 0);
        }, bottomPassed: function bottomPassed(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onBottomPassed,
              i = "bottomPassed";return (e && (b.debug("Adding callback for bottom passed", e), g.onBottomPassed = e), o.bottomPassed ? b.execute(t, i) : g.once || b.remove.occurred(i), e === n ? o.bottomPassed : void 0);
        }, passingReverse: function passingReverse(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onPassingReverse,
              i = "passingReverse";return (e && (b.debug("Adding callback for passing reverse", e), g.onPassingReverse = e), o.passing ? g.once || b.remove.occurred(i) : b.get.occurred("passing") && b.execute(t, i), e !== n ? !o.passing : void 0);
        }, topVisibleReverse: function topVisibleReverse(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onTopVisibleReverse,
              i = "topVisibleReverse";return (e && (b.debug("Adding callback for top visible reverse", e), g.onTopVisibleReverse = e), o.topVisible ? g.once || b.remove.occurred(i) : b.get.occurred("topVisible") && b.execute(t, i), e === n ? !o.topVisible : void 0);
        }, bottomVisibleReverse: function bottomVisibleReverse(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onBottomVisibleReverse,
              i = "bottomVisibleReverse";return (e && (b.debug("Adding callback for bottom visible reverse", e), g.onBottomVisibleReverse = e), o.bottomVisible ? g.once || b.remove.occurred(i) : b.get.occurred("bottomVisible") && b.execute(t, i), e === n ? !o.bottomVisible : void 0);
        }, topPassedReverse: function topPassedReverse(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onTopPassedReverse,
              i = "topPassedReverse";return (e && (b.debug("Adding callback for top passed reverse", e), g.onTopPassedReverse = e), o.topPassed ? g.once || b.remove.occurred(i) : b.get.occurred("topPassed") && b.execute(t, i), e === n ? !o.onTopPassed : void 0);
        }, bottomPassedReverse: function bottomPassedReverse(e) {
          var o = b.get.elementCalculations(),
              t = e || g.onBottomPassedReverse,
              i = "bottomPassedReverse";return (e && (b.debug("Adding callback for bottom passed reverse", e), g.onBottomPassedReverse = e), o.bottomPassed ? g.once || b.remove.occurred(i) : b.get.occurred("bottomPassed") && b.execute(t, i), e === n ? !o.bottomPassed : void 0);
        }, execute: function execute(e, o) {
          var t = b.get.elementCalculations(),
              n = b.get.screenCalculations();e = e || !1, e && (g.continuous ? (b.debug("Callback being called continuously", o, t), e.call(T, t, n)) : b.get.occurred(o) || (b.debug("Conditions met", o, t), e.call(T, t, n))), b.save.occurred(o);
        }, remove: { occurred: function occurred(e) {
            e ? b.cache.occurred[e] !== n && b.cache.occurred[e] === !0 && (b.debug("Callback can now be called again", e), b.cache.occurred[e] = !1) : b.cache.occurred = {};
          } }, save: { calculations: function calculations() {
            b.verbose("Saving all calculations necessary to determine positioning"), b.save.direction(), b.save.screenCalculations(), b.save.elementCalculations();
          }, occurred: function occurred(e) {
            e && (b.cache.occurred[e] === n || b.cache.occurred[e] !== !0) && (b.verbose("Saving callback occurred", e), b.cache.occurred[e] = !0);
          }, scroll: function scroll(e) {
            e = e + g.offset || y.scrollTop() + g.offset, b.cache.scroll = e;
          }, direction: function direction() {
            var e,
                o = b.get.scroll(),
                t = b.get.lastScroll();return (e = o > t && t ? "down" : t > o && t ? "up" : "static", b.cache.direction = e, b.cache.direction);
          }, elementPosition: function elementPosition() {
            var e = b.cache.element,
                o = b.get.screenSize();return (b.verbose("Saving element position"), e.fits = e.height < o.height, e.offset = C.offset(), e.width = C.outerWidth(), e.height = C.outerHeight(), b.cache.element = e, e);
          }, elementCalculations: function elementCalculations() {
            var e = b.get.screenCalculations(),
                o = b.get.elementPosition();return (g.includeMargin ? (o.margin = {}, o.margin.top = parseInt(C.css("margin-top"), 10), o.margin.bottom = parseInt(C.css("margin-bottom"), 10), o.top = o.offset.top - o.margin.top, o.bottom = o.offset.top + o.height + o.margin.bottom) : (o.top = o.offset.top, o.bottom = o.offset.top + o.height), o.topVisible = e.bottom >= o.top, o.topPassed = e.top >= o.top, o.bottomVisible = e.bottom >= o.bottom, o.bottomPassed = e.top >= o.bottom, o.pixelsPassed = 0, o.percentagePassed = 0, o.visible = o.topVisible || o.bottomVisible, o.passing = o.topPassed && !o.bottomPassed, o.hidden = !o.topVisible && !o.bottomVisible, o.passing && (o.pixelsPassed = e.top - o.top, o.percentagePassed = (e.top - o.top) / o.height), b.cache.element = o, b.verbose("Updated element calculations", o), o);
          }, screenCalculations: function screenCalculations() {
            var e = b.get.scroll();return (b.save.direction(), b.cache.screen.top = e, b.cache.screen.bottom = e + b.cache.screen.height, b.cache.screen);
          }, screenSize: function screenSize() {
            b.verbose("Saving window position"), b.cache.screen = { height: y.height() };
          }, position: function position() {
            b.save.screenSize(), b.save.elementPosition();
          } }, get: { pixelsPassed: function pixelsPassed(e) {
            var o = b.get.elementCalculations();return e.search("%") > -1 ? o.height * (parseInt(e, 10) / 100) : parseInt(e, 10);
          }, occurred: function occurred(e) {
            return b.cache.occurred !== n ? b.cache.occurred[e] || !1 : !1;
          }, direction: function direction() {
            return (b.cache.direction === n && b.save.direction(), b.cache.direction);
          }, elementPosition: function elementPosition() {
            return (b.cache.element === n && b.save.elementPosition(), b.cache.element);
          }, elementCalculations: function elementCalculations() {
            return (b.cache.element === n && b.save.elementCalculations(), b.cache.element);
          }, screenCalculations: function screenCalculations() {
            return (b.cache.screen === n && b.save.screenCalculations(), b.cache.screen);
          }, screenSize: function screenSize() {
            return (b.cache.screen === n && b.save.screenSize(), b.cache.screen);
          }, scroll: function scroll() {
            return (b.cache.scroll === n && b.save.scroll(), b.cache.scroll);
          }, lastScroll: function lastScroll() {
            return b.cache.screen === n ? (b.debug("First scroll event, no last scroll could be found"), !1) : b.cache.screen.top;
          } }, setting: function setting(o, t) {
          if (e.isPlainObject(o)) e.extend(!0, g, o);else {
            if (t === n) return g[o];g[o] = t;
          }
        }, internal: function internal(o, t) {
          if (e.isPlainObject(o)) e.extend(!0, b, o);else {
            if (t === n) return b[o];b[o] = t;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, g.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, t, n;g.performance && (o = new Date().getTime(), n = a || o, t = o - n, a = o, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": t })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 500);
          }, display: function display() {
            var o = g.name + ":",
                t = 0;a = !1, clearTimeout(b.performance.timer), e.each(l, function (e, o) {
              t += o["Execution Time"];
            }), o += " " + t + "ms", r && (o += " '" + r + "'"), (console.group !== n || console.table !== n) && l.length > 0 && (console.groupCollapsed(o), console.table ? console.table(l) : e.each(l, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(o, t, i) {
          var c,
              r,
              a,
              l = R;return (t = t || m, i = T || i, "string" == typeof o && l !== n && (o = o.split(/[\. ]/), c = o.length - 1, e.each(o, function (t, i) {
            var s = t != c ? i + o[t + 1].charAt(0).toUpperCase() + o[t + 1].slice(1) : o;if (e.isPlainObject(l[s]) && t != c) l = l[s];else {
              if (l[s] !== n) return (r = l[s], !1);if (!e.isPlainObject(l[i]) || t == c) return l[i] !== n ? (r = l[i], !1) : (b.error(v.method, o), !1);l = l[i];
            }
          })), e.isFunction(r) ? a = r.apply(i, t) : r !== n && (a = r), e.isArray(s) ? s.push(a) : s !== n ? s = [s, a] : a !== n && (s = a), r);
        } }, d ? (R === n && b.initialize(), b.invoke(u)) : (R !== n && R.invoke("destroy"), b.initialize());
    }), s !== n ? s : this);
  }, e.fn.visibility.settings = { name: "Visibility", namespace: "visibility", debug: !1, verbose: !1, performance: !0, observeChanges: !0, refreshOnLoad: !0, once: !0, continuous: !1, offset: 0, includeMargin: !1, context: o, initialCheck: !0, throttle: !1, type: !1, transition: !1, duration: 1000, onPassed: {}, onPassing: !1, onTopVisible: !1, onBottomVisible: !1, onTopPassed: !1, onBottomPassed: !1, onPassingReverse: !1, onTopVisibleReverse: !1, onBottomVisibleReverse: !1, onTopPassedReverse: !1, onBottomPassedReverse: !1, onUpdate: !1, onRefresh: function onRefresh() {}, className: { fixed: "fixed" }, error: { method: "The method you called is not defined.", visible: "Element is hidden, you must call refresh after element becomes visible" } };
})(jQuery, window, document);
});

require.register("web/static/js/app", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _phoenix = require('phoenix');

// let socket = new Socket("/ws")
// socket.connect()
// let chan = socket.chan("topic:subtopic", {})
// chan.join().receive("ok", chan => {
//   console.log("Success!")
// })

var App = {};

$('.ui.checkbox').checkbox();

var formSettings = { inline: true, on: 'blur' };

var formRules = {
  name: {
    identifier: 'name',
    rules: [{
      type: 'length[4]',
      prompt: 'Please enter a name, at least 4 characters'
    }]
  },
  password: {
    identifier: 'password',
    rules: [{
      type: 'length[6]',
      prompt: 'Please provide at least 6 character of password'
    }]
  },
  confirmPassword: {
    identifier: 'confirm_password',
    rules: [{
      type: 'match[password]',
      prompt: 'Password should be the same'
    }]
  }
};

$('.ui.form').form(formRules, formSettings);
$('.message .close').on('click', function () {
  $(this).closest('.message').fadeOut();
});

exports['default'] = App;
module.exports = exports['default'];
});

;
//# sourceMappingURL=app.js.map