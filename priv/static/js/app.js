(function() {
  'use strict';

  var globals = typeof window === 'undefined' ? global : window;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var has = ({}).hasOwnProperty;

  var aliases = {};

  var endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  var unalias = function(alias, loaderPath) {
    var start = 0;
    if (loaderPath) {
      if (loaderPath.indexOf('components/' === 0)) {
        start = 'components/'.length;
      }
      if (loaderPath.indexOf('/', start) > 0) {
        loaderPath = loaderPath.substring(start, loaderPath.indexOf('/', start));
      }
    }
    var result = aliases[alias + '/index.js'] || aliases[loaderPath + '/deps/' + alias + '/index.js'];
    if (result) {
      return 'components/' + result.substring(0, result.length - '.js'.length);
    }
    return alias;
  };

  var expand = (function() {
    var reg = /^\.\.?(\/|$)/;
    return function(root, name) {
      var results = [], parts, part;
      parts = (reg.test(name) ? root + '/' + name : name).split('/');
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part === '..') {
          results.pop();
        } else if (part !== '.' && part !== '') {
          results.push(part);
        }
      }
      return results.join('/');
    };
  })();
  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var require = function(name, loaderPath) {
    var path = expand(name, '.');
    if (loaderPath == null) loaderPath = '/';
    path = unalias(name, loaderPath);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has.call(cache, dirIndex)) return cache[dirIndex].exports;
    if (has.call(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '" from '+ '"' + loaderPath + '"');
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  require.register = require.define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  require.list = function() {
    var result = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        result.push(item);
      }
    }
    return result;
  };

  require.brunch = true;
  globals.require = require;
})();
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});

//! moment.js
//! version : 2.10.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Dc.apply(null,arguments)}function b(a){Dc=a}function c(a){return"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return za(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(0/0);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=j(b)),"undefined"!=typeof b._locale&&(a._locale=b._locale),Fc.length>0)for(c in Fc)d=Fc[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(+b._d),Gc===!1&&(Gc=!0,a.updateOffset(this),Gc=!1)}function o(a){return a instanceof n||null!=a&&null!=a._isAMomentObject}function p(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function q(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&p(a[d])!==p(b[d]))&&g++;return g+f}function r(){}function s(a){return a?a.toLowerCase().replace("_","-"):a}function t(a){for(var b,c,d,e,f=0;f<a.length;){for(e=s(a[f]).split("-"),b=e.length,c=s(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=u(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&q(e,c,!0)>=b-1)break;b--}f++}return null}function u(a){var b=null;if(!Hc[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=Ec._abbr,require("./locale/"+a),v(b)}catch(c){}return Hc[a]}function v(a,b){var c;return a&&(c="undefined"==typeof b?x(a):w(a,b),c&&(Ec=c)),Ec._abbr}function w(a,b){return null!==b?(b.abbr=a,Hc[a]||(Hc[a]=new r),Hc[a].set(b),v(a),Hc[a]):(delete Hc[a],null)}function x(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return Ec;if(!c(a)){if(b=u(a))return b;a=[a]}return t(a)}function y(a,b){var c=a.toLowerCase();Ic[c]=Ic[c+"s"]=Ic[b]=a}function z(a){return"string"==typeof a?Ic[a]||Ic[a.toLowerCase()]:void 0}function A(a){var b,c,d={};for(c in a)f(a,c)&&(b=z(c),b&&(d[b]=a[c]));return d}function B(b,c){return function(d){return null!=d?(D(this,b,d),a.updateOffset(this,c),this):C(this,b)}}function C(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function D(a,b,c){return a._d["set"+(a._isUTC?"UTC":"")+b](c)}function E(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=z(a),"function"==typeof this[a])return this[a](b);return this}function F(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function G(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Mc[a]=e),b&&(Mc[b[0]]=function(){return F(e.apply(this,arguments),b[1],b[2])}),c&&(Mc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function H(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function I(a){var b,c,d=a.match(Jc);for(b=0,c=d.length;c>b;b++)Mc[d[b]]?d[b]=Mc[d[b]]:d[b]=H(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function J(a,b){return a.isValid()?(b=K(b,a.localeData()),Lc[b]||(Lc[b]=I(b)),Lc[b](a)):a.localeData().invalidDate()}function K(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Kc.lastIndex=0;d>=0&&Kc.test(a);)a=a.replace(Kc,c),Kc.lastIndex=0,d-=1;return a}function L(a,b,c){_c[a]="function"==typeof b?b:function(a){return a&&c?c:b}}function M(a,b){return f(_c,a)?_c[a](b._strict,b._locale):new RegExp(N(a))}function N(a){return a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function O(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=p(a)}),c=0;c<a.length;c++)ad[a[c]]=d}function P(a,b){O(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function Q(a,b,c){null!=b&&f(ad,a)&&ad[a](b,c._a,c,a)}function R(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function S(a){return this._months[a.month()]}function T(a){return this._monthsShort[a.month()]}function U(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function V(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),R(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function W(b){return null!=b?(V(this,b),a.updateOffset(this,!0),this):C(this,"Month")}function X(){return R(this.year(),this.month())}function Y(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[cd]<0||c[cd]>11?cd:c[dd]<1||c[dd]>R(c[bd],c[cd])?dd:c[ed]<0||c[ed]>24||24===c[ed]&&(0!==c[fd]||0!==c[gd]||0!==c[hd])?ed:c[fd]<0||c[fd]>59?fd:c[gd]<0||c[gd]>59?gd:c[hd]<0||c[hd]>999?hd:-1,j(a)._overflowDayOfYear&&(bd>b||b>dd)&&(b=dd),j(a).overflow=b),a}function Z(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function $(a,b){var c=!0,d=a+"\n"+(new Error).stack;return g(function(){return c&&(Z(d),c=!1),b.apply(this,arguments)},b)}function _(a,b){kd[a]||(Z(b),kd[a]=!0)}function aa(a){var b,c,d=a._i,e=ld.exec(d);if(e){for(j(a).iso=!0,b=0,c=md.length;c>b;b++)if(md[b][1].exec(d)){a._f=md[b][0]+(e[6]||" ");break}for(b=0,c=nd.length;c>b;b++)if(nd[b][1].exec(d)){a._f+=nd[b][0];break}d.match(Yc)&&(a._f+="Z"),ta(a)}else a._isValid=!1}function ba(b){var c=od.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(aa(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function ca(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function da(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function ea(a){return fa(a)?366:365}function fa(a){return a%4===0&&a%100!==0||a%400===0}function ga(){return fa(this.year())}function ha(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=Aa(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ia(a){return ha(a,this._week.dow,this._week.doy).week}function ja(){return this._week.dow}function ka(){return this._week.doy}function la(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function ma(a){var b=ha(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function na(a,b,c,d,e){var f,g,h=da(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:ea(a-1)+g}}function oa(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function pa(a,b,c){return null!=a?a:null!=b?b:c}function qa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ra(a){var b,c,d,e,f=[];if(!a._d){for(d=qa(a),a._w&&null==a._a[dd]&&null==a._a[cd]&&sa(a),a._dayOfYear&&(e=pa(a._a[bd],d[bd]),a._dayOfYear>ea(e)&&(j(a)._overflowDayOfYear=!0),c=da(e,0,a._dayOfYear),a._a[cd]=c.getUTCMonth(),a._a[dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[ed]&&0===a._a[fd]&&0===a._a[gd]&&0===a._a[hd]&&(a._nextDay=!0,a._a[ed]=0),a._d=(a._useUTC?da:ca).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[ed]=24)}}function sa(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=pa(b.GG,a._a[bd],ha(Aa(),1,4).year),d=pa(b.W,1),e=pa(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=pa(b.gg,a._a[bd],ha(Aa(),f,g).year),d=pa(b.w,1),null!=b.d?(e=b.d,f>e&&++d):e=null!=b.e?b.e+f:f),h=na(c,d,e,g,f),a._a[bd]=h.year,a._dayOfYear=h.dayOfYear}function ta(b){if(b._f===a.ISO_8601)return void aa(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=K(b._f,b._locale).match(Jc)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(M(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Mc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),Q(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[ed]<=12&&b._a[ed]>0&&(j(b).bigHour=void 0),b._a[ed]=ua(b._locale,b._a[ed],b._meridiem),ra(b),Y(b)}function ua(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function va(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(0/0));for(e=0;e<a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],ta(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function wa(a){if(!a._d){var b=A(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ra(a)}}function xa(a){var b,e=a._i,f=a._f;return a._locale=a._locale||x(a._l),null===e||void 0===f&&""===e?l({nullInput:!0}):("string"==typeof e&&(a._i=e=a._locale.preparse(e)),o(e)?new n(Y(e)):(c(f)?va(a):f?ta(a):d(e)?a._d=e:ya(a),b=new n(Y(a)),b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b))}function ya(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):"string"==typeof f?ba(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ra(b)):"object"==typeof f?wa(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function za(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,xa(f)}function Aa(a,b,c,d){return za(a,b,c,d,!1)}function Ba(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Aa();for(d=b[0],e=1;e<b.length;++e)b[e][a](d)&&(d=b[e]);return d}function Ca(){var a=[].slice.call(arguments,0);return Ba("isBefore",a)}function Da(){var a=[].slice.call(arguments,0);return Ba("isAfter",a)}function Ea(a){var b=A(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=x(),this._bubble()}function Fa(a){return a instanceof Ea}function Ga(a,b){G(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+F(~~(a/60),2)+b+F(~~a%60,2)})}function Ha(a){var b=(a||"").match(Yc)||[],c=b[b.length-1]||[],d=(c+"").match(td)||["-",0,0],e=+(60*d[1])+p(d[2]);return"+"===d[0]?e:-e}function Ia(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Aa(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Aa(b).local();return c._isUTC?Aa(b).zone(c._offset||0):Aa(b).local()}function Ja(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ka(b,c){var d,e=this._offset||0;return null!=b?("string"==typeof b&&(b=Ha(b)),Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Ja(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?$a(this,Va(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ja(this)}function La(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Ma(a){return this.utcOffset(0,a)}function Na(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Ja(this),"m")),this}function Oa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ha(this._i)),this}function Pa(a){return a=a?Aa(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Qa(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ra(){if(this._a){var a=this._isUTC?h(this._a):Aa(this._a);return this.isValid()&&q(this._a,a.toArray())>0}return!1}function Sa(){return!this._isUTC}function Ta(){return this._isUTC}function Ua(){return this._isUTC&&0===this._offset}function Va(a,b){var c,d,e,g=a,h=null;return Fa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=ud.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:p(h[dd])*c,h:p(h[ed])*c,m:p(h[fd])*c,s:p(h[gd])*c,ms:p(h[hd])*c}):(h=vd.exec(a))?(c="-"===h[1]?-1:1,g={y:Wa(h[2],c),M:Wa(h[3],c),d:Wa(h[4],c),h:Wa(h[5],c),m:Wa(h[6],c),s:Wa(h[7],c),w:Wa(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=Ya(Aa(g.from),Aa(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ea(g),Fa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function Wa(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function Xa(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Ya(a,b){var c;return b=Ia(b,a),a.isBefore(b)?c=Xa(a,b):(c=Xa(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function Za(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(_(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Va(c,d),$a(this,e,a),this}}function $a(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&D(b,"Date",C(b,"Date")+g*d),h&&V(b,C(b,"Month")+h*d),e&&a.updateOffset(b,g||h)}function _a(a){var b=a||Aa(),c=Ia(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this,Aa(b)))}function ab(){return new n(this)}function bb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this>+a):(c=o(a)?+a:+Aa(a),c<+this.clone().startOf(b))}function cb(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+a>+this):(c=o(a)?+a:+Aa(a),+this.clone().endOf(b)<c)}function db(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function eb(a,b){var c;return b=z(b||"millisecond"),"millisecond"===b?(a=o(a)?a:Aa(a),+this===+a):(c=+Aa(a),+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))}function fb(a){return 0>a?Math.ceil(a):Math.floor(a)}function gb(a,b,c){var d,e,f=Ia(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=z(b),"year"===b||"month"===b||"quarter"===b?(e=hb(this,f),"quarter"===b?e/=3:"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:fb(e)}function hb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function ib(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function jb(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():J(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):J(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function kb(b){var c=J(this,b||a.defaultFormat);return this.localeData().postformat(c)}function lb(a,b){return this.isValid()?Va({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function mb(a){return this.from(Aa(),a)}function nb(a,b){return this.isValid()?Va({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.to(Aa(),a)}function pb(a){var b;return void 0===a?this._locale._abbr:(b=x(a),null!=b&&(this._locale=b),this)}function qb(){return this._locale}function rb(a){switch(a=z(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function sb(a){return a=z(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function tb(){return+this._d-6e4*(this._offset||0)}function ub(){return Math.floor(+this/1e3)}function vb(){return this._offset?new Date(+this):this._d}function wb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function xb(){return k(this)}function yb(){return g({},j(this))}function zb(){return j(this).overflow}function Ab(a,b){G(0,[a,a.length],0,b)}function Bb(a,b,c){return ha(Aa([a,11,31+b-c]),b,c).week}function Cb(a){var b=ha(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")}function Db(a){var b=ha(this,1,4).year;return null==a?b:this.add(a-b,"y")}function Eb(){return Bb(this.year(),1,4)}function Fb(){var a=this.localeData()._week;return Bb(this.year(),a.dow,a.doy)}function Gb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Hb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function Ib(a){return this._weekdays[a.day()]}function Jb(a){return this._weekdaysShort[a.day()]}function Kb(a){return this._weekdaysMin[a.day()]}function Lb(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=Aa([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b}function Mb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Hb(a,this.localeData()),this.add(a-b,"d")):b}function Nb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Ob(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Pb(a,b){G(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Qb(a,b){return b._meridiemParse}function Rb(a){return"p"===(a+"").toLowerCase().charAt(0)}function Sb(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Tb(a){G(0,[a,3],0,"millisecond")}function Ub(){return this._isUTC?"UTC":""}function Vb(){return this._isUTC?"Coordinated Universal Time":""}function Wb(a){return Aa(1e3*a)}function Xb(){return Aa.apply(null,arguments).parseZone()}function Yb(a,b,c){var d=this._calendar[a];return"function"==typeof d?d.call(b,c):d}function Zb(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b}function $b(){return this._invalidDate}function _b(a){return this._ordinal.replace("%d",a)}function ac(a){return a}function bc(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function cc(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)}function dc(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function ec(a,b,c,d){var e=x(),f=h().set(d,b);return e[c](f,a)}function fc(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return ec(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=ec(a,f,c,e);return g}function gc(a,b){return fc(a,b,"months",12,"month")}function hc(a,b){return fc(a,b,"monthsShort",12,"month")}function ic(a,b){return fc(a,b,"weekdays",7,"day")}function jc(a,b){return fc(a,b,"weekdaysShort",7,"day")}function kc(a,b){return fc(a,b,"weekdaysMin",7,"day")}function lc(){var a=this._data;return this._milliseconds=Rd(this._milliseconds),this._days=Rd(this._days),this._months=Rd(this._months),a.milliseconds=Rd(a.milliseconds),a.seconds=Rd(a.seconds),a.minutes=Rd(a.minutes),a.hours=Rd(a.hours),a.months=Rd(a.months),a.years=Rd(a.years),this}function mc(a,b,c,d){var e=Va(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function nc(a,b){return mc(this,a,b,1)}function oc(a,b){return mc(this,a,b,-1)}function pc(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;return g.milliseconds=d%1e3,a=fb(d/1e3),g.seconds=a%60,b=fb(a/60),g.minutes=b%60,c=fb(b/60),g.hours=c%24,e+=fb(c/24),h=fb(qc(e)),e-=fb(rc(h)),f+=fb(e/30),e%=30,h+=fb(f/12),f%=12,g.days=e,g.months=f,g.years=h,this}function qc(a){return 400*a/146097}function rc(a){return 146097*a/400}function sc(a){var b,c,d=this._milliseconds;if(a=z(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+12*qc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(rc(this._months/12)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function tc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*p(this._months/12)}function uc(a){return function(){return this.as(a)}}function vc(a){return a=z(a),this[a+"s"]()}function wc(a){return function(){return this._data[a]}}function xc(){return fb(this.days()/7)}function yc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function zc(a,b,c){var d=Va(a).abs(),e=fe(d.as("s")),f=fe(d.as("m")),g=fe(d.as("h")),h=fe(d.as("d")),i=fe(d.as("M")),j=fe(d.as("y")),k=e<ge.s&&["s",e]||1===f&&["m"]||f<ge.m&&["mm",f]||1===g&&["h"]||g<ge.h&&["hh",g]||1===h&&["d"]||h<ge.d&&["dd",h]||1===i&&["M"]||i<ge.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,yc.apply(null,k)}function Ac(a,b){return void 0===ge[a]?!1:void 0===b?ge[a]:(ge[a]=b,!0)}function Bc(a){var b=this.localeData(),c=zc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Cc(){var a=he(this.years()),b=he(this.months()),c=he(this.days()),d=he(this.hours()),e=he(this.minutes()),f=he(this.seconds()+this.milliseconds()/1e3),g=this.asSeconds();return g?(0>g?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"}var Dc,Ec,Fc=a.momentProperties=[],Gc=!1,Hc={},Ic={},Jc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Kc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Lc={},Mc={},Nc=/\d/,Oc=/\d\d/,Pc=/\d{3}/,Qc=/\d{4}/,Rc=/[+-]?\d{6}/,Sc=/\d\d?/,Tc=/\d{1,3}/,Uc=/\d{1,4}/,Vc=/[+-]?\d{1,6}/,Wc=/\d+/,Xc=/[+-]?\d+/,Yc=/Z|[+-]\d\d:?\d\d/gi,Zc=/[+-]?\d+(\.\d{1,3})?/,$c=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,_c={},ad={},bd=0,cd=1,dd=2,ed=3,fd=4,gd=5,hd=6;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),G("MMMM",0,0,function(a){return this.localeData().months(this,a)}),y("month","M"),L("M",Sc),L("MM",Sc,Oc),L("MMM",$c),L("MMMM",$c),O(["M","MM"],function(a,b){b[cd]=p(a)-1}),O(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[cd]=e:j(c).invalidMonth=a});var id="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),jd="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),kd={};a.suppressDeprecationWarnings=!1;var ld=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,md=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],nd=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],od=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=$("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),y("year","y"),L("Y",Xc),L("YY",Sc,Oc),L("YYYY",Uc,Qc),L("YYYYY",Vc,Rc),L("YYYYYY",Vc,Rc),O(["YYYY","YYYYY","YYYYYY"],bd),O("YY",function(b,c){c[bd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return p(a)+(p(a)>68?1900:2e3)};var pd=B("FullYear",!1);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),y("week","w"),y("isoWeek","W"),L("w",Sc),L("ww",Sc,Oc),L("W",Sc),L("WW",Sc,Oc),P(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=p(a)});var qd={dow:0,doy:6};G("DDD",["DDDD",3],"DDDo","dayOfYear"),y("dayOfYear","DDD"),L("DDD",Tc),L("DDDD",Pc),O(["DDD","DDDD"],function(a,b,c){c._dayOfYear=p(a)}),a.ISO_8601=function(){};var rd=$("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return this>a?this:a}),sd=$("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Aa.apply(null,arguments);return a>this?this:a});Ga("Z",":"),Ga("ZZ",""),L("Z",Yc),L("ZZ",Yc),O(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Ha(a)});var td=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var ud=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,vd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Va.fn=Ea.prototype;var wd=Za(1,"add"),xd=Za(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var yd=$("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ab("gggg","weekYear"),Ab("ggggg","weekYear"),Ab("GGGG","isoWeekYear"),Ab("GGGGG","isoWeekYear"),y("weekYear","gg"),y("isoWeekYear","GG"),L("G",Xc),L("g",Xc),L("GG",Sc,Oc),L("gg",Sc,Oc),L("GGGG",Uc,Qc),L("gggg",Uc,Qc),L("GGGGG",Vc,Rc),L("ggggg",Vc,Rc),P(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=p(a)}),P(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),G("Q",0,0,"quarter"),y("quarter","Q"),L("Q",Nc),O("Q",function(a,b){b[cd]=3*(p(a)-1)}),G("D",["DD",2],"Do","date"),y("date","D"),L("D",Sc),L("DD",Sc,Oc),L("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),O(["D","DD"],dd),O("Do",function(a,b){b[dd]=p(a.match(Sc)[0],10)});var zd=B("Date",!0);G("d",0,"do","day"),G("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),G("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),G("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),y("day","d"),y("weekday","e"),y("isoWeekday","E"),L("d",Sc),L("e",Sc),L("E",Sc),L("dd",$c),L("ddd",$c),L("dddd",$c),P(["dd","ddd","dddd"],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),P(["d","e","E"],function(a,b,c,d){b[d]=p(a)});var Ad="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Bd="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Cd="Su_Mo_Tu_We_Th_Fr_Sa".split("_");G("H",["HH",2],0,"hour"),G("h",["hh",2],0,function(){return this.hours()%12||12}),Pb("a",!0),Pb("A",!1),y("hour","h"),L("a",Qb),L("A",Qb),L("H",Sc),L("h",Sc),L("HH",Sc,Oc),L("hh",Sc,Oc),O(["H","HH"],ed),O(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),O(["h","hh"],function(a,b,c){b[ed]=p(a),j(c).bigHour=!0});var Dd=/[ap]\.?m?\.?/i,Ed=B("Hours",!0);G("m",["mm",2],0,"minute"),y("minute","m"),L("m",Sc),L("mm",Sc,Oc),O(["m","mm"],fd);var Fd=B("Minutes",!1);G("s",["ss",2],0,"second"),y("second","s"),L("s",Sc),L("ss",Sc,Oc),O(["s","ss"],gd);var Gd=B("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Tb("SSS"),Tb("SSSS"),y("millisecond","ms"),L("S",Tc,Nc),L("SS",Tc,Oc),L("SSS",Tc,Pc),L("SSSS",Wc),O(["S","SS","SSS","SSSS"],function(a,b){b[hd]=p(1e3*("0."+a))});var Hd=B("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Id=n.prototype;Id.add=wd,Id.calendar=_a,Id.clone=ab,Id.diff=gb,Id.endOf=sb,Id.format=kb,Id.from=lb,Id.fromNow=mb,Id.to=nb,Id.toNow=ob,Id.get=E,Id.invalidAt=zb,Id.isAfter=bb,Id.isBefore=cb,Id.isBetween=db,Id.isSame=eb,Id.isValid=xb,Id.lang=yd,Id.locale=pb,Id.localeData=qb,Id.max=sd,Id.min=rd,Id.parsingFlags=yb,Id.set=E,Id.startOf=rb,Id.subtract=xd,Id.toArray=wb,Id.toDate=vb,Id.toISOString=jb,Id.toJSON=jb,Id.toString=ib,Id.unix=ub,Id.valueOf=tb,Id.year=pd,Id.isLeapYear=ga,Id.weekYear=Cb,Id.isoWeekYear=Db,Id.quarter=Id.quarters=Gb,Id.month=W,Id.daysInMonth=X,Id.week=Id.weeks=la,Id.isoWeek=Id.isoWeeks=ma,Id.weeksInYear=Fb,Id.isoWeeksInYear=Eb,Id.date=zd,Id.day=Id.days=Mb,Id.weekday=Nb,Id.isoWeekday=Ob,Id.dayOfYear=oa,Id.hour=Id.hours=Ed,Id.minute=Id.minutes=Fd,Id.second=Id.seconds=Gd,Id.millisecond=Id.milliseconds=Hd,Id.utcOffset=Ka,Id.utc=Ma,Id.local=Na,Id.parseZone=Oa,Id.hasAlignedHourOffset=Pa,Id.isDST=Qa,Id.isDSTShifted=Ra,Id.isLocal=Sa,Id.isUtcOffset=Ta,Id.isUtc=Ua,Id.isUTC=Ua,Id.zoneAbbr=Ub,Id.zoneName=Vb,Id.dates=$("dates accessor is deprecated. Use date instead.",zd),Id.months=$("months accessor is deprecated. Use month instead",W),Id.years=$("years accessor is deprecated. Use year instead",pd),Id.zone=$("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",La);var Jd=Id,Kd={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ld={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},Md="Invalid date",Nd="%d",Od=/\d{1,2}/,Pd={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",
hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Qd=r.prototype;Qd._calendar=Kd,Qd.calendar=Yb,Qd._longDateFormat=Ld,Qd.longDateFormat=Zb,Qd._invalidDate=Md,Qd.invalidDate=$b,Qd._ordinal=Nd,Qd.ordinal=_b,Qd._ordinalParse=Od,Qd.preparse=ac,Qd.postformat=ac,Qd._relativeTime=Pd,Qd.relativeTime=bc,Qd.pastFuture=cc,Qd.set=dc,Qd.months=S,Qd._months=id,Qd.monthsShort=T,Qd._monthsShort=jd,Qd.monthsParse=U,Qd.week=ia,Qd._week=qd,Qd.firstDayOfYear=ka,Qd.firstDayOfWeek=ja,Qd.weekdays=Ib,Qd._weekdays=Ad,Qd.weekdaysMin=Kb,Qd._weekdaysMin=Cd,Qd.weekdaysShort=Jb,Qd._weekdaysShort=Bd,Qd.weekdaysParse=Lb,Qd.isPM=Rb,Qd._meridiemParse=Dd,Qd.meridiem=Sb,v("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===p(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=$("moment.lang is deprecated. Use moment.locale instead.",v),a.langData=$("moment.langData is deprecated. Use moment.localeData instead.",x);var Rd=Math.abs,Sd=uc("ms"),Td=uc("s"),Ud=uc("m"),Vd=uc("h"),Wd=uc("d"),Xd=uc("w"),Yd=uc("M"),Zd=uc("y"),$d=wc("milliseconds"),_d=wc("seconds"),ae=wc("minutes"),be=wc("hours"),ce=wc("days"),de=wc("months"),ee=wc("years"),fe=Math.round,ge={s:45,m:45,h:22,d:26,M:11},he=Math.abs,ie=Ea.prototype;ie.abs=lc,ie.add=nc,ie.subtract=oc,ie.as=sc,ie.asMilliseconds=Sd,ie.asSeconds=Td,ie.asMinutes=Ud,ie.asHours=Vd,ie.asDays=Wd,ie.asWeeks=Xd,ie.asMonths=Yd,ie.asYears=Zd,ie.valueOf=tc,ie._bubble=pc,ie.get=vc,ie.milliseconds=$d,ie.seconds=_d,ie.minutes=ae,ie.hours=be,ie.days=ce,ie.weeks=xc,ie.months=de,ie.years=ee,ie.humanize=Bc,ie.toISOString=Cc,ie.toString=Cc,ie.toJSON=Cc,ie.locale=pb,ie.localeData=qb,ie.toIsoString=$("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Cc),ie.lang=yd,G("X",0,0,"unix"),G("x",0,0,"valueOf"),L("x",Xc),L("X",Zc),O("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),O("x",function(a,b,c){c._d=new Date(p(a))}),a.version="2.10.3",b(Aa),a.fn=Jd,a.min=Ca,a.max=Da,a.utc=h,a.unix=Wb,a.months=gc,a.isDate=d,a.locale=v,a.invalid=l,a.duration=Va,a.isMoment=o,a.weekdays=ic,a.parseZone=Xb,a.localeData=x,a.isDuration=Fa,a.monthsShort=hc,a.weekdaysMin=kc,a.defineLocale=w,a.weekdaysShort=jc,a.normalizeUnits=z,a.relativeTimeThreshold=Ac;var je=a;return je});
(function(/*! Brunch !*/) {
  'use strict';

  var globals = typeof window !== 'undefined' ? window : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};

  var has = function(object, name) {
    return ({}).hasOwnProperty.call(object, name);
  };

  var expand = function(root, name) {
    var results = [], parts, part;
    if (/^\.\.?(\/|$)/.test(name)) {
      parts = [root, name].join('/').split('/');
    } else {
      parts = name.split('/');
    }
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var dir = dirname(path);
      var absolute = expand(dir, name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var require = function(name, loaderPath) {
    var path = expand(name, '.');
    if (loaderPath == null) loaderPath = '/';

    if (has(cache, path)) return cache[path].exports;
    if (has(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has(cache, dirIndex)) return cache[dirIndex].exports;
    if (has(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '" from '+ '"' + loaderPath + '"');
  };

  var define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  var list = function() {
    var result = [];
    for (var item in modules) {
      if (has(modules, item)) {
        result.push(item);
      }
    }
    return result;
  };

  globals.require = require;
  globals.require.define = define;
  globals.require.register = define;
  globals.require.list = list;
  globals.require.brunch = true;
})();
require.define({'phoenix': function(exports, require, module){ "use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

// Phoenix Channels JavaScript client
//
// ## Socket Connection
//
// A single connection is established to the server and
// channels are mulitplexed over the connection.
// Connect to the server using the `Socket` class:
//
//     let socket = new Socket("/ws")
//     socket.connect()
//
// The `Socket` constructor takes the mount point of the socket
// as well as options that can be found in the Socket docs,
// such as configuring the `LongPoll` transport, and heartbeat.
// Socket params can also be passed as an option for default, but
// overridable channel params to apply to all channels.
//
//
// ## Channels
//
// Channels are isolated, concurrent processes on the server that
// subscribe to topics and broker events between the client and server.
// To join a channel, you must provide the topic, and channel params for
// authorization. Here's an example chat room example where `"new_msg"`
// events are listened for, messages are pushed to the server, and
// the channel is joined with ok/error matches, and `after` hook:
//
//     let chan = socket.chan("rooms:123", {token: roomToken})
//     chan.on("new_msg", msg => console.log("Got message", msg) )
//     $input.onEnter( e => {
//       chan.push("new_msg", {body: e.target.val})
//           .receive("ok", (message) => console.log("created message", message) )
//           .receive("error", (reasons) => console.log("create failed", reasons) )
//           .after(10000, () => console.log("Networking issue. Still waiting...") )
//     })
//     chan.join()
//         .receive("ok", ({messages}) => console.log("catching up", messages) )
//         .receive("error", ({reason}) => console.log("failed join", reason) )
//         .after(10000, () => console.log("Networking issue. Still waiting...") )
//
//
// ## Joining
//
// Joining a channel with `chan.join(topic, params)`, binds the params to
// `chan.params`. Subsequent rejoins will send up the modified params for
// updating authorization params, or passing up last_message_id information.
// Successful joins receive an "ok" status, while unsuccessful joins
// receive "error".
//
//
// ## Pushing Messages
//
// From the previous example, we can see that pushing messages to the server
// can be done with `chan.push(eventName, payload)` and we can optionally
// receive responses from the push. Additionally, we can use
// `after(millsec, callback)` to abort waiting for our `receive` hooks and
// take action after some period of waiting.
//
//
// ## Socket Hooks
//
// Lifecycle events of the multiplexed connection can be hooked into via
// `socket.onError()` and `socket.onClose()` events, ie:
//
//     socket.onError( () => console.log("there was an error with the connection!") )
//     socket.onClose( () => console.log("the connection dropped") )
//
//
// ## Channel Hooks
//
// For each joined channel, you can bind to `onError` and `onClose` events
// to monitor the channel lifecycle, ie:
//
//     chan.onError( () => console.log("there was an error!") )
//     chan.onClose( () => console.log("the channel has gone away gracefully") )
//
// ### onError hooks
//
// `onError` hooks are invoked if the socket connection drops, or the channel
// crashes on the server. In either case, a channel rejoin is attemtped
// automatically in an exponential backoff manner.
//
// ### onClose hooks
//
// `onClose` hooks are invoked only in two cases. 1) the channel explicitly
// closed on the server, or 2). The client explicitly closed, by calling
// `chan.leave()`
//

var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
var CHAN_STATES = {
  closed: "closed",
  errored: "errored",
  joined: "joined",
  joining: "joining" };
var CHAN_EVENTS = {
  close: "phx_close",
  error: "phx_error",
  join: "phx_join",
  reply: "phx_reply",
  leave: "phx_leave"
};
var TRANSPORTS = {
  longpoll: "longpoll",
  websocket: "websocket"
};

var Push = (function () {

  // Initializes the Push
  //
  // chan - The Channel
  // event - The event, ie `"phx_join"`
  // payload - The payload, ie `{user_id: 123}`
  //

  function Push(chan, event, payload) {
    _classCallCheck(this, Push);

    this.chan = chan;
    this.event = event;
    this.payload = payload || {};
    this.receivedResp = null;
    this.afterHook = null;
    this.recHooks = [];
    this.sent = false;
  }

  _prototypeProperties(Push, null, {
    send: {
      value: function send() {
        var _this = this;

        var ref = this.chan.socket.makeRef();
        this.refEvent = this.chan.replyEventName(ref);
        this.receivedResp = null;
        this.sent = false;

        this.chan.on(this.refEvent, function (payload) {
          _this.receivedResp = payload;
          _this.matchReceive(payload);
          _this.cancelRefEvent();
          _this.cancelAfter();
        });

        this.startAfter();
        this.sent = true;
        this.chan.socket.push({
          topic: this.chan.topic,
          event: this.event,
          payload: this.payload,
          ref: ref
        });
      },
      writable: true,
      configurable: true
    },
    receive: {
      value: function receive(status, callback) {
        if (this.receivedResp && this.receivedResp.status === status) {
          callback(this.receivedResp.response);
        }

        this.recHooks.push({ status: status, callback: callback });
        return this;
      },
      writable: true,
      configurable: true
    },
    after: {
      value: function after(ms, callback) {
        if (this.afterHook) {
          throw "only a single after hook can be applied to a push";
        }
        var timer = null;
        if (this.sent) {
          timer = setTimeout(callback, ms);
        }
        this.afterHook = { ms: ms, callback: callback, timer: timer };
        return this;
      },
      writable: true,
      configurable: true
    },
    matchReceive: {

      // private

      value: function matchReceive(_ref) {
        var status = _ref.status;
        var response = _ref.response;
        var ref = _ref.ref;

        this.recHooks.filter(function (h) {
          return h.status === status;
        }).forEach(function (h) {
          return h.callback(response);
        });
      },
      writable: true,
      configurable: true
    },
    cancelRefEvent: {
      value: function cancelRefEvent() {
        this.chan.off(this.refEvent);
      },
      writable: true,
      configurable: true
    },
    cancelAfter: {
      value: function cancelAfter() {
        if (!this.afterHook) {
          return;
        }
        clearTimeout(this.afterHook.timer);
        this.afterHook.timer = null;
      },
      writable: true,
      configurable: true
    },
    startAfter: {
      value: function startAfter() {
        var _this = this;

        if (!this.afterHook) {
          return;
        }
        var callback = function () {
          _this.cancelRefEvent();
          _this.afterHook.callback();
        };
        this.afterHook.timer = setTimeout(callback, this.afterHook.ms);
      },
      writable: true,
      configurable: true
    }
  });

  return Push;
})();

var Channel = exports.Channel = (function () {
  function Channel(topic, params, socket) {
    var _this = this;

    _classCallCheck(this, Channel);

    this.state = CHAN_STATES.closed;
    this.topic = topic;
    this.params = params || {};
    this.socket = socket;
    this.bindings = [];
    this.joinedOnce = false;
    this.joinPush = new Push(this, CHAN_EVENTS.join, this.params);
    this.pushBuffer = [];
    this.rejoinTimer = new Timer(function () {
      return _this.rejoinUntilConnected();
    }, this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", function () {
      _this.state = CHAN_STATES.joined;
      _this.rejoinTimer.reset();
    });
    this.onClose(function () {
      _this.socket.log("channel", "close " + _this.topic);
      _this.state = CHAN_STATES.closed;
      _this.socket.remove(_this);
    });
    this.onError(function (reason) {
      _this.socket.log("channel", "error " + _this.topic, reason);
      _this.state = CHAN_STATES.errored;
      _this.rejoinTimer.setTimeout();
    });
    this.on(CHAN_EVENTS.reply, function (payload, ref) {
      _this.trigger(_this.replyEventName(ref), payload);
    });
  }

  _prototypeProperties(Channel, null, {
    rejoinUntilConnected: {
      value: function rejoinUntilConnected() {
        this.rejoinTimer.setTimeout();
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      },
      writable: true,
      configurable: true
    },
    join: {
      value: function join() {
        if (this.joinedOnce) {
          throw "tried to join multiple times. 'join' can only be called a single time per channel instance";
        } else {
          this.joinedOnce = true;
        }
        this.sendJoin();
        return this.joinPush;
      },
      writable: true,
      configurable: true
    },
    onClose: {
      value: function onClose(callback) {
        this.on(CHAN_EVENTS.close, callback);
      },
      writable: true,
      configurable: true
    },
    onError: {
      value: function onError(callback) {
        this.on(CHAN_EVENTS.error, function (reason) {
          return callback(reason);
        });
      },
      writable: true,
      configurable: true
    },
    on: {
      value: function on(event, callback) {
        this.bindings.push({ event: event, callback: callback });
      },
      writable: true,
      configurable: true
    },
    off: {
      value: function off(event) {
        this.bindings = this.bindings.filter(function (bind) {
          return bind.event !== event;
        });
      },
      writable: true,
      configurable: true
    },
    canPush: {
      value: function canPush() {
        return this.socket.isConnected() && this.state === CHAN_STATES.joined;
      },
      writable: true,
      configurable: true
    },
    push: {
      value: function push(event, payload) {
        if (!this.joinedOnce) {
          throw "tried to push '" + event + "' to '" + this.topic + "' before joining. Use chan.join() before pushing events";
        }
        var pushEvent = new Push(this, event, payload);
        if (this.canPush()) {
          pushEvent.send();
        } else {
          this.pushBuffer.push(pushEvent);
        }

        return pushEvent;
      },
      writable: true,
      configurable: true
    },
    leave: {

      // Leaves the channel
      //
      // Unsubscribes from server events, and
      // instructs channel to terminate on server
      //
      // Triggers onClose() hooks
      //
      // To receive leave acknowledgements, use the a `receive`
      // hook to bind to the server ack, ie:
      //
      //     chan.leave().receive("ok", () => alert("left!") )
      //

      value: function leave() {
        var _this = this;

        return this.push(CHAN_EVENTS.leave).receive("ok", function () {
          _this.log("channel", "leave " + _this.topic);
          _this.trigger(CHAN_EVENTS.close, "leave");
        });
      },
      writable: true,
      configurable: true
    },
    onMessage: {

      // Overridable message hook
      //
      // Receives all events for specialized message handling

      value: function onMessage(event, payload, ref) {},
      writable: true,
      configurable: true
    },
    isMember: {

      // private

      value: function isMember(topic) {
        return this.topic === topic;
      },
      writable: true,
      configurable: true
    },
    sendJoin: {
      value: function sendJoin() {
        this.state = CHAN_STATES.joining;
        this.joinPush.send();
      },
      writable: true,
      configurable: true
    },
    rejoin: {
      value: function rejoin() {
        this.sendJoin();
        this.pushBuffer.forEach(function (pushEvent) {
          return pushEvent.send();
        });
        this.pushBuffer = [];
      },
      writable: true,
      configurable: true
    },
    trigger: {
      value: function trigger(triggerEvent, payload, ref) {
        this.onMessage(triggerEvent, payload, ref);
        this.bindings.filter(function (bind) {
          return bind.event === triggerEvent;
        }).map(function (bind) {
          return bind.callback(payload, ref);
        });
      },
      writable: true,
      configurable: true
    },
    replyEventName: {
      value: function replyEventName(ref) {
        return "chan_reply_" + ref;
      },
      writable: true,
      configurable: true
    }
  });

  return Channel;
})();

var Socket = exports.Socket = (function () {

  // Initializes the Socket
  //
  // endPoint - The string WebSocket endpoint, ie, "ws://example.com/ws",
  //                                               "wss://example.com"
  //                                               "/ws" (inherited host & protocol)
  // opts - Optional configuration
  //   transport - The Websocket Transport, ie WebSocket, Phoenix.LongPoll.
  //               Defaults to WebSocket with automatic LongPoll fallback.
  //   params - The defaults for all channel params, ie `{user_id: userToken}`
  //   heartbeatIntervalMs - The millisec interval to send a heartbeat message
  //   reconnectAfterMs - The optional function that returns the millsec
  //                      reconnect interval. Defaults to stepped backoff of:
  //
  //     function(tries){
  //       return [1000, 5000, 10000][tries - 1] || 10000
  //     }
  //
  //   logger - The optional function for specialized logging, ie:
  //     `logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
  //
  //   longpollerTimeout - The maximum timeout of a long poll AJAX request.
  //                        Defaults to 20s (double the server long poll timer).
  //
  // For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)
  //

  function Socket(endPoint) {
    var _this = this;

    var opts = arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Socket);

    this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
    this.channels = [];
    this.sendBuffer = [];
    this.ref = 0;
    this.transport = opts.transport || window.WebSocket || LongPoll;
    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;
    this.reconnectAfterMs = opts.reconnectAfterMs || function (tries) {
      return [1000, 5000, 10000][tries - 1] || 10000;
    };
    this.reconnectTimer = new Timer(function () {
      return _this.connect();
    }, this.reconnectAfterMs);
    this.logger = opts.logger || function () {}; // noop
    this.longpollerTimeout = opts.longpollerTimeout || 20000;
    this.params = opts.params || {};
    this.endPoint = "" + endPoint + "/" + TRANSPORTS.websocket;
  }

  _prototypeProperties(Socket, null, {
    protocol: {
      value: function protocol() {
        return location.protocol.match(/^https/) ? "wss" : "ws";
      },
      writable: true,
      configurable: true
    },
    endPointURL: {
      value: function endPointURL() {
        var uri = Ajax.appendParams(this.endPoint, this.params);
        if (uri.charAt(0) !== "/") {
          return uri;
        }
        if (uri.charAt(1) === "/") {
          return "" + this.protocol() + ":" + uri;
        }

        return "" + this.protocol() + "://" + location.host + "" + uri;
      },
      writable: true,
      configurable: true
    },
    disconnect: {
      value: function disconnect(callback, code, reason) {
        if (this.conn) {
          this.conn.onclose = function () {}; // noop
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
          this.conn = null;
        }
        callback && callback();
      },
      writable: true,
      configurable: true
    },
    connect: {
      value: function connect() {
        var _this = this;

        this.disconnect(function () {
          _this.conn = new _this.transport(_this.endPointURL());
          _this.conn.timeout = _this.longpollerTimeout;
          _this.conn.onopen = function () {
            return _this.onConnOpen();
          };
          _this.conn.onerror = function (error) {
            return _this.onConnError(error);
          };
          _this.conn.onmessage = function (event) {
            return _this.onConnMessage(event);
          };
          _this.conn.onclose = function (event) {
            return _this.onConnClose(event);
          };
        });
      },
      writable: true,
      configurable: true
    },
    log: {

      // Logs the message. Override `this.logger` for specialized logging. noops by default

      value: function log(kind, msg, data) {
        this.logger(kind, msg, data);
      },
      writable: true,
      configurable: true
    },
    onOpen: {

      // Registers callbacks for connection state change events
      //
      // Examples
      //
      //    socket.onError(function(error){ alert("An error occurred") })
      //

      value: function onOpen(callback) {
        this.stateChangeCallbacks.open.push(callback);
      },
      writable: true,
      configurable: true
    },
    onClose: {
      value: function onClose(callback) {
        this.stateChangeCallbacks.close.push(callback);
      },
      writable: true,
      configurable: true
    },
    onError: {
      value: function onError(callback) {
        this.stateChangeCallbacks.error.push(callback);
      },
      writable: true,
      configurable: true
    },
    onMessage: {
      value: function onMessage(callback) {
        this.stateChangeCallbacks.message.push(callback);
      },
      writable: true,
      configurable: true
    },
    onConnOpen: {
      value: function onConnOpen() {
        var _this = this;

        this.log("transport", "connected to " + this.endPointURL(), this.transport.prototype);
        this.flushSendBuffer();
        this.reconnectTimer.reset();
        if (!this.conn.skipHeartbeat) {
          clearInterval(this.heartbeatTimer);
          this.heartbeatTimer = setInterval(function () {
            return _this.sendHeartbeat();
          }, this.heartbeatIntervalMs);
        }
        this.stateChangeCallbacks.open.forEach(function (callback) {
          return callback();
        });
      },
      writable: true,
      configurable: true
    },
    onConnClose: {
      value: function onConnClose(event) {
        this.log("transport", "close", event);
        this.triggerChanError();
        clearInterval(this.heartbeatTimer);
        this.reconnectTimer.setTimeout();
        this.stateChangeCallbacks.close.forEach(function (callback) {
          return callback(event);
        });
      },
      writable: true,
      configurable: true
    },
    onConnError: {
      value: function onConnError(error) {
        this.log("transport", error);
        this.triggerChanError();
        this.stateChangeCallbacks.error.forEach(function (callback) {
          return callback(error);
        });
      },
      writable: true,
      configurable: true
    },
    triggerChanError: {
      value: function triggerChanError() {
        this.channels.forEach(function (chan) {
          return chan.trigger(CHAN_EVENTS.error);
        });
      },
      writable: true,
      configurable: true
    },
    connectionState: {
      value: function connectionState() {
        switch (this.conn && this.conn.readyState) {
          case SOCKET_STATES.connecting:
            return "connecting";
          case SOCKET_STATES.open:
            return "open";
          case SOCKET_STATES.closing:
            return "closing";
          default:
            return "closed";
        }
      },
      writable: true,
      configurable: true
    },
    isConnected: {
      value: function isConnected() {
        return this.connectionState() === "open";
      },
      writable: true,
      configurable: true
    },
    remove: {
      value: function remove(chan) {
        this.channels = this.channels.filter(function (c) {
          return !c.isMember(chan.topic);
        });
      },
      writable: true,
      configurable: true
    },
    chan: {
      value: function chan(topic) {
        var chanParams = arguments[1] === undefined ? {} : arguments[1];

        var mergedParams = {};
        for (var key in this.params) {
          mergedParams[key] = this.params[key];
        }
        for (var key in chanParams) {
          mergedParams[key] = chanParams[key];
        }

        var chan = new Channel(topic, mergedParams, this);
        this.channels.push(chan);
        return chan;
      },
      writable: true,
      configurable: true
    },
    push: {
      value: function push(data) {
        var _this = this;

        var topic = data.topic;
        var event = data.event;
        var payload = data.payload;
        var ref = data.ref;

        var callback = function () {
          return _this.conn.send(JSON.stringify(data));
        };
        this.log("push", "" + topic + " " + event + " (" + ref + ")", payload);
        if (this.isConnected()) {
          callback();
        } else {
          this.sendBuffer.push(callback);
        }
      },
      writable: true,
      configurable: true
    },
    makeRef: {

      // Return the next message ref, accounting for overflows

      value: function makeRef() {
        var newRef = this.ref + 1;
        if (newRef === this.ref) {
          this.ref = 0;
        } else {
          this.ref = newRef;
        }

        return this.ref.toString();
      },
      writable: true,
      configurable: true
    },
    sendHeartbeat: {
      value: function sendHeartbeat() {
        this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.makeRef() });
      },
      writable: true,
      configurable: true
    },
    flushSendBuffer: {
      value: function flushSendBuffer() {
        if (this.isConnected() && this.sendBuffer.length > 0) {
          this.sendBuffer.forEach(function (callback) {
            return callback();
          });
          this.sendBuffer = [];
        }
      },
      writable: true,
      configurable: true
    },
    onConnMessage: {
      value: function onConnMessage(rawMessage) {
        var msg = JSON.parse(rawMessage.data);
        var topic = msg.topic;
        var event = msg.event;
        var payload = msg.payload;
        var ref = msg.ref;

        this.log("receive", "" + (payload.status || "") + " " + topic + " " + event + " " + (ref && "(" + ref + ")" || ""), payload);
        this.channels.filter(function (chan) {
          return chan.isMember(topic);
        }).forEach(function (chan) {
          return chan.trigger(event, payload, ref);
        });
        this.stateChangeCallbacks.message.forEach(function (callback) {
          return callback(msg);
        });
      },
      writable: true,
      configurable: true
    }
  });

  return Socket;
})();

var LongPoll = exports.LongPoll = (function () {
  function LongPoll(endPoint) {
    _classCallCheck(this, LongPoll);

    this.endPoint = null;
    this.token = null;
    this.sig = null;
    this.skipHeartbeat = true;
    this.onopen = function () {}; // noop
    this.onerror = function () {}; // noop
    this.onmessage = function () {}; // noop
    this.onclose = function () {}; // noop
    this.pollEndpoint = this.normalizeEndpoint(endPoint);
    this.readyState = SOCKET_STATES.connecting;

    this.poll();
  }

  _prototypeProperties(LongPoll, null, {
    normalizeEndpoint: {
      value: function normalizeEndpoint(endPoint) {
        return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
      },
      writable: true,
      configurable: true
    },
    endpointURL: {
      value: function endpointURL() {
        return Ajax.appendParams(this.pollEndpoint, {
          token: this.token,
          sig: this.sig,
          format: "json"
        });
      },
      writable: true,
      configurable: true
    },
    closeAndRetry: {
      value: function closeAndRetry() {
        this.close();
        this.readyState = SOCKET_STATES.connecting;
      },
      writable: true,
      configurable: true
    },
    ontimeout: {
      value: function ontimeout() {
        this.onerror("timeout");
        this.closeAndRetry();
      },
      writable: true,
      configurable: true
    },
    poll: {
      value: function poll() {
        var _this = this;

        if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {
          return;
        }

        Ajax.request("GET", this.endpointURL(), "application/json", null, this.timeout, this.ontimeout.bind(this), function (resp) {
          if (resp) {
            var status = resp.status;
            var token = resp.token;
            var sig = resp.sig;
            var messages = resp.messages;

            _this.token = token;
            _this.sig = sig;
          } else {
            var status = 0;
          }

          switch (status) {
            case 200:
              messages.forEach(function (msg) {
                return _this.onmessage({ data: JSON.stringify(msg) });
              });
              _this.poll();
              break;
            case 204:
              _this.poll();
              break;
            case 410:
              _this.readyState = SOCKET_STATES.open;
              _this.onopen();
              _this.poll();
              break;
            case 0:
            case 500:
              _this.onerror();
              _this.closeAndRetry();
              break;
            default:
              throw "unhandled poll status " + status;
          }
        });
      },
      writable: true,
      configurable: true
    },
    send: {
      value: function send(body) {
        var _this = this;

        Ajax.request("POST", this.endpointURL(), "application/json", body, this.timeout, this.onerror.bind(this, "timeout"), function (resp) {
          if (!resp || resp.status !== 200) {
            _this.onerror(status);
            _this.closeAndRetry();
          }
        });
      },
      writable: true,
      configurable: true
    },
    close: {
      value: function close(code, reason) {
        this.readyState = SOCKET_STATES.closed;
        this.onclose();
      },
      writable: true,
      configurable: true
    }
  });

  return LongPoll;
})();

var Ajax = exports.Ajax = (function () {
  function Ajax() {
    _classCallCheck(this, Ajax);
  }

  _prototypeProperties(Ajax, {
    request: {
      value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {
        if (window.XDomainRequest) {
          var req = new XDomainRequest(); // IE8, IE9
          this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
        } else {
          var req = window.XMLHttpRequest ? new XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari
          new ActiveXObject("Microsoft.XMLHTTP"); // IE6, IE5
          this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
        }
      },
      writable: true,
      configurable: true
    },
    xdomainRequest: {
      value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
        var _this = this;

        req.timeout = timeout;
        req.open(method, endPoint);
        req.onload = function () {
          var response = _this.parseJSON(req.responseText);
          callback && callback(response);
        };
        if (ontimeout) {
          req.ontimeout = ontimeout;
        }

        // Work around bug in IE9 that requires an attached onprogress handler
        req.onprogress = function () {};

        req.send(body);
      },
      writable: true,
      configurable: true
    },
    xhrRequest: {
      value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
        var _this = this;

        req.timeout = timeout;
        req.open(method, endPoint, true);
        req.setRequestHeader("Content-Type", accept);
        req.onerror = function () {
          callback && callback(null);
        };
        req.onreadystatechange = function () {
          if (req.readyState === _this.states.complete && callback) {
            var response = _this.parseJSON(req.responseText);
            callback(response);
          }
        };
        if (ontimeout) {
          req.ontimeout = ontimeout;
        }

        req.send(body);
      },
      writable: true,
      configurable: true
    },
    parseJSON: {
      value: function parseJSON(resp) {
        return resp && resp !== "" ? JSON.parse(resp) : null;
      },
      writable: true,
      configurable: true
    },
    serialize: {
      value: function serialize(obj, parentKey) {
        var queryStr = [];
        for (var key in obj) {
          if (!obj.hasOwnProperty(key)) {
            continue;
          }
          var paramKey = parentKey ? "" + parentKey + "[" + key + "]" : key;
          var paramVal = obj[key];
          if (typeof paramVal === "object") {
            queryStr.push(this.serialize(paramVal, paramKey));
          } else {
            queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
          }
        }
        return queryStr.join("&");
      },
      writable: true,
      configurable: true
    },
    appendParams: {
      value: function appendParams(url, params) {
        if (Object.keys(params).length === 0) {
          return url;
        }

        var prefix = url.match(/\?/) ? "&" : "?";
        return "" + url + "" + prefix + "" + this.serialize(params);
      },
      writable: true,
      configurable: true
    }
  });

  return Ajax;
})();

Ajax.states = { complete: 4 };

// Creates a timer that accepts a `timerCalc` function to perform
// calculated timeout retries, such as exponential backoff.
//
// ## Examples
//
//    let reconnectTimer = new Timer(() => this.connect(), function(tries){
//      return [1000, 5000, 10000][tries - 1] || 10000
//    })
//    reconnectTimer.setTimeout() // fires after 1000
//    reconnectTimer.setTimeout() // fires after 5000
//    reconnectTimer.reset()
//    reconnectTimer.setTimeout() // fires after 1000
//

var Timer = (function () {
  function Timer(callback, timerCalc) {
    _classCallCheck(this, Timer);

    this.callback = callback;
    this.timerCalc = timerCalc;
    this.timer = null;
    this.tries = 0;
  }

  _prototypeProperties(Timer, null, {
    reset: {
      value: function reset() {
        this.tries = 0;
        clearTimeout(this.timer);
      },
      writable: true,
      configurable: true
    },
    setTimeout: {

      // Cancels any previous setTimeout and schedules callback

      value: (function (_setTimeout) {
        var _setTimeoutWrapper = function setTimeout() {
          return _setTimeout.apply(this, arguments);
        };

        _setTimeoutWrapper.toString = function () {
          return _setTimeout.toString();
        };

        return _setTimeoutWrapper;
      })(function () {
        var _this = this;

        clearTimeout(this.timer);

        this.timer = setTimeout(function () {
          _this.tries = _this.tries + 1;
          _this.callback();
        }, this.timerCalc(this.tries + 1));
      }),
      writable: true,
      configurable: true
    }
  });

  return Timer;
})();

Object.defineProperty(exports, "__esModule", {
  value: true
});
 }});
if(typeof(window) === 'object' && !window.Phoenix){ window.Phoenix = require('phoenix') };
 /*
 * # Semantic UI - 2.0.0
 * https://github.com/Semantic-Org/Semantic-UI
 * http://www.semantic-ui.com/
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
/*!
 * # Semantic UI 2.0.0 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
;(function ( $, window, document, undefined ) {

$.site = $.fn.site = function(parameters) {
  var
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    settings        = ( $.isPlainObject(parameters) )
      ? $.extend(true, {}, $.site.settings, parameters)
      : $.extend({}, $.site.settings),

    namespace       = settings.namespace,
    error           = settings.error,

    eventNamespace  = '.' + namespace,
    moduleNamespace = 'module-' + namespace,

    $document       = $(document),
    $module         = $document,
    element         = this,
    instance        = $module.data(moduleNamespace),

    module,
    returnedValue
  ;
  module = {

    initialize: function() {
      module.instantiate();
    },

    instantiate: function() {
      module.verbose('Storing instance of site', module);
      instance = module;
      $module
        .data(moduleNamespace, module)
      ;
    },

    normalize: function() {
      module.fix.console();
      module.fix.requestAnimationFrame();
    },

    fix: {
      console: function() {
        module.debug('Normalizing window.console');
        if (console === undefined || console.log === undefined) {
          module.verbose('Console not available, normalizing events');
          module.disable.console();
        }
        if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
          module.verbose('Console group not available, normalizing events');
          window.console.group = function() {};
          window.console.groupEnd = function() {};
          window.console.groupCollapsed = function() {};
        }
        if (typeof console.markTimeline == 'undefined') {
          module.verbose('Mark timeline not available, normalizing events');
          window.console.markTimeline = function() {};
        }
      },
      consoleClear: function() {
        module.debug('Disabling programmatic console clearing');
        window.console.clear = function() {};
      },
      requestAnimationFrame: function() {
        module.debug('Normalizing requestAnimationFrame');
        if(window.requestAnimationFrame === undefined) {
          module.debug('RequestAnimationFrame not available, normailizing event');
          window.requestAnimationFrame = window.requestAnimationFrame
            || window.mozRequestAnimationFrame
            || window.webkitRequestAnimationFrame
            || window.msRequestAnimationFrame
            || function(callback) { setTimeout(callback, 0); }
          ;
        }
      }
    },

    moduleExists: function(name) {
      return ($.fn[name] !== undefined && $.fn[name].settings !== undefined);
    },

    enabled: {
      modules: function(modules) {
        var
          enabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(module.moduleExists(name)) {
            enabledModules.push(name);
          }
        });
        return enabledModules;
      }
    },

    disabled: {
      modules: function(modules) {
        var
          disabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(!module.moduleExists(name)) {
            disabledModules.push(name);
          }
        });
        return disabledModules;
      }
    },

    change: {
      setting: function(setting, value, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? (modules === 'all')
            ? settings.modules
            : [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            namespace = (module.moduleExists(name))
              ? $.fn[name].settings.namespace || false
              : true,
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', setting, value, name);
            $.fn[name].settings[setting] = value;
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', setting, value);
              }
            }
          }
        });
      },
      settings: function(newSettings, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', newSettings, name);
            $.extend(true, $.fn[name].settings, newSettings);
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', newSettings);
              }
            }
          }
        });
      }
    },

    enable: {
      console: function() {
        module.console(true);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling debug for modules', modules);
        module.change.setting('debug', true, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling verbose debug for modules', modules);
        module.change.setting('verbose', true, modules, modifyExisting);
      }
    },
    disable: {
      console: function() {
        module.console(false);
      },
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling debug for modules', modules);
        module.change.setting('debug', false, modules, modifyExisting);
      },
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling verbose debug for modules', modules);
        module.change.setting('verbose', false, modules, modifyExisting);
      }
    },

    console: function(enable) {
      if(enable) {
        if(instance.cache.console === undefined) {
          module.error(error.console);
          return;
        }
        module.debug('Restoring console function');
        window.console = instance.cache.console;
      }
      else {
        module.debug('Disabling console function');
        instance.cache.console = window.console;
        window.console = {
          clear          : function(){},
          error          : function(){},
          group          : function(){},
          groupCollapsed : function(){},
          groupEnd       : function(){},
          info           : function(){},
          log            : function(){},
          markTimeline   : function(){},
          warn           : function(){}
        };
      }
    },

    destroy: function() {
      module.verbose('Destroying previous site for', $module);
      $module
        .removeData(moduleNamespace)
      ;
    },

    cache: {},

    setting: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, settings, name);
      }
      else if(value !== undefined) {
        settings[name] = value;
      }
      else {
        return settings[name];
      }
    },
    internal: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, module, name);
      }
      else if(value !== undefined) {
        module[name] = value;
      }
      else {
        return module[name];
      }
    },
    debug: function() {
      if(settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.debug.apply(console, arguments);
        }
      }
    },
    verbose: function() {
      if(settings.verbose && settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
        }
        else {
          module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.verbose.apply(console, arguments);
        }
      }
    },
    error: function() {
      module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
      module.error.apply(console, arguments);
    },
    performance: {
      log: function(message) {
        var
          currentTime,
          executionTime,
          previousTime
        ;
        if(settings.performance) {
          currentTime   = new Date().getTime();
          previousTime  = time || currentTime;
          executionTime = currentTime - previousTime;
          time          = currentTime;
          performance.push({
            'Element'        : element,
            'Name'           : message[0],
            'Arguments'      : [].slice.call(message, 1) || '',
            'Execution Time' : executionTime
          });
        }
        clearTimeout(module.performance.timer);
        module.performance.timer = setTimeout(module.performance.display, 500);
      },
      display: function() {
        var
          title = settings.name + ':',
          totalTime = 0
        ;
        time = false;
        clearTimeout(module.performance.timer);
        $.each(performance, function(index, data) {
          totalTime += data['Execution Time'];
        });
        title += ' ' + totalTime + 'ms';
        if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
          console.groupCollapsed(title);
          if(console.table) {
            console.table(performance);
          }
          else {
            $.each(performance, function(index, data) {
              console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
            });
          }
          console.groupEnd();
        }
        performance = [];
      }
    },
    invoke: function(query, passedArguments, context) {
      var
        object = instance,
        maxDepth,
        found,
        response
      ;
      passedArguments = passedArguments || queryArguments;
      context         = element         || context;
      if(typeof query == 'string' && object !== undefined) {
        query    = query.split(/[\. ]/);
        maxDepth = query.length - 1;
        $.each(query, function(depth, value) {
          var camelCaseValue = (depth != maxDepth)
            ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
            : query
          ;
          if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
            object = object[camelCaseValue];
          }
          else if( object[camelCaseValue] !== undefined ) {
            found = object[camelCaseValue];
            return false;
          }
          else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
            object = object[value];
          }
          else if( object[value] !== undefined ) {
            found = object[value];
            return false;
          }
          else {
            module.error(error.method, query);
            return false;
          }
        });
      }
      if ( $.isFunction( found ) ) {
        response = found.apply(context, passedArguments);
      }
      else if(found !== undefined) {
        response = found;
      }
      if($.isArray(returnedValue)) {
        returnedValue.push(response);
      }
      else if(returnedValue !== undefined) {
        returnedValue = [returnedValue, response];
      }
      else if(response !== undefined) {
        returnedValue = response;
      }
      return found;
    }
  };

  if(methodInvoked) {
    if(instance === undefined) {
      module.initialize();
    }
    module.invoke(query);
  }
  else {
    if(instance !== undefined) {
      module.destroy();
    }
    module.initialize();
  }
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.site.settings = {

  name        : 'Site',
  namespace   : 'site',

  error : {
    console : 'Console cannot be restored, most likely it was overwritten outside of module',
    method : 'The method you called is not defined.'
  },

  debug       : false,
  verbose     : false,
  performance : true,

  modules: [
    'accordion',
    'api',
    'checkbox',
    'dimmer',
    'dropdown',
    'embed',
    'form',
    'modal',
    'nag',
    'popup',
    'rating',
    'shape',
    'sidebar',
    'state',
    'sticky',
    'tab',
    'transition',
    'visit',
    'visibility'
  ],

  siteNamespace   : 'site',
  namespaceStub   : {
    cache     : {},
    config    : {},
    sections  : {},
    section   : {},
    utilities : {}
  }

};

// allows for selection of elements with data attributes
$.extend($.expr[ ":" ], {
  data: ($.expr.createPseudo)
    ? $.expr.createPseudo(function(dataName) {
        return function(elem) {
          return !!$.data(elem, dataName);
        };
      })
    : function(elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[ 3 ]);
    }
});


})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.form = function(parameters) {
  var
    $allModules      = $(this),
    moduleSelector   = $allModules.selector || '',

    time             = new Date().getTime(),
    performance      = [],

    query            = arguments[0],
    legacyParameters = arguments[1],
    methodInvoked    = (typeof query == 'string'),
    queryArguments   = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        $module     = $(this),
        element     = this,

        formErrors  = [],
        keyHeldDown = false,

        // set at run-time
        $field,
        $group,
        $message,
        $prompt,
        $submit,
        $clear,
        $reset,

        settings,
        validation,

        metadata,
        selector,
        className,
        error,

        namespace,
        moduleNamespace,
        eventNamespace,

        instance,
        module
      ;

      module      = {

        initialize: function() {

          // settings grabbed at run time
          module.get.settings();
          if(methodInvoked) {
            if(instance === undefined) {
              module.instantiate();
            }
            module.invoke(query);
          }
          else {
            module.verbose('Initializing form validation', $module, settings);
            module.bindEvents();
            module.set.defaults();
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $field      = $module.find(selector.field);
          $group      = $module.find(selector.group);
          $message    = $module.find(selector.message);
          $prompt     = $module.find(selector.prompt);

          $submit     = $module.find(selector.submit);
          $clear      = $module.find(selector.clear);
          $reset      = $module.find(selector.reset);
        },

        submit: function() {
          module.verbose('Submitting form', $module);
          $module
            .submit()
          ;
        },

        attachEvents: function(selector, action) {
          action = action || 'submit';
          $(selector)
            .on('click' + eventNamespace, function(event) {
              module[action]();
              event.preventDefault();
            })
          ;
        },

        bindEvents: function() {
          module.verbose('Attaching form events');
          $module
            .on('submit' + eventNamespace, module.validate.form)
            .on('blur'   + eventNamespace, selector.field, module.event.field.blur)
            .on('click'  + eventNamespace, selector.submit, module.submit)
            .on('click'  + eventNamespace, selector.reset, module.reset)
            .on('click'  + eventNamespace, selector.clear, module.clear)
          ;
          if(settings.keyboardShortcuts) {
            $module
              .on('keydown' + eventNamespace, selector.field, module.event.field.keydown)
            ;
          }
          $field
            .each(function() {
              var
                $input     = $(this),
                type       = $input.prop('type'),
                inputEvent = module.get.changeEvent(type, $input)
              ;
              $(this)
                .on(inputEvent + eventNamespace, module.event.field.change)
              ;
            })
          ;
        },

        clear: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('clear');
              }
              else if(isCheckbox) {
                $field.prop('checked', false);
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val('');
              }
            })
          ;
        },

        reset: function() {
          $field
            .each(function () {
              var
                $field       = $(this),
                $element     = $field.parent(),
                $fieldGroup  = $field.closest($group),
                $prompt      = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue),
                isCheckbox   = $element.is(selector.uiCheckbox),
                isDropdown   = $element.is(selector.uiDropdown),
                isErrored    = $fieldGroup.hasClass(className.error)
              ;
              if(defaultValue === undefined) {
                defaultValue = '';
              }
              if(isErrored) {
                module.verbose('Resetting error on field', $fieldGroup);
                $fieldGroup.removeClass(className.error);
                $prompt.remove();
              }
              if(isDropdown) {
                module.verbose('Resetting dropdown value', $element, defaultValue);
                $element.dropdown('restore defaults');
              }
              else if(isCheckbox) {
                module.verbose('Resetting checkbox value', $element, defaultValue);
                $field.prop('checked', defaultValue);
              }
              else {
                module.verbose('Resetting field value', $field, defaultValue);
                $field.val(defaultValue);
              }
            })
          ;
        },

        is: {
          valid: function() {
            var
              allValid = true
            ;
            module.verbose('Checking if form is valid');
            $.each(validation, function(fieldName, field) {
              if( !( module.validate.field(field) ) ) {
                allValid = false;
              }
            });
            return allValid;
          }
        },

        removeEvents: function() {
          $module
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
          $submit
            .off(eventNamespace)
          ;
          $field
            .off(eventNamespace)
          ;
        },

        event: {
          field: {
            keydown: function(event) {
              var
                $field  = $(this),
                key     = event.which,
                keyCode = {
                  enter  : 13,
                  escape : 27
                }
              ;
              if( key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field
                  .blur()
                ;
              }
              if(!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0 ) {
                if(!keyHeldDown) {
                  $field
                    .one('keyup' + eventNamespace, module.event.field.keyup)
                  ;
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
                }
                keyHeldDown = true;
              }
            },
            keyup: function() {
              keyHeldDown = false;
            },
            blur: function() {
              var
                $field          = $(this),
                $fieldGroup     = $field.closest($group),
                validationRules = module.get.validation($field)
              ;
              if( $fieldGroup.hasClass(className.error) ) {
                module.debug('Revalidating field', $field, validationRules);
                module.validate.field( validationRules );
              }
              else if(settings.on == 'blur' || settings.on == 'change') {
                module.validate.field( validationRules );
              }
            },
            change: function() {
              var
                $field      = $(this),
                $fieldGroup = $field.closest($group)
              ;
              if(settings.on == 'change' || ( $fieldGroup.hasClass(className.error) && settings.revalidate) ) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function() {
                  module.debug('Revalidating field', $field,  module.get.validation($field));
                  module.validate.field( module.get.validation($field) );
                }, settings.delay);
              }
            }
          }

        },

        get: {
          changeEvent: function(type, $input) {
            if(type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {
              return 'change';
            }
            else {
              return module.get.inputEvent();
            }
          },
          inputEvent: function() {
            return (document.createElement('input').oninput !== undefined)
              ? 'input'
              : (document.createElement('input').onpropertychange !== undefined)
                ? 'propertychange'
                : 'keyup'
            ;
          },
          settings: function() {
            var
              firstProperty
            ;
            if($.isPlainObject(parameters)) {
              var
                keys             = Object.keys(parameters),
                isLegacySettings = (keys.length > 0)
                  ? (parameters[keys[0]].identifier !== undefined)
                  : false
              ;
              if(isLegacySettings) {
                // 1.x (ducktyped)
                settings   = $.extend(true, {}, $.fn.form.settings, legacyParameters);
                validation = $.extend({}, $.fn.form.settings.defaults, parameters);
                module.error(settings.error.oldSyntax, element);
                module.verbose('Extending settings from legacy parameters', validation, settings);
              }
              else {
                // 2.x
                settings   = $.extend(true, {}, $.fn.form.settings, parameters);
                validation = $.extend({}, $.fn.form.settings.defaults, settings.fields);
                module.verbose('Extending settings', validation, settings);
              }
            }
            else {
              settings   = $.fn.form.settings;
              validation = $.fn.form.settings.defaults;
              module.verbose('Using default form validation', validation, settings);
            }

            // shorthand
            namespace       = settings.namespace;
            metadata        = settings.metadata;
            selector        = settings.selector;
            className       = settings.className;
            error           = settings.error;
            moduleNamespace = 'module-' + namespace;
            eventNamespace  = '.' + namespace;

            // grab instance
            instance = $module.data(moduleNamespace);

            // refresh selector cache
            module.refresh();
          },
          field: function(identifier) {
            module.verbose('Finding field with identifier', identifier);
            if( $field.filter('#' + identifier).length > 0 ) {
              return $field.filter('#' + identifier);
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'"]');
            }
            else if( $field.filter('[name="' + identifier +'[]"]').length > 0 ) {
              return $field.filter('[name="' + identifier +'[]"]');
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]');
            }
            return $('<input/>');
          },
          fields: function(fields) {
            var
              $fields = $()
            ;
            $.each(fields, function(index, name) {
              $fields = $fields.add( module.get.field(name) );
            });
            return $fields;
          },
          validation: function($field) {
            var
              rules
            ;
            if(!validation) {
              return false;
            }
            $.each(validation, function(fieldName, field) {
              if( module.get.field(field.identifier)[0] == $field[0] ) {
                rules = field;
              }
            });
            return rules || false;
          },
          value: function (field) {
            var
              fields = [],
              results
            ;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
          },
          values: function (fields) {
            var
              $fields = $.isArray(fields)
                ? module.get.fields(fields)
                : $field,
              values = {}
            ;
            $fields.each(function(index, field) {
              var
                $field     = $(field),
                type       = $field.prop('type'),
                name       = $field.prop('name'),
                value      = $field.val(),
                isCheckbox = $field.is(selector.checkbox),
                isRadio    = $field.is(selector.radio),
                isMultiple = (name.indexOf('[]') !== -1),
                isChecked  = (isCheckbox)
                  ? $field.is(':checked')
                  : false
              ;
              if(name) {
                if(isMultiple) {
                  name = name.replace('[]', '');
                  if(!values[name]) {
                    values[name] = [];
                  }
                  if(isCheckbox) {
                    if(isChecked) {
                      values[name].push(value);
                    }
                    else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  }
                  else {
                    values[name].push(value);
                  }
                }
                else {
                  if(isRadio) {
                    if(isChecked) {
                      values[name] = value;
                    }
                  }
                  else if(isCheckbox) {
                    if(isChecked) {
                      values[name] = true;
                    }
                    else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  }
                  else {
                    values[name] = value;
                  }
                }
              }
            });
            return values;
          }
        },

        has: {

          field: function(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            if( $field.filter('#' + identifier).length > 0 ) {
              return true;
            }
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return true;
            }
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return true;
            }
            return false;
          }

        },

        add: {
          prompt: function(identifier, errors) {
            var
              $field       = module.get.field(identifier),
              $fieldGroup  = $field.closest($group),
              $prompt      = $fieldGroup.children(selector.prompt),
              promptExists = ($prompt.length !== 0)
            ;
            errors = (typeof errors == 'string')
              ? [errors]
              : errors
            ;
            module.verbose('Adding field error state', identifier);
            $fieldGroup
              .addClass(className.error)
            ;
            if(settings.inline) {
              if(!promptExists) {
                $prompt = settings.templates.prompt(errors);
                $prompt
                  .appendTo($fieldGroup)
                ;
              }
              $prompt
                .html(errors[0])
              ;
              if(!promptExists) {
                if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', settings.transition);
                  $prompt.transition(settings.transition + ' in', settings.duration);
                }
                else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt
                    .fadeIn(settings.duration)
                  ;
                }
              }
              else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
              }
            }
          },
          errors: function(errors) {
            module.debug('Adding form error messages', errors);
            $message
              .html( settings.templates.error(errors) )
            ;
          }
        },

        remove: {
          prompt: function(field) {
            var
              $field      = module.get.field(field.identifier),
              $fieldGroup = $field.closest($group),
              $prompt     = $fieldGroup.children(selector.prompt)
            ;
            $fieldGroup
              .removeClass(className.error)
            ;
            if(settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', field);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                $prompt.transition(settings.transition + ' out', settings.duration, function() {
                  $prompt.remove();
                });
              }
              else {
                $prompt
                  .fadeOut(settings.duration, function(){
                    $prompt.remove();
                  })
                ;
              }
            }
          }
        },

        set: {
          success: function() {
            $module
              .removeClass(className.error)
              .addClass(className.success)
            ;
          },
          defaults: function () {
            $field
              .each(function () {
                var
                  $field     = $(this),
                  isCheckbox = ($field.filter(selector.checkbox).length > 0),
                  value      = (isCheckbox)
                    ? $field.is(':checked')
                    : $field.val()
                ;
                $field.data(metadata.defaultValue, value);
              })
            ;
          },
          error: function() {
            $module
              .removeClass(className.success)
              .addClass(className.error)
            ;
          },
          value: function (field, value) {
            var
              fields = {}
            ;
            fields[field] = value;
            return module.set.values.call(element, fields);
          },
          values: function (fields) {
            if($.isEmptyObject(fields)) {
              return;
            }
            $.each(fields, function(key, value) {
              var
                $field      = module.get.field(key),
                $element    = $field.parent(),
                isMultiple  = $.isArray(value),
                isCheckbox  = $element.is(selector.uiCheckbox),
                isDropdown  = $element.is(selector.uiDropdown),
                isRadio     = ($field.is(selector.radio) && isCheckbox),
                fieldExists = ($field.length > 0),
                $multipleField
              ;
              if(fieldExists) {
                if(isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function(index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element       = $multipleField.parent();
                    if($multipleField.length > 0) {
                      $element.checkbox('check');
                    }
                  });
                }
                else if(isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]')
                    .parent(selector.uiCheckbox)
                      .checkbox('check')
                  ;
                }
                else if(isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if(value === true) {
                    $element.checkbox('check');
                  }
                  else {
                    $element.checkbox('uncheck');
                  }
                }
                else if(isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
                }
                else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
                }
              }
            });
          }
        },

        validate: {

          form: function(event) {
            var
              apiRequest
            ;

            // input keydown event will fire submit repeatedly by browser default
            if(keyHeldDown) {
              return false;
            }

            // reset errors
            formErrors = [];
            if( module.is.valid() ) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              return settings.onSuccess.call(element, event);
            }
            else {
              module.debug('Form has errors');
              module.set.error();
              if(!settings.inline) {
                module.add.errors(formErrors);
              }
              // prevent ajax submit
              if($module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
              }
              return settings.onFailure.call(element, formErrors);
            }
          },

          // takes a validation object and returns whether field passes validation
          field: function(field) {
            var
              $field      = module.get.field(field.identifier),
              fieldValid  = true,
              fieldErrors = []
            ;
            if($field.prop('disabled')) {
              module.debug('Field is disabled. Skipping', field.identifier);
              fieldValid = true;
            }
            else if(field.optional && $.trim($field.val()) === ''){
              module.debug('Field is optional and empty. Skipping', field.identifier);
              fieldValid = true;
            }
            else if(field.rules !== undefined) {
              $.each(field.rules, function(index, rule) {
                if( module.has.field(field.identifier) && !( module.validate.rule(field, rule) ) ) {
                  module.debug('Field is invalid', field.identifier, rule.type);
                  fieldErrors.push(rule.prompt);
                  fieldValid = false;
                }
              });
            }
            if(fieldValid) {
              module.remove.prompt(field, fieldErrors);
              settings.onValid.call($field);
            }
            else {
              formErrors = formErrors.concat(fieldErrors);
              module.add.prompt(field.identifier, fieldErrors);
              settings.onInvalid.call($field, fieldErrors);
              return false;
            }
            return true;
          },

          // takes validation rule and returns whether field passes rule
          rule: function(field, validation) {
            var
              $field        = module.get.field(field.identifier),
              type          = validation.type,
              value         = $field.val(),
              bracket       = type.match(settings.regExp.bracket),
              isValid       = true,
              rule,
              ancillary,
              functionType
            ;
            // cast to string
            value = $.trim($field.val() + '');

            // if bracket notation is used, pass in extra parameters
            if(bracket) {
              ancillary    = '' + bracket[1];
              functionType = type.replace(bracket[0], '');
              rule         = settings.rules[functionType];
              if( !$.isFunction(rule) ) {
                module.error(error.noRule, functionType);
                return;
              }
              isValid = rule.call($field, value, ancillary);
            }
            else {
              rule = settings.rules[type];
              if( !$.isFunction(rule) ) {
                module.error(error.noRule, type);
                return;
              }
              isValid = rule.call($field, value);
            }
            return isValid;
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      module.initialize();
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.form.settings = {

  name              : 'Form',
  namespace         : 'form',

  debug             : false,
  verbose           : false,
  performance       : true,

  fields            : false,

  keyboardShortcuts : true,
  on                : 'submit',
  inline            : false,

  delay             : 200,
  revalidate        : true,

  transition        : 'scale',
  duration          : 200,

  onValid           : function() {},
  onInvalid         : function() {},
  onSuccess         : function() { return true; },
  onFailure         : function() { return false; },

  metadata : {
    defaultValue : 'default',
    validate     : 'validate'
  },

  regExp: {
    bracket : /\[(.*)\]/i,
    escape  : /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    email   : "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
    integer : /^\-?\d+$/,
    flags   : /^\/(.*)\/(.*)?/,
    url     : /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i
  },

  selector : {
    checkbox   : 'input[type="checkbox"], input[type="radio"]',
    clear      : '.clear',
    field      : 'input, textarea, select',
    group      : '.field',
    input      : 'input',
    message    : '.error.message',
    prompt     : '.prompt.label',
    radio      : 'input[type="radio"]',
    reset      : '.reset:not([type="reset"])',
    submit     : '.submit:not([type="submit"])',
    uiCheckbox : '.ui.checkbox',
    uiDropdown : '.ui.dropdown'
  },

  className : {
    error   : 'error',
    label   : 'ui prompt label',
    pressed : 'down',
    success : 'success'
  },

  error: {
    oldSyntax : 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.',
    noRule    : 'There is no rule matching the one you specified',
    method    : 'The method you called is not defined.'
  },

  templates: {

    // template that produces error message
    error: function(errors) {
      var
        html = '<ul class="list">'
      ;
      $.each(errors, function(index, value) {
        html += '<li>' + value + '</li>';
      });
      html += '</ul>';
      return $(html);
    },

    // template that produces label
    prompt: function(errors) {
      return $('<div/>')
        .addClass('ui red pointing prompt label')
        .html(errors[0])
      ;
    }
  },

  rules: {

    // checkbox checked
    checked: function() {
      return ($(this).filter(':checked').length > 0);
    },

    // value contains text (insensitive)
    contains: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text, 'i') ) !== -1);
    },

    // value contains text (case sensitive)
    containsExactly: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text) ) !== -1);
    },

    // is most likely an email
    email: function(value){
      var
        emailRegExp = new RegExp($.fn.form.settings.regExp.email, 'i')
      ;
      return emailRegExp.test(value);
    },

    // is not empty or blank string
    empty: function(value) {
      return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);
    },

    // is valid integer
    integer: function(value, range) {
      var
        intRegExp = $.fn.form.settings.regExp.integer,
        min,
        max,
        parts
      ;
      if(range === undefined || range === '' || range === '..') {
        // do nothing
      }
      else if(range.indexOf('..') == -1) {
        if(intRegExp.test(range)) {
          min = max = range - 0;
        }
      }
      else {
        parts = range.split('..', 2);
        if(intRegExp.test(parts[0])) {
          min = parts[0] - 0;
        }
        if(intRegExp.test(parts[1])) {
          max = parts[1] - 0;
        }
      }
      return (
        intRegExp.test(value) &&
        (min === undefined || value >= min) &&
        (max === undefined || value <= max)
      );
    },

    // is value (case insensitive)
    is: function(value, text) {
      text = (typeof text == 'string')
        ? text.toLowerCase()
        : text
      ;
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      return (value == text);
    },

    // is value
    isExactly: function(value, text) {
      return (value == text);
    },

    // is at least string length
    length: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
    },

    // matches another field
    different: function(value, identifier) {
      // use either id or name of field
      var
        $form = $(this),
        matchingValue
      ;
      if( $('[data-validate="'+ identifier +'"]').length > 0 ) {
        matchingValue = $('[data-validate="'+ identifier +'"]').val();
      }
      else if($('#' + identifier).length > 0) {
        matchingValue = $('#' + identifier).val();
      }
      else if($('[name="' + identifier +'"]').length > 0) {
        matchingValue = $('[name="' + identifier + '"]').val();
      }
      else if( $('[name="' + identifier +'[]"]').length > 0 ) {
        matchingValue = $('[name="' + identifier +'[]"]');
      }
      return (matchingValue !== undefined)
        ? ( value.toString() !== matchingValue.toString() )
        : false
      ;
    },

    // matches another field
    match: function(value, identifier) {
      // use either id or name of field
      var
        $form = $(this),
        matchingValue
      ;
      if( $('[data-validate="'+ identifier +'"]').length > 0 ) {
        matchingValue = $('[data-validate="'+ identifier +'"]').val();
      }
      else if($('#' + identifier).length > 0) {
        matchingValue = $('#' + identifier).val();
      }
      else if($('[name="' + identifier +'"]').length > 0) {
        matchingValue = $('[name="' + identifier + '"]').val();
      }
      else if( $('[name="' + identifier +'[]"]').length > 0 ) {
        matchingValue = $('[name="' + identifier +'[]"]');
      }
      return (matchingValue !== undefined)
        ? ( value.toString() == matchingValue.toString() )
        : false
      ;
    },

    maxCount: function(value, count) {
      value = value.split(',');
      return ($.isArray(value) && value.length <= count);
    },

    exactCount: function(value, count) {
      value = value.split(',');
      return ($.isArray(value) && value.length == count);
    },

    minCount: function(value, count) {
      value = value.split(',');
      return ($.isArray(value) && value.length >= count);
    },

    regExp: function(value, regExp) {
      var
        regExpParts = regExp.match($.fn.form.settings.regExp.flags),
        flags
      ;
      // regular expression specified as /baz/gi (flags)
      if(regExpParts) {
        regExp = (regExpParts.length >= 2)
          ? regExpParts[1]
          : regExp
        ;
        flags = (regExpParts.length >= 3)
          ? regExpParts[2]
          : ''
        ;
      }
      return value.match( new RegExp(regExp, flags) );
    },

    // string length is less than max length
    maxLength: function(value, maxLength) {
      return (value !== undefined)
        ? (value.length <= maxLength)
        : false
      ;
    },

    // value is not value (case insensitive)
    not: function(value, notValue) {
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      notValue = (typeof notValue == 'string')
        ? notValue.toLowerCase()
        : notValue
      ;
      return (value != notValue);
    },

    // value is not value (case sensitive)
    notExactly: function(value, notValue) {
      return (value != notValue);
    },

    // value is most likely url
    url: function(value) {
      return $.fn.form.settings.regExp.url.match(value);
    }
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.accordion = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.accordion.settings, parameters)
          : $.extend({}, $.fn.accordion.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        $module  = $(this),
        $title   = $module.find(selector.title),
        $content = $module.find(selector.content),

        element  = this,
        instance = $module.data(moduleNamespace),
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', $module);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function() {
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying previous instance', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $title   = $module.find(selector.title);
          $content = $module.find(selector.content);
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.debug('Binding delegated events');
            $module
              .on(settings.on + eventNamespace, selector.trigger, module.event.click)
            ;
          }
        },

        event: {
          click: function() {
            module.toggle.call(this);
          }
        },

        toggle: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive && !isAnimating),
            isOpening   = (!isActive && isAnimating)
          ;
          module.debug('Toggling visibility of content', $activeTitle);
          if(isOpen || isOpening) {
            if(settings.collapsible) {
              module.close.call($activeTitle);
            }
            else {
              module.debug('Cannot close accordion content collapsing is disabled');
            }
          }
          else {
            module.open.call($activeTitle);
          }
        },

        open: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive || isAnimating)
          ;
          if(isOpen) {
            module.debug('Accordion already open, skipping', $activeContent);
            return;
          }
          module.debug('Opening accordion content', $activeTitle);
          settings.onOpening.call($activeContent);
          if(settings.exclusive) {
            module.closeOthers.call($activeTitle);
          }
          $activeTitle
            .addClass(className.active)
          ;
          $activeContent
            .stop(true, true)
            .addClass(className.animating)
          ;
          if(settings.animateChildren) {
            if($.fn.transition !== undefined && $module.transition('is supported')) {
              $activeContent
                .children()
                  .transition({
                    animation   : 'fade in',
                    queue       : false,
                    useFailSafe : true,
                    debug       : settings.debug,
                    verbose     : settings.verbose,
                    duration    : settings.duration
                  })
              ;
            }
            else {
              $activeContent
                .children()
                  .stop(true, true)
                  .animate({
                    opacity: 1
                  }, settings.duration, module.resetOpacity)
              ;
            }
          }
          $activeContent
            .slideDown(settings.duration, settings.easing, function() {
              $activeContent
                .removeClass(className.animating)
                .addClass(className.active)
              ;
              module.reset.display.call(this);
              settings.onOpen.call(this);
              settings.onChange.call(this);
            })
          ;
        },

        close: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating    = $activeContent.hasClass(className.animating),
            isActive       = $activeContent.hasClass(className.active),
            isOpening      = (!isActive && isAnimating),
            isClosing      = (isActive && isAnimating)
          ;
          if((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            settings.onClosing.call($activeContent);
            $activeTitle
              .removeClass(className.active)
            ;
            $activeContent
              .stop(true, true)
              .addClass(className.animating)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent
                  .children()
                    .transition({
                      animation   : 'fade out',
                      queue       : false,
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $activeContent
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $activeContent
              .slideUp(settings.duration, settings.easing, function() {
                $activeContent
                  .removeClass(className.animating)
                  .removeClass(className.active)
                ;
                module.reset.display.call(this);
                settings.onClose.call(this);
                settings.onChange.call(this);
              })
            ;
          }
        },

        closeOthers: function(index) {
          var
            $activeTitle = (index !== undefined)
              ? $title.eq(index)
              : $(this).closest(selector.title),
            $parentTitles    = $activeTitle.parents(selector.content).prev(selector.title),
            $activeAccordion = $activeTitle.closest(selector.accordion),
            activeSelector   = selector.title + '.' + className.active + ':visible',
            activeContent    = selector.content + '.' + className.active + ':visible',
            $openTitles,
            $nestedTitles,
            $openContents
          ;
          if(settings.closeNested) {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
          }
          else {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles   = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
          }
          if( ($openTitles.length > 0) ) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles
              .removeClass(className.active)
            ;
            $openContents
              .removeClass(className.animating)
              .stop(true, true)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents
                  .children()
                    .transition({
                      animation   : 'fade out',
                      useFailSafe : true,
                      debug       : settings.debug,
                      verbose     : settings.verbose,
                      duration    : settings.duration
                    })
                ;
              }
              else {
                $openContents
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
                    }, settings.duration, module.resetOpacity)
                ;
              }
            }
            $openContents
              .slideUp(settings.duration , settings.easing, function() {
                $(this).removeClass(className.active);
                module.reset.display.call(this);
              })
            ;
          }
        },

        reset: {

          display: function() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

          opacity: function() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
            }
          },

        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          module.debug('Changing internal', name, value);
          if(value !== undefined) {
            if( $.isPlainObject(name) ) {
              $.extend(true, module, name);
            }
            else {
              module[name] = value;
            }
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.accordion.settings = {

  name            : 'Accordion',
  namespace       : 'accordion',

  debug           : false,
  verbose         : false,
  performance     : true,

  on              : 'click',

  exclusive       : true,
  collapsible     : true,
  closeNested     : false,
  animateChildren : true,

  duration        : 350,
  easing          : 'easeOutQuad',


  onOpening       : function(){},
  onOpen          : function(){},
  onClosing       : function(){},
  onClose         : function(){},
  onChange        : function(){},

  error: {
    method : 'The method you called is not defined'
  },

  className   : {
    active    : 'active',
    animating : 'animating'
  },

  selector    : {
    accordion : '.accordion',
    title     : '.title',
    trigger   : '.title',
    content   : '.content'
  }

};

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  }
});

})( jQuery, window , document );


/*!
 * # Semantic UI 2.0.0 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.checkbox = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = $.extend(true, {}, $.fn.checkbox.settings, parameters),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $label          = $(this).children(selector.label),
        $input          = $(this).children(selector.input),

        instance        = $module.data(moduleNamespace),

        observer,
        element         = this,
        module
      ;

      module      = {

        initialize: function() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.bind.events();

          module.set.tabbable();
          module.hide.input();

          module.observeChanges();
          module.instantiate();
          module.setup();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying module');
          module.unbind.events();
          module.show.input();
          $module.removeData(moduleNamespace);
        },

        fix: {
          reference: function() {
            if( $module.is(selector.input) ) {
              module.debug('Behavior called on <input> adjusting invoked element');
              $module = $module.closest(selector.checkbox);
              module.refresh();
            }
          }
        },

        setup: function() {
          if( module.is.indeterminate() ) {
            module.debug('Initial value is indeterminate');
            module.set.indeterminate();
            if(settings.fireOnInit) {
              settings.onIndeterminate.call($input[0]);
              settings.onChange.call($input[0]);
            }
          }
          else if( module.is.checked() ) {
            module.debug('Initial value is checked');
            module.set.checked();
            if(settings.fireOnInit) {
              settings.onChecked.call($input[0]);
              settings.onChange.call($input[0]);
            }
          }
          else {
            module.debug('Initial value is unchecked');
            module.set.unchecked();
            if(settings.fireOnInit) {
              settings.onUnchecked.call($input[0]);
              settings.onChange.call($input[0]);
            }
          }
        },

        refresh: function() {
          $label = $module.children(selector.label);
          $input = $module.children(selector.input);
        },

        hide: {
          input: function() {
            module.verbose('Modfying <input> z-index to be unselectable');
            $input.addClass(className.hidden);
          }
        },
        show: {
          input: function() {
            module.verbose('Modfying <input> z-index to be selectable');
            $input.removeClass(className.hidden);
          }
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        attachEvents: function(selector, event) {
          var
            $element = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound);
          }
        },

        event: {
          click: function(event) {
            if( $(event.target).is(selector.input) ) {
              module.verbose('Using default check action on initialized checkbox');
              return;
            }
            module.toggle();
          },
          keydown: function(event) {
            var
              key     = event.which,
              keyCode = {
                enter  : 13,
                space  : 32,
                escape : 27
              }
            ;
            if(key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $input.blur();
              event.preventDefault();
            }
            if(!event.ctrlKey && (key == keyCode.enter || key == keyCode.space)) {
              module.verbose('Enter key pressed, toggling checkbox');
              module.toggle();
              event.preventDefault();
            }
          }
        },

        check: function() {
          if( !module.is.indeterminate() && module.is.checked() ) {
            module.debug('Checkbox is already checked');
            return;
          }
          module.debug('Checking checkbox', $input);
          module.set.checked();
          settings.onChecked.call($input[0]);
          settings.onChange.call($input[0]);
        },

        uncheck: function() {
          if( !module.is.indeterminate() && module.is.unchecked() ) {
            module.debug('Checkbox is already unchecked');
            return;
          }
          module.debug('Unchecking checkbox');
          module.set.unchecked();
          settings.onUnchecked.call($input[0]);
          settings.onChange.call($input[0]);
        },

        indeterminate: function() {
          if( module.is.indeterminate() ) {
            module.debug('Checkbox is already indeterminate');
            return;
          }
          module.debug('Making checkbox indeterminate');
          module.set.indeterminate();
          settings.onIndeterminate.call($input[0]);
          settings.onChange.call($input[0]);
        },

        determinate: function() {
          if( module.is.determinate() ) {
            module.debug('Checkbox is already determinate');
            return;
          }
          module.debug('Making checkbox determinate');
          module.set.determinate();
          settings.onDeterminate.call($input[0]);
          settings.onChange.call($input[0]);
        },

        enable: function() {
          if( module.is.enabled() ) {
            module.debug('Checkbox is already enabled');
            return;
          }
          module.debug('Enabling checkbox');
          module.set.enabled();
          settings.onEnable.call($input[0]);
        },

        disable: function() {
          if( module.is.disabled() ) {
            module.debug('Checkbox is already disabled');
            return;
          }
          module.debug('Disabling checkbox');
          module.set.disabled();
          settings.onDisable.call($input[0]);
        },

        get: {
          radios: function() {
            var
              name = module.get.name()
            ;
            return $('input[name="' + name + '"]').closest(selector.checkbox);
          },
          name: function() {
            return $input.attr('name');
          }
        },

        is: {
          radio: function() {
            return ($input.hasClass(className.radio) || $input.attr('type') == 'radio');
          },
          indeterminate: function() {
            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');
          },
          checked: function() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
          },
          disabled: function() {
            return $input.prop('disabled') !== undefined && $input.prop('disabled');
          },
          enabled: function() {
            return !module.is.disabled();
          },
          determinate: function() {
            return !module.is.indeterminate();
          },
          unchecked: function() {
            return !module.is.checked();
          }
        },

        can: {
          change: function() {
            return !( $module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly') );
          },
          uncheck: function() {
            return (typeof settings.uncheckable === 'boolean')
              ? settings.uncheckable
              : !module.is.radio()
            ;
          }
        },

        set: {
          checked: function() {
            if(!module.is.indeterminate() && module.is.checked()) {
              module.debug('Input is already checked');
              return;
            }
            module.verbose('Setting state to checked', $input[0]);
            if( module.is.radio() ) {
              module.uncheckOthers();
            }
            $input
              .prop('indeterminate', false)
              .prop('checked', true)
            ;
            $module
              .removeClass(className.indeterminate)
              .addClass(className.checked)
            ;
            module.trigger.change();
          },
          unchecked: function() {
            if(!module.is.indeterminate() &&  module.is.unchecked() ) {
              module.debug('Input is already unchecked');
              return;
            }
            module.debug('Setting state to unchecked');
            $input
              .prop('indeterminate', false)
              .prop('checked', false)
            ;
            $module
              .removeClass(className.indeterminate)
              .removeClass(className.checked)
            ;
            module.trigger.change();
          },
          indeterminate: function() {
            if( module.is.indeterminate() ) {
              module.debug('Input is already indeterminate');
              return;
            }
            module.debug('Setting state to indeterminate');
            $input
              .prop('indeterminate', true)
            ;
            $module
              .addClass(className.indeterminate)
            ;
            module.trigger.change();
          },
          determinate: function() {
            if( module.is.determinate() ) {
              module.debug('Input is already determinate');
              return;
            }
            module.debug('Setting state to determinate');
            $input
              .prop('indeterminate', false)
            ;
            $module
              .removeClass(className.indeterminate)
            ;
          },
          disabled: function() {
            if( module.is.disabled() ) {
              module.debug('Input is already disabled');
              return;
            }
            module.debug('Setting state to disabled');
            $input
              .prop('disabled', 'disabled')
            ;
            $module
              .addClass(className.disabled)
            ;
            module.trigger.change();
          },
          enabled: function() {
            if( module.is.enabled() ) {
              module.debug('Input is already enabled');
              return;
            }
            module.debug('Setting state to enabled');
            $input
              .prop('disabled', false)
            ;
            $module.removeClass(className.disabled);
            module.trigger.change();
          },
          tabbable: function() {
            module.verbose('Adding tabindex to checkbox');
            if( $input.attr('tabindex') === undefined) {
              $input.attr('tabindex', 0);
            }
          }
        },

        trigger: {
          change: function() {
            module.verbose('Triggering change event from programmatic change');
            $input
              .trigger('change')
            ;
          }
        },


        create: {
          label: function() {
            if($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
            }
            else if( !module.has.label() ) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
            }
          }
        },

        has: {
          label: function() {
            return ($label.length > 0);
          }
        },

        bind: {
          events: function() {
            module.verbose('Attaching checkbox events');
            $module
              .on('click'   + eventNamespace, module.event.click)
              .on('keydown' + eventNamespace, selector.input, module.event.keydown)
            ;
          }
        },

        unbind: {
          events: function() {
            module.debug('Removing events');
            $module
              .off(eventNamespace)
            ;
          }
        },

        uncheckOthers: function() {
          var
            $radios = module.get.radios()
          ;
          module.debug('Unchecking other radios', $radios);
          $radios.removeClass(className.checked);
        },

        toggle: function() {
          if( !module.can.change() ) {
            if(!module.is.radio()) {
              module.debug('Checkbox is read-only or disabled, ignoring toggle');
            }
            return;
          }
          if( module.is.indeterminate() || module.is.unchecked() ) {
            module.debug('Currently unchecked');
            module.check();
          }
          else if( module.is.checked() && module.can.uncheck() ) {
            module.debug('Currently checked');
            module.uncheck();
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.checkbox.settings = {

  name            : 'Checkbox',
  namespace       : 'checkbox',

  debug           : false,
  verbose         : true,
  performance     : true,

  // delegated event context
  uncheckable     : 'auto',
  fireOnInit      : false,

  onChange        : function(){},

  onChecked       : function(){},
  onUnchecked     : function(){},

  onDeterminate   : function() {},
  onIndeterminate : function() {},

  onEnabled       : function(){},
  onDisabled      : function(){},

  className       : {
    checked       : 'checked',
    indeterminate : 'indeterminate',
    disabled      : 'disabled',
    hidden        : 'hidden',
    radio         : 'radio',
    readOnly      : 'read-only'
  },

  error     : {
    method       : 'The method you called is not defined'
  },

  selector : {
    checkbox : '.ui.checkbox',
    label    : 'label, .box',
    input    : 'input[type="checkbox"], input[type="radio"]',
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dimmer = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dimmer.settings, parameters)
          : $.extend({}, $.fn.dimmer.settings),

        selector        = settings.selector,
        namespace       = settings.namespace,
        className       = settings.className,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        clickEvent      = ('ontouchstart' in document.documentElement)
          ? 'touchstart'
          : 'click',

        $module = $(this),
        $dimmer,
        $dimmable,

        element   = this,
        instance  = $module.data(moduleNamespace),
        module
      ;

      module = {

        preinitialize: function() {
          if( module.is.dimmer() ) {

            $dimmable = $module.parent();
            $dimmer   = $module;
          }
          else {
            $dimmable = $module;
            if( module.has.dimmer() ) {
              if(settings.dimmerName) {
                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);
              }
              else {
                $dimmer = $dimmable.find(selector.dimmer);
              }
            }
            else {
              $dimmer = module.create();
            }
          }
        },

        initialize: function() {
          module.debug('Initializing dimmer', settings);
          if(settings.on == 'hover') {
            $dimmable
              .on('mouseenter' + eventNamespace, module.show)
              .on('mouseleave' + eventNamespace, module.hide)
            ;
          }
          else if(settings.on == 'click') {
            $dimmable
              .on(clickEvent + eventNamespace, module.toggle)
            ;
          }
          if( module.is.page() ) {
            module.debug('Setting as a page dimmer', $dimmable);
            module.set.pageDimmer();
          }

          if( module.is.closable() ) {
            module.verbose('Adding dimmer close event', $dimmer);
            $dimmable
              .on(clickEvent + eventNamespace, selector.dimmer, module.event.click)
            ;
          }
          module.set.dimmable();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', $dimmer);
          $module
            .removeData(moduleNamespace)
          ;
          $dimmable
            .off(eventNamespace)
          ;
        },

        event: {
          click: function(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if( $dimmer.find(event.target).length === 0 || $(event.target).is(selector.content) ) {
              module.hide();
              event.stopImmediatePropagation();
            }
          }
        },

        addContent: function(element) {
          var
            $content = $(element)
          ;
          module.debug('Add content to dimmer', $content);
          if($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
          }
        },

        create: function() {
          var
            $element = $( settings.template.dimmer() )
          ;
          if(settings.variation) {
            module.debug('Creating dimmer with variation', settings.variation);
            $element.addClass(settings.variation);
          }
          if(settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
          }
          $element
            .appendTo($dimmable)
          ;
          return $element;
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Showing dimmer', $dimmer, settings);
          if( (!module.is.dimmed() || module.is.animating()) && module.is.enabled() ) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is already shown or disabled');
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.dimmed() || module.is.animating() ) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
          }
          else {
            module.debug('Dimmer is not visible');
          }
        },

        toggle: function() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if( !module.is.dimmed() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        animate: {
          show: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if(settings.opacity !== 'auto') {
                module.set.opacity();
              }
              $dimmer
                .transition({
                  animation   : settings.transition + ' in',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.set.dimmed();
                  },
                  onComplete  : function() {
                    module.set.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if(settings.opacity == 'auto') {
                settings.opacity = 0.8;
              }
              $dimmer
                .stop()
                .css({
                  opacity : 0,
                  width   : '100%',
                  height  : '100%'
                })
                .fadeTo(module.get.duration(), settings.opacity, function() {
                  $dimmer.removeAttr('style');
                  module.set.active();
                  callback();
                })
              ;
            }
          },
          hide: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer
                .transition({
                  animation   : settings.transition + ' out',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.remove.dimmed();
                  },
                  onComplete  : function() {
                    module.remove.active();
                    callback();
                  }
                })
              ;
            }
            else {
              module.verbose('Hiding dimmer with javascript');
              module.remove.dimmed();
              $dimmer
                .stop()
                .fadeOut(module.get.duration(), function() {
                  module.remove.active();
                  $dimmer.removeAttr('style');
                  callback();
                })
              ;
            }
          }
        },

        get: {
          dimmer: function() {
            return $dimmer;
          },
          duration: function() {
            if(typeof settings.duration == 'object') {
              if( module.is.active() ) {
                return settings.duration.hide;
              }
              else {
                return settings.duration.show;
              }
            }
            return settings.duration;
          }
        },

        has: {
          dimmer: function() {
            if(settings.dimmerName) {
              return ($module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0);
            }
            else {
              return ( $module.find(selector.dimmer).length > 0 );
            }
          }
        },

        is: {
          active: function() {
            return $dimmer.hasClass(className.active);
          },
          animating: function() {
            return ( $dimmer.is(':animated') || $dimmer.hasClass(className.animating) );
          },
          closable: function() {
            if(settings.closable == 'auto') {
              if(settings.on == 'hover') {
                return false;
              }
              return true;
            }
            return settings.closable;
          },
          dimmer: function() {
            return $module.hasClass(className.dimmer);
          },
          dimmable: function() {
            return $module.hasClass(className.dimmable);
          },
          dimmed: function() {
            return $dimmable.hasClass(className.dimmed);
          },
          disabled: function() {
            return $dimmable.hasClass(className.disabled);
          },
          enabled: function() {
            return !module.is.disabled();
          },
          page: function () {
            return $dimmable.is('body');
          },
          pageDimmer: function() {
            return $dimmer.hasClass(className.pageDimmer);
          }
        },

        can: {
          show: function() {
            return !$dimmer.hasClass(className.disabled);
          }
        },

        set: {
          opacity: function(opacity) {
            var
              opacity    = settings.opacity || opacity,
              color      = $dimmer.css('background-color'),
              colorArray = color.split(','),
              isRGBA     = (colorArray && colorArray.length == 4)
            ;
            if(isRGBA) {
              colorArray[3] = opacity + ')';
              color         = colorArray.join(',');
            }
            else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
            }
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
          },
          active: function() {
            $dimmer.addClass(className.active);
          },
          dimmable: function() {
            $dimmable.addClass(className.dimmable);
          },
          dimmed: function() {
            $dimmable.addClass(className.dimmed);
          },
          pageDimmer: function() {
            $dimmer.addClass(className.pageDimmer);
          },
          disabled: function() {
            $dimmer.addClass(className.disabled);
          }
        },

        remove: {
          active: function() {
            $dimmer
              .removeClass(className.active)
            ;
          },
          dimmed: function() {
            $dimmable.removeClass(className.dimmed);
          },
          disabled: function() {
            $dimmer.removeClass(className.disabled);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      module.preinitialize();

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.dimmer.settings = {

  name        : 'Dimmer',
  namespace   : 'dimmer',

  debug       : false,
  verbose     : false,
  performance : true,

  // name to distinguish between multiple dimmers in context
  dimmerName  : false,

  // whether to add a variation type
  variation   : false,

  // whether to bind close events
  closable    : 'auto',

  // whether to use css animations
  useCSS      : true,

  // css animation to use
  transition  : 'fade',

  // event to bind to
  on          : false,

  // overriding opacity value
  opacity     : 'auto',

  // transition durations
  duration    : {
    show : 500,
    hide : 500
  },

  onChange    : function(){},
  onShow      : function(){},
  onHide      : function(){},

  error   : {
    method   : 'The method you called is not defined.'
  },

  className : {
    active     : 'active',
    animating  : 'animating',
    dimmable   : 'dimmable',
    dimmed     : 'dimmed',
    dimmer     : 'dimmer',
    disabled   : 'disabled',
    hide       : 'hide',
    pageDimmer : 'page',
    show       : 'show'
  },

  selector: {
    dimmer   : '> .ui.dimmer',
    content  : '.ui.dimmer > .content, .ui.dimmer > .content > .center'
  },

  template: {
    dimmer: function() {
     return $('<div />').attr('class', 'ui dimmer');
    }
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.dropdown = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function(elementIndex) {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.dropdown.settings, parameters)
          : $.extend({}, $.fn.dropdown.settings),

        className       = settings.className,
        message         = settings.message,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        selector        = settings.selector,
        error           = settings.error,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $text           = $module.find(selector.text),
        $search         = $module.find(selector.search),
        $input          = $module.find(selector.input),
        $icon           = $module.find(selector.icon),

        $combo = ($module.prev().find(selector.text).length > 0)
          ? $module.prev().find(selector.text)
          : $module.prev(),

        $menu           = $module.children(selector.menu),
        $item           = $menu.find(selector.item),

        activated       = false,
        itemActivated   = false,
        element         = this,
        instance        = $module.data(moduleNamespace),

        initialLoad,
        pageLostFocus,
        elementNamespace,
        id,
        selectObserver,
        menuObserver,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing dropdown', settings);

          if( module.is.alreadySetup() ) {
            module.setup.reference();
          }
          else {
            module.setup.layout();
            module.refreshData();

            module.save.defaults();
            module.restore.selected();

            module.create.id();
            if(hasTouch) {
              module.bind.touchEvents();
            }
            module.bind.mouseEvents();
            module.bind.keyboardEvents();

            module.observeChanges();
            module.instantiate();
          }

        },

        instantiate: function() {
          module.verbose('Storing instance of dropdown', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous dropdown', $module);
          module.remove.tabbable();
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          $menu
            .off(eventNamespace)
          ;
          $document
            .off(elementNamespace)
          ;
          if(selectObserver) {
            selectObserver.disconnect();
          }
          if(menuObserver) {
            menuObserver.disconnect();
          }
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            selectObserver = new MutationObserver(function(mutations) {
              module.debug('<select> modified, recreating menu');
              module.setup.select();
            });
            menuObserver = new MutationObserver(function(mutations) {
              module.debug('Menu modified, updating selector cache');
              module.refresh();
            });
            if(module.has.input()) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
              });
            }
            if(module.has.menu()) {
              menuObserver.observe($menu[0], {
                childList : true,
                subtree   : true
              });
            }
            module.debug('Setting up mutation observer', selectObserver, menuObserver);
          }
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          },
          userChoice: function(values) {
            var
              $userChoices,
              $userChoice,
              isUserValue,
              html
            ;
            values = values || module.get.userValues();
            if(!values) {
              return false;
            }
            values = $.isArray(values)
              ? values
              : [values]
            ;
            $.each(values, function(index, value) {
              if(module.get.item(value) === false) {
                html         = settings.templates.addition(value);
                $userChoice  = $('<div />')
                  .html(html)
                  .data(metadata.value, value)
                  .addClass(className.addition)
                  .addClass(className.item)
                ;
                $userChoices = ($userChoices === undefined)
                  ? $userChoice
                  : $userChoices.add($userChoice)
                ;
                module.verbose('Creating user choices for value', value, $userChoice);
              }
            });
            return $userChoices;
          },
          userLabels: function(value) {
            var
              userValues = module.get.userValues()
            ;
            if(userValues) {
              module.debug('Adding user labels', userValues);
              $.each(userValues, function(index, value) {
                module.verbose('Adding custom user value');
                module.add.label(value, value);
              });
            }
          },
        },

        search: function(query) {
          query = (query !== undefined)
            ? query
            : module.get.query()
          ;
          module.verbose('Searching for query', query);
          module.filter(query);
        },

        select: {
          firstUnfiltered: function() {
            module.verbose('Selecting first non-filtered element');
            module.remove.selectedItem();
            $item
              .not(selector.unselectable)
                .eq(0)
                .addClass(className.selected)
            ;
          },
          nextAvailable: function($selected) {
            $selected = $selected.eq(0);
            var
              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),
              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),
              hasNext        = ($nextAvailable.length > 0)
            ;
            if(hasNext) {
              module.verbose('Moving selection to', $nextAvailable);
              $nextAvailable.addClass(className.selected);
            }
            else {
              module.verbose('Moving selection to', $prevAvailable);
              $prevAvailable.addClass(className.selected);
            }
          }
        },

        setup: {
          api: function() {
            var
              apiSettings = {
                debug : settings.debug,
                on    : false
              }
            ;
            module.verbose('First request, initializing API');
            $module
              .api(apiSettings)
            ;
          },
          layout: function() {
            if( $module.is('select') ) {
              module.setup.select();
              module.setup.returnedObject();
              console.log($module);
            }
            if( module.is.search() && !module.has.search() ) {
              module.verbose('Adding search input');
              $search = $('<input />')
                .addClass(className.search)
                .insertBefore($text)
              ;
            }
            if(settings.allowTab) {
              module.set.tabbable();
            }
            if($menu.length === 0) {
              $menu = $('<div />')
                .addClass(className.menu)
                .appendTo($module)
              ;
            }
          },
          select: function() {
            var
              selectValues  = module.get.selectValues()
            ;
            module.debug('Dropdown initialized on a select', selectValues);
            if( $module.is('select') ) {
              $input = $module;
            }
            // see if select is placed correctly already
            if($input.parent(selector.dropdown).length > 0) {
              module.debug('UI dropdown already exists. Creating dropdown menu only');
              $module = $input.closest(selector.dropdown);
              $menu   = $module.children(selector.menu);
              module.setup.menu(selectValues);
            }
            else {
              module.debug('Creating entire dropdown from select');
              $module = $('<div />')
                .attr('class', $input.attr('class') )
                .addClass(className.selection)
                .addClass(className.dropdown)
                .html( templates.dropdown(selectValues) )
                .insertBefore($input)
              ;
              $input
                .removeAttr('class')
                .detach()
                .prependTo($module)
              ;
              console.log($module);
            }
            if($input.is('[multiple]')) {
              module.set.multiple();
            }
            module.refresh();
          },
          menu: function(values) {
            $menu.html( templates.menu( values ));
            $item = $menu.find(selector.item);
          },
          reference: function() {
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');
            // replace module reference
            $module = $module.parent(selector.dropdown);
            module.refresh();
            module.setup.returnedObject();
            // invoke method in context of current instance
            if(methodInvoked) {
              instance = module;
              module.invoke(query);
            }
          },
          returnedObject: function() {
            var
              $firstModules = $allModules.slice(0, elementIndex),
              $lastModules = $allModules.slice(elementIndex + 1)
            ;
            // adjust all modules to use correct reference
            $allModules = $firstModules.add($module).add($lastModules);
          }
        },

        refresh: function() {
          module.refreshSelectors();
          module.refreshData();
        },

        refreshSelectors: function() {
          module.verbose('Refreshing selector cache');
          $text   = $module.find(selector.text);
          $search = $module.find(selector.search);
          $input  = $module.find(selector.input);
          $icon   = $module.find(selector.icon);
          $combo  = ($module.prev().find(selector.text).length > 0)
            ? $module.prev().find(selector.text)
            : $module.prev()
          ;
          $menu    = $module.children(selector.menu);
          $item    = $menu.find(selector.item);
        },

        refreshData: function() {
          module.verbose('Refreshing cached metadata');
          $item
            .removeData(metadata.text)
            .removeData(metadata.value)
          ;
          $module
            .removeData(metadata.defaultText)
            .removeData(metadata.defaultValue)
            .removeData(metadata.placeholderText)
          ;
        },


        toggle: function() {
          module.verbose('Toggling menu visibility');
          if( !module.is.active() ) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.can.show() && !module.is.active() ) {
            module.debug('Showing dropdown');
            if(module.is.multiple()) {
              if(!module.has.search() && module.is.allFiltered()) {
                return true;
              }
            }
            module.animate.show(function() {
              if( module.can.click() ) {
                module.bind.intent();
              }
              module.set.visible();
              callback.call(element);
            });
            settings.onShow.call(element);
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.active() ) {
            module.debug('Hiding dropdown');
            module.animate.hide(function() {
              module.remove.visible();
              callback.call(element);
            });
            settings.onHide.call(element);
          }
        },

        hideOthers: function() {
          module.verbose('Finding other dropdowns to hide');
          $allModules
            .not($module)
              .has(selector.menu + '.' + className.visible)
                .dropdown('hide')
          ;
        },

        hideMenu: function() {
          module.verbose('Hiding menu  instantaneously');
          module.remove.active();
          module.remove.visible();
          $menu.transition('hide');
        },

        hideSubMenus: function() {
          var
            $subMenus = $menu.children(selector.item).find(selector.menu)
          ;
          module.verbose('Hiding sub menus', $subMenus);
          $subMenus.transition('hide');
        },

        bind: {
          keyboardEvents: function() {
            module.debug('Binding keyboard events');
            $module
              .on('keydown' + eventNamespace, module.event.keydown)
            ;
            if( module.has.search() ) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)
              ;
            }
            if( module.is.multiple() ) {
              $document
                .on('keydown' + elementNamespace, module.event.document.keydown)
              ;
            }
          },
          touchEvents: function() {
            module.debug('Touch device detected binding additional touch events');
            if( module.is.searchSelection() ) {
              // do nothing special yet
            }
            else {
              $module
                .on('touchstart' + eventNamespace, module.event.test.toggle)
              ;
            }
            $menu
              .on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter)
            ;
          },
          mouseEvents: function() {
            module.debug('Mouse detected binding mouse events');
            if(module.is.multiple()) {
              $module
                .on('click'   + eventNamespace, selector.label, module.event.label.click)
                .on('click'   + eventNamespace, selector.remove, module.event.remove.click)
              ;
            }
            if( module.is.searchSelection() ) {
              $module
                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)
                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)
                .on('click'     + eventNamespace, selector.search, module.show)
                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)
                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)
                .on('click'     + eventNamespace, selector.text,   module.event.text.focus)
              ;
              if(module.is.multiple()) {
                $module
                  .on('click'   + eventNamespace, module.event.click)
                ;
              }
            }
            else {
              if(settings.on == 'click') {
                $module
                  .on('click' + eventNamespace, module.event.test.toggle)
                ;
              }
              else if(settings.on == 'hover') {
                $module
                  .on('mouseenter' + eventNamespace, module.delay.show)
                  .on('mouseleave' + eventNamespace, module.delay.hide)
                ;
              }
              else {
                $module
                  .on(settings.on + eventNamespace, module.toggle)
                ;
              }
              $module
                .on('mousedown' + eventNamespace, module.event.mousedown)
                .on('mouseup'   + eventNamespace, module.event.mouseup)
                .on('focus'     + eventNamespace, module.event.focus)
                .on('blur'      + eventNamespace, module.event.blur)
              ;
            }
            $menu
              .on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter)
              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)
              .on('click'      + eventNamespace, selector.item, module.event.item.click)
            ;
          },
          intent: function() {
            module.verbose('Binding hide intent event to document');
            if(hasTouch) {
              $document
                .on('touchstart' + elementNamespace, module.event.test.touch)
                .on('touchmove'  + elementNamespace, module.event.test.touch)
              ;
            }
            $document
              .on('click' + elementNamespace, module.event.test.hide)
            ;
          }
        },

        unbind: {
          intent: function() {
            module.verbose('Removing hide intent event from document');
            if(hasTouch) {
              $document
                .off('touchstart' + elementNamespace)
                .off('touchmove' + elementNamespace)
              ;
            }
            $document
              .off('click' + elementNamespace)
            ;
          }
        },

        filter: function(query) {
          var
            searchTerm = (query !== undefined)
              ? query
              : module.get.query(),
            afterFiltered = function() {
              if(module.is.multiple()) {
                module.filterActive();
              }
              module.select.firstUnfiltered();
              if( module.has.allResultsFiltered() ) {
                if( settings.onNoResults.call(element, searchTerm) ) {
                  if(!settings.allowAdditions) {
                    module.verbose('All items filtered, showing message', searchTerm);
                    module.add.message(message.noResults);
                  }
                }
                else {
                  module.verbose('All items filtered, hiding dropdown', searchTerm);
                  module.hideMenu();
                }
              }
              else {
                module.remove.message();
              }
              if(settings.allowAdditions) {
                module.add.userSuggestion(query);
              }
              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {
                module.show();
              }
            }
          ;
          if(module.has.maxSelections()) {
            return;
          }
          if(settings.apiSettings) {
            if( module.can.useAPI() ) {
              module.queryRemote(searchTerm, function() {
                afterFiltered();
              });
            }
            else {
              module.error(error.noAPI);
            }
          }
          else {
            module.filterItems(searchTerm);
            afterFiltered();
          }
        },

        queryRemote: function(query, callback) {
          var
            apiSettings = {
              errorDuration        : false,
              throttle             : settings.throttle,
              cache                : 'local',
              urlData              : {
                query: query
              },
              onError: function() {
                module.add.message(message.serverError);
                callback();
              },
              onFailure: function() {
                module.add.message(message.serverError);
                callback();
              },
              onSuccess : function(response) {
                module.remove.message();
                module.setup.menu({
                  values: response.results
                });
                callback();
              }
            }
          ;
          if( !$module.api('get request') ) {
            module.setup.api();
          }
          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);
          $module
            .api('setting', apiSettings)
            .api('query')
          ;
        },

        filterItems: function(query) {
          var
            searchTerm = (query !== undefined)
              ? query
              : module.get.query(),
            $results         = $(),
            escapedTerm      = module.escape.regExp(searchTerm),
            beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm')
          ;
          // avoid loop if we're matching nothing
          if(searchTerm === '') {
            $results = $item;
          }
          else {
            module.verbose('Searching for matching values', searchTerm);
            $item
              .each(function(){
                var
                  $choice = $(this),
                  text,
                  value
                ;
                if(settings.match == 'both' || settings.match == 'text') {
                  text = String(module.get.choiceText($choice, false));
                  if(text.search(beginsWithRegExp) !== -1) {
                    $results = $results.add($choice);
                    return true;
                  }
                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, text)) {
                    $results = $results.add($choice);
                    return true;
                  }
                }
                if(settings.match == 'both' || settings.match == 'value') {
                  value = String(module.get.choiceValue($choice, text));

                  if(value.search(beginsWithRegExp) !== -1) {
                    $results = $results.add($choice);
                    return true;
                  }
                  else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, value)) {
                    $results = $results.add($choice);
                    return true;
                  }
                }
              })
            ;
          }

          module.debug('Showing only matched items', searchTerm);
          module.remove.filteredItem();
          $item
            .not($results)
            .addClass(className.filtered)
          ;
        },

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
          }
          if(queryLength === termLength) {
            return (query === term);
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        filterActive: function() {
          if(settings.useLabels) {
            $item.filter('.' + className.active)
              .addClass(className.filtered)
            ;
          }
        },

        focusSearch: function() {
          if( module.is.search() && !module.is.focusedOnSearch() ) {
            $search[0].focus();
          }
        },

        forceSelection: function() {
          var
            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),
            $selectedItem      = ($currentlySelected.length > 0)
              ? $currentlySelected
              : $activeItem,
            hasSelected = ($selectedItem.size() > 0)
          ;
          if(hasSelected) {
            module.debug('Forcing partial selection to selected item', $selectedItem);
            module.event.item.click.call($selectedItem);
          }
          else {
            module.hide();
          }
        },

        event: {
          focus: function() {
            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {
              module.show();
            }
          },
          click: function(event) {
            var
              $target = $(event.target)
            ;
            // focus search
            if(($target.is($module) || $target.is($icon)) && !module.is.focusedOnSearch()) {
              module.focusSearch();
            }
          },
          blur: function(event) {
            pageLostFocus = (document.activeElement === this);
            if(!activated && !pageLostFocus) {
              module.remove.activeLabel();
              module.hide();
            }
          },
          // prevents focus callback from occuring on mousedown
          mousedown: function() {
            activated = true;
          },
          mouseup: function() {
            activated = false;
          },
          search: {
            focus: function() {
              activated = true;
              if(module.is.multiple()) {
                module.remove.activeLabel();
              }
              if(settings.showOnFocus) {
                module.show();
              }
            },
            blur: function(event) {
              pageLostFocus = (document.activeElement === this);
              if(!itemActivated && !pageLostFocus) {
                if(module.is.multiple()) {
                  module.remove.activeLabel();
                  module.hide();
                }
                else if(settings.forceSelection) {
                  module.forceSelection();
                }
                else {
                  module.hide();
                }
              }
            }
          },
          text: {
            focus: function(event) {
              activated = true;
              module.focusSearch();
            }
          },
          input: function(event) {
            if(module.is.multiple() || module.is.searchSelection()) {
              module.set.filtered();
            }
            clearTimeout(module.timer);
            module.timer = setTimeout(module.search, settings.delay.search);
          },
          label: {
            click: function(event) {
              var
                $label        = $(this),
                $labels       = $module.find(selector.label),
                $activeLabels = $labels.filter('.' + className.active),
                $nextActive   = $label.nextAll('.' + className.active),
                $prevActive   = $label.prevAll('.' + className.active),
                $range = ($nextActive.length > 0)
                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)
                  : $label.prevUntil($prevActive).add($activeLabels).add($label)
              ;
              if(event.shiftKey) {
                $activeLabels.removeClass(className.active);
                $range.addClass(className.active);
              }
              else if(event.ctrlKey) {
                $label.toggleClass(className.active);
              }
              else {
                $activeLabels.removeClass(className.active);
                $label.addClass(className.active);
              }
              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));
            }
          },
          remove: {
            click: function() {
              var
                $label = $(this).parent()
              ;
              if( $label.hasClass(className.active) ) {
                // remove all selected labels
                module.remove.activeLabels();
              }
              else {
                // remove this label only
                module.remove.activeLabels( $label );
              }
            }
          },
          test: {
            toggle: function(event) {
              var
                toggleBehavior = (module.is.multiple())
                  ? module.show
                  : module.toggle
                ;
              if( module.determine.eventOnElement(event, toggleBehavior) ) {
                event.preventDefault();
              }
            },
            touch: function(event) {
              module.determine.eventOnElement(event, function() {
                if(event.type == 'touchstart') {
                  module.timer = setTimeout(module.hide, settings.delay.touch);
                }
                else if(event.type == 'touchmove') {
                  clearTimeout(module.timer);
                }
              });
              event.stopPropagation();
            },
            hide: function(event) {
              module.determine.eventInModule(event, module.hide);
            }
          },
          menu: {
            mousedown: function() {
              itemActivated = true;
            },
            mouseup: function() {
              itemActivated = false;
            }
          },
          item: {
            mouseenter: function(event) {
              var
                $subMenu    = $(this).children(selector.menu),
                $otherMenus = $(this).siblings(selector.item).children(selector.menu)
              ;
              if( $subMenu.length > 0 ) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Showing sub-menu', $subMenu);
                  $.each($otherMenus, function() {
                    module.animate.hide(false, $(this));
                  });
                  module.animate.show(false,  $subMenu);
                }, settings.delay.show);
                event.preventDefault();
              }
            },
            mouseleave: function(event) {
              var
                $subMenu = $(this).children(selector.menu)
              ;
              if($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Hiding sub-menu', $subMenu);
                  module.animate.hide(false,  $subMenu);
                }, settings.delay.hide);
              }
            },
            click: function (event) {
              var
                $choice  = $(this),
                $target  = (event)
                  ? $(event.target)
                  : $(''),
                $subMenu = $choice.find(selector.menu),
                text     = module.get.choiceText($choice),
                value    = module.get.choiceValue($choice, text),
                hasSubMenu     = ($subMenu.length > 0),
                isBubbledEvent = ($subMenu.find($target).length > 0)
              ;
              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {
                if(!settings.useLabels) {
                  module.remove.searchTerm();
                }
                module.determine.selectAction.call(this, text, value);
              }
            }
          },

          document: {
            // label selection should occur even when element has no focus
            keydown: function(event) {
              var
                pressedKey    = event.which,
                keys          = module.get.shortcutKeys(),
                isShortcutKey = module.is.inObject(pressedKey, keys)
              ;
              if(isShortcutKey) {
                var
                  $label            = $module.find(selector.label),
                  $activeLabel      = $label.filter('.' + className.active),
                  activeValue       = $activeLabel.data('value'),
                  labelIndex        = $label.index($activeLabel),
                  labelCount        = $label.length,
                  hasActiveLabel    = ($activeLabel.length > 0),
                  hasMultipleActive = ($activeLabel.length > 1),
                  isFirstLabel      = (labelIndex === 0),
                  isLastLabel       = (labelIndex + 1 == labelCount),
                  isSearch          = module.is.searchSelection(),
                  isFocusedOnSearch = module.is.focusedOnSearch(),
                  isFocused         = module.is.focused(),
                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition() === 0),
                  $nextLabel
                ;
                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {
                  return;
                }

                if(pressedKey == keys.leftArrow) {
                  // activate previous label
                  if((isFocused || caretAtStart) && !hasActiveLabel) {
                    module.verbose('Selecting previous label');
                    $label.last().addClass(className.active);
                  }
                  else if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting previous label');
                      $label.removeClass(className.active);
                    }
                    else {
                      module.verbose('Adding previous label to selection');
                    }
                    if(isFirstLabel && !hasMultipleActive) {
                      $activeLabel.addClass(className.active);
                    }
                    else {
                      $activeLabel.prev(selector.siblingLabel)
                        .addClass(className.active)
                        .end()
                      ;
                    }
                    event.preventDefault();
                  }
                }
                else if(pressedKey == keys.rightArrow) {
                  // activate first label
                  if(isFocused && !hasActiveLabel) {
                    $label.first().addClass(className.active);
                  }
                  // activate next label
                  if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting next label');
                      $label.removeClass(className.active);
                    }
                    else {
                      module.verbose('Adding next label to selection');
                    }
                    if(isLastLabel) {
                      if(isSearch) {
                        if(!isFocusedOnSearch) {
                          module.focusSearch();
                        }
                        else {
                          $label.removeClass(className.active);
                        }
                      }
                      else if(hasMultipleActive) {
                        $activeLabel.next(selector.siblingLabel).addClass(className.active);
                      }
                      else {
                        $activeLabel.addClass(className.active);
                      }
                    }
                    else {
                      $activeLabel.next(selector.siblingLabel).addClass(className.active);
                    }
                    event.preventDefault();
                  }
                }
                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {
                  if(hasActiveLabel) {
                    module.verbose('Removing active labels');
                    if(isLastLabel) {
                      if(isSearch && !isFocusedOnSearch) {
                        module.focusSearch();
                      }
                    }
                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                    event.preventDefault();
                  }
                  else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {
                    module.verbose('Removing last label on input backspace');
                    $activeLabel = $label.last().addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                  }
                }
                else {
                  $activeLabel.removeClass(className.active);
                }
              }
            }
          },

          keydown: function(event) {
            var
              pressedKey    = event.which,
              keys          = module.get.shortcutKeys(),
              isShortcutKey = module.is.inObject(pressedKey, keys)
            ;
            if(isShortcutKey) {
              var
                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),
                $activeItem        = $menu.children('.' + className.active).eq(0),
                $selectedItem      = ($currentlySelected.length > 0)
                  ? $currentlySelected
                  : $activeItem,
                $visibleItems = ($selectedItem.length > 0)
                  ? $selectedItem.siblings(':not(.' + className.filtered +')').andSelf()
                  : $menu.children(':not(.' + className.filtered +')'),
                $subMenu          = $selectedItem.children(selector.menu),
                $parentMenu       = $selectedItem.closest(selector.menu),
                inVisibleMenu     = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),
                hasSubMenu        = ($subMenu.length> 0),
                hasSelectedItem   = ($selectedItem.length > 0),
                selectedIsVisible = ($selectedItem.not(selector.unselectable).length > 0),
                $nextItem,
                isSubMenuItem,
                newIndex
              ;

              // visible menu keyboard shortcuts
              if( module.is.visible() ) {

                // enter (select or open sub-menu)
                if(pressedKey == keys.enter || pressedKey == keys.delimiter) {

                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {
                    module.verbose('Pressed enter on unselectable category, opening sub menu');
                    pressedKey = keys.rightArrow;
                  }
                  else if(selectedIsVisible) {
                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);
                    module.event.item.click.call($selectedItem, event);
                    if(settings.useLabels && module.is.searchSelection()) {
                      module.hideAndClear();
                    }
                    else {
                      module.remove.searchTerm();
                    }
                  }
                  event.preventDefault();
                }

                // left arrow (hide sub-menu)
                if(pressedKey == keys.leftArrow) {

                  isSubMenuItem = ($parentMenu[0] !== $menu[0]);

                  if(isSubMenuItem) {
                    module.verbose('Left key pressed, closing sub-menu');
                    module.animate.hide(false,  $parentMenu);
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $parentMenu
                      .closest(selector.item)
                        .addClass(className.selected)
                    ;
                    event.preventDefault();
                  }
                }

                // right arrow (show sub-menu)
                if(pressedKey == keys.rightArrow) {
                  if(hasSubMenu) {
                    module.verbose('Right key pressed, opening sub-menu');
                    module.animate.show(false,  $subMenu);
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $subMenu
                      .find(selector.item).eq(0)
                        .addClass(className.selected)
                    ;
                    event.preventDefault();
                  }
                }

                // up arrow (traverse menu up)
                if(pressedKey == keys.upArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($visibleItems.index( $nextItem ) < 0) {
                    module.verbose('Up key pressed but reached top of current menu');
                    event.preventDefault();
                    return;
                  }
                  else {
                    module.verbose('Up key pressed, changing active item');
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                  }
                  event.preventDefault();
                }

                // down arrow (traverse menu down)
                if(pressedKey == keys.downArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($nextItem.length === 0) {
                    module.verbose('Down key pressed but reached bottom of current menu');
                    event.preventDefault();
                    return;
                  }
                  else {
                    module.verbose('Down key pressed, changing active item');
                    $item
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                  }
                  event.preventDefault();
                }

                // page down (show next page)
                if(pressedKey == keys.pageUp) {
                  module.scrollPage('up');
                  event.preventDefault();
                }
                if(pressedKey == keys.pageDown) {
                  module.scrollPage('down');
                  event.preventDefault();
                }

                // escape (close menu)
                if(pressedKey == keys.escape) {
                  module.verbose('Escape key pressed, closing dropdown');
                  module.hide();
                }

              }
              else {
                // delimiter key
                if(pressedKey == keys.delimiter) {
                  event.preventDefault();
                }
                // down arrow (open menu)
                if(pressedKey == keys.downArrow) {
                  module.verbose('Down key pressed, showing dropdown');
                  module.show();
                  event.preventDefault();
                }
              }
            }
            else {
              if( module.is.selection() && !module.is.search() ) {
                module.set.selectedLetter( String.fromCharCode(pressedKey) );
              }
            }
          }
        },

        determine: {
          selectAction: function(text, value) {
            module.verbose('Determining action', settings.action);
            if( $.isFunction( module.action[settings.action] ) ) {
              module.verbose('Triggering preset action', settings.action, text, value);
              module.action[ settings.action ].call(this, text, value);
            }
            else if( $.isFunction(settings.action) ) {
              module.verbose('Triggering user action', settings.action, text, value);
              settings.action.call(this, text, value);
            }
            else {
              module.error(error.action, settings.action);
            }
          },
          eventInModule: function(event, callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( $(event.target).closest($module).length === 0 ) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown, canceling callback');
              return false;
            }
          },
          eventOnElement: function(event, callback) {
            var
              $target = $(event.target)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if($target.closest($menu).length === 0) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
            }
            else {
              module.verbose('Event occurred in dropdown menu, canceling callback');
              return false;
            }
          }
        },

        action: {

          nothing: function() {},

          activate: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value, $(this));
            if(module.is.multiple() && !module.is.allFiltered()) {
              return;
            }
            else {
              module.hideAndClear();
            }
          },

          select: function(text, value) {
            // mimics action.activate but does not select text
            module.action.activate.call(this);
          },

          combo: function(text, value) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value, $(this));
            module.hideAndClear();
          },

          hide: function() {
            module.hideAndClear();
          }

        },

        get: {
          id: function() {
            return id;
          },
          text: function() {
            return $text.text();
          },
          query: function() {
            return $.trim($search.val());
          },
          searchWidth: function(characterCount) {
            return (characterCount * settings.glyphWidth) + 'em';
          },
          selectionCount: function() {
            var
              values = module.get.values()
            ;
            return ( module.is.multiple() )
              ? $.isArray(values)
                ? values.length
                : 0
              : (module.get.value() !== '')
                ? 1
                : 0
            ;
          },
          transition: function($subMenu) {
            return (settings.transition == 'auto')
              ? module.is.upward($subMenu)
                ? 'slide up'
                : 'slide down'
              : settings.transition
            ;
          },
          userValues: function() {
            var
              values = module.get.values()
            ;
            if(!values) {
              return false;
            }
            values = $.isArray(values)
              ? values
              : [values]
            ;
            return $.grep(values, function(value) {
              return (module.get.item(value) === false);
            });
          },
          uniqueArray: function(array) {
            return $.grep(array, function (value, index) {
                return $.inArray(value, array) === index;
            });
          },
          caretPosition: function() {
            var
              input = $search.get(0),
              range,
              rangeLength
            ;
            if('selectionStart' in input) {
              return input.selectionStart;
            }
            else if (document.selection) {
              input.focus();
              range       = document.selection.createRange();
              rangeLength = range.text.length;
              range.moveStart('character', -input.value.length);
              return range.text.length - rangeLength;
            }
          },
          shortcutKeys: function() {
            return {
              backspace  : 8,
              delimiter  : 188, // comma
              deleteKey  : 46,
              enter      : 13,
              escape     : 27,
              pageUp     : 33,
              pageDown   : 34,
              leftArrow  : 37,
              upArrow    : 38,
              rightArrow : 39,
              downArrow  : 40
            };
          },
          value: function() {
            return ($input.length > 0)
              ? $input.val()
              : $module.data(metadata.value)
            ;
          },
          values: function() {
            var
              value = module.get.value()
            ;
            if(value === '') {
              return '';
            }
            return (!$input.is('select') && module.is.multiple())
              ? typeof value == 'string'
                ? value.split(settings.delimiter)
                : ''
              : value
            ;
          },
          remoteValues: function() {
            var
              values = module.get.values(),
              remoteValues = false
            ;
            if(values) {
              if(typeof values == 'string') {
                values = [values];
              }
              remoteValues = {};
              $.each(values, function(index, value) {
                var
                  name = module.read.remoteData(value)
                ;
                module.verbose('Restoring value from session data', name, value);
                remoteValues[value] = (name)
                  ? name
                  : value
                ;
              });
            }
            return remoteValues;
          },
          choiceText: function($choice, preserveHTML) {
            preserveHTML = (preserveHTML !== undefined)
              ? preserveHTML
              : settings.preserveHTML
            ;
            if($choice) {
              if($choice.find(selector.menu).length > 0) {
                module.verbose('Retreiving text of element with sub-menu');
                $choice = $choice.clone();
                $choice.find(selector.menu).remove();
                $choice.find(selector.menuIcon).remove();
              }
              return ($choice.data(metadata.text) !== undefined)
                ? $choice.data(metadata.text)
                : (preserveHTML)
                  ? $choice.html().trim()
                  : $choice.text().trim()
              ;
            }
          },
          choiceValue: function($choice, choiceText) {
            choiceText = choiceText || module.get.choiceText($choice);
            if(!$choice) {
              return false;
            }
            return ($choice.data(metadata.value) !== undefined)
              ? $choice.data(metadata.value)
              : (typeof choiceText === 'string')
                ? choiceText.toLowerCase().trim()
                : choiceText
            ;
          },
          inputEvent: function() {
            var
              input = $search[0]
            ;
            if(input) {
              return (input.oninput !== undefined)
                ? 'input'
                : (input.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
              ;
            }
            return false;
          },
          selectValues: function() {
            var
              select = {}
            ;
            select.values = [];
            $module
              .find('option')
                .each(function() {
                  var
                    $option  = $(this),
                    name     = $option.html(),
                    disabled = $option.attr('disabled'),
                    value    = ( $option.attr('value') !== undefined )
                      ? $option.attr('value')
                      : name
                  ;
                  if(settings.placeholder === 'auto' && value === '') {
                    select.placeholder = name;
                  }
                  else {
                    select.values.push({
                      name     : name,
                      value    : value,
                      disabled : disabled
                    });
                  }
                })
            ;
            if(settings.placeholder && settings.placeholder !== 'auto') {
              module.debug('Setting placeholder value to', settings.placeholder);
              select.placeholder = settings.placeholder;
            }
            if(settings.sortSelect) {
              select.values.sort(function(a, b) {
                return (a.name > b.name)
                  ? 1
                  : -1
                ;
              });
              module.debug('Retrieved and sorted values from select', select);
            }
            else {
              module.debug('Retreived values from select', select);
            }
            return select;
          },
          activeItem: function() {
            return $item.filter('.'  + className.active);
          },
          selectedItem: function() {
            var
              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)
            ;
            return ($selectedItem.length > 0)
              ? $selectedItem
              : $item.eq(0)
            ;
          },
          itemWithAdditions: function(value) {
            var
              $items       = module.get.item(value),
              $userItems   = module.create.userChoice(value),
              hasUserItems = ($userItems && $userItems.length > 0)
            ;
            if(hasUserItems) {
              $items = ($items.length > 0)
                ? $items.add($userItems)
                : $userItems
              ;
            }
            return $items;
          },
          item: function(value, strict) {
            var
              $selectedItem = false,
              shouldSearch,
              isMultiple
            ;
            value = (value !== undefined)
              ? value
              : ( module.get.values() !== undefined)
                ? module.get.values()
                : module.get.text()
            ;
            shouldSearch = (isMultiple)
              ? (value.length > 0)
              : (value !== undefined && value !== '' && value !== null)
            ;
            isMultiple = (module.is.multiple() && $.isArray(value));
            strict     = (value === '' || value === 0)
              ? true
              : strict || false
            ;
            if(shouldSearch) {
              $item
                .each(function() {
                  var
                    $choice       = $(this),
                    optionText    = module.get.choiceText($choice),
                    optionValue   = module.get.choiceValue($choice, optionText)
                  ;
                  // safe early exit
                  if(optionValue === null || optionValue === undefined) {
                    return;
                  }
                  if(isMultiple) {
                    if($.inArray(optionValue.toString(), value) !== -1 || $.inArray(optionText, value) !== -1) {
                      $selectedItem = ($selectedItem)
                        ? $selectedItem.add($choice)
                        : $choice
                      ;
                    }
                  }
                  else if(strict) {
                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);
                    if( optionValue === value || optionText === value) {
                      $selectedItem = $choice;
                      return true;
                    }
                  }
                  else {
                    if( optionValue.toString() == value.toString() || optionText == value) {
                      module.verbose('Found select item by value', optionValue, value);
                      $selectedItem = $choice;
                      return true;
                    }
                  }
                })
              ;
            }
            return $selectedItem;
          }
        },

        check: {
          maxSelections: function(selectionCount) {
            if(settings.maxSelections) {
              selectionCount = (selectionCount !== undefined)
                ? selectionCount
                : module.get.selectionCount()
              ;
              if(selectionCount >= settings.maxSelections) {
                module.debug('Maximum selection count reached');
                $item.addClass(className.filtered);
                module.add.message(message.maxSelections);
                return true;
              }
              else {
                module.verbose('No longer at maximum selection count');
                module.remove.message();
                module.remove.filteredItem();
                if(module.is.searchSelection()) {
                  module.filterItems();
                }
                return false;
              }
            }
            return true;
          }
        },

        restore: {
          defaults: function() {
            module.restore.defaultText();
            module.restore.defaultValue();
          },
          defaultText: function() {
            var
              defaultText = $module.data(metadata.defaultText)
            ;
            module.debug('Restoring default text', defaultText);
            module.set.text(defaultText);
            $text.addClass(className.placeholder);
          },
          defaultValue: function() {
            var
              defaultValue = $module.data(metadata.defaultValue)
            ;
            if(defaultValue !== undefined) {
              module.debug('Restoring default value', defaultValue);
              if(defaultValue !== '') {
                module.set.value(defaultValue);
                module.set.selected();
              }
              else {
                module.remove.activeItem();
                module.remove.selectedItem();
              }
            }
          },
          labels: function() {
            if(settings.allowAdditions) {
              if(!settings.useLabels) {
                module.error(error.labels);
                settings.useLabels = true;
              }
              module.debug('Restoring selected values');
              module.create.userLabels();
            }
            module.check.maxSelections();
          },
          selected: function() {
            module.restore.values();
            if(module.is.multiple()) {
              module.debug('Restoring previously selected values and labels');
              module.restore.labels();
            }
            else {
              module.debug('Restoring previously selected values');
            }
          },
          values: function() {
            // prevents callbacks from occuring on initial load
            module.set.initialLoad();
            if(settings.apiSettings) {
              if(settings.saveRemoteData) {
                module.restore.remoteValues();
              }
              else {
                module.clearValue();
              }
            }
            else {
              module.set.selected();
            }
            module.remove.initialLoad();
          },
          remoteValues: function() {
            var
              values = module.get.remoteValues()
            ;
            module.debug('Recreating selected from session data', values);
            if(values) {
              if( module.is.single() ) {
                $.each(values, function(value, name) {
                  module.set.text(name);
                });
              }
              else {
                $.each(values, function(value, name) {
                  module.add.label(value, name);
                });
              }
            }
          }
        },

        read: {
          remoteData: function(value) {
            var
              name
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            name = sessionStorage.getItem(value);
            return (name !== undefined)
              ? name
              : false
            ;
          }
        },

        save: {
          defaults: function() {
            module.save.defaultText();
            module.save.placeholderText();
            module.save.defaultValue();
          },
          defaultValue: function() {
            var
              value = module.get.value()
            ;
            module.verbose('Saving default value as', value);
            $module.data(metadata.defaultValue, value);
          },
          defaultText: function() {
            var
              text = module.get.text()
            ;
            module.verbose('Saving default text as', text);
            $module.data(metadata.defaultText, text);
          },
          placeholderText: function() {
            var
              text
            ;
            if($text.hasClass(className.placeholder)) {
              text = module.get.text();
              module.verbose('Saving placeholder text as', text);
              $module.data(metadata.placeholderText, text);
            }
          },
          remoteData: function(name, value) {
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            module.verbose('Saving remote data to session storage', value, name);
            sessionStorage.setItem(value, name);
          }
        },

        clear: function() {
          if(module.is.multiple()) {
            module.remove.labels();
          }
          else {
            module.remove.activeItem();
            module.remove.selectedItem();
          }
          module.set.placeholderText();
          module.clearValue();
        },

        clearValue: function() {
          module.set.value('');
        },

        scrollPage: function(direction, $selectedItem) {
          var
            $selectedItem = $selectedItem || module.get.selectedItem(),
            $menu         = $selectedItem.closest(selector.menu),
            menuHeight    = $menu.outerHeight(),
            currentScroll = $menu.scrollTop(),
            itemHeight    = $item.eq(0).outerHeight(),
            itemsPerPage  = Math.floor(menuHeight / itemHeight),
            maxScroll     = $menu.prop('scrollHeight'),
            newScroll     = (direction == 'up')
              ? currentScroll - (itemHeight * itemsPerPage)
              : currentScroll + (itemHeight * itemsPerPage),
            $selectableItem = $item.not(selector.unselectable),
            isWithinRange,
            $nextSelectedItem,
            elementIndex
          ;
          elementIndex      = (direction == 'up')
            ? $selectableItem.index($selectedItem) - itemsPerPage
            : $selectableItem.index($selectedItem) + itemsPerPage
          ;
          isWithinRange = (direction == 'up')
            ? (elementIndex >= 0)
            : (elementIndex < $selectableItem.length)
          ;
          $nextSelectedItem = (isWithinRange)
            ? $selectableItem.eq(elementIndex)
            : (direction == 'up')
              ? $selectableItem.first()
              : $selectableItem.last()
          ;
          if($nextSelectedItem.length > 0) {
            module.debug('Scrolling page', direction, $nextSelectedItem);
            $selectedItem
              .removeClass(className.selected)
            ;
            $nextSelectedItem
              .addClass(className.selected)
            ;
            $menu
              .scrollTop(newScroll)
            ;
          }
        },

        set: {
          filtered: function() {
            var
              isMultiple       = module.is.multiple(),
              isSearch         = module.is.searchSelection(),
              isSearchMultiple = (isMultiple && isSearch),
              searchValue      = (isSearch)
                ? module.get.query()
                : '',
              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),
              searchWidth      = module.get.searchWidth(searchValue.length),
              valueIsSet       = searchValue !== ''
            ;
            if(isMultiple && hasSearchValue) {
              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);
              $search.css('width', searchWidth);
            }
            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {
              module.verbose('Hiding placeholder text');
              $text.addClass(className.filtered);
            }
            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {
              module.verbose('Showing placeholder text');
              $text.removeClass(className.filtered);
            }
          },
          loading: function() {
            $module.addClass(className.loading);
          },
          placeholderText: function(text) {
            text = text || $module.data(metadata.placeholderText);
            if(text) {
              module.debug('Restoring placeholder text');
              module.set.text(text);
              $text.addClass(className.placeholder);
            }
          },
          tabbable: function() {
            if( module.has.search() ) {
              module.debug('Added tabindex to searchable dropdown');
              $search
                .val('')
                .attr('tabindex', 0)
              ;
              $menu
                .attr('tabindex', -1)
              ;
            }
            else {
              module.debug('Added tabindex to dropdown');
              if(!$module.attr('tabindex') ) {
                $module
                  .attr('tabindex', 0)
                ;
                $menu
                  .attr('tabindex', -1)
                ;
              }
            }
          },
          initialLoad: function() {
            module.verbose('Setting initial load');
            initialLoad = true;
          },
          scrollPosition: function($item, forceScroll) {
            var
              edgeTolerance = 5,
              $menu,
              hasActive,
              offset,
              itemHeight,
              itemOffset,
              menuOffset,
              menuScroll,
              menuHeight,
              abovePage,
              belowPage
            ;

            $item       = $item || module.get.selectedItem();
            $menu       = $item.closest(selector.menu);
            hasActive   = ($item && $item.length > 0);
            forceScroll = (forceScroll !== undefined)
              ? forceScroll
              : false
            ;
            if($item && $menu.length > 0 && hasActive) {
              itemOffset = $item.position().top;

              $menu.addClass(className.loading);
              menuScroll = $menu.scrollTop();
              menuOffset = $menu.offset().top;
              itemOffset = $item.offset().top;
              offset     = menuScroll - menuOffset + itemOffset;
              if(!forceScroll) {
                menuHeight = $menu.height();
                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);
                abovePage  = ((offset - edgeTolerance) < menuScroll);
              }
              module.debug('Scrolling to active item', offset);
              if(forceScroll || abovePage || belowPage) {
                $menu.scrollTop(offset);
              }
              $menu.removeClass(className.loading);
            }
          },
          text: function(text) {
            if(settings.action !== 'select') {
              if(settings.action == 'combo') {
                module.debug('Changing combo button text', text, $combo);
                if(settings.preserveHTML) {
                  $combo.html(text);
                }
                else {
                  $combo.text(text);
                }
              }
              else {
                module.debug('Changing text', text, $text);
                $text
                  .removeClass(className.filtered)
                  .removeClass(className.placeholder)
                ;
                if(settings.preserveHTML) {
                  $text.html(text);
                }
                else {
                  $text.text(text);
                }
              }
            }
          },
          selectedLetter: function(letter) {
            var
              $selectedItem = $item.filter('.' + className.selected),
              $nextValue    = false
            ;
            $item
              .each(function(){
                var
                  $choice       = $(this),
                  text          = module.get.choiceText($choice, false),
                  firstLetter   = String(text).charAt(0).toLowerCase(),
                  matchedLetter = letter.toLowerCase()
                ;
                if(firstLetter == matchedLetter) {
                  $nextValue = $choice;
                  return false;
                }
              })
            ;
            if($nextValue) {
              module.verbose('Scrolling to next value with letter', letter);
              module.set.scrollPosition($nextValue);
              $selectedItem.removeClass(className.selected);
              $nextValue.addClass(className.selected);
            }
          },
          direction: function($menu) {
            if(settings.direction == 'auto') {
              if(module.is.onScreen($menu)) {
                module.remove.upward($menu);
              }
              else {
                module.set.upward($menu);
              }
            }
            else if(settings.direction == 'upward') {
              module.set.upward($menu);
            }
          },
          upward: function($menu) {
            var $element = $menu || $module;
            $element.addClass(className.upward);
          },
          value: function(value, text, $selected) {
            var
              hasInput     = ($input.length > 0),
              isAddition   = !module.has.value(value),
              currentValue = module.get.values(),
              stringValue  = (typeof value == 'number')
                ? value.toString()
                : value,
              newValue
            ;
            if(hasInput) {
              if(stringValue == currentValue) {
                module.verbose('Skipping value update already same value', value, currentValue);
                if(!module.is.initialLoad()) {
                  return;
                }
              }
              module.debug('Updating input value', value, currentValue);
              $input
                .val(value)
                .trigger('change')
              ;
            }
            else {
              module.verbose('Storing value in metadata', value, $input);
              if(value !== currentValue) {
                $module.data(metadata.value, value);
              }
            }
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onChange);
            }
            else {
              settings.onChange.call(element, value, text, $selected);
            }
          },
          active: function() {
            $module
              .addClass(className.active)
            ;
          },
          multiple: function() {
            $module.addClass(className.multiple);
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          selected: function(value, $selectedItem) {
            var
              isMultiple = module.is.multiple(),
              $userSelectedItem
            ;
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;
            if(!$selectedItem) {
              return;
            }
            module.debug('Setting selected menu item to', $selectedItem);
            if(module.is.single()) {
              module.remove.activeItem();
              module.remove.selectedItem();
            }
            else if(settings.useLabels) {
              module.remove.selectedItem();
            }
            // select each item
            $selectedItem
              .each(function() {
                var
                  $selected      = $(this),
                  selectedText   = module.get.choiceText($selected),
                  selectedValue  = module.get.choiceValue($selected, selectedText),

                  isFiltered     = $selected.hasClass(className.filtered),
                  isActive       = $selected.hasClass(className.active),
                  isUserValue    = $selected.hasClass(className.addition),
                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)
                ;
                if(isMultiple) {
                  if(!isActive || isUserValue) {
                    if(settings.apiSettings && settings.saveRemoteData) {
                      module.save.remoteData(selectedText, selectedValue);
                    }
                    if(settings.useLabels) {
                      module.add.value(selectedValue, selectedText, $selected);
                      module.add.label(selectedValue, selectedText, shouldAnimate);
                      $selected.addClass(className.active);
                      module.filterActive();
                      module.select.nextAvailable($selectedItem);
                    }
                    else {
                      module.add.value(selectedValue, selectedText, $selected);
                      module.set.text(module.add.variables(message.count));
                      $selected.addClass(className.active);
                    }
                  }
                  else if(!isFiltered) {
                    module.debug('Selected active value, removing label');
                    module.remove.selected(selectedValue);
                  }
                }
                else {
                  if(settings.apiSettings && settings.saveRemoteData) {
                    module.save.remoteData(selectedText, selectedValue);
                  }
                  module.set.value(selectedValue, selectedText, $selected);
                  module.set.text(selectedText);
                  $selected
                    .addClass(className.active)
                    .addClass(className.selected)
                  ;
                }
              })
            ;
          }
        },

        add: {
          label: function(value, text, shouldAnimate) {
            var
              $next  = module.is.searchSelection()
                ? $search
                : $text,
              $label
            ;
            $label =  $('<a />')
              .addClass(className.label)
              .attr('data-value', value)
              .html(templates.label(value, text))
            ;
            $label = settings.onLabelCreate.call($label, value, text);

            if(module.has.label(value)) {
              module.debug('Label already exists, skipping', value);
              return;
            }
            if(settings.label.variation) {
              $label.addClass(settings.label.variation);
            }
            if(shouldAnimate === true) {
              module.debug('Animating in label', $label);
              $label
                .addClass(className.hidden)
                .insertBefore($next)
                .transition(settings.label.transition, settings.label.duration)
              ;
            }
            else {
              module.debug('Adding selection label', $label);
              $label
                .insertBefore($next)
              ;
            }
          },
          message: function(message) {
            var
              $message = $menu.children(selector.message),
              html     = settings.templates.message(module.add.variables(message))
            ;
            if($message.length > 0) {
              $message
                .html(html)
              ;
            }
            else {
              $message = $('<div/>')
                .html(html)
                .addClass(className.message)
                .appendTo($menu)
              ;
            }
          },
          optionValue: function(value) {
            var
              $option   = $input.find('option[value="' + value + '"]'),
              hasOption = ($option.length > 0)
            ;
            if(hasOption) {
              return;
            }
            // temporarily disconnect observer
            if(selectObserver) {
              selectObserver.disconnect();
              module.verbose('Temporarily disconnecting mutation observer', value);
            }
            $('<option/>')
              .prop('value', value)
              .html(value)
              .appendTo($input)
            ;
            module.verbose('Adding user addition as an <option>', value);
            if(selectObserver) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
              });
            }
          },
          userSuggestion: function(value) {
            var
              $addition         = $menu.children(selector.addition),
              alreadyHasValue   = module.get.item(value),
              hasUserSuggestion = $addition.length > 0,
              html
            ;
            if(module.has.maxSelections()) {
              return;
            }
            if(value === '' || alreadyHasValue) {
              $addition.remove();
              return;
            }
            $item
              .removeClass(className.selected)
            ;
            if(hasUserSuggestion) {
              html = settings.templates.addition(value);
              $addition
                .html(html)
                .data(metadata.value, value)
                .removeClass(className.filtered)
                .addClass(className.selected)
              ;
              module.verbose('Replacing user suggestion with new value', $addition);
            }
            else {
              $addition = module.create.userChoice(value);
              $addition
                .prependTo($menu)
                .addClass(className.selected)
              ;
              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);
            }
          },
          variables: function(message) {
            var
              hasCount    = (message.search('{count}') !== -1),
              hasMaxCount = (message.search('{maxCount}') !== -1),
              hasTerm     = (message.search('{term}') !== -1),
              values,
              count,
              query
            ;
            module.verbose('Adding templated variables to message', message);
            if(hasCount) {
              count  = module.get.selectionCount();
              message = message.replace('{count}', count);
            }
            if(hasMaxCount) {
              count  = module.get.selectionCount();
              message = message.replace('{maxCount}', settings.maxSelections);
            }
            if(hasTerm) {
              query   = module.get.query();
              message = message.replace('{term}', query);
            }
            return message;
          },
          value: function(addedValue, addedText, $selectedItem) {
            var
              currentValue = module.get.values(),
              newValue
            ;
            if(addedValue === '') {
              module.debug('Cannot select blank values from multiselect');
              return;
            }
            // extend currently array
            if($.isArray(currentValue)) {
              newValue = currentValue.concat([addedValue]);
              newValue = module.get.uniqueArray(newValue);
            }
            else {
              newValue = [addedValue];
            }
            // add values
            if( $input.is('select')) {
              if(settings.allowAdditions) {
                module.add.optionValue(addedValue);
                module.debug('Adding value to select', addedValue, newValue, $input);
              }
            }
            else {
              newValue = newValue.join(settings.delimiter);
              module.debug('Setting hidden input to delimited value', newValue, $input);
            }

            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onAdd);
            }
            else {
              settings.onAdd.call(element, addedValue, addedText, $selectedItem);
            }
            module.set.value(newValue, addedValue, addedText, $selectedItem);
            module.check.maxSelections();
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          activeLabel: function() {
            $module.find(selector.label).removeClass(className.active);
          },
          loading: function() {
            $module.removeClass(className.loading);
          },
          initialLoad: function() {
            initialLoad = false;
          },
          upward: function($menu) {
            var $element = $menu || $module;
            $element.removeClass(className.upward);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          activeItem: function() {
            $item.removeClass(className.active);
          },
          filteredItem: function() {
            if( module.has.maxSelections() ) {
              return;
            }
            if(settings.useLabels) {
              $item.not('.' + className.active).removeClass(className.filtered);
            }
            else {
              $item.removeClass(className.filtered);
            }
          },
          message: function() {
            $menu.children(selector.message).remove();
          },
          searchTerm: function() {
            module.verbose('Cleared search term');
            $search.val('');
            module.set.filtered();
          },
          selected: function(value, $selectedItem) {
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;

            if(!$selectedItem) {
              return false;
            }

            $selectedItem
              .each(function() {
                var
                  $selected     = $(this),
                  selectedText  = module.get.choiceText($selected),
                  selectedValue = module.get.choiceValue($selected, selectedText)
                ;
                if(module.is.multiple()) {
                  if(settings.useLabels) {
                    module.remove.value(selectedValue, selectedText, $selected);
                    module.remove.label(selectedValue);
                  }
                  else {
                    module.remove.value(selectedValue, selectedText, $selected);
                    module.set.text(module.add.variables(message.count));
                  }
                }
                else {
                  module.remove.value(selectedValue, selectedText, $selected);
                }
                $selected
                  .removeClass(className.filtered)
                  .removeClass(className.active)
                ;
                if(settings.useLabels) {
                  $selected.removeClass(className.selected);
                }
              })
            ;
          },
          selectedItem: function() {
            $item.removeClass(className.selected);
          },
          value: function(removedValue, removedText, $removedItem) {
            var
              values   = $input.val(),
              newValue
            ;
            if( $input.is('select') ) {
              module.verbose('Input is <select> removing selected option', removedValue);
              newValue = module.remove.arrayValue(removedValue, values);
            }
            else {
              module.verbose('Removing from delimited values', removedValue);
              values = values.split(settings.delimiter);
              newValue = module.remove.arrayValue(removedValue, values);
              newValue = newValue.join(settings.delimiter);
            }
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onRemove);
            }
            else {
              settings.onRemove.call(element, removedValue, removedText, $removedItem);
            }
            module.set.value(newValue, removedText, $removedItem);
            module.check.maxSelections();
          },
          arrayValue: function(removedValue, values) {
            values = $.grep(values, function(value){
              return (removedValue != value);
            });
            module.verbose('Removed value from delimited string', removedValue, values);
            return values;
          },
          label: function(value) {
            var
              $labels       = $module.find(selector.label),
              $removedLabel = $labels.filter('[data-value="' + value +'"]'),
              labelCount    = $labels.length,
              isLastLabel   = ($labels.index($removedLabel) + 1 == labelCount),
              shouldAnimate = ( (!module.is.searchSelection() || !module.is.focusedOnSearch()) && isLastLabel)
            ;
            if(shouldAnimate) {
              module.verbose('Animating and removing label', $removedLabel);
              $removedLabel
                .transition(settings.label.transition, settings.label.duration, function() {
                  $removedLabel.remove();
                })
              ;
            }
            else {
              module.verbose('Removing label', $removedLabel);
              $removedLabel.remove();
            }
          },
          activeLabels: function($activeLabels) {
            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);
            module.verbose('Removing active label selections', $activeLabels);
            module.remove.labels($activeLabels);
          },
          labels: function($labels) {
            $labels = $labels || $module.find(selector.label);
            module.verbose('Removing labels', $labels);
            $labels
              .each(function(){
                var
                  value       = $(this).data('value'),
                  isUserValue = module.is.userValue(value)
                ;
                if(isUserValue) {
                  module.remove.value(value);
                  module.remove.label(value);
                }
                else {
                  // selected will also remove label
                  module.remove.selected(value);
                }
              })
            ;
          },
          tabbable: function() {
            if( module.has.search() ) {
              module.debug('Searchable dropdown initialized');
              $search
                .attr('tabindex', '-1')
              ;
              $menu
                .attr('tabindex', '-1')
              ;
            }
            else {
              module.debug('Simple selection dropdown initialized');
              $module
                .attr('tabindex', '-1')
              ;
              $menu
                .attr('tabindex', '-1')
              ;
            }
          }
        },

        has: {
          search: function() {
            return ($search.length > 0);
          },
          input: function() {
            return ($input.length > 0);
          },
          menu: function() {
            return ($menu.length > 0);
          },
          message: function() {
            return ($menu.children(selector.message).length !== 0);
          },
          label: function(value) {
            var
              $labels = $module.find(selector.label)
            ;
            return ($labels.filter('[data-value="' + value +'"]').length > 0);
          },
          maxSelections: function() {
            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);
          },
          allResultsFiltered: function() {
            return ($item.filter(selector.unselectable).length === $item.length);
          },
          value: function(value) {
            var
              values   = module.get.values(),
              hasValue = $.isArray(values)
               ? values && ($.inArray(value, values) !== -1)
               : (values == value)
            ;
            return (hasValue)
              ? true
              : false
            ;
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          alreadySetup: function() {
            return ($module.is('select') && $module.parent(selector.dropdown).length > 0  && $module.prev().length === 0);
          },
          animating: function($subMenu) {
            return ($subMenu)
              ? $subMenu.transition && $subMenu.transition('is animating')
              : $menu.transition    && $menu.transition('is animating')
            ;
          },
          focused: function() {
            return (document.activeElement === $module[0]);
          },
          focusedOnSearch: function() {
            return (document.activeElement === $search[0]);
          },
          allFiltered: function() {
            return( (module.is.multiple() || module.has.search()) && !module.has.message() && module.has.allResultsFiltered() );
          },
          hidden: function($subMenu) {
            return !module.is.visible($subMenu);
          },
          initialLoad: function() {
            return initialLoad;
          },
          onScreen: function($subMenu) {
            var
              $currentMenu   = $subMenu || $menu,
              canOpenDownward = true,
              onScreen = {},
              calculations
            ;
            $currentMenu.addClass(className.loading);
            calculations = {
              context: {
                scrollTop : $context.scrollTop(),
                height    : $context.outerHeight()
              },
              menu : {
                offset: $currentMenu.offset(),
                height: $currentMenu.outerHeight()
              }
            };
            onScreen = {
              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.menu.height,
              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top + calculations.menu.height
            };
            if(onScreen.below) {
              module.verbose('Dropdown can fit in context downward', onScreen);
              canOpenDownward = true;
            }
            else if(!onScreen.below && !onScreen.above) {
              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);
              canOpenDownward = true;
            }
            else {
              module.verbose('Dropdown cannot fit below, opening upward', onScreen);
              canOpenDownward = false;
            }
            $currentMenu.removeClass(className.loading);
            return canOpenDownward;
          },
          inObject: function(needle, object) {
            var
              found = false
            ;
            $.each(object, function(index, property) {
              if(property == needle) {
                found = true;
                return true;
              }
            });
            return found;
          },
          multiple: function() {
            return $module.hasClass(className.multiple);
          },
          single: function() {
            return !module.is.multiple();
          },
          selectMutation: function(mutations) {
            var
              selectChanged = false
            ;
            $.each(mutations, function(index, mutation) {
              if(mutation.target && $(mutation.target).is('select')) {
                selectChanged = true;
                return true;
              }
            });
            return selectChanged;
          },
          search: function() {
            return $module.hasClass(className.search);
          },
          searchSelection: function() {
            return ( module.has.search() && $search.closest(selector.menu).length === 0 );
          },
          selection: function() {
            return $module.hasClass(className.selection);
          },
          userValue: function(value) {
            return ($.inArray(value, module.get.userValues()) !== -1);
          },
          upward: function($menu) {
            var $element = $menu || $module;
            return $element.hasClass(className.upward);
          },
          visible: function($subMenu) {
            return ($subMenu)
              ? $subMenu.hasClass(className.visible)
              : $menu.hasClass(className.visible)
            ;
          }
        },

        can: {
          click: function() {
            return (hasTouch || settings.on == 'click');
          },
          show: function() {
            return !$module.hasClass(className.disabled) && $item.length > 0;
          },
          useAPI: function() {
            return $.fn.api !== undefined;
          }
        },

        animate: {
          show: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              start = ($subMenu)
                ? function() {}
                : function() {
                  module.hideSubMenus();
                  module.hideOthers();
                  module.set.active();
                },
              transition
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            module.verbose('Doing menu show animation', $currentMenu);
            module.set.direction($subMenu);
            transition = module.get.transition($subMenu);
            if( module.is.selection() ) {
              module.set.scrollPosition(module.get.selectedItem(), true);
            }
            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {
              if(transition == 'none') {
                start();
                $currentMenu.transition('show');
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' in',
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    duration   : settings.duration,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                    }
                  })
                ;
              }
              else {
                module.error(error.noTransition, transition);
              }
            }
          },
          hide: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              duration = ($subMenu)
                ? (settings.duration * 0.9)
                : settings.duration,
              start = ($subMenu)
                ? function() {}
                : function() {
                  if( module.can.click() ) {
                    module.unbind.intent();
                  }
                  module.remove.active();
                },
              transition = module.get.transition($subMenu)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){}
            ;
            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {
              module.verbose('Doing menu hide animation', $currentMenu);

              if(transition == 'none') {
                start();
                $currentMenu.transition('hide');
                callback.call(element);
              }
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' out',
                    duration   : settings.duration,
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      if(settings.direction == 'auto') {
                        module.remove.upward($subMenu);
                      }
                      callback.call(element);
                    }
                  })
                ;
              }
              else {
                module.error(error.transition);
              }
            }
          }
        },

        hideAndClear: function() {
          if(module.has.search()) {
            module.remove.searchTerm();
            module.hide(function() {
              module.remove.filteredItem();
            });
          }
          else {
            module.hide();
          }
        },

        delay: {
          show: function() {
            module.verbose('Delaying show event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.show, settings.delay.show);
          },
          hide: function() {
            module.verbose('Delaying hide event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.hide, settings.delay.hide);
          }
        },

        escape: {
          regExp: function(text) {
            text =  String(text);
            return text.replace(regExp.escape, '\\$&');
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : $allModules
  ;
};

$.fn.dropdown.settings = {

  debug                  : false,
  verbose                : false,
  performance            : true,

  on                     : 'click',    // what event should show menu action on item selection
  action                 : 'activate', // action on item selection (nothing, activate, select, combo, hide, function(){})


  apiSettings            : false,
  saveRemoteData         : true,      // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh
  throttle               : 200,       // How long to wait after last user input to search remotely

  context                : window,      // Context to use when determining if on screen
  direction              : 'auto',     // Whether dropdown should always open in one direction
  keepOnScreen           : true,       // Whether dropdown should check whether it is on screen before showing

  match                  : 'both',     // what to match against with search selection (both, text, or label)
  fullTextSearch         : false,      // search anywhere in value

  placeholder            : 'auto',     // whether to convert blank <select> values to placeholder text
  preserveHTML           : true,       // preserve html when selecting value
  sortSelect             : false,      // sort selection on init

  forceSelection         : true,       // force a choice on blur with search selection
  allowAdditions         : false,      // whether multiple select should allow user added values

  maxSelections          : false,      // When set to a number limits the number of selections to this count
  useLabels              : true,       // whether multiple select should filter currently active selections from choices
  delimiter              : ',',        // when multiselect uses normal <input> the values will be delmited with this character

  showOnFocus            : true,       // show menu on focus
  allowTab               : true,       // add tabindex to element
  allowCategorySelection : false,      // allow elements with sub-menus to be selected

  fireOnInit             : false,      // Whether callbacks should fire when initializing dropdown values

  transition             : 'auto',     // auto transition will slide down or up based on direction
  duration               : 200,        // duration of transition

  glyphWidth             : 1.0714,     // widest glyph width in em (W is 1.0714 em) used to calculate multiselect input width

  // label settings on multi-select
  label: {
    transition : 'scale',
    duration   : 200,
    variation  : false
  },

  // delay before event
  delay : {
    hide   : 300,
    show   : 200,
    search : 20,
    touch  : 50
  },

  /* Callbacks */
  onChange      : function(value, text, $selected){},
  onAdd         : function(value, text, $selected){},
  onRemove      : function(value, text, $selected){},

  onLabelSelect : function($selectedLabels){},
  onLabelCreate : function(value, text) { return $(this); },
  onNoResults   : function(searchTerm) { return true; },
  onShow        : function(){},
  onHide        : function(){},

  /* Component */
  name           : 'Dropdown',
  namespace      : 'dropdown',

  message: {
    addResult     : 'Add <b>{term}</b>',
    count         : '{count} selected',
    maxSelections : 'Max {maxCount} selections',
    noResults     : 'No results found.',
    serverError   : 'There was an error contacting the server'
  },

  error : {
    action       : 'You called a dropdown action that was not defined',
    alreadySetup : 'Once a select has been initialized behaviors must be called on the created ui dropdown',
    labels       : 'Allowing user additions currently requires the use of labels.',
    method       : 'The method you called is not defined.',
    noAPI        : 'The API module is required to load resources remotely',
    noStorage    : 'Saving remote data requires session storage',
    noTransition : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'
  },

  regExp : {
    escape   : /[-[\]{}()*+?.,\\^$|#\s]/g,
  },

  metadata : {
    defaultText     : 'defaultText',
    defaultValue    : 'defaultValue',
    placeholderText : 'placeholder',
    text            : 'text',
    value           : 'value'
  },

  selector : {
    addition     : '.addition',
    dropdown     : '.ui.dropdown',
    icon         : '> .dropdown.icon',
    input        : '> input[type="hidden"], > select',
    item         : '.item',
    label        : '> .label',
    remove       : '> .label > .delete.icon',
    siblingLabel : '.label',
    menu         : '.menu',
    message      : '.message',
    menuIcon     : '.dropdown.icon',
    search       : 'input.search, .menu > .search > input',
    text         : '> .text:not(.icon)',
    unselectable : '.disabled, .filtered'
  },

  className : {
    active      : 'active',
    addition    : 'addition',
    animating   : 'animating',
    disabled    : 'disabled',
    dropdown    : 'ui dropdown',
    filtered    : 'filtered',
    hidden      : 'hidden transition',
    item        : 'item',
    label       : 'ui label',
    loading     : 'loading',
    menu        : 'menu',
    message     : 'message',
    multiple    : 'multiple',
    placeholder : 'default',
    search      : 'search',
    selected    : 'selected',
    selection   : 'selection',
    upward      : 'upward',
    visible     : 'visible'
  }

};

/* Templates */
$.fn.dropdown.settings.templates = {

  // generates dropdown from select values
  dropdown: function(select) {
    var
      placeholder = select.placeholder || false,
      values      = select.values || {},
      html        = ''
    ;
    html +=  '<i class="dropdown icon"></i>';
    if(select.placeholder) {
      html += '<div class="default text">' + placeholder + '</div>';
    }
    else {
      html += '<div class="text"></div>';
    }
    html += '<div class="menu">';
    $.each(select.values, function(index, option) {
      html += (option.disabled)
        ? '<div class="disabled item" data-value="' + option.value + '">' + option.name + '</div>'
        : '<div class="item" data-value="' + option.value + '">' + option.name + '</div>'
      ;
    });
    html += '</div>';
    return html;
  },

  // generates just menu from select
  menu: function(response) {
    var
      values = response.values || {},
      html   = ''
    ;
    $.each(response.values, function(index, option) {
      html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
    });
    return html;
  },

  // generates label for multiselect
  label: function(value, text) {
    return text + '<i class="delete icon"></i>';
  },


  // generates messages like "No results"
  message: function(message) {
    return message;
  },

  // generates user addition to selection menu
  addition: function(choice) {
    return choice;
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.embed = function(parameters) {

  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.embed.settings, parameters)
          : $.extend({}, $.fn.embed.settings),

        selector        = settings.selector,
        className       = settings.className,
        sources         = settings.sources,
        error           = settings.error,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),
        $module         = $(this),
        $placeholder    = $module.find(selector.placeholder),
        $icon           = $module.find(selector.icon),
        $embed          = $module.find(selector.embed),

        element         = this,
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing embed');
          module.determine.autoplay();
          module.create();
          module.bind.events();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance of embed');
          module.reset();
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $icon        = $module.find(selector.icon);
          $embed       = $module.find(selector.embed);
        },

        bind: {
          events: function() {
            if( module.has.placeholder() ) {
              module.debug('Adding placeholder events');
              console.log($module, selector.placeholder);
              $module
                .on('click' + eventNamespace, selector.placeholder, module.createAndShow)
                .on('click' + eventNamespace, selector.icon, module.createAndShow)
              ;
            }
          }
        },

        create: function() {
          var
            placeholder = module.get.placeholder()
          ;
          if(placeholder) {
            module.createPlaceholder();
          }
          else {
            module.createAndShow();
          }
        },

        createPlaceholder: function(placeholder) {
          var
            icon  = module.get.icon(),
            url   = module.get.url(),
            embed = module.generate.embed(url)
          ;
          placeholder = placeholder || module.get.placeholder();
          $module.html( templates.placeholder(placeholder, icon) );
          module.debug('Creating placeholder for embed', placeholder, icon);
        },

        createEmbed: function(url) {
          module.refresh();
          url = url || module.get.url();
          console.log(url);
          $embed = $('<div/>')
            .addClass(className.embed)
            .html( module.generate.embed(url) )
            .appendTo($module)
          ;
          settings.onCreate.call(element, url);
          module.debug('Creating embed object', $embed);
        },

        createAndShow: function() {
          console.log('cands');
          module.createEmbed();
          module.show();
        },

        // sets new embed
        change: function(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module
            .data(metadata.source, source)
            .data(metadata.id, id)
            .data(metadata.url, url)
          ;
          module.create();
        },

        // clears embed
        reset: function() {
          module.debug('Clearing embed and showing placeholder');
          module.remove.active();
          module.remove.embed();
          module.showPlaceholder();
          settings.onReset.call(element);
        },

        // shows current embed
        show: function() {
          module.debug('Showing embed');
          module.set.active();
          settings.onDisplay.call(element);
        },

        hide: function() {
          module.debug('Hiding embed');
          module.showPlaceholder();
        },

        showPlaceholder: function() {
          module.debug('Showing placeholder image');
          module.remove.active();
          settings.onPlaceholderDisplay.call(element);
        },

        get: {
          id: function() {
            return settings.id || $module.data(metadata.id);
          },
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
          },
          icon: function() {
            return (settings.icon)
              ? settings.icon
              : ($module.data(metadata.icon) !== undefined)
                ? $module.data(metadata.icon)
                : module.determine.icon()
            ;
          },
          source: function(url) {
            return (settings.source)
              ? settings.source
              : ($module.data(metadata.source) !== undefined)
                ? $module.data(metadata.source)
                : module.determine.source()
            ;
          },
          type: function() {
            var source = module.get.source();
            return (sources[source] !== undefined)
              ? sources[source].type
              : false
            ;
          },
          url: function() {
            return (settings.url)
              ? settings.url
              : ($module.data(metadata.url) !== undefined)
                ? $module.data(metadata.url)
                : module.determine.url()
            ;
          }
        },

        determine: {
          autoplay: function() {
            if(module.should.autoplay()) {
              settings.autoplay = true;
            }
          },
          source: function(url) {
            var
              matchedSource = false
            ;
            url = url || module.get.url();
            if(url) {
              $.each(sources, function(name, source) {
                if(url.search(source.domain) !== -1) {
                  matchedSource = name;
                  return false;
                }
              });
            }
            return matchedSource;
          },
          icon: function() {
            var
              source = module.get.source()
            ;
            return (sources[source] !== undefined)
              ? sources[source].icon
              : false
            ;
          },
          url: function() {
            var
              id     = settings.id     || $module.data(metadata.id),
              source = settings.source || $module.data(metadata.source),
              url
            ;
            url = (sources[source] !== undefined)
              ? sources[source].url.replace('{id}', id)
              : false
            ;
            if(url) {
              $module.data(metadata.url, url);
            }
            return url;
          }
        },


        set: {
          active: function() {
            $module.addClass(className.active);
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          embed: function() {
            $embed.empty();
          }
        },

        encode: {
          parameters: function(parameters) {
            var
              urlString = [],
              index
            ;
            for (index in parameters) {
              urlString.push( encodeURIComponent(index) + '=' + encodeURIComponent( parameters[index] ) );
            }
            return urlString.join('&amp;');
          }
        },

        generate: {
          embed: function(url) {
            module.debug('Generating embed html');
            var
              source = module.get.source(),
              html,
              parameters
            ;
            url = module.get.url(url);
            if(url) {
              parameters = module.generate.parameters(source);
              html       = templates.iframe(url, parameters);
            }
            else {
              module.error(error.noURL, $module);
            }
            return html;
          },
          parameters: function(source, extraParameters) {
            var
              parameters = (sources[source] && sources[source].parameters !== undefined)
                ? sources[source].parameters(settings)
                : {}
            ;
            extraParameters = extraParameters || settings.parameters;
            if(extraParameters) {
              parameters = $.extend({}, parameters, extraParameters);
            }
            parameters = settings.onEmbed(parameters);
            return module.encode.parameters(parameters);
          }
        },

        has: {
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
          }
        },

        should: {
          autoplay: function() {
            return (settings.autoplay === 'auto')
              ? (settings.placeholder || $module.data(metadata.placeholder) !== undefined)
              : settings.autoplay
            ;
          }
        },

        is: {
          video: function() {
            return module.get.type() == 'video';
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.embed.settings = {

  name        : 'Embed',
  namespace   : 'embed',

  debug       : false,
  verbose     : false,
  performance : true,

  icon     : false,
  source   : false,
  url      : false,
  id       : false,

  // standard video settings
  autoplay  : 'auto',
  color     : '#444444',
  hd        : true,
  brandedUI : false,

  // additional parameters to include with the embed
  parameters: false,

  onDisplay            : function() {},
  onPlaceholderDisplay : function() {},
  onReset              : function() {},
  onCreate             : function(url) {},
  onEmbed              : function(parameters) {
    return parameters;
  },

  metadata    : {
    id          : 'id',
    icon        : 'icon',
    placeholder : 'placeholder',
    source      : 'source',
    url         : 'url'
  },

  error : {
    noURL  : 'No URL specified',
    method : 'The method you called is not defined'
  },

  className : {
    active : 'active',
    embed  : 'embed'
  },

  selector : {
    embed       : '.embed',
    placeholder : '.placeholder',
    icon        : '.icon'
  },

  sources: {
    youtube: {
      name   : 'youtube',
      type   : 'video',
      icon   : 'video play',
      domain : 'youtube.com',
      url    : '//www.youtube.com/embed/{id}',
      parameters: function(settings) {
        return {
          autohide       : !settings.brandedUI,
          autoplay       : settings.autoplay,
          color          : settings.colors || undefined,
          hq             : settings.hd,
          jsapi          : settings.api,
          modestbranding : !settings.brandedUI
        };
      }
    },
    vimeo: {
      name   : 'vimeo',
      type   : 'video',
      icon   : 'video play',
      domain : 'vimeo.com',
      url    : '//player.vimeo.com/video/{id}',
      parameters: function(settings) {
        return {
          api      : settings.api,
          autoplay : settings.autoplay,
          byline   : settings.brandedUI,
          color    : settings.colors || undefined,
          portrait : settings.brandedUI,
          title    : settings.brandedUI
        };
      }
    }
  },

  templates: {
    iframe : function(url, parameters) {
      return ''
        + '<iframe src="' + url + '?=' + parameters + '"'
        + ' width="100%" height="100%"'
        + ' frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'
      ;
    },
    placeholder : function(image, icon) {
      var
        html = ''
      ;
      if(icon) {
        html += '<i class="' + icon + ' icon"></i>';
      }
      if(image) {
        html += '<img class="placeholder" src="' + image + '">';
      }
      return html;
    }
  },

  // NOT YET IMPLEMENTED
  api     : true,
  onPause : function() {},
  onPlay  : function() {},
  onStop  : function() {}

};



})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.modal = function(parameters) {
  var
    $allModules    = $(this),
    $window        = $(window),
    $document      = $(document),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings    = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.modal.settings, parameters)
          : $.extend({}, $.fn.modal.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $close          = $module.find(selector.close),

        $allModals,
        $otherModals,
        $focusedElement,
        $dimmable,
        $dimmer,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        observer,
        module
      ;
      module  = {

        initialize: function() {
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();
          module.refreshModals();

          module.bind.events();
          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        create: {
          dimmer: function() {
            var
              defaultSettings = {
                debug      : settings.debug,
                dimmerName : 'modals',
                duration   : {
                  show     : settings.duration,
                  hide     : settings.duration
                }
              },
              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)
            ;
            if(settings.inverted) {
              dimmerSettings.variation = (dimmerSettings.variation !== undefined)
                ? dimmerSettings.variation + ' inverted'
                : 'inverted'
              ;
            }
            if($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
            }
            module.debug('Creating dimmer with settings', dimmerSettings);
            $dimmable = $context.dimmer(dimmerSettings);
            if(settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
            }
            else {
              module.set.undetached();
            }
            if(settings.blurring) {
              $dimmable.addClass(className.blurring);
            }
            $dimmer = $dimmable.dimmer('get dimmer');
          },
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous modal');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
          $window.off(elementNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        refresh: function() {
          module.remove.scrolling();
          module.cacheSizes();
          module.set.screenHeight();
          module.set.type();
          module.set.position();
        },

        refreshModals: function() {
          $otherModals = $module.siblings(selector.modal);
          $allModals   = $otherModals.add($module);
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle
              .off(eventNamespace)
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        bind: {
          events: function() {
            module.verbose('Attaching events');
            $module
              .on('click' + eventNamespace, selector.close, module.event.close)
              .on('click' + eventNamespace, selector.approve, module.event.approve)
              .on('click' + eventNamespace, selector.deny, module.event.deny)
            ;
            $window
              .on('resize' + elementNamespace, module.event.resize)
            ;
          }
        },

        get: {
          id: function() {
            return (Math.random().toString(16) + '000000000').substr(2,8);
          }
        },

        event: {
          approve: function() {
            if(settings.onApprove.call(element, $(this)) === false) {
              module.verbose('Approve callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          deny: function() {
            if(settings.onDeny.call(element, $(this)) === false) {
              module.verbose('Deny callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          close: function() {
            module.hide();
          },
          click: function(event) {
            var
              $target   = $(event.target),
              isInModal = ($target.closest(selector.modal).length > 0),
              isInDOM   = $.contains(document.documentElement, event.target)
            ;
            if(!isInModal && isInDOM) {
              module.debug('Dimmer clicked, hiding all modals');
              if( module.is.active() ) {
                module.remove.clickaway();
                if(settings.allowMultiple) {
                  module.hide();
                }
                else {
                  module.hideAll();
                }
              }
            }
          },
          debounce: function(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
          },
          keyboard: function(event) {
            var
              keyCode   = event.which,
              escapeKey = 27
            ;
            if(keyCode == escapeKey) {
              if(settings.closable) {
                module.debug('Escape key pressed hiding modal');
                module.hide();
              }
              else {
                module.debug('Escape key pressed, but closable is set to false');
              }
              event.preventDefault();
            }
          },
          resize: function() {
            if( $dimmable.dimmer('is active') ) {
              requestAnimationFrame(module.refresh);
            }
          }
        },

        toggle: function() {
          if( module.is.active() || module.is.animating() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.showModal(callback);
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.refreshModals();
          module.hideModal(callback);
        },

        showModal: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( module.is.animating() || !module.is.active() ) {

            module.showDimmer();
            module.cacheSizes();
            module.set.position();
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if( !settings.allowMultiple && module.others.active() ) {
              module.hideOthers(module.showModal);
            }
            else {
              settings.onShow.call(element);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module
                  .transition({
                    debug       : settings.debug,
                    animation   : settings.transition + ' in',
                    queue       : settings.queue,
                    duration    : settings.duration,
                    useFailSafe : true,
                    onComplete : function() {
                      settings.onVisible.apply(element);
                      module.add.keyboardShortcuts();
                      module.save.focus();
                      module.set.active();
                      module.set.autofocus();
                      callback();
                    }
                  })
                ;
              }
              else {
                module.error(error.noTransition);
              }
            }
          }
          else {
            module.debug('Modal is already visible');
          }
        },

        hideModal: function(callback, keepDimmed) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.debug('Hiding modal');
          settings.onHide.call(element);

          if( module.is.animating() || module.is.active() ) {
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module
                .transition({
                  debug       : settings.debug,
                  animation   : settings.transition + ' out',
                  queue       : settings.queue,
                  duration    : settings.duration,
                  useFailSafe : true,
                  onStart     : function() {
                    if(!module.others.active() && !keepDimmed) {
                      module.hideDimmer();
                    }
                    module.remove.keyboardShortcuts();
                  },
                  onComplete : function() {
                    settings.onHidden.call(element);
                    module.restore.focus();
                    callback();
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          }
        },

        showDimmer: function() {
          if($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active') ) {
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
          }
          else {
            module.debug('Dimmer already visible');
          }
        },

        hideDimmer: function() {
          if( $dimmable.dimmer('is animating') || ($dimmable.dimmer('is active')) ) {
            $dimmable.dimmer('hide', function() {
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.remove.clickaway();
                module.remove.screenHeight();
              }
            });
          }
          else {
            module.debug('Dimmer is not visible cannot hide');
            return;
          }
        },

        hideAll: function(callback) {
          var
            $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding all visible modals');
            module.hideDimmer();
            $visibleModals
              .modal('hide modal', callback)
            ;
          }
        },

        hideOthers: function(callback) {
          var
            $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals
              .modal('hide modal', callback, true)
            ;
          }
        },

        others: {
          active: function() {
            return ($otherModals.filter('.' + className.active).length > 0);
          },
          animating: function() {
            return ($otherModals.filter('.' + className.animating).length > 0);
          }
        },


        add: {
          keyboardShortcuts: function() {
            module.verbose('Adding keyboard shortcuts');
            $document
              .on('keyup' + eventNamespace, module.event.keyboard)
            ;
          }
        },

        save: {
          focus: function() {
            $focusedElement = $(document.activeElement).blur();
          }
        },

        restore: {
          focus: function() {
            if($focusedElement && $focusedElement.length > 0) {
              $focusedElement.focus();
            }
          }
        },

        remove: {
          active: function() {
            $module.removeClass(className.active);
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .off('click' + elementNamespace)
              ;
            }
          },
          screenHeight: function() {
            if(module.cache.height > module.cache.pageHeight) {
              module.debug('Removing page height');
              $body
                .css('height', '')
              ;
            }
          },
          keyboardShortcuts: function() {
            module.verbose('Removing keyboard shortcuts');
            $document
              .off('keyup' + eventNamespace)
            ;
          },
          scrolling: function() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
          }
        },

        cacheSizes: function() {
          var
            modalHeight = $module.outerHeight()
          ;
          if(module.cache === undefined || modalHeight !== 0) {
            module.cache = {
              pageHeight    : $(document).outerHeight(),
              height        : modalHeight + settings.offset,
              contextHeight : (settings.context == 'body')
                ? $(window).height()
                : $dimmable.height()
            };
          }
          module.debug('Caching modal and container sizes', module.cache);
        },

        can: {
          fit: function() {
            return ( ( module.cache.height + (settings.padding * 2) ) < module.cache.contextHeight);
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return $module.transition('is supported')
              ? $module.transition('is animating')
              : $module.is(':visible')
            ;
          },
          scrolling: function() {
            return $dimmable.hasClass(className.scrolling);
          },
          modernBrowser: function() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || "ActiveXObject" in window);
          }
        },

        set: {
          autofocus: function() {
            if(settings.autofocus) {
              var
                $inputs    = $module.filter(':input').filter(':visible'),
                $autofocus = $inputs.filter('[autofocus]'),
                $input     = ($autofocus.length > 0)
                  ? $autofocus.first()
                  : $inputs.first()
              ;
              if($input.length > 0) {
                $input.focus();
              }
            }
          },
          clickaway: function() {
            if(settings.closable) {
              $dimmer
                .on('click' + elementNamespace, module.event.click)
              ;
            }
          },
          screenHeight: function() {
            if( module.can.fit() ) {
              $body.css('height', '');
            }
            else {
              module.debug('Modal is taller than page content, resizing page height');
              $body
                .css('height', module.cache.height + (settings.padding * 2) )
              ;
            }
          },
          active: function() {
            $module.addClass(className.active);
          },
          scrolling: function() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
          },
          type: function() {
            if(module.can.fit()) {
              module.verbose('Modal fits on screen');
              if(!module.others.active() && !module.others.animating()) {
                module.remove.scrolling();
              }
            }
            else {
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
            }
          },
          position: function() {
            module.verbose('Centering modal on page', module.cache);
            if(module.can.fit()) {
              $module
                .css({
                  top: '',
                  marginTop: -(module.cache.height / 2)
                })
              ;
            }
            else {
              $module
                .css({
                  marginTop : '',
                  top       : $document.scrollTop()
                })
              ;
            }
          },
          undetached: function() {
            $dimmable.addClass(className.undetached);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.modal.settings = {

  name           : 'Modal',
  namespace      : 'modal',

  debug          : false,
  verbose        : false,
  performance    : true,

  observeChanges : false,

  allowMultiple  : false,
  detachable     : true,
  closable       : true,
  autofocus      : true,

  inverted       : false,
  blurring       : false,

  dimmerSettings : {
    closable : false,
    useCSS   : true
  },


  context    : 'body',

  queue      : false,
  duration   : 500,
  offset     : 0,
  transition : 'scale',

  // padding with edge of page
  padding    : 50,

  // called before show animation
  onShow     : function(){},

  // called after show animation
  onVisible  : function(){},

  // called before hide animation
  onHide     : function(){},

  // called after hide animation
  onHidden   : function(){},

  // called after approve selector match
  onApprove  : function(){ return true; },

  // called after deny selector match
  onDeny     : function(){ return true; },

  selector    : {
    close    : '.close',
    approve  : '.actions .positive, .actions .approve, .actions .ok',
    deny     : '.actions .negative, .actions .deny, .actions .cancel',
    modal    : '.ui.modal'
  },
  error : {
    dimmer    : 'UI Dimmer, a required component is not included in this page',
    method    : 'The method you called is not defined.',
    notFound  : 'The element you specified could not be found'
  },
  className : {
    active     : 'active',
    animating  : 'animating',
    blurring   : 'blurring',
    scrolling  : 'scrolling',
    undetached : 'undetached'
  }
};


})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.nag = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.nag.settings, parameters)
          : $.extend({}, $.fn.nag.settings),

        className       = settings.className,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        $close          = $module.find(selector.close),
        $context        = (settings.context)
          ? $(settings.context)
          : $('body'),

        element         = this,
        instance        = $module.data(moduleNamespace),

        moduleOffset,
        moduleHeight,

        contextWidth,
        contextHeight,
        contextOffset,

        yOffset,
        yPosition,

        timer,
        module,

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); }
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing element');

          $module
            .on('click' + eventNamespace, selector.close, module.dismiss)
            .data(moduleNamespace, module)
          ;

          if(settings.detachable && $module.parent()[0] !== $context[0]) {
            $module
              .detach()
              .prependTo($context)
            ;
          }

          if(settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
          }
          module.show();
        },

        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        show: function() {
          if( module.should.show() && !$module.is(':visible') ) {
            module.debug('Showing nag', settings.animation.show);
            if(settings.animation.show == 'fade') {
              $module
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            else {
              $module
                .slideDown(settings.duration, settings.easing)
              ;
            }
          }
        },

        hide: function() {
          module.debug('Showing nag', settings.animation.hide);
          if(settings.animation.show == 'fade') {
            $module
              .fadeIn(settings.duration, settings.easing)
            ;
          }
          else {
            $module
              .slideUp(settings.duration, settings.easing)
            ;
          }
        },

        onHide: function() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
          }
        },

        dismiss: function(event) {
          if(settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
          }
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
        },

        should: {
          show: function() {
            if(settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
            }
            if( module.storage.get(settings.key) != settings.value.toString() ) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
            }
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
          }
        },

        get: {
          storageOptions: function() {
            var
              options = {}
            ;
            if(settings.expires) {
              options.expires = settings.expires;
            }
            if(settings.domain) {
              options.domain = settings.domain;
            }
            if(settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        clear: function() {
          module.storage.remove(settings.key);
        },

        storage: {
          set: function(key, value) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
            }
            else if($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
            }
            else {
              module.error(error.noCookieStorage);
              return;
            }
          },
          get: function(key, value) {
            var
              storedValue
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
            }
            // get by cookie
            else if($.cookie !== undefined) {
              storedValue = $.cookie(key);
            }
            else {
              module.error(error.noCookieStorage);
            }
            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
            }
            return storedValue;
          },
          remove: function(key) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'local' && window.store !== undefined) {
              window.localStorage.removeItem(key);
            }
            // store by cookie
            else if($.cookie !== undefined) {
              $.removeCookie(key, options);
            }
            else {
              module.error(error.noStorage);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.nag.settings = {

  name        : 'Nag',

  debug       : false,
  verbose     : false,
  performance : true,

  namespace   : 'Nag',

  // allows cookie to be overriden
  persist     : false,

  // set to zero to require manually dismissal, otherwise hides on its own
  displayTime : 0,

  animation   : {
    show : 'slide',
    hide : 'slide'
  },

  context       : false,
  detachable    : false,

  expires       : 30,
  domain        : false,
  path          : '/',

  // type of storage to use
  storageMethod : 'cookie',

  // value to store in dismissed localstorage/cookie
  key           : 'nag',
  value         : 'dismiss',

  error: {
    noCookieStorage : '$.cookie is not included. A storage solution is required.',
    noStorage       : 'Neither $.cookie or store is defined. A storage solution is required for storing state',
    method          : 'The method you called is not defined.'
  },

  className     : {
    bottom : 'bottom',
    fixed  : 'fixed'
  },

  selector      : {
    close : '.close.icon'
  },

  speed         : 500,
  easing        : 'easeOutQuad',

  onHide: function() {}

};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.popup = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),
    $window        = $(window),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.popup.settings, parameters)
          : $.extend({}, $.fn.popup.settings),

        selector           = settings.selector,
        className          = settings.className,
        error              = settings.error,
        metadata           = settings.metadata,
        namespace          = settings.namespace,

        eventNamespace     = '.' + settings.namespace,
        moduleNamespace    = 'module-' + namespace,

        $module            = $(this),
        $context           = $(settings.context),
        $target            = (settings.target)
          ? $(settings.target)
          : $module,

        $popup,
        $offsetParent,

        searchDepth        = 0,
        triedPositions     = false,
        openedWithTouch    = false,

        element            = this,
        instance           = $module.data(moduleNamespace),

        elementNamespace,
        id,
        module
      ;

      module = {

        // binds events
        initialize: function() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if( !module.exists() && settings.preserve) {
            module.create();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        refresh: function() {
          if(settings.popup) {
            $popup = $(settings.popup).eq(0);
          }
          else {
            if(settings.inline) {
              $popup = $target.next(selector.popup).eq(0);
              settings.popup = $popup;
            }
          }
          if(settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if(settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');
              $popup
                .detach()
                .appendTo($offsetParent)
              ;
            }
          }
          else {
            $offsetParent = (settings.inline)
              ? module.get.offsetParent($target)
              : module.has.popup()
                ? module.get.offsetParent($popup)
                : $body
            ;
          }
          if( $offsetParent.is('html') ) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
          }
        },

        reposition: function() {
          module.refresh();
          module.set.position();
        },

        destroy: function() {
          module.debug('Destroying previous module');
          // remove element only if was created dynamically
          if($popup && !settings.preserve) {
            module.removePopup();
          }
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          $window.off(elementNamespace);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        event: {
          start:  function(event) {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.show
                : settings.delay
            ;
            clearTimeout(module.hideTimer);
            module.showTimer = setTimeout(module.show, delay);
          },
          end:  function() {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.hide
                : settings.delay
            ;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(module.hide, delay);
          },
          touchstart: function(event) {
            openedWithTouch = true;
            module.event.start();
          },
          resize: function() {
            if( module.is.visible() ) {
              module.set.position();
            }
          },
          hideGracefully: function(event) {
            // don't close on clicks inside popup
            if(event && $(event.target).closest(selector.popup).length === 0) {
              module.debug('Click occurred outside popup hiding popup');
              module.hide();
            }
            else {
              module.debug('Click was inside popup, keeping popup open');
            }
          }
        },

        // generates popup html from metadata
        create: function() {
          var
            html      = module.get.html(),
            variation = module.get.variation(),
            title     = module.get.title(),
            content   = module.get.content()
          ;

          if(html || content || title) {
            module.debug('Creating pop-up html');
            if(!html) {
              html = settings.templates.popup({
                title   : title,
                content : content
              });
            }
            $popup = $('<div/>')
              .addClass(className.popup)
              .addClass(variation)
              .data(metadata.activator, $module)
              .html(html)
            ;
            if(variation) {
              $popup
                .addClass(variation)
              ;
            }
            if(settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup
                .insertAfter($module)
              ;
            }
            else {
              module.verbose('Appending popup element to body', $popup);
              $popup
                .appendTo( $context )
              ;
            }
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
            settings.onCreate.call($popup, element);
          }
          else if($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popups  = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else if(settings.popup) {
            $(settings.popup).data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
            }
          }
          else {
            module.debug('No content specified skipping display', element);
          }
        },

        createID: function() {
          id = (Math.random().toString(16) + '000000000').substr(2,8);
          elementNamespace = '.' + id;
          module.verbose('Creating unique id for element', id);
        },

        // determines popup state
        toggle: function() {
          module.debug('Toggling pop-up');
          if( module.is.hidden() ) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
          }
          else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
          }
        },

        show: function(callback) {
          callback = callback || function(){};
          module.debug('Showing pop-up', settings.transition);

          if(module.is.hidden() && !( module.is.active() && module.is.dropdown()) ) {
            if( !module.exists() ) {
              module.create();
            }
            if(settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
            }
            else if(!settings.preserve && !settings.popup) {
              module.refresh();
            }
            if( $popup && module.set.position() ) {
              module.save.conditions();
              if(settings.exclusive) {
                module.hideAll();
              }
              module.animate.show(callback);
            }
          }
        },


        hide: function(callback) {
          callback = callback || function(){};
          if( module.is.visible() || module.is.animating() ) {
            if(settings.onHide.call($popup, element) === false) {
              module.debug('onHide callback returned false, cancelling popup animation');
              return;
            }
            module.remove.visible();
            module.unbind.close();
            module.restore.conditions();
            module.animate.hide(callback);
          }
        },

        hideAll: function() {
          $(selector.popup)
            .filter('.' + className.visible)
            .each(function() {
              $(this)
                .data(metadata.activator)
                .popup('hide')
              ;
            })
          ;
        },
        exists: function() {
          if(!$popup) {
            return false;
          }
          if(settings.inline || settings.popup) {
            return ( module.has.popup() );
          }
          else {
            return ( $popup.closest($context).length >= 1 )
              ? true
              : false
            ;
          }
        },

        removePopup: function() {
          module.debug('Removing popup', $popup);
          if( module.has.popup() && !settings.popup) {
            $popup.remove();
            $popup = undefined;
          }
          settings.onRemove.call($popup, element);
        },

        save: {
          conditions: function() {
            module.cache = {
              title: $module.attr('title')
            };
            if (module.cache.title) {
              $module.removeAttr('title');
            }
            module.verbose('Saving original attributes', module.cache.title);
          }
        },
        restore: {
          conditions: function() {
            if(module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
            }
            return true;
          }
        },
        animate: {
          show: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup
                .transition({
                  animation  : settings.transition + ' in',
                  queue      : false,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    module.bind.close();
                    callback.call($popup, element);
                    settings.onVisible.call($popup, element);
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          },
          hide: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){};
            module.debug('Hiding pop-up');
            if(settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
            }
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup
                .transition({
                  animation  : settings.transition + ' out',
                  queue      : false,
                  duration   : settings.duration,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  onComplete : function() {
                    module.reset();
                    callback.call($popup, element);
                    settings.onHidden.call($popup, element);
                  }
                })
              ;
            }
            else {
              module.error(error.noTransition);
            }
          }
        },

        get: {
          html: function() {
            $module.removeData(metadata.html);
            return $module.data(metadata.html) || settings.html;
          },
          title: function() {
            $module.removeData(metadata.title);
            return $module.data(metadata.title) || settings.title;
          },
          content: function() {
            $module.removeData(metadata.content);
            return $module.data(metadata.content) || $module.attr('title') || settings.content;
          },
          variation: function() {
            $module.removeData(metadata.variation);
            return $module.data(metadata.variation) || settings.variation;
          },
          calculations: function() {
            var
              targetElement  = $target[0],
              targetPosition = (settings.inline || settings.popup)
                ? $target.position()
                : $target.offset(),
              calculations = {},
              screen
            ;
            calculations = {
              // element which is launching popup
              target : {
                element : $target[0],
                width   : $target.outerWidth(),
                height  : $target.outerHeight(),
                top     : targetPosition.top,
                left    : targetPosition.left,
                margin  : {}
              },
              // popup itself
              popup : {
                width  : $popup.outerWidth(),
                height : $popup.outerHeight()
              },
              // offset container (or 3d context)
              parent : {
                width  : $offsetParent.outerWidth(),
                height : $offsetParent.outerHeight()
              },
              // screen boundaries
              screen : {
                scroll: {
                  top  : $window.scrollTop(),
                  left : $window.scrollLeft()
                },
                width  : $window.width(),
                height : $window.height()
              }
            };

            // add in margins if inline
            calculations.target.margin.top = (settings.inline)
              ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10)
              : 0
            ;
            calculations.target.margin.left = (settings.inline)
              ? module.is.rtl()
                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10)
                : parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-left') , 10)
              : 0
            ;
            // calculate screen boundaries
            screen = calculations.screen;
            calculations.boundary = {
              top    : screen.scroll.top,
              bottom : screen.scroll.top + screen.height,
              left   : screen.scroll.left,
              right  : screen.scroll.left + screen.width
            };
            return calculations;
          },
          id: function() {
            return id;
          },
          startEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseenter';
            }
            else if(settings.on == 'focus') {
              return 'focus';
            }
            return false;
          },
          scrollEvent: function() {
            return 'scroll';
          },
          endEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseleave';
            }
            else if(settings.on == 'focus') {
              return 'blur';
            }
            return false;
          },
          offsetParent: function($target) {
            var
              element = ($target !== undefined)
                ? $target[0]
                : $module[0],
              parentNode = element.parentNode,
              $node    = $(parentNode)
            ;
            if(parentNode) {
              var
                is2D     = ($node.css('transform') === 'none'),
                isStatic = ($node.css('position') === 'static'),
                isHTML   = $node.is('html')
              ;
              while(parentNode && !isHTML && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node    = $(parentNode);
                is2D     = ($node.css('transform') === 'none');
                isStatic = ($node.css('position') === 'static');
                isHTML   = $node.is('html');
              }
            }
            return ($node && $node.length > 0)
              ? $node
              : $()
            ;
          },
          offstagePosition: function(position, calculations) {
            var
              offset            = $popup.offset(),
              offstage          = {},
              offstagePositions = [],
              popup,
              boundary
            ;
            position     = position     || false;
            calculations = calculations || module.get.calculations();
            // shorthand
            popup        = calculations.popup;
            boundary     = calculations.boundary;

            if(offset && position) {
              offstage = {
                top    : (offset.top < boundary.top),
                bottom : (offset.top + popup.height > boundary.bottom),
                right  : (offset.left + popup.width > boundary.right),
                left   : (offset.left < boundary.left)
              };
              module.verbose('Offstage positions determined', offset, offstage);
            }
            // return only boundaries that have been surpassed
            $.each(offstage, function(direction, isOffstage) {
              if(isOffstage) {
                offstagePositions.push(direction);
              }
            });
            return (offstagePositions.length > 0)
              ? offstagePositions.join(' ')
              : false
            ;
          },
          positions: function() {
            return {
              'top left'      : false,
              'top center'    : false,
              'top right'     : false,
              'bottom left'   : false,
              'bottom center' : false,
              'bottom right'  : false,
              'left center'   : false,
              'right center'  : false
            };
          },
          nextPosition: function(position) {
            var
              positions          = position.split(' '),
              verticalPosition   = positions[0],
              horizontalPosition = positions[1],
              opposite = {
                top    : 'bottom',
                bottom : 'top',
                left   : 'right',
                right  : 'left'
              },
              adjacent = {
                left   : 'center',
                center : 'right',
                right  : 'left'
              },
              backup = {
                'top left'      : 'top center',
                'top center'    : 'top right',
                'top right'     : 'right center',
                'right center'  : 'bottom right',
                'bottom right'  : 'bottom center',
                'bottom center' : 'bottom left',
                'bottom left'   : 'left center',
                'left center'   : 'top left'
              },
              adjacentsAvailable = (verticalPosition == 'top' || verticalPosition == 'bottom'),
              oppositeTried = false,
              adjacentTried = false,
              nextPosition  = false
            ;
            if(!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
            }

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if(settings.prefer === 'opposite') {
              nextPosition  = [opposite[verticalPosition], horizontalPosition];
              nextPosition  = nextPosition.join(' ');
              oppositeTried = (triedPositions[nextPosition] === true);
              module.debug('Trying opposite strategy', nextPosition);
            }
            if((settings.prefer === 'adjacent') && adjacentsAvailable ) {
              nextPosition  = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition  = nextPosition.join(' ');
              adjacentTried = (triedPositions[nextPosition] === true);
              module.debug('Trying adjacent strategy', nextPosition);
            }
            if(adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
            }
            return nextPosition;
          }
        },

        set: {
          position: function(position, calculations) {

            // exit conditions
            if($target.length === 0 || $popup.length === 0) {
              module.error(error.notFound);
              return;
            }
            var
              offset,
              distanceAway,
              target,
              popup,
              parent,
              computedPosition,
              positioning,
              offstagePosition
            ;
            calculations = calculations || module.get.calculations();
            position     = position     || $module.data(metadata.position) || settings.position;

            offset       = $module.data(metadata.offset) || settings.offset;
            distanceAway = settings.distanceAway;

            // shorthand
            target = calculations.target;
            popup  = calculations.popup;
            parent = calculations.parent;

            if(target.top === 0 && target.left === 0) {
              module.debug('Popup target is hidden, no action taken');
              return false;
            }

            if(settings.inline) {
              module.debug('Adding margin to calculation', target.margin);
              if(position == 'left center' || position == 'right center') {
                offset       +=  target.margin.top;
                distanceAway += -target.margin.left;
              }
              else if (position == 'top left' || position == 'top center' || position == 'top right') {
                offset       += target.margin.left;
                distanceAway -= target.margin.top;
              }
              else {
                offset       += target.margin.left;
                distanceAway += target.margin.top;
              }
            }

            module.debug('Determining popup position from calculations', position, calculations);

            if (module.is.rtl()) {
              position = position.replace(/left|right/g, function (match) {
                return (match == 'left')
                  ? 'right'
                  : 'left'
                ;
              });
              module.debug('RTL: Popup position updated', position);
            }

            if(searchDepth == settings.maxSearchDepth && settings.lastResort) {
              module.debug('Using "last resort" position to display', settings.lastResort);
              position = settings.lastResort;
            }

            switch (position) {
              case 'top left':
                positioning = {
                  top    : 'auto',
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + offset,
                  right  : 'auto'
                };
              break;
              case 'top center':
                positioning = {
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  top    : 'auto',
                  right  : 'auto'
                };
              break;
              case 'top right':
                positioning = {
                  bottom :  parent.height - target.top + distanceAway,
                  right  :  parent.width - target.left - target.width - offset,
                  top    : 'auto',
                  left   : 'auto'
                };
              break;
              case 'left center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  right  : parent.width - target.left + distanceAway,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
              case 'right center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  left   : target.left + target.width + distanceAway,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom left':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + offset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom center':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  bottom : 'auto',
                  right  : 'auto'
                };
              break;
              case 'bottom right':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  right  : parent.width - target.left  - target.width - offset,
                  left   : 'auto',
                  bottom : 'auto'
                };
              break;
            }
            if(positioning === undefined) {
              module.error(error.invalidPosition, position);
            }

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup
              .css(positioning)
              .removeClass(className.position)
              .addClass(position)
              .addClass(className.loading)
            ;
            // check if is offstage
            offstagePosition = module.get.offstagePosition(position, calculations);

            // recursively find new positioning
            if(offstagePosition) {
              module.debug('Popup cant fit into viewport', position, offstagePosition);
              if(searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                position = module.get.nextPosition(position);
                module.debug('Trying new position', position);
                return ($popup)
                  ? module.set.position(position, calculations)
                  : false
                ;
              }
              else if(!settings.lastResort) {
                module.debug('Popup could not find a position in view', $popup);
                // module.error(error.cannotPlace, element);
                module.remove.attempts();
                module.remove.loading();
                module.reset();
                return false;
              }
            }

            module.debug('Position is on stage', position);
            module.remove.attempts();
            module.set.fluidWidth(calculations);
            module.remove.loading();
            return true;
          },

          fluidWidth: function(calculations) {
            calculations = calculations || module.get.calculations();
            if( settings.setFluidWidth && $popup.hasClass(className.fluid) ) {
              $popup.css('width', calculations.parent.width);
            }
          },

          visible: function() {
            $module.addClass(className.visible);
          }
        },

        remove: {
          loading: function() {
            $popup.removeClass(className.loading);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          attempts: function() {
            module.verbose('Resetting all searched positions');
            searchDepth    = 0;
            triedPositions = false;
          }
        },

        bind: {
          events: function() {
            module.debug('Binding popup events to module');
            if(settings.on == 'click') {
              $module
                .on('click' + eventNamespace, module.toggle)
              ;
            }
            if(settings.on == 'hover' && hasTouch) {
              $module
                .on('touchstart' + eventNamespace, module.event.touchstart)
              ;
            }
            else if( module.get.startEvent() ) {
              $module
                .on(module.get.startEvent() + eventNamespace, module.event.start)
                .on(module.get.endEvent() + eventNamespace, module.event.end)
              ;
            }
            if(settings.target) {
              module.debug('Target set to element', $target);
            }
            $window.on('resize' + elementNamespace, module.event.resize);
          },
          popup: function() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if( $popup && module.has.popup() ) {
              $popup
                .on('mouseenter' + eventNamespace, module.event.start)
                .on('mouseleave' + eventNamespace, module.event.end)
              ;
            }
          },
          close: function() {
            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click'))   {
              $document
                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)
              ;
              $context
                .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)
              ;
            }
            if(settings.on == 'hover' && openedWithTouch) {
              module.verbose('Binding popup close event to document');
              $document
                .on('touchstart' + elementNamespace, function(event) {
                  module.verbose('Touched away from popup');
                  module.event.hideGracefully.call(element, event);
                })
              ;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Binding popup close event to document');
              $document
                .on('click' + elementNamespace, function(event) {
                  module.verbose('Clicked away from popup');
                  module.event.hideGracefully.call(element, event);
                })
              ;
            }
          }
        },

        unbind: {
          close: function() {
            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click')) {
              $document
                .off('scroll' + elementNamespace, module.hide)
              ;
              $context
                .off('scroll' + elementNamespace, module.hide)
              ;
            }
            if(settings.on == 'hover' && openedWithTouch) {
              $document
                .off('touchstart' + elementNamespace)
              ;
              openedWithTouch = false;
            }
            if(settings.on == 'click' && settings.closable) {
              module.verbose('Removing close event from document');
              $document
                .off('click' + elementNamespace)
              ;
            }
          }
        },

        has: {
          popup: function() {
            return ($popup && $popup.length > 0);
          }
        },

        is: {
          active: function() {
            return $module.hasClass(className.active);
          },
          animating: function() {
            return ( $popup && $popup.hasClass(className.animating) );
          },
          visible: function() {
            return $popup && $popup.hasClass(className.visible);
          },
          dropdown: function() {
            return $module.hasClass(className.dropdown);
          },
          hidden: function() {
            return !module.is.visible();
          },
          rtl: function () {
            return $module.css('direction') == 'rtl';
          }
        },

        reset: function() {
          module.remove.visible();
          if(settings.preserve) {
            if($.fn.transition !== undefined) {
              $popup
                .transition('remove transition')
              ;
            }
          }
          else {
            module.removePopup();
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.popup.settings = {

  name         : 'Popup',

  // module settings
  debug        : false,
  verbose      : false,
  performance  : true,
  namespace    : 'popup',

  // callback only when element added to dom
  onCreate     : function(){},

  // callback before element removed from dom
  onRemove     : function(){},

  // callback before show animation
  onShow       : function(){},

  // callback after show animation
  onVisible    : function(){},

  // callback before hide animation
  onHide       : function(){},

  // callback after hide animation
  onHidden     : function(){},

  // when to show popup
  on           : 'hover',

  // whether to add touchstart events when using hover
  addTouchEvents : true,

  // default position relative to element
  position     : 'top left',

  // name of variation to use
  variation    : '',

  // whether popup should be moved to context
  movePopup      : true,

  // element which popup should be relative to
  target         : false,

  // jq selector or element that should be used as popup
  popup          : false,

  // popup should remain inline next to activator
  inline         : false,

  // popup should be removed from page on hide
  preserve       : true,

  // popup should not close when being hovered on
  hoverable      : false,

  // explicitly set content
  content      : false,

  // explicitly set html
  html         : false,

  // explicitly set title
  title        : false,

  // whether automatically close on clickaway when on click
  closable     : true,

  // automatically hide on scroll
  hideOnScroll : 'auto',

  // hide other popups on show
  exclusive    : false,

  // context to attach popups
  context      : 'body',

  // position to prefer when calculating new position
  prefer       : 'opposite',

  // specify position to appear even if it doesn't fit
  lastResort   : false,

  // delay used to prevent accidental refiring of animations due to user error
  delay        : {
    show : 50,
    hide : 70
  },

  // whether fluid variation should assign width explicitly
  setFluidWidth  : true,

  // transition settings
  duration       : 200,
  transition     : 'scale',

  // distance away from activating element in px
  distanceAway   : 0,

  // offset on aligning axis from calculated position
  offset         : 0,

  // maximum times to look for a position before failing (9 positions total)
  maxSearchDepth : 20,

  error: {
    invalidPosition : 'The position you specified is not a valid position',
    cannotPlace     : 'No visible position could be found for the popup',
    method          : 'The method you called is not defined.',
    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',
    notFound        : 'The target or popup you specified does not exist on the page'
  },

  metadata: {
    activator : 'activator',
    content   : 'content',
    html      : 'html',
    offset    : 'offset',
    position  : 'position',
    title     : 'title',
    variation : 'variation'
  },

  className   : {
    active    : 'active',
    animating : 'animating',
    dropdown  : 'dropdown',
    fluid     : 'fluid',
    loading   : 'loading',
    popup     : 'ui popup',
    position  : 'top left center bottom right',
    visible   : 'visible'
  },

  selector    : {
    popup    : '.ui.popup'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    popup: function(text) {
      var
        html   = '',
        escape = $.fn.popup.settings.templates.escape
      ;
      if(typeof text !== undefined) {
        if(typeof text.title !== undefined && text.title) {
          text.title = escape(text.title);
          html += '<div class="header">' + text.title + '</div>';
        }
        if(typeof text.content !== undefined && text.content) {
          text.content = escape(text.content);
          html += '<div class="content">' + text.content + '</div>';
        }
      }
      return html;
    }
  }

};


})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.progress = function(parameters) {
  var
    $allModules    = $(this),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.progress.settings, parameters)
          : $.extend({}, $.fn.progress.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $bar            = $(this).find(selector.bar),
        $progress       = $(this).find(selector.progress),
        $label          = $(this).find(selector.label),

        element         = this,
        instance        = $module.data(moduleNamespace),

        animating = false,
        transitionEnd,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing progress bar', settings);

          module.set.duration();
          module.set.transitionEvent();

          module.read.metadata();
          module.read.settings();

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
        },

        reset: function() {
          module.set.percent(0);
        },

        complete: function() {
          if(module.percent === undefined || module.percent < 100) {
            module.set.percent(100);
          }
        },

        read: {
          metadata: function() {
            var
              data = {
                percent : $module.data(metadata.percent),
                total   : $module.data(metadata.total),
                value   : $module.data(metadata.value)
              }
            ;
            if(data.percent) {
              module.debug('Current percent value set from metadata', data.percent);
              module.set.percent(data.percent);
            }
            if(data.total) {
              module.debug('Total value set from metadata', data.total);
              module.set.total(data.total);
            }
            if(data.value) {
              module.debug('Current value set from metadata', data.value);
              module.set.value(data.value);
            }
          },
          settings: function() {
            if(settings.total !== false) {
              module.debug('Current total set in settings', settings.total);
              module.set.total(settings.total);
            }
            if(settings.value !== false) {
              module.debug('Current value set in settings', settings.value);
              module.set.value(settings.value);
              module.set.progress(module.value);
            }
            if(settings.percent !== false) {
              module.debug('Current percent set in settings', settings.percent);
              module.set.percent(settings.percent);
            }
          }
        },

        increment: function(incrementValue) {
          var
            maxValue,
            startValue,
            newValue
          ;
          if( module.has.total() ) {
            startValue     = module.get.value();
            incrementValue = incrementValue || 1;

            newValue       = startValue + incrementValue;
            maxValue       = module.get.total();

            module.debug('Incrementing value', startValue, newValue, maxValue);
            if(newValue > maxValue ) {
              module.debug('Value cannot increment above total', maxValue);
              newValue = maxValue;
            }
          }
          else {
            startValue     = module.get.percent();
            incrementValue = incrementValue || module.get.randomValue();

            newValue       = startValue + incrementValue;
            maxValue       = 100;

            module.debug('Incrementing percentage by', startValue, newValue);
            if(newValue > maxValue ) {
              module.debug('Value cannot increment above 100 percent');
              newValue = maxValue;
            }
          }
          module.set.progress(newValue);
        },
        decrement: function(decrementValue) {
          var
            total     = module.get.total(),
            startValue,
            newValue
          ;
          if(total) {
            startValue     =  module.get.value();
            decrementValue =  decrementValue || 1;
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
          }
          else {
            startValue     =  module.get.percent();
            decrementValue =  decrementValue || module.get.randomValue();
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
          }

          if(newValue < 0) {
            module.debug('Value cannot decrement below 0');
            newValue = 0;
          }
          module.set.progress(newValue);
        },

        has: {
          total: function() {
            return (module.get.total() !== false);
          }
        },

        get: {
          text: function(templateText) {
            var
              value   = module.value                || 0,
              total   = module.total                || 0,
              percent = (animating)
                ? module.get.displayPercent()
                : module.percent || 0,
              left = (module.total > 0)
                ? (total - value)
                : (100 - percent)
            ;
            templateText = templateText || '';
            templateText = templateText
              .replace('{value}', value)
              .replace('{total}', total)
              .replace('{left}', left)
              .replace('{percent}', percent)
            ;
            module.debug('Adding variables to progress bar text', templateText);
            return templateText;
          },


          randomValue: function() {
            module.debug('Generating random increment percentage');
            return Math.floor((Math.random() * settings.random.max) + settings.random.min);
          },

          numericValue: function(value) {
            return (typeof value === 'string')
              ? (value.replace(/[^\d.]/g, '') !== '')
                ? +(value.replace(/[^\d.]/g, ''))
                : false
              : value
            ;
          },

          transitionEnd: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function() {
            var
              barWidth       = $bar.width(),
              totalWidth     = $module.width(),
              minDisplay     = parseInt($bar.css('min-width'), 10),
              displayPercent = (barWidth > minDisplay)
                ? (barWidth / totalWidth * 100)
                : module.percent
            ;
            return (settings.precision > 0)
              ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision)
              : Math.round(displayPercent)
            ;
          },

          percent: function() {
            return module.percent || 0;
          },
          value: function() {
            return module.value || 0;
          },
          total: function() {
            return module.total || false;
          }
        },

        is: {
          success: function() {
            return $module.hasClass(className.success);
          },
          warning: function() {
            return $module.hasClass(className.warning);
          },
          error: function() {
            return $module.hasClass(className.error);
          },
          active: function() {
            return $module.hasClass(className.active);
          },
          visible: function() {
            return $module.is(':visible');
          }
        },

        remove: {
          state: function() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
          },
          active: function() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
          },
          success: function() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
          },
          warning: function() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
          },
          error: function() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
          }
        },

        set: {
          barWidth: function(value) {
            if(value > 100) {
              module.error(error.tooHigh, value);
            }
            else if (value < 0) {
              module.error(error.tooLow, value);
            }
            else {
              $bar
                .css('width', value + '%')
              ;
              $module
                .attr('data-percent', parseInt(value, 10))
              ;
            }
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting progress bar transition duration', duration);
            $bar
              .css({
                'transition-duration':  duration
              })
            ;
          },
          percent: function(percent) {
            percent = (typeof percent == 'string')
              ? +(percent.replace('%', ''))
              : percent
            ;
            // round display percentage
            percent = (settings.precision > 0)
              ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision)
              : Math.round(percent)
            ;
            module.percent = percent;
            if( !module.has.total() ) {
              module.value = (settings.precision > 0)
                ? Math.round( (percent / 100) * module.total * (10 * settings.precision)) / (10 * settings.precision)
                : Math.round( (percent / 100) * module.total * 10) / 10
              ;
              if(settings.limitValues) {
                module.value = (module.value > 100)
                  ? 100
                  : (module.value < 0)
                    ? 0
                    : module.value
                ;
              }
            }
            module.set.barWidth(percent);
            module.set.labelInterval();
            module.set.labels();
            settings.onChange.call(element, percent, module.value, module.total);
          },
          labelInterval: function() {
            var
              animationCallback = function() {
                module.verbose('Bar finished animating, removing continuous label updates');
                clearInterval(module.interval);
                animating = false;
                module.set.labels();
              }
            ;
            clearInterval(module.interval);
            $bar.one(transitionEnd + eventNamespace, animationCallback);
            module.timer = setTimeout(animationCallback, settings.duration + 100);
            animating = true;
            module.interval = setInterval(module.set.labels, settings.framerate);
          },
          labels: function() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
          },
          label: function(text) {
            text = text || '';
            if(text) {
              text = module.get.text(text);
              module.debug('Setting label to text', text);
              $label.text(text);
            }
          },
          state: function(percent) {
            percent = (percent !== undefined)
              ? percent
              : module.percent
            ;
            if(percent === 100) {
              if(settings.autoSuccess && !(module.is.warning() || module.is.error())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
              }
              else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
              }
            }
            else if(percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
            }
            else {
              module.remove.active();
              module.set.label(settings.text.active);
            }
          },
          barLabel: function(text) {
            if(text !== undefined) {
              $progress.text( module.get.text(text) );
            }
            else if(settings.label == 'ratio' && module.total) {
              module.debug('Adding ratio to bar label');
              $progress.text( module.get.text(settings.text.ratio) );
            }
            else if(settings.label == 'percent') {
              module.debug('Adding percentage to bar label');
              $progress.text( module.get.text(settings.text.percent) );
            }
          },
          active: function(text) {
            text = text || settings.text.active;
            module.debug('Setting active state');
            if(settings.showActivity && !module.is.active() ) {
              $module.addClass(className.active);
            }
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            if(text) {
              module.set.label(text);
            }
            settings.onActive.call(element, module.value, module.total);
          },
          success : function(text) {
            text = text || settings.text.success;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onSuccess.call(element, module.total);
          },
          warning : function(text) {
            text = text || settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onWarning.call(element, module.value, module.total);
          },
          error : function(text) {
            text = text || settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete();
            if(text) {
              module.set.label(text);
            }
            settings.onError.call(element, module.value, module.total);
          },
          transitionEvent: function() {
            transitionEnd = module.get.transitionEnd();
          },
          total: function(totalValue) {
            module.total = totalValue;
          },
          value: function(value) {
            module.value = value;
          },
          progress: function(value) {
            var
              numericValue = module.get.numericValue(value),
              percentComplete
            ;
            if(numericValue === false) {
              module.error(error.nonNumeric, value);
            }
            if( module.has.total() ) {
              module.set.value(numericValue);
              percentComplete = (numericValue / module.total) * 100;
              module.debug('Calculating percent complete from total', percentComplete);
              module.set.percent( percentComplete );
            }
            else {
              percentComplete = numericValue;
              module.debug('Setting value to exact percentage value', percentComplete);
              module.set.percent( percentComplete );
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.progress.settings = {

  name         : 'Progress',
  namespace    : 'progress',

  debug        : true,
  verbose      : false,
  performance  : true,

  random       : {
    min : 2,
    max : 5
  },

  duration     : 300,

  autoSuccess  : true,
  showActivity : true,
  limitValues  : true,

  label        : 'percent',
  precision    : 0,
  framerate    : (1000 / 30), /// 30 fps

  percent      : false,
  total        : false,
  value        : false,

  onChange     : function(percent, value, total){},
  onSuccess    : function(total){},
  onActive     : function(value, total){},
  onError      : function(value, total){},
  onWarning    : function(value, total){},

  error    : {
    method     : 'The method you called is not defined.',
    nonNumeric : 'Progress value is non numeric',
    tooHigh    : 'Value specified is above 100%',
    tooLow     : 'Value specified is below 0%'
  },

  regExp: {
    variable: /\{\$*[A-z0-9]+\}/g
  },

  metadata: {
    percent : 'percent',
    total   : 'total',
    value   : 'value'
  },

  selector : {
    bar      : '> .bar',
    label    : '> .label',
    progress : '.bar > .progress'
  },

  text : {
    active  : false,
    error   : false,
    success : false,
    warning : false,
    percent : '{percent}%',
    ratio   : '{value} of {total}'
  },

  className : {
    active  : 'active',
    error   : 'error',
    success : 'success',
    warning : 'warning'
  }

};


})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.rating = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.rating.settings, parameters)
          : $.extend({}, $.fn.rating.settings),

        namespace       = settings.namespace,
        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        element         = this,
        instance        = $(this).data(moduleNamespace),

        $module         = $(this),
        $icon           = $module.find(selector.icon),

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing rating module', settings);

          if($icon.length === 0) {
            module.setup.layout();
          }

          if(settings.interactive) {
            module.enable();
          }
          else {
            module.disable();
          }
          module.set.rating( module.get.initialRating() );
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance', instance);
          module.remove.events();
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          $icon   = $module.find(selector.icon);
        },

        setup: {
          layout: function() {
            var
              maxRating = module.get.maxRating(),
              html      = $.fn.rating.settings.templates.icon(maxRating)
            ;
            module.debug('Generating icon html dynamically');
            $module
              .html(html)
            ;
            module.refresh();
          }
        },

        event: {
          mouseenter: function() {
            var
              $activeIcon = $(this)
            ;
            $activeIcon
              .nextAll()
                .removeClass(className.selected)
            ;
            $module
              .addClass(className.selected)
            ;
            $activeIcon
              .addClass(className.selected)
                .prevAll()
                .addClass(className.selected)
            ;
          },
          mouseleave: function() {
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
            ;
          },
          click: function() {
            var
              $activeIcon   = $(this),
              currentRating = module.get.rating(),
              rating        = $icon.index($activeIcon) + 1,
              canClear      = (settings.clearable == 'auto')
               ? ($icon.length === 1)
               : settings.clearable
            ;
            if(canClear && currentRating == rating) {
              module.clearRating();
            }
            else {
              module.set.rating( rating );
            }
          }
        },

        clearRating: function() {
          module.debug('Clearing current rating');
          module.set.rating(0);
        },

        bind: {
          events: function() {
            module.verbose('Binding events');
            $module
              .on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter)
              .on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave)
              .on('click'      + eventNamespace, selector.icon, module.event.click)
            ;
          }
        },

        remove: {
          events: function() {
            module.verbose('Removing events');
            $module
              .off(eventNamespace)
            ;
          }
        },

        enable: function() {
          module.debug('Setting rating to interactive mode');
          module.bind.events();
          $module
            .removeClass(className.disabled)
          ;
        },

        disable: function() {
          module.debug('Setting rating to read-only mode');
          module.remove.events();
          $module
            .addClass(className.disabled)
          ;
        },

        get: {
          initialRating: function() {
            if($module.data(metadata.rating) !== undefined) {
              $module.removeData(metadata.rating);
              return $module.data(metadata.rating);
            }
            return settings.initialRating;
          },
          maxRating: function() {
            if($module.data(metadata.maxRating) !== undefined) {
              $module.removeData(metadata.maxRating);
              return $module.data(metadata.maxRating);
            }
            return settings.maxRating;
          },
          rating: function() {
            var
              currentRating = $icon.filter('.' + className.active).length
            ;
            module.verbose('Current rating retrieved', currentRating);
            return currentRating;
          }
        },

        set: {
          rating: function(rating) {
            var
              ratingIndex = (rating - 1 >= 0)
                ? (rating - 1)
                : 0,
              $activeIcon = $icon.eq(ratingIndex)
            ;
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
              .removeClass(className.active)
            ;
            if(rating > 0) {
              module.verbose('Setting current rating to', rating);
              $activeIcon
                .prevAll()
                .andSelf()
                  .addClass(className.active)
              ;
            }
            settings.onRate.call(element, rating);
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.rating.settings = {

  name          : 'Rating',
  namespace     : 'rating',

  debug         : false,
  verbose       : false,
  performance   : true,

  initialRating : 0,
  interactive   : true,
  maxRating     : 4,
  clearable     : 'auto',

  onRate        : function(rating){},

  error         : {
    method    : 'The method you called is not defined',
    noMaximum : 'No maximum rating specified. Cannot generate HTML automatically'
  },


  metadata: {
    rating    : 'rating',
    maxRating : 'maxRating'
  },

  className : {
    active   : 'active',
    disabled : 'disabled',
    selected : 'selected',
    loading  : 'loading'
  },

  selector  : {
    icon : '.icon'
  },

  templates: {
    icon: function(maxRating) {
      var
        icon = 1,
        html = ''
      ;
      while(icon <= maxRating) {
        html += '<i class="icon"></i>';
        icon++;
      }
      return html;
    }
  }

};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.search = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $(this)
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.search.settings, parameters)
          : $.extend({}, $.fn.search.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        regExp          = settings.regExp,
        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),
        $prompt         = $module.find(selector.prompt),
        $searchButton   = $module.find(selector.searchButton),
        $results        = $module.find(selector.results),
        $result         = $module.find(selector.result),
        $category       = $module.find(selector.category),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module');
          module.determine.searchFields();
          module.bind.events();
          module.set.type();
          module.create.results();
          module.instantiate();
        },
        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },
        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        bind: {
          events: function() {
            module.verbose('Binding events to search');
            if(settings.automatic) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)
              ;
              $prompt
                .attr('autocomplete', 'off')
              ;
            }
            $module
              // prompt
              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)
              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)
              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)
              // search button
              .on('click'     + eventNamespace, selector.searchButton, module.query)
              // results
              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)
              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)
              .on('click'     + eventNamespace, selector.result,  module.event.result.click)
            ;
          }
        },

        determine: {
          searchFields: function() {
            // this makes sure $.extend does not add specified search fields to default fields
            // this is the only setting which should not extend defaults
            if(parameters && parameters.searchFields !== undefined) {
              settings.searchFields = parameters.searchFields;
            }
          }
        },

        event: {
          input: function() {
            clearTimeout(module.timer);
            module.timer = setTimeout(module.query, settings.searchDelay);
          },
          focus: function() {
            module.set.focus();
            if( module.has.minimumCharacters() ) {
              module.query();
              module.showResults();
            }
          },
          blur: function(event) {
            var
              pageLostFocus = (document.activeElement === this)
            ;
            if(!pageLostFocus && !module.resultsClicked) {
              module.cancel.query();
              module.remove.focus();
              module.timer = setTimeout(module.hideResults, settings.hideDelay);
            }
          },
          result: {
            mousedown: function() {
              module.resultsClicked = true;
            },
            mouseup: function() {
              module.resultsClicked = false;
            },
            click: function(event) {
              module.debug('Search result selected');
              var
                $result = $(this),
                $title  = $result.find(selector.title).eq(0),
                $link   = $result.find('a[href]').eq(0),
                href    = $link.attr('href')   || false,
                target  = $link.attr('target') || false,
                title   = $title.html(),
                // title is used for result lookup
                value   = ($title.length > 0)
                  ? $title.text()
                  : false,
                results = module.get.results(),
                result  = $result.data(metadata.result) || module.get.result(value, results),
                returnedValue
              ;
              if( $.isFunction(settings.onSelect) ) {
                if(settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  return;
                }
              }
              module.hideResults();
              if(value) {
                module.set.value(value);
              }
              if(href) {
                module.verbose('Opening search link found in result', $link);
                if(target == '_blank' || event.ctrlKey) {
                  window.open(href);
                }
                else {
                  window.location.href = (href);
                }
              }
            }
          }
        },
        handleKeyboard: function(event) {
          var
            // force selector refresh
            $result      = $module.find(selector.result),
            $category    = $module.find(selector.category),
            currentIndex = $result.index( $result.filter('.' + className.active) ),
            resultSize   = $result.length,

            keyCode      = event.which,
            keys         = {
              backspace : 8,
              enter     : 13,
              escape    : 27,
              upArrow   : 38,
              downArrow : 40
            },
            newIndex
          ;
          // search shortcuts
          if(keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            $prompt
              .trigger('blur')
            ;
          }
          if( module.is.visible() ) {
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if( $result.filter('.' + className.active).length > 0 ) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
              }
            }
            else if(keyCode == keys.upArrow) {
              module.verbose('Up key pressed, changing active result');
              newIndex = (currentIndex - 1 < 0)
                ? currentIndex
                : currentIndex - 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
            else if(keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = (currentIndex + 1 >= resultSize)
                ? currentIndex
                : currentIndex + 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
            }
          }
          else {
            // query shortcuts
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
            }
          }
        },

        setup: {
          api: function() {
            var
              apiSettings = {
                debug     : settings.debug,
                on        : false,
                cache     : 'local',
                action    : 'search',
                onError   : module.error
              },
              searchHTML
            ;
            module.verbose('First request, initializing API');
            $module.api(apiSettings);
          }
        },

        can: {
          useAPI: function() {
            return $.fn.api !== undefined;
          },
          transition: function() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
          }
        },

        is: {
          empty: function() {
            return ($results.html() === '');
          },
          visible: function() {
            return ($results.filter(':visible').length > 0);
          },
          focused: function() {
            return ($prompt.filter(':focus').length > 0);
          }
        },

        get: {
          inputEvent: function() {
            var
              prompt = $prompt[0],
              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)
                ? 'input'
                : (prompt !== undefined && prompt.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
            ;
            return inputEvent;
          },
          value: function() {
            return $prompt.val();
          },
          results: function() {
            var
              results = $module.data(metadata.results)
            ;
            return results;
          },
          result: function(value, results) {
            var
              lookupFields = ['title', 'id'],
              result       = false
            ;
            value = (value !== undefined)
              ? value
              : module.get.value()
            ;
            results = (results !== undefined)
              ? results
              : module.get.results()
            ;
            if(settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function(index, category) {
                if($.isArray(category.results)) {
                  result = module.search.object(value, category.results, lookupFields)[0];
                  // dont continue searching if a result is found
                  if(result) {
                    return false;
                  }
                }
              });
            }
            else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results, lookupFields)[0];
            }
            return result || false;
          },
        },

        set: {
          focus: function() {
            $module.addClass(className.focus);
          },
          loading: function() {
            $module.addClass(className.loading);
          },
          value: function(value) {
            module.verbose('Setting search input value', value);
            $prompt
              .val(value)
            ;
          },
          type: function(type) {
            type = type || settings.type;
            if(settings.type == 'category') {
              $module.addClass(settings.type);
            }
          },
          buttonPressed: function() {
            $searchButton.addClass(className.pressed);
          }
        },

        remove: {
          loading: function() {
            $module.removeClass(className.loading);
          },
          focus: function() {
            $module.removeClass(className.focus);
          },
          buttonPressed: function() {
            $searchButton.removeClass(className.pressed);
          }
        },

        query: function() {
          var
            searchTerm = module.get.value(),
            cache = module.read.cache(searchTerm)
          ;
          if( module.has.minimumCharacters() )  {
            if(cache) {
              module.debug('Reading result from cache', searchTerm);
              module.save.results(cache.results);
              module.addResults(cache.html);
              module.inject.id(cache.results);
            }
            else {
              module.debug('Querying for', searchTerm);
              if($.isPlainObject(settings.source) || $.isArray(settings.source)) {
                module.search.local(searchTerm);
              }
              else if( module.can.useAPI() ) {
                module.search.remote(searchTerm);
              }
              else {
                module.error(error.source);
              }
              settings.onSearchQuery.call(element, searchTerm);
            }
          }
          else {
            module.hideResults();
          }
        },

        search: {
          local: function(searchTerm) {
            var
              results = module.search.object(searchTerm, settings.content),
              searchHTML
            ;
            module.set.loading();
            module.save.results(results);
            module.debug('Returned local search results', results);

            searchHTML = module.generateResults({
              results: results
            });
            module.remove.loading();
            module.addResults(searchHTML);
            module.inject.id(results);
            module.write.cache(searchTerm, {
              html    : searchHTML,
              results : results
            });
          },
          remote: function(searchTerm) {
            var
              apiSettings = {
                onSuccess : function(response) {
                  module.parse.response.call(element, response, searchTerm);
                },
                onFailure: function() {
                  module.displayMessage(error.serverError);
                },
                urlData: {
                  query: searchTerm
                }
              }
            ;
            if( !$module.api('get request') ) {
              module.setup.api();
            }
            $.extend(true, apiSettings, settings.apiSettings);
            module.debug('Executing search', apiSettings);
            module.cancel.query();
            $module
              .api('setting', apiSettings)
              .api('query')
            ;
          },
          object: function(searchTerm, source, searchFields) {
            var
              results      = [],
              fuzzyResults = [],
              searchExp    = searchTerm.toString().replace(regExp.escape, '\\$&'),
              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),

              // avoid duplicates when pushing results
              addResult = function(array, result) {
                var
                  notResult      = ($.inArray(result, results) == -1),
                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1)
                ;
                if(notResult && notFuzzyResult) {
                  array.push(result);
                }
              }
            ;
            source = source || settings.source;
            searchFields = (searchFields !== undefined)
              ? searchFields
              : settings.searchFields
            ;

            // search fields should be array to loop correctly
            if(!$.isArray(searchFields)) {
              searchFields = [searchFields];
            }

            // exit conditions if no source
            if(source === undefined || source === false) {
              module.error(error.source);
              return [];
            }

            // iterate through search fields looking for matches
            $.each(searchFields, function(index, field) {
              $.each(source, function(label, content) {
                var
                  fieldExists = (typeof content[field] == 'string')
                ;
                if(fieldExists) {
                  if( content[field].search(matchRegExp) !== -1) {
                    // content starts with value (first in results)
                    addResult(results, content);
                  }
                  else if(settings.searchFullText && module.fuzzySearch(searchTerm, content[field]) ) {
                    // content fuzzy matches (last in results)
                    addResult(fuzzyResults, content);
                  }
                }
              });
            });
            return $.merge(results, fuzzyResults);
          }
        },

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          if(typeof query !== 'string') {
            return false;
          }
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
          }
          if(queryLength === termLength) {
            return (query === term);
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        parse: {
          response: function(response, searchTerm) {
            var
              searchHTML = module.generateResults(response)
            ;
            module.verbose('Parsing server response', response);
            if(response !== undefined) {
              if(searchTerm !== undefined && response.results !== undefined) {
                module.addResults(searchHTML);
                module.inject.id(response.results);
                module.write.cache(searchTerm, {
                  html    : searchHTML,
                  results : response.results
                });
                module.save.results(response.results);
              }
            }
          }
        },

        cancel: {
          query: function() {
            if( module.can.useAPI() ) {
              $module.api('abort');
            }
          }
        },

        has: {
          minimumCharacters: function() {
            var
              searchTerm    = module.get.value(),
              numCharacters = searchTerm.length
            ;
            return (numCharacters >= settings.minCharacters);
          }
        },

        clear: {
          cache: function(value) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(!value) {
              module.debug('Clearing cache', value);
              $module.removeData(metadata.cache);
            }
            else if(value && cache && cache[value]) {
              module.debug('Removing value from cache', value);
              delete cache[value];
              $module.data(metadata.cache, cache);
            }
          }
        },

        read: {
          cache: function(name) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return (typeof cache == 'object') && (cache[name] !== undefined)
                ? cache[name]
                : false
              ;
            }
            return false;
          }
        },

        create: {
          id: function(resultIndex, categoryIndex) {
            var
              resultID      = (resultIndex + 1), // not zero indexed
              categoryID    = (categoryIndex + 1),
              firstCharCode,
              letterID,
              id
            ;
            if(categoryIndex !== undefined) {
              // start char code for "A"
              letterID = String.fromCharCode(97 + categoryIndex);
              id          = letterID + resultID;
              module.verbose('Creating category result id', id);
            }
            else {
              id = resultID;
              module.verbose('Creating result id', id);
            }
            return id;
          },
          results: function() {
            if($results.length === 0) {
              $results = $('<div />')
                .addClass(className.results)
                .appendTo($module)
              ;
            }
          }
        },

        inject: {
          result: function(result, resultIndex, categoryIndex) {
            module.verbose('Injecting result into results');
            var
              $selectedResult = (categoryIndex !== undefined)
                ? $results
                    .children().eq(categoryIndex)
                      .children(selector.result).eq(resultIndex)
                : $results
                    .children(selector.result).eq(resultIndex)
            ;
            module.verbose('Injecting results metadata', $selectedResult);
            $selectedResult
              .data(metadata.result, result)
            ;
          },
          id: function(results) {
            module.debug('Injecting unique ids into results');
            var
              // since results may be object, we must use counters
              categoryIndex = 0,
              resultIndex   = 0
            ;
            if(settings.type === 'category') {
              // iterate through each category result
              $.each(results, function(index, category) {
                resultIndex = 0;
                $.each(category.results, function(index, value) {
                  var
                    result = category.results[index]
                  ;
                  if(result.id === undefined) {
                    result.id = module.create.id(resultIndex, categoryIndex);
                  }
                  module.inject.result(result, resultIndex, categoryIndex);
                  resultIndex++;
                });
                categoryIndex++;
              });
            }
            else {
              // top level
              $.each(results, function(index, value) {
                var
                  result = results[index]
                ;
                if(result.id === undefined) {
                  result.id = module.create.id(resultIndex);
                }
                module.inject.result(result, resultIndex);
                resultIndex++;
              });
            }
            return results;
          }
        },

        save: {
          results: function(results) {
            module.verbose('Saving current search results to metadata', results);
            $module.data(metadata.results, results);
          }
        },

        write: {
          cache: function(name, value) {
            var
              cache = ($module.data(metadata.cache) !== undefined)
                ? $module.data(metadata.cache)
                : {}
            ;
            if(settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module
                .data(metadata.cache, cache)
              ;
            }
          }
        },

        addResults: function(html) {
          if( $.isFunction(settings.onResultsAdd) ) {
            if( settings.onResultsAdd.call($results, html) === false ) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
            }
          }
          $results
            .html(html)
          ;
          module.showResults();
        },

        showResults: function() {
          if( !module.is.visible() && module.is.focused() && !module.is.empty() ) {
            if( module.can.transition() ) {
              module.debug('Showing results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' in',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Showing results with javascript');
              $results
                .stop()
                .fadeIn(settings.duration, settings.easing)
              ;
            }
            settings.onResultsOpen.call($results);
          }
        },
        hideResults: function() {
          if( module.is.visible() ) {
            if( module.can.transition() ) {
              module.debug('Hiding results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' out',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  queue      : true
                })
              ;
            }
            else {
              module.debug('Hiding results with javascript');
              $results
                .stop()
                .fadeOut(settings.duration, settings.easing)
              ;
            }
            settings.onResultsClose.call($results);
          }
        },

        generateResults: function(response) {
          module.debug('Generating html from response', response);
          var
            template       = settings.templates[settings.type],
            isProperObject = ($.isPlainObject(response.results) && !$.isEmptyObject(response.results)),
            isProperArray  = ($.isArray(response.results) && response.results.length > 0),
            html           = ''
          ;
          if(isProperObject || isProperArray ) {
            if(settings.maxResults > 0) {
              if(isProperObject) {
                if(settings.type == 'standard') {
                  module.error(error.maxResults);
                }
              }
              else {
                response.results = response.results.slice(0, settings.maxResults);
              }
            }
            if($.isFunction(template)) {
              html = template(response);
            }
            else {
              module.error(error.noTemplate, false);
            }
          }
          else {
            html = module.displayMessage(error.noResults, 'empty');
          }
          settings.onResults.call(element, response);
          return html;
        },

        displayMessage: function(text, type) {
          type = type || 'standard';
          module.debug('Displaying message', text, type);
          module.addResults( settings.templates.message(text, type) );
          return settings.templates.message(text, type);
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }

    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.search.settings = {

  name           : 'Search',
  namespace      : 'search',

  debug          : false,
  verbose        : false,
  performance    : true,

  type           : 'standard',
  // template to use (specified in settings.templates)

  minCharacters  : 1,
  // minimum characters required to search

  apiSettings    : false,
  // API config

  source         : false,
  // object to search

  searchFields   : [
    'title',
    'description'
  ],
  // fields to search

  searchFullText : true,
  // whether to include fuzzy results in local search

  automatic      : true,
  // whether to add events to prompt automatically

  hideDelay      : 0,
  // delay before hiding menu after blur

  searchDelay    : 200,
  // delay before searching

  maxResults     : 7,
  // maximum results returned from local

  cache          : true,
  // whether to store lookups in local cache

  // transition settings
  transition     : 'scale',
  duration       : 200,
  easing         : 'easeOutExpo',

  // callbacks
  onSelect       : false,
  onResultsAdd   : false,

  onSearchQuery  : function(){},
  onResults      : function(response){},

  onResultsOpen  : function(){},
  onResultsClose : function(){},

  className: {
    active  : 'active',
    empty   : 'empty',
    focus   : 'focus',
    loading : 'loading',
    results : 'results',
    pressed : 'down'
  },

  error : {
    source      : 'Cannot search. No source used, and Semantic API module was not included',
    noResults   : 'Your search returned no results',
    logging     : 'Error in debug logging, exiting.',
    noEndpoint  : 'No search endpoint was specified',
    noTemplate  : 'A valid template name was not specified.',
    serverError : 'There was an issue querying the server.',
    maxResults  : 'Results must be an array to use maxResults setting',
    method      : 'The method you called is not defined.'
  },

  metadata: {
    cache   : 'cache',
    results : 'results',
    result  : 'result'
  },

  regExp: {
    escape     : /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
    beginsWith : '(?:\s|^)'
  },

  selector : {
    prompt       : '.prompt',
    searchButton : '.search.button',
    results      : '.results',
    category     : '.category',
    result       : '.result',
    title        : '.title, .name'
  },

  templates: {
    escape: function(string) {
      var
        badChars     = /[&<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
        escapedChar  = function(chr) {
          return escape[chr];
        }
      ;
      if(shouldEscape.test(string)) {
        return string.replace(badChars, escapedChar);
      }
      return string;
    },
    message: function(message, type) {
      var
        html = ''
      ;
      if(message !== undefined && type !== undefined) {
        html +=  ''
          + '<div class="message ' + type + '">'
        ;
        // message type
        if(type == 'empty') {
          html += ''
            + '<div class="header">No Results</div class="header">'
            + '<div class="description">' + message + '</div class="description">'
          ;
        }
        else {
          html += ' <div class="description">' + message + '</div>';
        }
        html += '</div>';
      }
      return html;
    },
    category: function(response) {
      var
        html = '',
        escape = $.fn.search.settings.templates.escape
      ;
      if(response.results !== undefined) {
        // each category
        $.each(response.results, function(index, category) {
          if(category.results !== undefined && category.results.length > 0) {
            html  += ''
              + '<div class="category">'
              + '<div class="name">' + category.name + '</div>'
            ;
            // each item inside category
            $.each(category.results, function(index, result) {
              html  += '<div class="result">';
              if(result.url) {
                html  += '<a href="' + result.url + '"></a>';
              }
              if(result.image !== undefined) {
                result.image = escape(result.image);
                html += ''
                  + '<div class="image">'
                  + ' <img src="' + result.image + '" alt="">'
                  + '</div>'
                ;
              }
              html += '<div class="content">';
              if(result.price !== undefined) {
                result.price = escape(result.price);
                html += '<div class="price">' + result.price + '</div>';
              }
              if(result.title !== undefined) {
                result.title = escape(result.title);
                html += '<div class="title">' + result.title + '</div>';
              }
              if(result.description !== undefined) {
                html += '<div class="description">' + result.description + '</div>';
              }
              html  += ''
                + '</div>'
                + '</div>'
              ;
            });
            html  += ''
              + '</div>'
            ;
          }
        });
        if(response.action) {
          html += ''
          + '<a href="' + response.action.url + '" class="action">'
          +   response.action.text
          + '</a>';
        }
        return html;
      }
      return false;
    },
    standard: function(response) {
      var
        html = ''
      ;
      if(response.results !== undefined) {

        // each result
        $.each(response.results, function(index, result) {
          if(result.url) {
            html  += '<a class="result" href="' + result.url + '">';
          }
          else {
            html  += '<a class="result">';
          }
          if(result.image !== undefined) {
            html += ''
              + '<div class="image">'
              + ' <img src="' + result.image + '">'
              + '</div>'
            ;
          }
          html += '<div class="content">';
          if(result.price !== undefined) {
            html += '<div class="price">' + result.price + '</div>';
          }
          if(result.title !== undefined) {
            html += '<div class="title">' + result.title + '</div>';
          }
          if(result.description !== undefined) {
            html += '<div class="description">' + result.description + '</div>';
          }
          html  += ''
            + '</div>'
          ;
          html += '</a>';
        });

        if(response.action) {
          html += ''
          + '<a href="' + response.action.url + '" class="action">'
          +   response.action.text
          + '</a>';
        }
        return html;
      }
      return false;
    }
  }
};

})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.shape = function(parameters) {
  var
    $allModules     = $(this),
    $body           = $('body'),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        moduleSelector = $allModules.selector || '',
        settings       = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.shape.settings, parameters)
          : $.extend({}, $.fn.shape.settings),

        // internal aliases
        namespace     = settings.namespace,
        selector      = settings.selector,
        error         = settings.error,
        className     = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // selector cache
        $module       = $(this),
        $sides        = $module.find(selector.sides),
        $side         = $module.find(selector.side),

        // private variables
        nextIndex = false,
        $activeSide,
        $nextSide,

        // standard module
        element       = this,
        instance      = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides  = $(this).find(selector.shape);
          $side   = $(this).find(selector.side);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          var
            shape          = $sides[0] || document.createElement('div'),
            fakeAssignment = shape.offsetWidth
          ;
        },

        animate: function(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function(event) {
            module.verbose('Executing animation callback');
            if(event !== undefined) {
              event.stopPropagation();
            }
            module.reset();
            module.set.active();
          };
          settings.beforeChange.call($nextSide[0]);
          if(module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module
              .addClass(className.animating)
            ;
            $sides
              .css(propertyObject)
              .one(module.get.transitionEvent(), callback)
            ;
            module.set.duration(settings.duration);
            requestAnimationFrame(function() {
              $module
                .addClass(className.animating)
              ;
              $activeSide
                .addClass(className.hidden)
              ;
            });
          }
          else {
            callback();
          }
        },

        queue: function(method) {
          module.debug('Queueing animation of', method);
          $sides
            .one(module.get.transitionEvent(), function() {
              module.debug('Executing queued animation');
              setTimeout(function(){
                $module.shape(method);
              }, 0);
            })
          ;
        },

        reset: function() {
          module.verbose('Animating states reset');
          $module
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
          // removeAttr style does not consistently work in safari
          $sides
            .attr('style', '')
            .removeAttr('style')
          ;
          $side
            .attr('style', '')
            .removeAttr('style')
            .removeClass(className.hidden)
          ;
          $nextSide
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
        },

        is: {
          complete: function() {
            return ($side.filter('.' + className.active)[0] == $nextSide[0]);
          },
          animating: function() {
            return $module.hasClass(className.animating);
          }
        },

        set: {

          defaultSide: function() {
            $activeSide = $module.find('.' + settings.className.active);
            $nextSide   = ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
          },

          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting animation duration', duration);
            if(settings.duration || settings.duration === 0) {
              $sides.add($side)
                .css({
                  '-webkit-transition-duration': duration,
                  '-moz-transition-duration': duration,
                  '-ms-transition-duration': duration,
                  '-o-transition-duration': duration,
                  'transition-duration': duration
                })
              ;
            }
          },

          currentStageSize: function() {
            var
              $activeSide = $module.find('.' + settings.className.active),
              width       = $activeSide.outerWidth(true),
              height      = $activeSide.outerHeight(true)
            ;
            $module
              .css({
                width: width,
                height: height
              })
            ;
          },

          stageSize: function() {
            var
              $clone      = $module.clone().addClass(className.loading),
              $activeSide = $clone.find('.' + settings.className.active),
              $nextSide   = (nextIndex)
                ? $clone.find(selector.side).eq(nextIndex)
                : ( $activeSide.next(selector.side).length > 0 )
                  ? $activeSide.next(selector.side)
                  : $clone.find(selector.side).first(),
              newSize = {}
            ;
            module.set.currentStageSize();
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            newSize = {
              width  : $nextSide.outerWidth(true),
              height : $nextSide.outerHeight(true)
            };
            $clone.remove();
            $module
              .css(newSize)
            ;
            module.verbose('Resizing stage to fit new content', newSize);
          },

          nextSide: function(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
            }
            module.verbose('Next side manually set to', $nextSide);
          },

          active: function() {
            module.verbose('Setting new side to active', $nextSide);
            $side
              .removeClass(className.active)
            ;
            $nextSide
              .addClass(className.active)
            ;
            settings.onChange.call($nextSide[0]);
            module.set.defaultSide();
          }
        },

        flip: {

          up: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping up', $nextSide);
              module.set.stageSize();
              module.stage.above();
              module.animate( module.get.transform.up() );
            }
            else {
              module.queue('flip up');
            }
          },

          down: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping down', $nextSide);
              module.set.stageSize();
              module.stage.below();
              module.animate( module.get.transform.down() );
            }
            else {
              module.queue('flip down');
            }
          },

          left: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping left', $nextSide);
              module.set.stageSize();
              module.stage.left();
              module.animate(module.get.transform.left() );
            }
            else {
              module.queue('flip left');
            }
          },

          right: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping right', $nextSide);
              module.set.stageSize();
              module.stage.right();
              module.animate(module.get.transform.right() );
            }
            else {
              module.queue('flip right');
            }
          },

          over: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping over', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.over() );
            }
            else {
              module.queue('flip over');
            }
          },

          back: function() {
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if( !module.is.animating()) {
              module.debug('Flipping back', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.back() );
            }
            else {
              module.queue('flip back');
            }
          }

        },

        get: {

          transform: {
            up: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                  z: -($activeSide.outerHeight(true) / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(-90deg)'
              };
            },

            down: function() {
              var
                translate = {
                  y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                  z: -($activeSide.outerHeight(true) / 2)
                }
              ;
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ('+ translate.z + 'px) rotateX(90deg)'
              };
            },

            left: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                  z : -($activeSide.outerWidth(true) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'
              };
            },

            right: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                  z : -($activeSide.outerWidth(true) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'
              };
            },

            over: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
              };
            },

            back: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
                }
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
              };
            }
          },

          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          },

          nextSide: function() {
            return ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $module.find(selector.side).first()
            ;
          }

        },

        stage: {

          above: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          below: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          left: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          right: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides
              .css({
                'transform' : 'translateZ(-' + box.depth.active + 'px)'
              })
            ;
            $activeSide
              .css({
                'transform' : 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'
              })
            ;
          },

          behind: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
              },
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
                }
              }
            ;
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
              })
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-180deg)'
              })
            ;
          }
        },
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.shape.settings = {

  // module info
  name : 'Shape',

  // debug content outputted to console
  debug      : false,

  // verbose debug output
  verbose    : false,

  // performance data output
  performance: true,

  // event namespace
  namespace  : 'shape',

  // callback occurs on side change
  beforeChange : function() {},
  onChange     : function() {},

  // allow animation to same side
  allowRepeats: false,

  // animation duration
  duration   : false,

  // possible errors
  error: {
    side   : 'You tried to switch to a side that does not exist.',
    method : 'The method you called is not defined'
  },

  // classnames used
  className   : {
    animating : 'animating',
    hidden    : 'hidden',
    loading   : 'loading',
    active    : 'active'
  },

  // selectors used
  selector    : {
    sides : '.sides',
    side  : '.side'
  }

};


})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sidebar = function(parameters) {
  var
    $allModules     = $(this),
    $window         = $(window),
    $document       = $(document),
    $html           = $('html'),
    $head           = $('head'),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sidebar.settings, parameters)
          : $.extend({}, $.fn.sidebar.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),

        $sidebars       = $module.children(selector.sidebar),
        $fixed          = $context.children(selector.fixed),
        $pusher         = $context.children(selector.pusher),
        $style,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        currentScroll,
        transitionEvent,

        module
      ;

      module      = {

        initialize: function() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          if(module.is.ios()) {
            module.set.ios();
          }

          // avoids locking rendering if initialized in onReady
          if(settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
          }
          else {
            module.setup.layout();
          }

          requestAnimationFrame(function() {
            module.setup.cache();
          });

          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
          }
        },

        destroy: function() {
          module.verbose('Destroying previous module for', $module);
          module.remove.direction();
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          if(module.is.ios()) {
            module.remove.ios();
          }
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
        },

        event: {
          clickaway: function(event) {
            var
              clickedInPusher = ($pusher.find(event.target).length > 0 || $pusher.is(event.target)),
              clickedContext  = ($context.is(event.target))
            ;
            if(clickedInPusher) {
              module.verbose('User clicked on dimmed page');
              module.hide();
            }
            if(clickedContext) {
              module.verbose('User clicked on dimmable context (scaled out page)');
              module.hide();
            }
          },
          touch: function(event) {
            //event.stopPropagation();
          },
          containScroll: function(event) {
            if(element.scrollTop <= 0)  {
              element.scrollTop = 1;
            }
            if((element.scrollTop + element.offsetHeight) >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
            }
          },
          scroll: function(event) {
            if( $(event.target).closest(selector.sidebar).length === 0 ) {
              event.preventDefault();
            }
          }
        },

        bind: {
          clickaway: function() {
            module.verbose('Adding clickaway events to context', $context);
            if(settings.closable) {
              $context
                .on('click'    + elementNamespace, module.event.clickaway)
                .on('touchend' + elementNamespace, module.event.clickaway)
              ;
            }
          },
          scrollLock: function() {
            if(settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window
                .on('DOMMouseScroll' + elementNamespace, module.event.scroll)
              ;
            }
            module.verbose('Adding events to contain sidebar scroll');
            $document
              .on('touchmove' + elementNamespace, module.event.touch)
            ;
            $module
              .on('scroll' + eventNamespace, module.event.containScroll)
            ;
          }
        },
        unbind: {
          clickaway: function() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
          },
          scrollLock: function() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
          }
        },

        add: {
          inlineCSS: function() {
            var
              width     = module.cache.width  || $module.outerWidth(),
              height    = module.cache.height || $module.outerHeight(),
              isRTL     = module.is.rtl(),
              direction = module.get.direction(),
              distance  = {
                left   : width,
                right  : -width,
                top    : height,
                bottom : -height
              },
              style
            ;

            if(isRTL){
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
            }

            style  = '<style>';

            if(direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + ' }'
              ;
            }
            else if(direction === 'top' || direction == 'bottom') {
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + ' }'
              ;
            }

            /* IE is only browser not to create context with transforms */
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
            if( module.is.ie() ) {
              if(direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + ' }'
                ;
              }
              else if(direction === 'top' || direction == 'bottom') {
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + ' }'
                ;
              }
              /* opposite sides visible forces content overlay */
              style += ''
                + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,'
                + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {'
                + '   -webkit-transform: translate3d(0px, 0, 0);'
                + '           transform: translate3d(0px, 0, 0);'
                + ' }'
              ;
            }
            style += '</style>';
            $style = $(style)
              .appendTo($head)
            ;
            module.debug('Adding sizing css to head', $style);
          }
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $context  = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher   = $context.children(selector.pusher);
          $fixed    = $context.children(selector.fixed);
          module.clear.cache();
        },

        refreshSidebars: function() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
        },

        repaint: function() {
          module.verbose('Forcing repaint event');
          element.style.display = 'none';
          var ignored = element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display = '';
        },

        setup: {
          cache: function() {
            module.cache = {
              width  : $module.outerWidth(),
              height : $module.outerHeight(),
              rtl    : ($module.css('direction') == 'rtl')
            };
          },
          layout: function() {
            if( $context.children(selector.pusher).length === 0 ) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context
                .children()
                  .not(selector.omitted)
                  .not($sidebars)
                  .wrapAll($pusher)
              ;
              module.refresh();
            }
            if($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
            }
            module.clear.cache();
            module.set.pushable();
            module.set.direction();
          }
        },

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle
              .on('click' + eventNamespace, event)
            ;
          }
          else {
            module.error(error.notFound, selector);
          }
        },

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.hidden()) {
            module.refreshSidebars();
            if(settings.overlay)  {
              module.error(error.overlay);
              settings.transition = 'overlay';
            }
            module.refresh();
            if(module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if(settings.exclusive) {
                // if not overlay queue animation after hide
                if(settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
                }
                else {
                  module.hideOthers();
                }
              }
              else {
                settings.transition = 'overlay';
              }
            }
            module.pushPage(function() {
              callback.call(element);
              settings.onShow.call(element);
            });
            settings.onChange.call(element);
            settings.onVisible.call(element);
          }
          else {
            module.debug('Sidebar is already visible');
          }
        },

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            module.pullPage(function() {
              callback.call(element);
              settings.onHidden.call(element);
            });
            settings.onChange.call(element);
            settings.onHide.call(element);
          }
        },

        othersAnimating: function() {
          return ($sidebars.not($module).filter('.' + className.animating).length > 0);
        },
        othersVisible: function() {
          return ($sidebars.not($module).filter('.' + className.visible).length > 0);
        },
        othersActive: function() {
          return(module.othersVisible() || module.othersAnimating());
        },

        hideOthers: function(callback) {
          var
            $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
            sidebarCount   = $otherSidebars.length,
            callbackCount  = 0
          ;
          callback = callback || function(){};
          $otherSidebars
            .sidebar('hide', function() {
              callbackCount++;
              if(callbackCount == sidebarCount) {
                callback();
              }
            })
          ;
        },

        toggle: function() {
          module.verbose('Determining toggled direction');
          if(module.is.hidden()) {
            module.show();
          }
          else {
            module.hide();
          }
        },

        pushPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition === 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            dim,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          if(settings.transition == 'scale down') {
            module.scrollToTop();
          }
          module.set.transition(transition);
          module.repaint();
          animate = function() {
            module.bind.clickaway();
            module.add.inlineCSS();
            module.set.animating();
            module.set.visible();
          };
          dim = function() {
            module.set.dimmed();
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
          if(settings.dimPage && !module.othersVisible()) {
            requestAnimationFrame(dim);
          }
        },

        pullPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition == 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){}
          ;
          module.verbose('Removing context push state', module.get.direction());

          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function() {
            module.set.transition(transition);
            module.set.animating();
            module.remove.visible();
            if(settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
            }
          };
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.inlineCSS();
              if(transition == 'scale down' || (settings.returnScroll && module.is.mobile()) ) {
                module.scrollBack();
              }
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        scrollToTop: function() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
        },

        scrollBack: function() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
        },

        clear: {
          cache: function() {
            module.verbose('Clearing cached dimensions');
            module.cache = {};
          }
        },

        set: {

          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios
          ios: function() {
            $html.addClass(className.ios);
          },

          // container
          pushed: function() {
            $context.addClass(className.pushed);
          },
          pushable: function() {
            $context.addClass(className.pushable);
          },

          // pusher
          dimmed: function() {
            $pusher.addClass(className.dimmed);
          },

          // sidebar
          active: function() {
            $module.addClass(className.active);
          },
          animating: function() {
            $module.addClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.addClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.addClass(className[direction]);
          },
          visible: function() {
            $module.addClass(className.visible);
          },
          overlay: function() {
            $module.addClass(className.overlay);
          }
        },
        remove: {

          inlineCSS: function() {
            module.debug('Removing inline css styles', $style);
            if($style && $style.length > 0) {
              $style.remove();
            }
          },

          // ios scroll on html not document
          ios: function() {
            $html.removeClass(className.ios);
          },

          // context
          pushed: function() {
            $context.removeClass(className.pushed);
          },
          pushable: function() {
            $context.removeClass(className.pushable);
          },

          // sidebar
          active: function() {
            $module.removeClass(className.active);
          },
          animating: function() {
            $module.removeClass(className.animating);
          },
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.removeClass(transition);
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.removeClass(className[direction]);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          overlay: function() {
            $module.removeClass(className.overlay);
          }
        },

        get: {
          direction: function() {
            if($module.hasClass(className.top)) {
              return className.top;
            }
            else if($module.hasClass(className.right)) {
              return className.right;
            }
            else if($module.hasClass(className.bottom)) {
              return className.bottom;
            }
            return className.left;
          },
          transition: function() {
            var
              direction = module.get.direction(),
              transition
            ;
            transition = ( module.is.mobile() )
              ? (settings.mobileTransition == 'auto')
                ? settings.defaultTransition.mobile[direction]
                : settings.mobileTransition
              : (settings.transition == 'auto')
                ? settings.defaultTransition.computer[direction]
                : settings.transition
            ;
            module.verbose('Determined transition', transition);
            return transition;
          },
          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
              },
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
              }
            }
          }
        },

        is: {

          ie: function() {
            var
              isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),
              isIE   = ('ActiveXObject' in window)
            ;
            return (isIE11 || isIE);
          },

          ios: function() {
            var
              userAgent      = navigator.userAgent,
              isIOS          = userAgent.match(regExp.ios),
              isMobileChrome = userAgent.match(regExp.mobileChrome)
            ;
            if(isIOS && !isMobileChrome) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
            }
            else {
              return false;
            }
          },
          mobile: function() {
            var
              userAgent    = navigator.userAgent,
              isMobile     = userAgent.match(regExp.mobile)
            ;
            if(isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
            }
            else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
            }
          },
          hidden: function() {
            return !module.is.visible();
          },
          visible: function() {
            return $module.hasClass(className.visible);
          },
          // alias
          open: function() {
            return module.is.visible();
          },
          closed: function() {
            return module.is.hidden();
          },
          vertical: function() {
            return $module.hasClass(className.top);
          },
          animating: function() {
            return $context.hasClass(className.animating);
          },
          rtl: function () {
            if(module.cache.rtl === undefined) {
              module.cache.rtl = ($module.css('direction') == 'rtl');
            }
            return module.cache.rtl;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      }
    ;

    if(methodInvoked) {
      if(instance === undefined) {
        module.initialize();
      }
      module.invoke(query);
    }
    else {
      if(instance !== undefined) {
        module.invoke('destroy');
      }
      module.initialize();
    }
  });

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sidebar.settings = {

  name              : 'Sidebar',
  namespace         : 'sidebar',

  debug             : false,
  verbose           : false,
  performance       : true,

  transition        : 'auto',
  mobileTransition  : 'auto',

  defaultTransition : {
    computer: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    },
    mobile: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
    }
  },

  context           : 'body',
  exclusive         : false,
  closable          : true,
  dimPage           : true,
  scrollLock        : false,
  returnScroll      : false,
  delaySetup        : false,

  duration          : 500,

  onChange          : function(){},
  onShow            : function(){},
  onHide            : function(){},

  onHidden          : function(){},
  onVisible         : function(){},

  className         : {
    active    : 'active',
    animating : 'animating',
    dimmed    : 'dimmed',
    ios       : 'ios',
    pushable  : 'pushable',
    pushed    : 'pushed',
    right     : 'right',
    top       : 'top',
    left      : 'left',
    bottom    : 'bottom',
    visible   : 'visible'
  },

  selector: {
    fixed   : '.fixed',
    omitted : 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
    pusher  : '.pusher',
    sidebar : '.ui.sidebar'
  },

  regExp: {
    ios          : /(iPad|iPhone|iPod)/g,
    mobileChrome : /(CriOS)/g,
    mobile       : /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
  },

  error   : {
    method       : 'The method you called is not defined.',
    pusher       : 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
    movedSidebar : 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
    overlay      : 'The overlay setting is no longer supported, use animation: overlay',
    notFound     : 'There were no elements that matched the specified selector'
  }

};


})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.sticky = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings              = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.sticky.settings, parameters)
          : $.extend({}, $.fn.sticky.settings),

        className             = settings.className,
        namespace             = settings.namespace,
        error                 = settings.error,

        eventNamespace        = '.' + namespace,
        moduleNamespace       = 'module-' + namespace,

        $module               = $(this),
        $window               = $(window),
        $scroll               = $(settings.scrollContext),
        $container,
        $context,

        selector              = $module.selector || '',
        instance              = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        observer,
        module
      ;

      module      = {

        initialize: function() {

          module.determineContainer();
          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if(settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous instance');
          module.reset();
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load' + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $scroll
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module.removeData(moduleNamespace);
        },

        observeChanges: function() {
          var
            context = $context[0]
          ;
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu', mutations);
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            observer.observe(context, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        determineContainer: function() {
          $container = $module.offsetParent();
        },

        determineContext: function() {
          if(settings.context) {
            $context = $(settings.context);
          }
          else {
            $context = $container;
          }
          if($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
          }
        },

        checkErrors: function() {
          if( module.is.hidden() ) {
            module.error(error.visible, $module);
          }
          if(module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
          }
        },

        bind: {
          events: function() {
            $window
              .on('load' + eventNamespace, module.event.load)
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $scroll
              .off('scroll' + eventNamespace)
              .on('scroll' + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          }
        },

        event: {
          load: function() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
          },
          resize: function() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
          },
          scroll: function() {
            requestAnimationFrame(function() {
              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop() );
            });
          },
          scrollchange: function(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
          }
        },

        refresh: function(hardRefresh) {
          module.reset();
          if(!settings.context) {
            module.determineContext();
          }
          if(hardRefresh) {
            module.determineContainer();
          }
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
        },

        supports: {
          sticky: function() {
            var
              $element = $('<div/>'),
              element = $element[0]
            ;
            $element.addClass(className.supported);
            return($element.css('position').match('sticky'));
          }
        },

        save: {
          lastScroll: function(scroll) {
            module.lastScroll = scroll;
          },
          elementScroll: function(scroll) {
            module.elementScroll = scroll;
          },
          positions: function() {
            var
              window = {
                height: $window.height()
              },
              element = {
                margin: {
                  top    : parseInt($module.css('margin-top'), 10),
                  bottom : parseInt($module.css('margin-bottom'), 10),
                },
                offset : $module.offset(),
                width  : $module.outerWidth(),
                height : $module.outerHeight()
              },
              context = {
                offset        : $context.offset(),
                height        : $context.outerHeight(),
                bottomPadding : parseInt($context.css('padding-bottom'), 10)
              },
              container = {
                height: $container.outerHeight()
              }
            ;
            module.cache = {
              fits : ( element.height < window.height ),
              window: {
                height: window.height
              },
              element: {
                margin : element.margin,
                top    : element.offset.top - element.margin.top,
                left   : element.offset.left,
                width  : element.width,
                height : element.height,
                bottom : element.offset.top + element.height
              },
              context: {
                top           : context.offset.top,
                height        : context.height,
                bottomPadding : context.bottomPadding,
                bottom        : context.offset.top + context.height - context.bottomPadding
              }
            };
            module.set.containerSize();
            module.set.size();
            module.stick();
            module.debug('Caching element positions', module.cache);
          }
        },

        get: {
          direction: function(scroll) {
            var
              direction = 'down'
            ;
            scroll = scroll || $scroll.scrollTop();
            if(module.lastScroll !== undefined) {
              if(module.lastScroll < scroll) {
                direction = 'down';
              }
              else if(module.lastScroll > scroll) {
                direction = 'up';
              }
            }
            return direction;
          },
          scrollChange: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return (module.lastScroll)
              ? (scroll - module.lastScroll)
              : 0
            ;
          },
          currentElementScroll: function() {
            if(module.elementScroll) {
              return module.elementScroll;
            }
            return ( module.is.top() )
              ? Math.abs(parseInt($module.css('top'), 10))    || 0
              : Math.abs(parseInt($module.css('bottom'), 10)) || 0
            ;
          },

          elementScroll: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var
              element        = module.cache.element,
              window         = module.cache.window,
              delta          = module.get.scrollChange(scroll),
              maxScroll      = (element.height - window.height + settings.offset),
              elementScroll  = module.get.currentElementScroll(),
              possibleScroll = (elementScroll + delta)
            ;
            if(module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
            }
            else if(possibleScroll > maxScroll ) {
              elementScroll = maxScroll;
            }
            else {
              elementScroll = possibleScroll;
            }
            return elementScroll;
          }
        },

        remove: {
          lastScroll: function() {
            delete module.lastScroll;
          },
          elementScroll: function(scroll) {
            delete module.elementScroll;
          },
          offset: function() {
            $module.css('margin-top', '');
          }
        },

        set: {
          offset: function() {
            module.verbose('Setting offset on element', settings.offset);
            $module
              .css('margin-top', settings.offset)
            ;
          },
          containerSize: function() {
            var
              tagName = $container.get(0).tagName
            ;
            if(tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              module.determineContainer();
            }
            else {
              if( Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
                });
              }
            }
          },
          minimumSize: function() {
            var
              element   = module.cache.element
            ;
            $container
              .css('min-height', element.height)
            ;
          },
          scroll: function(scroll) {
            module.debug('Setting scroll on element', scroll);
            if(module.elementScroll == scroll) {
              return;
            }
            if( module.is.top() ) {
              $module
                .css('bottom', '')
                .css('top', -scroll)
              ;
            }
            if( module.is.bottom() ) {
              $module
                .css('top', '')
                .css('bottom', scroll)
              ;
            }
          },
          size: function() {
            if(module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              $module
                .css({
                  width  : module.cache.element.width,
                  height : module.cache.element.height
                })
              ;
            }
          }
        },

        is: {
          top: function() {
            return $module.hasClass(className.top);
          },
          bottom: function() {
            return $module.hasClass(className.bottom);
          },
          initialPosition: function() {
            return (!module.is.fixed() && !module.is.bound());
          },
          hidden: function() {
            return (!$module.is(':visible'));
          },
          bound: function() {
            return $module.hasClass(className.bound);
          },
          fixed: function() {
            return $module.hasClass(className.fixed);
          }
        },

        stick: function(scroll) {
          var
            cachedPosition = scroll || $scroll.scrollTop(),
            cache          = module.cache,
            fits           = cache.fits,
            element        = cache.element,
            window         = cache.window,
            context        = cache.context,
            offset         = (module.is.bottom() && settings.pushing)
              ? settings.bottomOffset
              : settings.offset,
            scroll         = {
              top    : cachedPosition + offset,
              bottom : cachedPosition + offset + window.height
            },
            direction      = module.get.direction(scroll.top),
            elementScroll  = (fits)
              ? 0
              : module.get.elementScroll(scroll.top),

            // shorthand
            doesntFit      = !fits,
            elementVisible = (element.height !== 0)
          ;

          if(elementVisible) {

            if( module.is.initialPosition() ) {
              if(scroll.top > context.bottom) {
                module.debug('Element bottom of container');
                module.bindBottom();
              }
              else if(scroll.top > element.top) {
                module.debug('Element passed, fixing element to page');
                module.fixTop();
              }
            }
            else if( module.is.fixed() ) {

              // currently fixed top
              if( module.is.top() ) {
                if( scroll.top < element.top ) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
                }
                else if( (element.height + scroll.top - elementScroll) > context.bottom ) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }

              // currently fixed bottom
              else if(module.is.bottom() ) {

                // top edge
                if( (scroll.bottom - element.height) < element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
                }
                // bottom edge
                else if(scroll.bottom > context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                }

              }
            }
            else if( module.is.bottom() ) {
              if(settings.pushing) {
                if(module.is.bound() && scroll.bottom < context.bottom ) {
                  module.debug('Fixing bottom attached element to bottom of browser.');
                  module.fixBottom();
                }
              }
              else {
                if(module.is.bound() && (scroll.top < context.bottom - element.height) ) {
                  module.debug('Fixing bottom attached element to top of browser.');
                  module.fixTop();
                }
              }
            }
          }

          // save current scroll for next run
          module.save.lastScroll(scroll.top);
          module.save.elementScroll(elementScroll);
        },

        bindTop: function() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : '',
              marginBottom : ''
            })
            .removeClass(className.fixed)
            .removeClass(className.bottom)
            .addClass(className.bound)
            .addClass(className.top)
          ;
          settings.onTop.call(element);
          settings.onUnstick.call(element);
        },
        bindBottom: function() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : '',
              marginBottom : module.cache.context.bottomPadding
            })
            .removeClass(className.fixed)
            .removeClass(className.top)
            .addClass(className.bound)
            .addClass(className.bottom)
          ;
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
        },

        setInitialPosition: function() {
          module.unfix();
          module.unbind();
        },


        fixTop: function() {
          module.debug('Fixing element to top of page');
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
            })
            .removeClass(className.bound)
            .removeClass(className.bottom)
            .addClass(className.fixed)
            .addClass(className.top)
          ;
          settings.onStick.call(element);
        },

        fixBottom: function() {
          module.debug('Sticking element to bottom of page');
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
            })
            .removeClass(className.bound)
            .removeClass(className.top)
            .addClass(className.fixed)
            .addClass(className.bottom)
          ;
          settings.onStick.call(element);
        },

        unbind: function() {
          module.debug('Removing absolute position on element');
          module.remove.offset();
          $module
            .removeClass(className.bound)
            .removeClass(className.top)
            .removeClass(className.bottom)
          ;
        },

        unfix: function() {
          module.debug('Removing fixed position on element');
          module.remove.offset();
          $module
            .removeClass(className.fixed)
            .removeClass(className.top)
            .removeClass(className.bottom)
          ;
          settings.onUnstick.call(element);
        },

        reset: function() {
          module.debug('Reseting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
          module.remove.lastScroll();
        },

        resetCSS: function() {
          $module
            .css({
              width  : '',
              height : ''
            })
          ;
          $container
            .css({
              height: ''
            })
          ;
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.sticky.settings = {

  name           : 'Sticky',
  namespace      : 'sticky',

  debug          : false,
  verbose        : true,
  performance    : true,

  // whether to stick in the opposite direction on scroll up
  pushing        : false,

  context        : false,

  // Context to watch scroll events
  scrollContext  : window,

  // Offset to adjust scroll
  offset         : 0,

  // Offset to adjust scroll when attached to bottom of screen
  bottomOffset   : 0,

  jitter         : 5, // will only set container height if difference between context and container is larger than this number

  // Whether to automatically observe changes with Mutation Observers
  observeChanges : false,

  // Called when position is recalculated
  onReposition   : function(){},

  // Called on each scroll
  onScroll       : function(){},

  // Called when element is stuck to viewport
  onStick        : function(){},

  // Called when element is unstuck from viewport
  onUnstick      : function(){},

  // Called when element reaches top of context
  onTop          : function(){},

  // Called when element reaches bottom of context
  onBottom       : function(){},

  error         : {
    container      : 'Sticky element must be inside a relative container',
    visible        : 'Element is hidden, you must call refresh after element becomes visible',
    method         : 'The method you called is not defined.',
    invalidContext : 'Context specified does not exist',
    elementSize    : 'Sticky element is larger than its container, cannot create sticky.'
  },

  className : {
    bound     : 'bound',
    fixed     : 'fixed',
    supported : 'native',
    top       : 'top',
    bottom    : 'bottom'
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ($, window, document, undefined) {

"use strict";

$.fn.tab = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),

    moduleSelector  = $allModules.selector || '',
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    initializedHistory = false,
    returnedValue
  ;

  $allModules
    .each(function() {
      var

        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.tab.settings, parameters)
          : $.extend({}, $.fn.tab.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + settings.namespace,
        moduleNamespace = 'module-' + settings.namespace,

        $module         = $(this),
        $context,
        $tabs,

        cache           = {},
        firstLoad       = true,
        recursionDepth  = 0,
        element         = this,
        instance        = $module.data(moduleNamespace),

        activeTabPath,
        parameterArray,
        module,

        historyEvent

      ;

      module = {

        initialize: function() {
          module.debug('Initializing tab menu item', $module);
          module.fix.callbacks();
          module.determineTabs();

          module.debug('Determining tabs', settings.context, $tabs);
          // set up automatic routing
          if(settings.auto) {
            module.set.auto();
          }
          module.bind.events();

          if(settings.history && !initializedHistory) {
            module.initializeHistory();
            initializedHistory = true;
          }

          module.instantiate();
        },

        instantiate: function () {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.debug('Destroying tabs', $module);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        bind: {
          events: function() {
            // if using $.tab dont add events
            if( !$.isWindow( element ) ) {
              module.debug('Attaching tab activation events to element', $module);
              $module
                .on('click' + eventNamespace, module.event.click)
              ;
            }
          }
        },

        determineTabs: function() {
          var
            $reference
          ;

          // determine tab context
          if(settings.context === 'parent') {
            if($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element as parent', $reference);
            }
            else {
              $reference = $module;
            }
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
          }
          else if(settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
          }
          else {
            $context = $('body');
          }
          // find tabs
          if(settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
          }
          else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
          }
        },

        fix: {
          callbacks: function() {
            if( $.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit) ) {
              if(parameters.onTabLoad) {
                parameters.onLoad = parameters.onTabLoad;
                delete parameters.onTabLoad;
                module.error(error.legacyLoad, parameters.onLoad);
              }
              if(parameters.onTabInit) {
                parameters.onFirstLoad = parameters.onTabInit;
                delete parameters.onTabInit;
                module.error(error.legacyInit, parameters.onFirstLoad);
              }
              settings = $.extend(true, {}, $.fn.tab.settings, parameters);
            }
          }
        },

        initializeHistory: function() {
          module.debug('Initializing page state');
          if( $.address === undefined ) {
            module.error(error.state);
            return false;
          }
          else {
            if(settings.historyType == 'state') {
              module.debug('Using HTML5 to manage state');
              if(settings.path !== false) {
                $.address
                  .history(true)
                  .state(settings.path)
                ;
              }
              else {
                module.error(error.path);
                return false;
              }
            }
            $.address
              .bind('change', module.event.history.change)
            ;
          }
        },

        event: {
          click: function(event) {
            var
              tabPath = $(this).data(metadata.tab)
            ;
            if(tabPath !== undefined) {
              if(settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
              }
              else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
              }
              event.preventDefault();
            }
            else {
              module.debug('No tab specified');
            }
          },
          history: {
            change: function(event) {
              var
                tabPath   = event.pathNames.join('/') || module.get.initialPath(),
                pageTitle = settings.templates.determineTitle(tabPath) || false
              ;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if(tabPath !== undefined) {
                module.changeTab(tabPath);
              }
              if(pageTitle) {
                $.address.title(pageTitle);
              }
            }
          }
        },

        refresh: function() {
          if(activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
          }
        },

        cache: {

          read: function(cacheKey) {
            return (cacheKey !== undefined)
              ? cache[cacheKey]
              : false
            ;
          },
          add: function(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
          },
          remove: function(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
          }
        },

        set: {
          auto: function() {
            var
              url = (typeof settings.path == 'string')
                ? settings.path.replace(/\/$/, '') + '/{$tab}'
                : '/{$tab}'
            ;
            module.verbose('Setting up automatic tab retrieval from server', url);
            if($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
            }
            else {
              settings.apiSettings = {
                url: url
              };
            }
          },
          loading: function(tabPath) {
            var
              $tab      = module.get.tabElement(tabPath),
              isLoading = $tab.hasClass(className.loading)
            ;
            if(!isLoading) {
              module.verbose('Setting loading state for', $tab);
              $tab
                .addClass(className.loading)
                .siblings($tabs)
                  .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onRequest.call($tab[0], tabPath);
              }
            }
          },
          state: function(state) {
            $.address.value(state);
          }
        },

        changeTab: function(tabPath) {
          var
            pushStateAvailable = (window.history && window.history.pushState),
            shouldIgnoreLoad   = (pushStateAvailable && settings.ignoreFirstLoad && firstLoad),
            remoteContent      = (settings.auto || $.isPlainObject(settings.apiSettings) ),
            // only add default path if not remote content
            pathArray = (remoteContent && !shouldIgnoreLoad)
              ? module.utilities.pathToArray(tabPath)
              : module.get.defaultPathArray(tabPath)
          ;
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function(index, tab) {
            var
              currentPathArray   = pathArray.slice(0, index + 1),
              currentPath        = module.utilities.arrayToPath(currentPathArray),

              isTab              = module.is.tab(currentPath),
              isLastIndex        = (index + 1 == pathArray.length),

              $tab               = module.get.tabElement(currentPath),
              $anchor,
              nextPathArray,
              nextPath,
              isLastTab
            ;
            module.verbose('Looking for tab', tab);
            if(isTab) {
              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath  = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if(isLastIndex) {
                isLastTab = true;
              }
              else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath      = module.utilities.arrayToPath(nextPathArray);
                isLastTab     = ( !module.is.tab(nextPath) );
                if(isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
                }
              }
              if(isLastTab && remoteContent) {
                if(!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.fetch.content(currentPath, tabPath);
                }
                else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                return false;
              }
              else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              }

            }
            else if(tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              $anchor     = $('#' + tabPath + ', a[name="' + tabPath + '"]');
              currentPath = $anchor.closest('[data-tab]').data('tab');
              $tab        = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if($anchor && $anchor.length > 0 && currentPath) {
                module.debug('Anchor link used, opening parent tab', $tab, $anchor);
                if( !$tab.hasClass(className.active) ) {
                  setTimeout(function() {
                    module.scrollTo($anchor);
                  }, 0);
                }
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                return false;
              }
            }
            else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
            }
          });
        },

        scrollTo: function($element) {
          var
            scrollOffset = ($element && $element.length > 0)
              ? $element.offset().top
              : false
          ;
          if(scrollOffset !== false) {
            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);
            $(document).scrollTop(scrollOffset);
          }
        },

        update: {
          content: function(tabPath, html, evaluateScripts) {
            var
              $tab = module.get.tabElement(tabPath),
              tab  = $tab[0]
            ;
            evaluateScripts = (evaluateScripts !== undefined)
              ? evaluateScripts
              : settings.evaluateScripts
            ;
            if(evaluateScripts) {
              module.debug('Updating HTML and evaluating inline scripts', tabPath, html);
              $tab.html(html);
            }
            else {
              module.debug('Updating HTML', tabPath, html);
              tab.innerHTML = html;
            }
          }
        },

        fetch: {

          content: function(tabPath, fullTabPath) {
            var
              $tab        = module.get.tabElement(tabPath),
              apiSettings = {
                dataType  : 'html',
                on        : 'now',
                cache     : 'local',
                onSuccess : function(response) {
                  module.cache.add(fullTabPath, response);
                  module.update.content(tabPath, response);
                  if(tabPath == activeTabPath) {
                    module.debug('Content loaded', tabPath);
                    module.activate.tab(tabPath);
                  }
                  else {
                    module.debug('Content loaded in background', tabPath);
                  }
                  settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                },
                urlData: {
                  tab: fullTabPath
                }
              },
              request         = $tab.api('get request') || false,
              existingRequest = ( request && request.state() === 'pending' ),
              requestSettings,
              cachedContent
            ;

            fullTabPath   = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);


            if(settings.cache && cachedContent) {
              module.activate.tab(tabPath);
              module.debug('Adding cached content', fullTabPath);
              if(settings.evaluateScripts == 'once') {
                module.update.content(tabPath, cachedContent, false);
              }
              else {
                module.update.content(tabPath, cachedContent);
              }
              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
            }
            else if(existingRequest) {
              module.set.loading(tabPath);
              module.debug('Content is already loading', fullTabPath);
            }
            else if($.api !== undefined) {
              requestSettings = $.extend(true, {
                headers: {
                  'X-Remote': true
                }
              }, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              $tab.api(requestSettings);
            }
            else {
              module.error(error.api);
            }
          }
        },

        activate: {
          all: function(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
          },
          tab: function(tabPath) {
            var
              $tab     = module.get.tabElement(tabPath),
              isActive = $tab.hasClass(className.active)
            ;
            module.verbose('Showing tab content for', $tab);
            if(!isActive) {
              $tab
                .addClass(className.active)
                .siblings($tabs)
                  .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onVisible.call($tab[0], tabPath);
              }
            }
          },
          navigation: function(tabPath) {
            var
              $navigation = module.get.navElement(tabPath),
              isActive    = $navigation.hasClass(className.active)
            ;
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            if(!isActive) {
              $navigation
                .addClass(className.active)
                .siblings($allModules)
                  .removeClass(className.active + ' ' + className.loading)
              ;
            }
          }
        },

        deactivate: {
          all: function() {
            module.deactivate.navigation();
            module.deactivate.tabs();
          },
          navigation: function() {
            $allModules
              .removeClass(className.active)
            ;
          },
          tabs: function() {
            $tabs
              .removeClass(className.active + ' ' + className.loading)
            ;
          }
        },

        is: {
          tab: function(tabName) {
            return (tabName !== undefined)
              ? ( module.get.tabElement(tabName).length > 0 )
              : false
            ;
          }
        },

        get: {
          initialPath: function() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
          },
          path: function() {
            return $.address.value();
          },
          // adds default tabs to tab path
          defaultPathArray: function(tabPath) {
            return module.utilities.pathToArray( module.get.defaultPath(tabPath) );
          },
          defaultPath: function(tabPath) {
            var
              $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),
              defaultTab  = $defaultNav.data(metadata.tab) || false
            ;
            if( defaultTab ) {
              module.debug('Found default tab', defaultTab);
              if(recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
              }
              module.error(error.recursion);
            }
            else {
              module.debug('No default tabs found for', tabPath, $tabs);
            }
            recursionDepth = 0;
            return tabPath;
          },
          navElement: function(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
          },
          tabElement: function(tabPath) {
            var
              $fullPathTab,
              $simplePathTab,
              tabPathArray,
              lastTab
            ;
            tabPath        = tabPath || activeTabPath;
            tabPathArray   = module.utilities.pathToArray(tabPath);
            lastTab        = module.utilities.last(tabPathArray);
            $fullPathTab   = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
            return ($fullPathTab.length > 0)
              ? $fullPathTab
              : $simplePathTab
            ;
          },
          tab: function() {
            return activeTabPath;
          }
        },

        utilities: {
          filterArray: function(keepArray, removeArray) {
            return $.grep(keepArray, function(keepValue) {
              return ( $.inArray(keepValue, removeArray) == -1);
            });
          },
          last: function(array) {
            return $.isArray(array)
              ? array[ array.length - 1]
              : false
            ;
          },
          pathToArray: function(pathName) {
            if(pathName === undefined) {
              pathName = activeTabPath;
            }
            return typeof pathName == 'string'
              ? pathName.split('/')
              : [pathName]
            ;
          },
          arrayToPath: function(pathArray) {
            return $.isArray(pathArray)
              ? pathArray.join('/')
              : false
            ;
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;

};

// shortcut for tabbed content with no defined navigation
$.tab = function() {
  $(window).tab.apply(this, arguments);
};

$.fn.tab.settings = {

  name            : 'Tab',
  namespace       : 'tab',

  debug           : false,
  verbose         : false,
  performance     : true,

  auto            : false,  // uses pjax style endpoints fetching content from same url with remote-content headers
  history         : false,  // use browser history
  historyType     : 'hash', // #/ or html5 state
  path            : false,  // base path of url

  context         : false,  // specify a context that tabs must appear inside
  childrenOnly    : false,  // use only tabs that are children of context
  maxDepth        : 25,     // max depth a tab can be nested

  alwaysRefresh   : false,  // load tab content new every tab click
  cache           : true,   // cache the content requests to pull locally
  ignoreFirstLoad : false,  // don't load remote content on first load

  apiSettings     : false,  // settings for api call
  evaluateScripts : 'once', // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content

  onFirstLoad : function(tabPath, parameterArray, historyEvent) {}, // called first time loaded
  onLoad      : function(tabPath, parameterArray, historyEvent) {}, // called on every load
  onVisible   : function(tabPath, parameterArray, historyEvent) {}, // called every time tab visible
  onRequest   : function(tabPath, parameterArray, historyEvent) {}, // called ever time a tab beings loading remote content

  templates    : {
    determineTitle: function(tabArray) {} // returns page title for path
  },

  error: {
    api        : 'You attempted to load content without API module',
    method     : 'The method you called is not defined',
    missingTab : 'Activated tab cannot be found. Tabs are case-sensitive.',
    noContent  : 'The tab you specified is missing a content url.',
    path       : 'History enabled, but no path was specified',
    recursion  : 'Max recursive depth reached',
    legacyInit : 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',
    legacyLoad : 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',
    state      : 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
  },

  metadata : {
    tab    : 'tab',
    loaded : 'loaded',
    promise: 'promise'
  },

  className   : {
    loading : 'loading',
    active  : 'active'
  },

  selector    : {
    tabs : '.ui.tab',
    ui   : '.ui'
  }

};

})( jQuery, window , document );
/*!
 * # Semantic UI 2.0.0 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.transition = function() {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    moduleArguments = arguments,
    query           = moduleArguments[0],
    queryArguments  = [].slice.call(arguments, 1),
    methodInvoked   = (typeof query === 'string'),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); },

    returnedValue
  ;
  $allModules
    .each(function(index) {
      var
        $module  = $(this),
        element  = this,

        // set at run time
        settings,
        instance,

        error,
        className,
        metadata,
        animationEnd,
        animationName,

        namespace,
        moduleNamespace,
        eventNamespace,
        module
      ;

      module = {

        initialize: function() {

          // get full settings
          settings        = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className       = settings.className;
          error           = settings.error;
          metadata        = settings.metadata;

          // define namespace
          eventNamespace  = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance        = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd    = module.get.animationEndEvent();

          if(methodInvoked) {
            methodInvoked = module.invoke(query);
          }

          // method not invoked, lets run an animation
          if(methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if(settings.interval) {
              module.delay(settings.animate);
            }
            else  {
              module.animate();
            }
            module.instantiate();
          }
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
        },

        forceRepaint: function() {
          module.verbose('Forcing element repaint');
          var
            $parentElement = $module.parent(),
            $nextElement = $module.next()
          ;
          if($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
          }
          else {
            $module.detach().insertBefore($nextElement);
          }
        },

        repaint: function() {
          module.verbose('Repainting element');
          var
            fakeAssignment = element.offsetWidth
          ;
        },

        delay: function(interval) {
          var
            direction = module.get.animationDirection(),
            shouldReverse,
            delay
          ;
          if(!direction) {
            direction = module.can.transition()
              ? module.get.direction()
              : 'static'
            ;
          }
          interval = (interval !== undefined)
            ? interval
            : settings.interval
          ;
          shouldReverse = (settings.reverse == 'auto' && direction == className.outward);
          delay = (shouldReverse || settings.reverse == true)
            ? ($allModules.length - index) * settings.interval
            : index * settings.interval
          ;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
        },

        animate: function(overrideSettings) {
          settings = overrideSettings || settings;
          if(!module.is.supported()) {
            module.error(error.support);
            return false;
          }
          module.debug('Preparing animation', settings.animation);
          if(module.is.animating()) {
            if(settings.queue) {
              if(!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              }
              else {
                module.queue(settings.animation);
              }
              return false;
            }
            else if(!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
            }
            else {
              module.debug('New animation started, completing previous early', settings.animation);
              instance.complete();
            }
          }
          if( module.can.animate() ) {
            module.set.animating(settings.animation);
          }
          else {
            module.error(error.noAnimation, settings.animation, element);
          }
        },

        reset: function() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
        },

        queue: function(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module
            .one(animationEnd + '.queue' + eventNamespace, function() {
              module.queuing = false;
              module.repaint();
              module.animate.apply(this, settings);
            })
          ;
        },

        complete: function (event) {
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if(!module.is.looping()) {
            if( module.is.outward() ) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
            }
            else if( module.is.inward() ) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
            }
            else {
              module.restore.conditions();
            }
          }
        },

        force: {
          visible: function() {
            var
              style          = $module.attr('style'),
              userStyle      = module.get.userStyle(),
              displayType    = module.get.displayType(),
              overrideStyle  = userStyle + 'display: ' + displayType + ' !important;',
              currentDisplay = $module.css('display'),
              emptyStyle     = (style === undefined || style === '')
            ;
            if(currentDisplay !== displayType) {
              module.verbose('Overriding default display to show element', displayType);
              $module
                .attr('style', overrideStyle)
              ;
            }
            else if(emptyStyle) {
              $module.removeAttr('style');
            }
          },
          hidden: function() {
            var
              style          = $module.attr('style'),
              currentDisplay = $module.css('display'),
              emptyStyle     = (style === undefined || style === '')
            ;
            if(currentDisplay !== 'none' && !module.is.hidden()) {
              module.verbose('Overriding default display to hide element');
              $module
                .css('display', 'none')
              ;
            }
            else if(emptyStyle) {
              $module
                .removeAttr('style')
              ;
            }
          }
        },

        has: {
          direction: function(animation) {
            var
              hasDirection = false
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function(index, word){
                if(word === className.inward || word === className.outward) {
                  hasDirection = true;
                }
              });
            }
            return hasDirection;
          },
          inlineDisplay: function() {
            var
              style = $module.attr('style') || ''
            ;
            return $.isArray(style.match(/display.*?;/, ''));
          }
        },

        set: {
          animating: function(animation) {
            var
              animationClass,
              direction
            ;
            // remove previous callbacks
            module.remove.completeCallback();

            // determine exact animation
            animation      = animation || settings.animation;
            animationClass = module.get.animationClass(animation);

            // save animation class in cache to restore class names
            module.save.animation(animationClass);

            // override display if necessary so animation appears visibly
            module.force.visible();

            module.remove.hidden();
            module.remove.direction();

            module.start.animation(animationClass);

          },
          duration: function(animationName, duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            if(duration || duration === 0) {
              module.verbose('Setting animation duration', duration);
              $module
                .css({
                  'animation-duration':  duration
                })
              ;
            }
          },
          direction: function(direction) {
            direction = direction || module.get.direction();
            if(direction == className.inward) {
              module.set.inward();
            }
            else {
              module.set.outward();
            }
          },
          looping: function() {
            module.debug('Transition set to loop');
            $module
              .addClass(className.looping)
            ;
          },
          hidden: function() {
            $module
              .addClass(className.transition)
              .addClass(className.hidden)
            ;
          },
          inward: function() {
            module.debug('Setting direction to inward');
            $module
              .removeClass(className.outward)
              .addClass(className.inward)
            ;
          },
          outward: function() {
            module.debug('Setting direction to outward');
            $module
              .removeClass(className.inward)
              .addClass(className.outward)
            ;
          },
          visible: function() {
            $module
              .addClass(className.transition)
              .addClass(className.visible)
            ;
          }
        },

        start: {
          animation: function(animationClass) {
            animationClass = animationClass || module.get.animationClass();
            module.debug('Starting tween', animationClass);
            $module
              .addClass(animationClass)
              .one(animationEnd + '.complete' + eventNamespace, module.complete)
            ;
            if(settings.useFailSafe) {
              module.add.failSafe();
            }
            module.set.duration(settings.duration);
            settings.onStart.call(this);
          }
        },

        save: {
          animation: function(animation) {
            if(!module.cache) {
              module.cache = {};
            }
            module.cache.animation = animation;
          },
          displayType: function(displayType) {
            if(displayType !== 'none') {
              $module.data(metadata.displayType, displayType);
            }
          },
          transitionExists: function(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
          }
        },

        restore: {
          conditions: function() {
            var
              animation = module.get.currentAnimation()
            ;
            if(animation) {
              $module
                .removeClass(animation)
              ;
              module.verbose('Removing animation class', module.cache);
            }
            module.remove.duration();
          }
        },

        add: {
          failSafe: function() {
            var
              duration = module.get.duration()
            ;
            module.timer = setTimeout(function() {
              $module.triggerHandler(animationEnd);
            }, duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
          }
        },

        remove: {
          animating: function() {
            $module.removeClass(className.animating);
          },
          animationCallbacks: function() {
            module.remove.queueCallback();
            module.remove.completeCallback();
          },
          queueCallback: function() {
            $module.off('.queue' + eventNamespace);
          },
          completeCallback: function() {
            $module.off('.complete' + eventNamespace);
          },
          display: function() {
            $module.css('display', '');
          },
          direction: function() {
            $module
              .removeClass(className.inward)
              .removeClass(className.outward)
            ;
          },
          duration: function() {
            $module
              .css('animation-duration', '')
            ;
          },
          failSafe: function() {
            module.verbose('Removing fail safe timer', module.timer);
            if(module.timer) {
              clearTimeout(module.timer);
            }
          },
          hidden: function() {
            $module.removeClass(className.hidden);
          },
          visible: function() {
            $module.removeClass(className.visible);
          },
          looping: function() {
            module.debug('Transitions are no longer looping');
            if( module.is.looping() ) {
              module.reset();
              $module
                .removeClass(className.looping)
              ;
            }
          },
          transition: function() {
            $module
              .removeClass(className.visible)
              .removeClass(className.hidden)
            ;
          }
        },
        get: {
          settings: function(animation, duration, onComplete) {
            // single settings object
            if(typeof animation == 'object') {
              return $.extend(true, {}, $.fn.transition.settings, animation);
            }
            // all arguments provided
            else if(typeof onComplete == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : onComplete,
                duration   : duration
              });
            }
            // only duration provided
            else if(typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation,
                duration  : duration
              });
            }
            // duration is actually settings object
            else if(typeof duration == 'object') {
              return $.extend({}, $.fn.transition.settings, duration, {
                animation : animation
              });
            }
            // duration is actually callback
            else if(typeof duration == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation  : animation,
                onComplete : duration
              });
            }
            // only animation provided
            else {
              return $.extend({}, $.fn.transition.settings, {
                animation : animation
              });
            }
            return $.fn.transition.settings;
          },
          animationClass: function(animation) {
            var
              animationClass = animation || settings.animation,
              directionClass = (module.can.transition() && !module.has.direction())
                ? module.get.direction() + ' '
                : ''
            ;
            return className.animating + ' '
              + className.transition + ' '
              + directionClass
              + animationClass
            ;
          },
          currentAnimation: function() {
            return module.cache.animation || false;
          },
          currentDirection: function() {
            return module.is.inward()
              ? className.inward
              : className.outward
            ;
          },
          direction: function() {
            return module.is.hidden() || !module.is.visible()
              ? className.inward
              : className.outward
            ;
          },
          animationDirection: function(animation) {
            var
              direction
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              // search animation name for out/in class
              $.each(animation, function(index, word){
                if(word === className.inward) {
                  direction = className.inward;
                }
                else if(word === className.outward) {
                  direction = className.outward;
                }
              });
            }
            // return found direction
            if(direction) {
              return direction;
            }
            return false;
          },
          duration: function(duration) {
            duration = duration || settings.duration;
            if(duration === false) {
              duration = $module.css('animation-duration') || 0;
            }
            return (typeof duration === 'string')
              ? (duration.indexOf('ms') > -1)
                ? parseFloat(duration)
                : parseFloat(duration) * 1000
              : duration
            ;
          },
          displayType: function() {
            if(settings.displayType) {
              return settings.displayType;
            }
            if($module.data(metadata.displayType) === undefined) {
              // create fake element to determine display state
              module.can.transition(true);
            }
            return $module.data(metadata.displayType);
          },
          userStyle: function(style) {
            style = style || $module.attr('style') || '';
            return style.replace(/display.*?;/, '');;
          },
          transitionExists: function(animation) {
            return $.fn.transition.exists[animation];
          },
          animationStartEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationstart',
                'OAnimation'      :'oAnimationStart',
                'MozAnimation'    :'mozAnimationStart',
                'WebkitAnimation' :'webkitAnimationStart'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          },
          animationEndEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationend',
                'OAnimation'      :'oAnimationEnd',
                'MozAnimation'    :'mozAnimationEnd',
                'WebkitAnimation' :'webkitAnimationEnd'
              },
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
              }
            }
            return false;
          }

        },

        can: {
          transition: function(forced) {
            var
              animation         = settings.animation,
              transitionExists  = module.get.transitionExists(animation),
              elementClass,
              tagName,
              $clone,
              currentAnimation,
              inAnimation,
              directionExists,
              displayType
            ;
            if( transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              elementClass = $module.attr('class');
              tagName      = $module.prop('tagName');

              $clone = $('<' + tagName + ' />').addClass( elementClass ).insertAfter($module);
              currentAnimation = $clone
                .addClass(animation)
                .removeClass(className.inward)
                .removeClass(className.outward)
                .addClass(className.animating)
                .addClass(className.transition)
                .css('animationName')
              ;
              inAnimation = $clone
                .addClass(className.inward)
                .css('animationName')
              ;
              displayType = $clone
                .attr('class', elementClass)
                .removeAttr('style')
                .removeClass(className.hidden)
                .removeClass(className.visible)
                .show()
                .css('display')
              ;
              module.verbose('Determining final display state', displayType);
              module.save.displayType(displayType);

              $clone.remove();
              if(currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
              }
              else if(currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
              }
              else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
              }
              module.save.transitionExists(animation, directionExists);
            }
            return (transitionExists !== undefined)
              ? transitionExists
              : directionExists
            ;
          },
          animate: function() {
            // can transition does not return a value if animation does not exist
            return (module.can.transition() !== undefined);
          }
        },

        is: {
          animating: function() {
            return $module.hasClass(className.animating);
          },
          inward: function() {
            return $module.hasClass(className.inward);
          },
          outward: function() {
            return $module.hasClass(className.outward);
          },
          looping: function() {
            return $module.hasClass(className.looping);
          },
          occurring: function(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return ( $module.filter(animation).length > 0 );
          },
          visible: function() {
            return $module.is(':visible');
          },
          hidden: function() {
            return $module.css('visibility') === 'hidden';
          },
          supported: function() {
            return(animationEnd !== false);
          }
        },

        hide: function() {
          module.verbose('Hiding element');
          if( module.is.animating() ) {
            module.reset();
          }
          element.blur(); // IE will trigger focus change if element is not blurred before hiding
          module.remove.display();
          module.remove.visible();
          module.set.hidden();
          settings.onHide.call(this);
          settings.onComplete.call(this);
          module.force.hidden();
          // module.repaint();
        },

        show: function(display) {
          module.verbose('Showing element', display);
          module.remove.hidden();
          module.set.visible();
          settings.onShow.call(this);
          settings.onComplete.call(this);
          module.force.visible();
          // module.repaint();
        },

        toggle: function() {
          if( module.is.visible() ) {
            module.hide();
          }
          else {
            module.show();
          }
        },

        stop: function() {
          module.debug('Stopping current animation');
          $module.triggerHandler(animationEnd);
        },

        stopAll: function() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.triggerHandler(animationEnd);
        },

        clear: {
          queue: function() {
            module.debug('Clearing animation queue');
            module.remove.queueCallback();
          }
        },

        enable: function() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
        },

        disable: function() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        // modified for transition to return invoke success
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }

          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return (found !== undefined)
            ? found
            : false
          ;
        }
      };
      module.initialize();
    })
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

// Records if CSS transition is available
$.fn.transition.exists = {};

$.fn.transition.settings = {

  // module info
  name          : 'Transition',

  // debug content outputted to console
  debug         : false,

  // verbose debug output
  verbose       : false,

  // performance data output
  performance   : true,

  // event namespace
  namespace     : 'transition',

  // delay between animations in group
  interval      : 0,

  // whether group animations should be reversed
  reverse       : 'auto',

  // animation callback event
  onStart       : function() {},
  onComplete    : function() {},
  onShow        : function() {},
  onHide        : function() {},

  // whether timeout should be used to ensure callback fires in cases animationend does not
  useFailSafe   : true,

  // delay in ms for fail safe
  failSafeDelay : 100,

  // whether EXACT animation can occur twice in a row
  allowRepeats  : false,

  // Override final display type on visible
  displayType   : false,

  // animation duration
  animation     : 'fade',
  duration      : false,

  // new animations will occur after previous ones
  queue         : true,

  metadata : {
    displayType: 'display'
  },

  className   : {
    animating  : 'animating',
    disabled   : 'disabled',
    hidden     : 'hidden',
    inward     : 'in',
    loading    : 'loading',
    looping    : 'looping',
    outward    : 'out',
    transition : 'transition',
    visible    : 'visible'
  },

  // possible errors
  error: {
    noAnimation : 'There is no css animation matching the one you specified. Please make sure your css is vendor prefixed, and you have included transition css.',
    repeated    : 'That animation is already occurring, cancelling repeated animation',
    method      : 'The method you called is not defined',
    support     : 'This browser does not support CSS animations'
  }

};


})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.api = $.fn.api = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),
    moduleSelector = $allModules.selector || '',
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.api.settings, parameters)
          : $.extend({}, $.fn.api.settings),

        // internal aliases
        namespace       = settings.namespace,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,
        className       = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // element that creates request
        $module         = $(this),
        $form           = $module.closest(selector.form),

        // context used for state
        $context        = (settings.stateContext)
          ? $(settings.stateContext)
          : $module,

        // request details
        ajaxSettings,
        requestSettings,
        url,
        data,
        requestStartTime,

        // standard module
        element         = this,
        context         = $context[0],
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          if(!methodInvoked) {
            module.bind.events();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
        },

        bind: {
          events: function() {
            var
              triggerEvent = module.get.event()
            ;
            if( triggerEvent ) {
              module.verbose('Attaching API events to element', triggerEvent);
              $module
                .on(triggerEvent + eventNamespace, module.event.trigger)
              ;
            }
            else if(settings.on == 'now') {
              module.debug('Querying API now', triggerEvent);
              module.query();
            }
          }
        },

        read: {
          cachedResponse: function(url) {
            var
              response
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            response = sessionStorage.getItem(url);
            module.debug('Using cached response', url, response);
            if(response !== undefined) {
              try {
               response = JSON.parse(response);
              }
              catch(e) {
                // didnt store object
              }
              return response;
            }
            return false;
          }
        },
        write: {
          cachedResponse: function(url, response) {
            if(response && response === '') {
              module.debug('Response empty, not caching', response);
              return;
            }
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            if( $.isPlainObject(response) ) {
              response = JSON.stringify(response);
            }
            sessionStorage.setItem(url, response);
            module.verbose('Storing cached response for url', url, response);
          }
        },

        query: function() {

          if(module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
          }

          if(module.is.loading()) {
            if(settings.interruptRequests) {
              module.debug('Interrupting previous request');
              module.abort();
            }
            else {
              module.debug('Cancelling request, previous request is still pending');
              return;
            }
          }

          // pass element metadata to url (value, text)
          if(settings.defaultData) {
            $.extend(true, settings.urlData, module.get.defaultData());
          }

          // Add form content
          if(settings.serializeForm) {
            settings.data = module.add.formData(settings.data);
          }

          // call beforesend and get any settings changes
          requestSettings = module.get.settings();

          // check if before send cancelled request
          if(requestSettings === false) {
            module.cancelled = true;
            module.error(error.beforeSend);
            return;
          }
          else {
            module.cancelled = false;
          }

          // get url
          url = module.get.templatedURL();

          if(!url && !module.is.mocked()) {
            module.error(error.missingURL);
            return;
          }

          // replace variables
          url = module.add.urlData( url );

          // missing url parameters
          if( !url && !module.is.mocked()) {
            return;
          }


          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {}, settings, {
            type       : settings.method || settings.type,
            data       : data,
            url        : settings.base + url,
            beforeSend : settings.beforeXHR,
            success    : function() {},
            failure    : function() {},
            complete   : function() {}
          });

          module.debug('Querying URL', ajaxSettings.url);
          module.verbose('Using AJAX settings', ajaxSettings);

          if(settings.cache === 'local' && module.read.cachedResponse(url)) {
            module.debug('Response returned from local cache');
            module.request = module.create.request();
            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);
            return;
          }

          if( !settings.throttle ) {
            module.debug('Sending request', data, ajaxSettings.method);
            module.send.request();
          }
          else {
            if(!settings.throttleFirstRequest && !module.timer) {
              module.debug('Sending request', data, ajaxSettings.method);
              module.send.request();
              module.timer = setTimeout(function(){}, settings.throttle);
            }
            else {
              module.debug('Throttling request', settings.throttle);
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                if(module.timer) {
                  delete module.timer;
                }
                module.debug('Sending throttled request', data, ajaxSettings.method);
                module.send.request();
              }, settings.throttle);
            }
          }

        },

        is: {
          disabled: function() {
            return ($module.filter(selector.disabled).length > 0);
          },
          form: function() {
            return $module.is('form');
          },
          mocked: function() {
            return (settings.mockResponse || settings.mockResponseAsync);
          },
          input: function() {
            return $module.is('input');
          },
          loading: function() {
            return (module.request && module.request.state() == 'pending');
          },
          abortedRequest: function(xhr) {
            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {
              module.verbose('XHR request determined to be aborted');
              return true;
            }
            else {
              module.verbose('XHR request was not aborted');
              return false;
            }
          },
          validResponse: function(response) {
            if( settings.dataType !== 'json' || !$.isFunction(settings.successTest) ) {
              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);
              return true;
            }
            module.debug('Checking JSON returned success', settings.successTest, response);
            if( settings.successTest(response) ) {
              module.debug('Response passed success test', response);
              return true;
            }
            else {
              module.debug('Response failed success test', response);
              return false;
            }
          }
        },

        was: {
          cancelled: function() {
            return (module.cancelled || false);
          },
          succesful: function() {
            return (module.request && module.request.state() == 'resolved');
          },
          failure: function() {
            return (module.request && module.request.state() == 'rejected');
          },
          complete: function() {
            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );
          }
        },

        add: {
          urlData: function(url, urlData) {
            var
              requiredVariables,
              optionalVariables
            ;
            if(url) {
              requiredVariables = url.match(settings.regExp.required);
              optionalVariables = url.match(settings.regExp.optional);
              urlData           = urlData || settings.urlData;
              if(requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function(index, templatedString) {
                  var
                    // allow legacy {$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(2, templatedString.length - 3)
                      : templatedString.substr(1, templatedString.length - 2),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // remove value
                  if(value === undefined) {
                    module.error(error.requiredParameter, variable, url);
                    url = false;
                    return false;
                  }
                  else {
                    module.verbose('Found required variable', variable, value);
                    url = url.replace(templatedString, value);
                  }
                });
              }
              if(optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function(index, templatedString) {
                  var
                    // allow legacy {/$var} style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(3, templatedString.length - 4)
                      : templatedString.substr(2, templatedString.length - 3),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // optional replacement
                  if(value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                  }
                  else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if(url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                    }
                    else {
                      url = url.replace(templatedString, '');
                    }
                  }
                });
              }
            }
            return url;
          },
          formData: function(data) {
            var
              canSerialize = ($.fn.serializeObject !== undefined),
              formData     = (canSerialize)
                ? $form.serializeObject()
                : $form.serialize(),
              hasOtherData
            ;
            data         = data || settings.data;
            hasOtherData = $.isPlainObject(data);

            if(hasOtherData) {
              if(canSerialize) {
                module.debug('Extending existing data with form data', data, formData);
                data = $.extend(true, {}, data, formData);
              }
              else {
                module.error(error.missingSerialize);
                module.debug('Cant extend data. Replacing data with form data', data, formData);
                data = formData;
              }
            }
            else {
              module.debug('Adding form data', formData);
              data = formData;
            }
            return data;
          }
        },

        send: {
          request: function() {
            module.set.loading();
            module.request = module.create.request();
            if( module.is.mocked() ) {
              module.mockedXHR = module.create.mockedXHR();
            }
            else {
              module.xhr = module.create.xhr();
            }
            settings.onRequest.call(context, module.request, module.xhr);
          }
        },

        event: {
          trigger: function(event) {
            module.query();
            if(event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
            }
          },
          xhr: {
            always: function() {
              // calculate if loading time was below minimum threshold
            },
            done: function(response, textStatus, xhr) {
              var
                context      = this,
                elapsedTime  = (new Date().getTime() - requestStartTime),
                timeLeft     = (settings.loadingDuration - elapsedTime),
                translatedResponse = ( $.isFunction(settings.onResponse) )
                  ? settings.onResponse.call(context, $.extend(true, {}, response))
                  : false
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(translatedResponse) {
                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);
                response = translatedResponse;
              }
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function() {
                if( module.is.validResponse(response) ) {
                  module.request.resolveWith(context, [response]);
                }
                else {
                  module.request.rejectWith(context, [xhr, 'invalid']);
                }
              }, timeLeft);
            },
            fail: function(xhr, status, httpMessage) {
              var
                context     = this,
                elapsedTime = (new Date().getTime() - requestStartTime),
                timeLeft    = (settings.loadingDuration - elapsedTime)
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function() {
                if( module.is.abortedRequest(xhr) ) {
                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);
                }
                else {
                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);
                }
              }, timeLeft);
            }
          },
          request: {
            complete: function(response) {
              module.remove.loading();
              settings.onComplete.call(context, response, $module);
            },
            done: function(response) {
              module.debug('Successful API Response', response);
              if(settings.cache === 'local' && url) {
                module.write.cachedResponse(url, response);
                module.debug('Saving server response locally', module.cache);
              }
              settings.onSuccess.call(context, response, $module);
            },
            fail: function(xhr, status, httpMessage) {
              var
                // pull response from xhr if available
                response = $.isPlainObject(xhr)
                  ? (xhr.responseText)
                  : false,
                errorMessage = ($.isPlainObject(response) && response.error !== undefined)
                  ? response.error // use json error message
                  : (settings.error[status] !== undefined) // use server error message
                    ? settings.error[status]
                    : httpMessage
              ;
              if(status == 'aborted') {
                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);
                settings.onAbort.call(context, status, $module);
              }
              else if(status == 'invalid') {
                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);
              }
              else if(status == 'error')  {

                if(xhr !== undefined) {
                  module.debug('XHR produced a server error', status, httpMessage);
                  // make sure we have an error to display to console
                  if( xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);
                  }
                  settings.onError.call(context, errorMessage, $module);
                }
              }

              if(settings.errorDuration && status !== 'aborted') {
                module.debug('Adding error state');
                module.set.error();
                setTimeout(module.remove.error, settings.errorDuration);
              }
              module.debug('API Request failed', errorMessage, xhr);
              settings.onFailure.call(context, response, $module);
            }
          }
        },

        create: {

          request: function() {
            // api request promise
            return $.Deferred()
              .always(module.event.request.complete)
              .done(module.event.request.done)
              .fail(module.event.request.fail)
            ;
          },

          mockedXHR: function () {
            var
              // xhr does not simulate these properties of xhr but must return them
              textStatus  = false,
              status      = false,
              httpMessage = false,
              asyncCallback,
              response,
              mockedXHR
            ;

            mockedXHR = $.Deferred()
              .always(module.event.xhr.complete)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;

            if(settings.mockResponse) {
              if( $.isFunction(settings.mockResponse) ) {
                module.debug('Using mocked callback returning response', settings.mockResponse);
                response = settings.mockResponse.call(context, settings);
              }
              else {
                module.debug('Using specified response', settings.mockResponse);
                response = settings.mockResponse;
              }
              // simulating response
              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);
            }
            else if( $.isFunction(settings.mockResponseAsync) ) {
              asyncCallback = function(response) {
                module.debug('Async callback returned response', response);

                if(response) {
                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response }]);
                }
                else {
                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);
                }
              };
              module.debug('Using async mocked response', settings.mockResponseAsync);
              settings.mockResponseAsync.call(context, settings, asyncCallback);
            }
            return mockedXHR;
          },

          xhr: function() {
            var
              xhr
            ;
            // ajax request promise
            xhr = $.ajax(ajaxSettings)
              .always(module.event.xhr.always)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;
            module.verbose('Created server request', xhr);
            return xhr;
          }
        },

        set: {
          error: function() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
          },
          loading: function() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
            requestStartTime = new Date().getTime();
          }
        },

        remove: {
          error: function() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
          },
          loading: function() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
          }
        },

        get: {
          request: function() {
            return module.request || false;
          },
          xhr: function() {
            return module.xhr || false;
          },
          settings: function() {
            var
              runSettings
            ;
            runSettings = settings.beforeSend.call(context, settings);
            if(runSettings) {
              if(runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
              }
              if(runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
              }
              if(runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
              }
            }
            if(runSettings === undefined) {
              module.error(error.noReturnedValue);
            }
            return (runSettings !== undefined)
              ? runSettings
              : settings
            ;
          },
          defaultData: function() {
            var
              data = {}
            ;
            if( !$.isWindow(element) ) {
              if( module.is.input() ) {
                data.value = $module.val();
              }
              else if( !module.is.form() ) {

              }
              else {
                data.text = $module.text();
              }
            }
            return data;
          },
          event: function() {
            if( $.isWindow(element) || settings.on == 'now' ) {
              module.debug('API called without element, no events attached');
              return false;
            }
            else if(settings.on == 'auto') {
              if( $module.is('input') ) {
                return (element.oninput !== undefined)
                  ? 'input'
                  : (element.onpropertychange !== undefined)
                    ? 'propertychange'
                    : 'keyup'
                ;
              }
              else if( $module.is('form') ) {
                return 'submit';
              }
              else {
                return 'click';
              }
            }
            else {
              return settings.on;
            }
          },
          templatedURL: function(action) {
            action = action || $module.data(metadata.action) || settings.action || false;
            url    = $module.data(metadata.url) || settings.url || false;
            if(url) {
              module.debug('Using specified url', url);
              return url;
            }
            if(action) {
              module.debug('Looking up url for action', action, settings.api);
              if(settings.api[action] === undefined && !module.is.mocked()) {
                module.error(error.missingAction, settings.action, settings.api);
                return;
              }
              url = settings.api[action];
            }
            else if( module.is.form() ) {
              url = $module.attr('action') || false;
              module.debug('No url or action specified, defaulting to form action', url);
            }
            return url;
          }
        },

        abort: function() {
          var
            xhr = module.get.xhr()
          ;
          if( xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
          }
        },

        // reset state
        reset: function() {
          module.remove.error();
          module.remove.loading();
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.api.settings = {

  name              : 'API',
  namespace         : 'api',

  debug             : true,
  verbose           : false,
  performance       : true,

  // object containing all templates endpoints
  api               : {},

  // whether to cache responses
  cache             : true,

  // whether new requests should abort previous requests
  interruptRequests : true,

  // event binding
  on                : 'auto',

  // context for applying state classes
  stateContext      : false,

  // duration for loading state
  loadingDuration   : 0,

  // duration for error state
  errorDuration     : 2000,

  // API action to use
  action            : false,

  // templated URL to use
  url               : false,

  // base URL to apply to all endpoints
  base              : '',

  // data that will
  urlData           : {},

  // whether to add default data to url data
  defaultData          : true,

  // whether to serialize closest form
  serializeForm        : false,

  // how long to wait before request should occur
  throttle             : 0,

  // whether to throttle first request or only repeated
  throttleFirstRequest : true,

  // standard ajax settings
  method            : 'get',
  data              : {},
  dataType          : 'json',

  // mock response
  mockResponse      : false,
  mockResponseAsync : false,

  // callbacks before request
  beforeSend  : function(settings) { return settings; },
  beforeXHR   : function(xhr) {},
  onRequest   : function(promise, xhr) {},

  // after request
  onResponse  : false, // function(response) { },

  // response was successful, if JSON passed validation
  onSuccess   : function(response, $module) {},

  // request finished without aborting
  onComplete  : function(response, $module) {},

  // failed JSON success test
  onFailure   : function(response, $module) {},

  // server error
  onError     : function(errorMessage, $module) {},

  // request aborted
  onAbort     : function(errorMessage, $module) {},

  successTest : false,

  // errors
  error : {
    beforeSend        : 'The before send function has aborted the request',
    error             : 'There was an error with your request',
    exitConditions    : 'API Request Aborted. Exit conditions met',
    JSONParse         : 'JSON could not be parsed during error handling',
    legacyParameters  : 'You are using legacy API success callback names',
    method            : 'The method you called is not defined',
    missingAction     : 'API action used but no url was defined',
    missingSerialize  : 'jquery-serialize-object is required to add form data to an existing data object',
    missingURL        : 'No URL specified for api event',
    noReturnedValue   : 'The beforeSend callback must return a settings object, beforeSend ignored.',
    noStorage         : 'Caching respopnses locally requires session storage',
    parseError        : 'There was an error parsing your request',
    requiredParameter : 'Missing a required URL parameter: ',
    statusMessage     : 'Server gave an error: ',
    timeout           : 'Your request timed out'
  },

  regExp  : {
    required : /\{\$*[A-z0-9]+\}/g,
    optional : /\{\/\$*[A-z0-9]+\}/g,
  },

  className: {
    loading : 'loading',
    error   : 'error'
  },

  selector: {
    disabled : '.disabled',
    form      : 'form'
  },

  metadata: {
    action  : 'action',
    url     : 'url'
  }
};



})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.state = function(parameters) {
  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    hasTouch        = ('ontouchstart' in document.documentElement),
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.state.settings, parameters)
          : $.extend({}, $.fn.state.settings),

        error           = settings.error,
        metadata        = settings.metadata,
        className       = settings.className,
        namespace       = settings.namespace,
        states          = settings.states,
        text            = settings.text,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if(settings.automatic) {
            module.add.defaults();
          }

          // bind events with delegated events
          if(settings.context && moduleSelector !== '') {
            $(settings.context)
              .on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text)
              .on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text)
              .on(moduleSelector, 'click'      + eventNamespace, module.toggle.state)
            ;
          }
          else {
            $module
              .on('mouseenter' + eventNamespace, module.change.text)
              .on('mouseleave' + eventNamespace, module.reset.text)
              .on('click'      + eventNamespace, module.toggle.state)
            ;
          }
          module.instantiate();
        },

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
        },

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
        },

        add: {
          defaults: function() {
            var
              userStates = parameters && $.isPlainObject(parameters.states)
                ? parameters.states
                : {}
            ;
            $.each(settings.defaults, function(type, typeStates) {
              if( module.is[type] !== undefined && module.is[type]() ) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
              }
            });
          }
        },

        is: {

          active: function() {
            return $module.hasClass(className.active);
          },
          loading: function() {
            return $module.hasClass(className.loading);
          },
          inactive: function() {
            return !( $module.hasClass(className.active) );
          },
          state: function(state) {
            if(className[state] === undefined) {
              return false;
            }
            return $module.hasClass( className[state] );
          },

          enabled: function() {
            return !( $module.is(settings.filter.active) );
          },
          disabled: function() {
            return ( $module.is(settings.filter.active) );
          },
          textEnabled: function() {
            return !( $module.is(settings.filter.text) );
          },

          // definitions for automatic type detection
          button: function() {
            return $module.is('.button:not(a, .submit)');
          },
          input: function() {
            return $module.is('input');
          },
          progress: function() {
            return $module.is('.ui.progress');
          }
        },

        allow: function(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
        },
        disallow: function(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
        },

        allows: function(state) {
          return states[state] || false;
        },

        enable: function() {
          $module.removeClass(className.disabled);
        },

        disable: function() {
          $module.addClass(className.disabled);
        },

        setState: function(state) {
          if(module.allows(state)) {
            $module.addClass( className[state] );
          }
        },

        removeState: function(state) {
          if(module.allows(state)) {
            $module.removeClass( className[state] );
          }
        },

        toggle: {
          state: function() {
            var
              apiRequest,
              requestCancelled
            ;
            if( module.allows('active') && module.is.enabled() ) {
              module.refresh();
              if($.fn.api !== undefined) {
                apiRequest       = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if( requestCancelled ) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                else if(apiRequest) {
                  module.listenTo(apiRequest);
                  return;
                }
              }
              module.change.state();
            }
          }
        },

        listenTo: function(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if(apiRequest) {
            if(text.loading) {
              module.update.text(text.loading);
            }
            $.when(apiRequest)
              .then(function() {
                if(apiRequest.state() == 'resolved') {
                  module.debug('API request succeeded');
                  settings.activateTest   = function(){ return true; };
                  settings.deactivateTest = function(){ return true; };
                }
                else {
                  module.debug('API request failed');
                  settings.activateTest   = function(){ return false; };
                  settings.deactivateTest = function(){ return false; };
                }
                module.change.state();
              })
            ;
          }
        },

        // checks whether active/inactive state can be given
        change: {

          state: function() {
            module.debug('Determining state change direction');
            // inactive to active change
            if( module.is.inactive() ) {
              module.activate();
            }
            else {
              module.deactivate();
            }
            if(settings.sync) {
              module.sync();
            }
            settings.onChange.call(element);
          },

          text: function() {
            if( module.is.textEnabled() ) {
              if(module.is.disabled() ) {
                module.verbose('Changing text to disabled text', text.hover);
                module.update.text(text.disabled);
              }
              else if( module.is.active() ) {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.deactivate) {
                  module.verbose('Changing text to deactivating text', text.deactivate);
                  module.update.text(text.deactivate);
                }
              }
              else {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
                }
                else if(text.activate){
                  module.verbose('Changing text to activating text', text.activate);
                  module.update.text(text.activate);
                }
              }
            }
          }

        },

        activate: function() {
          if( settings.activateTest.call(element) ) {
            module.debug('Setting state to active');
            $module
              .addClass(className.active)
            ;
            module.update.text(text.active);
            settings.onActivate.call(element);
          }
        },

        deactivate: function() {
          if( settings.deactivateTest.call(element) ) {
            module.debug('Setting state to inactive');
            $module
              .removeClass(className.active)
            ;
            module.update.text(text.inactive);
            settings.onDeactivate.call(element);
          }
        },

        sync: function() {
          module.verbose('Syncing other buttons to current state');
          if( module.is.active() ) {
            $allModules
              .not($module)
                .state('activate');
          }
          else {
            $allModules
              .not($module)
                .state('deactivate')
            ;
          }
        },

        get: {
          text: function() {
            return (settings.selector.text)
              ? $module.find(settings.selector.text).text()
              : $module.html()
            ;
          },
          textFor: function(state) {
            return text[state] || false;
          }
        },

        flash: {
          text: function(text, duration, callback) {
            var
              previousText = module.get.text()
            ;
            module.debug('Flashing text message', text, duration);
            text     = text     || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function() {};
            module.update.text(text);
            setTimeout(function(){
              module.update.text(previousText);
              callback.call(element);
            }, duration);
          }
        },

        reset: {
          // on mouseout sets text to previous value
          text: function() {
            var
              activeText   = text.active   || $module.data(metadata.storedText),
              inactiveText = text.inactive || $module.data(metadata.storedText)
            ;
            if( module.is.textEnabled() ) {
              if( module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
              }
              else if(inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
              }
            }
          }
        },

        update: {
          text: function(text) {
            var
              currentText = module.get.text()
            ;
            if(text && text !== currentText) {
              module.debug('Updating text', text);
              if(settings.selector.text) {
                $module
                  .data(metadata.storedText, text)
                  .find(settings.selector.text)
                    .text(text)
                ;
              }
              else {
                $module
                  .data(metadata.storedText, text)
                  .html(text)
                ;
              }
            }
            else {
              module.debug('Text is already set, ignoring update', text);
            }
          }
        },

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.state.settings = {

  // module info
  name           : 'State',

  // debug output
  debug          : false,

  // verbose debug output
  verbose        : false,

  // namespace for events
  namespace      : 'state',

  // debug data includes performance
  performance    : true,

  // callback occurs on state change
  onActivate     : function() {},
  onDeactivate   : function() {},
  onChange       : function() {},

  // state test functions
  activateTest   : function() { return true; },
  deactivateTest : function() { return true; },

  // whether to automatically map default states
  automatic      : true,

  // activate / deactivate changes all elements instantiated at same time
  sync           : false,

  // default flash text duration, used for temporarily changing text of an element
  flashDuration  : 1000,

  // selector filter
  filter     : {
    text   : '.loading, .disabled',
    active : '.disabled'
  },

  context    : false,

  // error
  error: {
    beforeSend : 'The before send function has cancelled state change',
    method     : 'The method you called is not defined.'
  },

  // metadata
  metadata: {
    promise    : 'promise',
    storedText : 'stored-text'
  },

  // change class on state
  className: {
    active   : 'active',
    disabled : 'disabled',
    error    : 'error',
    loading  : 'loading',
    success  : 'success',
    warning  : 'warning'
  },

  selector: {
    // selector for text node
    text: false
  },

  defaults : {
    input: {
      disabled : true,
      loading  : true,
      active   : true
    },
    button: {
      disabled : true,
      loading  : true,
      active   : true,
    },
    progress: {
      active   : true,
      success  : true,
      warning  : true,
      error    : true
    }
  },

  states     : {
    active   : true,
    disabled : true,
    error    : true,
    loading  : true,
    success  : true,
    warning  : true
  },

  text     : {
    disabled   : false,
    flash      : false,
    hover      : false,
    active     : false,
    inactive   : false,
    activate   : false,
    deactivate : false
  }

};



})( jQuery, window , document );

/*!
 * # Semantic UI 2.0.0 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

;(function ( $, window, document, undefined ) {

"use strict";

$.fn.visibility = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {}, $.fn.visibility.settings, parameters)
          : $.extend({}, $.fn.visibility.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,
        metadata        = settings.metadata,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),

        $module         = $(this),
        $context        = $(settings.context),

        $placeholder,

        selector        = $module.selector || '',
        instance        = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); },

        element         = this,
        disabled        = false,

        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', settings);

          module.setup.cache();

          if( module.should.trackChanges() ) {

            if(settings.type == 'image') {
              module.setup.image();
            }
            if(settings.type == 'fixed') {
              module.setup.fixed();
            }

            if(settings.observeChanges) {
              module.observeChanges();
            }
            module.bind.events();
          }

          module.save.position();
          if( !module.is.visible() ) {
            module.error(error.visible, $module);
          }

          if(settings.initialCheck) {
            module.checkVisibility();
          }
          module.instantiate();
        },

        instantiate: function() {
          module.debug('Storing instance', module);
          $module
            .data(moduleNamespace, module)
          ;
          instance = module;
        },

        destroy: function() {
          module.verbose('Destroying previous module');
          if(observer) {
            observer.disconnect();
          }
          $window
            .off('load'   + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $context
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
        },

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.verbose('DOM tree modified, updating visibility calculations');
              module.timer = setTimeout(function() {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList : true,
              subtree   : true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function() {
            module.verbose('Binding visibility events to scroll and resize');
            if(settings.refreshOnLoad) {
              $window
                .on('load'   + eventNamespace, module.event.load)
              ;
            }
            $window
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $context
              .off('scroll'      + eventNamespace)
              .on('scroll'       + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
          }
        },

        event: {
          resize: function() {
            module.debug('Window resized');
            if(settings.refreshOnResize) {
              requestAnimationFrame(module.refresh);
            }
          },
          load: function() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
          },
          // publishes scrollchange event on one scroll
          scroll: function() {
            if(settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              }, settings.throttle);
            }
            else {
              requestAnimationFrame(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
              });
            }
          },
          // subscribes to scrollchange
          scrollchange: function(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
          },
        },

        precache: function(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
          }
          var
            imagesLength  = images.length,
            loadedCounter = 0,
            cache         = [],
            cacheImage    = document.createElement('img'),
            handleLoad    = function() {
              loadedCounter++;
              if (loadedCounter >= images.length) {
                if ($.isFunction(callback)) {
                  callback();
                }
              }
            }
          ;
          while (imagesLength--) {
            cacheImage         = document.createElement('img');
            cacheImage.onload  = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src     = images[imagesLength];
            cache.push(cacheImage);
          }
        },

        enableCallbacks: function() {
          module.debug('Allowing callbacks to occur');
          disabled = false;
        },

        disableCallbacks: function() {
          module.debug('Disabling all callbacks temporarily');
          disabled = true;
        },

        should: {
          trackChanges: function() {
            if(methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
            }
            module.debug('Callbacks being attached');
            return true;
          }
        },

        setup: {
          cache: function() {
            module.cache = {
              occurred : {},
              screen   : {},
              element  : {},
            };
          },
          image: function() {
            var
              src = $module.data(metadata.src)
            ;
            if(src) {
              module.verbose('Lazy loading image', src);
              settings.once           = true;
              settings.observeChanges = false;

              // show when top visible
              settings.onOnScreen = function() {
                module.debug('Image on screen', element);
                module.precache(src, function() {
                  module.set.image(src);
                });
              };
            }
          },
          fixed: function() {
            module.debug('Setting up fixed');
            settings.once           = false;
            settings.observeChanges = false;
            settings.initialCheck   = true;
            settings.refreshOnLoad  = true;
            if(!parameters.transition) {
              settings.transition = false;
            }
            module.create.placeholder();
            module.debug('Added placeholder', $placeholder);
            settings.onTopPassed = function() {
              module.debug('Element passed, adding fixed position', $module);
              module.show.placeholder();
              module.set.fixed();
              if(settings.transition) {
                if($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                }
              }
            };
            settings.onTopPassedReverse = function() {
              module.debug('Element returned to position, removing fixed', $module);
              module.hide.placeholder();
              module.remove.fixed();
            };
          }
        },

        create: {
          placeholder: function() {
            module.verbose('Creating fixed position placeholder');
            $placeholder = $module
              .clone(false)
              .css('display', 'none')
              .addClass(className.placeholder)
              .insertAfter($module)
            ;
          }
        },

        show: {
          placeholder: function() {
            module.verbose('Showing placeholder');
            $placeholder
              .css('display', 'block')
              .css('visibility', 'hidden')
            ;
          }
        },
        hide: {
          placeholder: function() {
            module.verbose('Hiding placeholder');
            $placeholder
              .css('display', 'none')
              .css('visibility', '')
            ;
          }
        },

        set: {
          fixed: function() {
            module.verbose('Setting element to fixed position');
            $module
              .addClass(className.fixed)
              .css({
                position : 'fixed',
                top      : settings.offset + 'px',
                left     : 'auto',
                zIndex   : '1'
              })
            ;
          },
          image: function(src) {
            $module
              .attr('src', src)
            ;
            if(settings.transition) {
              if( $.fn.transition !== undefined ) {
                $module.transition(settings.transition, settings.duration);
              }
              else {
                $module.fadeIn(settings.duration);
              }
            }
            else {
              $module.show();
            }
          }
        },

        is: {
          onScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.onScreen;
          },
          offScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.offScreen;
          },
          visible: function() {
            if(module.cache && module.cache.element) {
              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);
            }
            return false;
          }
        },

        refresh: function() {
          module.debug('Refreshing constants (width/height)');
          if(settings.type == 'fixed') {
            module.remove.fixed();
            module.remove.occurred();
          }
          module.reset();
          module.save.position();
          if(settings.checkOnRefresh) {
            module.checkVisibility();
          }
          settings.onRefresh.call(element);
        },

        reset: function() {
          module.verbose('Reseting all cached values');
          if( $.isPlainObject(module.cache) ) {
            module.cache.screen = {};
            module.cache.element = {};
          }
        },

        checkVisibility: function(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if( !disabled && module.is.visible() ) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.onScreen();
            module.offScreen();
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if(settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
            }
          }
        },

        passed: function(amount, newCallback) {
          var
            calculations   = module.get.elementCalculations(),
            amountInPixels
          ;
          // assign callback
          if(amount && newCallback) {
            settings.onPassed[amount] = newCallback;
          }
          else if(amount !== undefined) {
            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);
          }
          else if(calculations.passing) {
            $.each(settings.onPassed, function(amount, callback) {
              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
              }
              else if(!settings.once) {
                module.remove.occurred(callback);
              }
            });
          }
        },

        onScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOnScreen,
            callbackName = 'onScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for onScreen', newCallback);
            settings.onOnScreen = newCallback;
          }
          if(calculations.onScreen) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.onOnScreen;
          }
        },

        offScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOffScreen,
            callbackName = 'offScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for offScreen', newCallback);
            settings.onOffScreen = newCallback;
          }
          if(calculations.offScreen) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.onOffScreen;
          }
        },

        passing: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassing,
            callbackName = 'passing'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
          }
          if(calculations.passing) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return calculations.passing;
          }
        },


        topVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisible,
            callbackName = 'topVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
          }
          if(calculations.topVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topVisible;
          }
        },

        bottomVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisible,
            callbackName = 'bottomVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
          }
          if(calculations.bottomVisible) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomVisible;
          }
        },

        topPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassed,
            callbackName = 'topPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
          }
          if(calculations.topPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.topPassed;
          }
        },

        bottomPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassed,
            callbackName = 'bottomPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
          }
          if(calculations.bottomPassed) {
            module.execute(callback, callbackName);
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return calculations.bottomPassed;
          }
        },

        passingReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassingReverse,
            callbackName = 'passingReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
          }
          if(!calculations.passing) {
            if(module.get.occurred('passing')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback !== undefined) {
            return !calculations.passing;
          }
        },


        topVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisibleReverse,
            callbackName = 'topVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
          }
          if(!calculations.topVisible) {
            if(module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.topVisible;
          }
        },

        bottomVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisibleReverse,
            callbackName = 'bottomVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
          }
          if(!calculations.bottomVisible) {
            if(module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomVisible;
          }
        },

        topPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassedReverse,
            callbackName = 'topPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
          }
          if(!calculations.topPassed) {
            if(module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.onTopPassed;
          }
        },

        bottomPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassedReverse,
            callbackName = 'bottomPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
          }
          if(!calculations.bottomPassed) {
            if(module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
            }
          }
          else if(!settings.once) {
            module.remove.occurred(callbackName);
          }
          if(newCallback === undefined) {
            return !calculations.bottomPassed;
          }
        },

        execute: function(callback, callbackName) {
          var
            calculations = module.get.elementCalculations(),
            screen       = module.get.screenCalculations()
          ;
          callback = callback || false;
          if(callback) {
            if(settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
            else if(!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
          }
          module.save.occurred(callbackName);
        },

        remove: {
          fixed: function() {
            module.debug('Removing fixed position');
            $module
              .removeClass(className.fixed)
              .css({
                position : '',
                top      : '',
                left     : '',
                zIndex   : ''
              })
            ;
          },
          occurred: function(callback) {
            if(callback) {
              var
                occurred = module.cache.occurred
              ;
              if(occurred[callback] !== undefined && occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
              }
            }
            else {
              module.cache.occurred = {};
            }
          }
        },

        save: {
          calculations: function() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
          },
          occurred: function(callback) {
            if(callback) {
              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
              }
            }
          },
          scroll: function(scrollPosition) {
            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
          },
          direction: function() {
            var
              scroll     = module.get.scroll(),
              lastScroll = module.get.lastScroll(),
              direction
            ;
            if(scroll > lastScroll && lastScroll) {
              direction = 'down';
            }
            else if(scroll < lastScroll && lastScroll) {
              direction = 'up';
            }
            else {
              direction = 'static';
            }
            module.cache.direction = direction;
            return module.cache.direction;
          },
          elementPosition: function() {
            var
              element = module.cache.element,
              screen  = module.get.screenSize()
            ;
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits          = (element.height < screen.height);
            element.offset        = $module.offset();
            element.width         = $module.outerWidth();
            element.height        = $module.outerHeight();
            // store
            module.cache.element = element;
            return element;
          },
          elementCalculations: function() {
            var
              screen     = module.get.screenCalculations(),
              element    = module.get.elementPosition()
            ;
            // offset
            if(settings.includeMargin) {
              element.margin        = {};
              element.margin.top    = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top    = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
            }
            else {
              element.top    = element.offset.top;
              element.bottom = element.offset.top + element.height;
            }

            // visibility
            element.topVisible       = (screen.bottom >= element.top);
            element.topPassed        = (screen.top >= element.top);
            element.bottomVisible    = (screen.bottom >= element.bottom);
            element.bottomPassed     = (screen.top >= element.bottom);
            element.pixelsPassed     = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.onScreen  = (element.topVisible && !element.bottomPassed);
            element.passing   = (element.topPassed && !element.bottomPassed);
            element.offScreen = (!element.onScreen);

            // passing calculations
            if(element.passing) {
              element.pixelsPassed     = (screen.top - element.top);
              element.percentagePassed = (screen.top - element.top) / element.height;
            }
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
          },
          screenCalculations: function() {
            var
              scroll = module.get.scroll()
            ;
            module.save.direction();
            module.cache.screen.top    = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
          },
          screenSize: function() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
            };
          },
          position: function() {
            module.save.screenSize();
            module.save.elementPosition();
          }
        },

        get: {
          pixelsPassed: function(amount) {
            var
              element = module.get.elementCalculations()
            ;
            if(amount.search('%') > -1) {
              return ( element.height * (parseInt(amount, 10) / 100) );
            }
            return parseInt(amount, 10);
          },
          occurred: function(callback) {
            return (module.cache.occurred !== undefined)
              ? module.cache.occurred[callback] || false
              : false
            ;
          },
          direction: function() {
            if(module.cache.direction === undefined) {
              module.save.direction();
            }
            return module.cache.direction;
          },
          elementPosition: function() {
            if(module.cache.element === undefined) {
              module.save.elementPosition();
            }
            return module.cache.element;
          },
          elementCalculations: function() {
            if(module.cache.element === undefined) {
              module.save.elementCalculations();
            }
            return module.cache.element;
          },
          screenCalculations: function() {
            if(module.cache.screen === undefined) {
              module.save.screenCalculations();
            }
            return module.cache.screen;
          },
          screenSize: function() {
            if(module.cache.screen === undefined) {
              module.save.screenSize();
            }
            return module.cache.screen;
          },
          scroll: function() {
            if(module.cache.scroll === undefined) {
              module.save.scroll();
            }
            return module.cache.scroll;
          },
          lastScroll: function() {
            if(module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
            }
            return module.cache.screen.top;
          }
        },

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
          }
          else if(value !== undefined) {
            settings[name] = value;
          }
          else {
            return settings[name];
          }
        },
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
          }
          else if(value !== undefined) {
            module[name] = value;
          }
          else {
            return module[name];
          }
        },
        debug: function() {
          if(settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function() {
          if(settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
            }
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
              }
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
              }
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
              }
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
              }
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
              }
              else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
          }
          else if(found !== undefined) {
            response = found;
          }
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
          }
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          }
          else if(response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
        }
        instance.save.scroll();
        instance.save.calculations();
        module.invoke(query);
      }
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    })
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
};

$.fn.visibility.settings = {

  name                   : 'Visibility',
  namespace              : 'visibility',

  debug                  : false,
  verbose                : false,
  performance            : true,

  // whether to use mutation observers to follow changes
  observeChanges         : true,

  // whether to refresh calculations after all page images load
  refreshOnLoad          : true,

  // callback should only occur one time
  once                   : true,

  // callback should fire continuously whe evaluates to true
  continuous             : false,

  // offset to use with scroll top
  offset                 : 0,

  // whether to include margin in elements position
  includeMargin          : false,

  // scroll context for visibility checks
  context                : window,

  // check position immediately on init
  initialCheck           : true,

  // visibility check delay in ms (defaults to animationFrame)
  throttle               : false,

  // special visibility type (image, fixed)
  type                   : false,

  // image only animation settings
  transition             : 'fade in',
  duration               : 1000,

  // array of callbacks for percentage
  onPassed               : {},

  // should call callbacks on refresh event (resize, etc)
  checkOnRefresh         : true,

  // standard callbacks
  onOnScreen             : false,
  onOffScreen            : false,
  onPassing              : false,
  onTopVisible           : false,
  onBottomVisible        : false,
  onTopPassed            : false,
  onBottomPassed         : false,

  // reverse callbacks
  onPassingReverse       : false,
  onTopVisibleReverse    : false,
  onBottomVisibleReverse : false,
  onTopPassedReverse     : false,
  onBottomPassedReverse  : false,

  // utility callbacks
  onUpdate               : false, // disabled by default for performance
  onRefresh              : function(){},

  metadata : {
    src: 'src'
  },

  className: {
    fixed       : 'fixed',
    placeholder : 'placeholder'
  },

  error : {
    method  : 'The method you called is not defined.',
    visible : 'Element is hidden, you must call refresh after element becomes visible'
  }

};

})( jQuery, window , document );
require.register("web/static/css/components/accordion", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.accordion = function (parameters) {
    var $allModules = $(this),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.accordion.settings, parameters) : $.extend({}, $.fn.accordion.settings),
          className = settings.className,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          moduleSelector = $allModules.selector || '',
          $module = $(this),
          $title = $module.find(selector.title),
          $content = $module.find(selector.content),
          element = this,
          instance = $module.data(moduleNamespace),
          observer,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing', $module);
          module.bind.events();
          module.observeChanges();
          module.instantiate();
        },

        instantiate: function instantiate() {
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.debug('Destroying previous instance', $module);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        refresh: function refresh() {
          $title = $module.find(selector.title);
          $content = $module.find(selector.content);
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function events() {
            module.debug('Binding delegated events');
            $module.on(settings.on + eventNamespace, selector.trigger, module.event.click);
          }
        },

        event: {
          click: function click() {
            module.toggle.call(this);
          }
        },

        toggle: function toggle(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isOpen = isActive && !isAnimating,
              isOpening = !isActive && isAnimating;
          module.debug('Toggling visibility of content', $activeTitle);
          if (isOpen || isOpening) {
            if (settings.collapsible) {
              module.close.call($activeTitle);
            } else {
              module.debug('Cannot close accordion content collapsing is disabled');
            }
          } else {
            module.open.call($activeTitle);
          }
        },

        open: function open(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isOpen = isActive || isAnimating;
          if (isOpen) {
            module.debug('Accordion already open, skipping', $activeContent);
            return;
          }
          module.debug('Opening accordion content', $activeTitle);
          settings.onOpening.call($activeContent);
          if (settings.exclusive) {
            module.closeOthers.call($activeTitle);
          }
          $activeTitle.addClass(className.active);
          $activeContent.stop(true, true).addClass(className.animating);
          if (settings.animateChildren) {
            if ($.fn.transition !== undefined && $module.transition('is supported')) {
              $activeContent.children().transition({
                animation: 'fade in',
                queue: false,
                useFailSafe: true,
                debug: settings.debug,
                verbose: settings.verbose,
                duration: settings.duration
              });
            } else {
              $activeContent.children().stop(true, true).animate({
                opacity: 1
              }, settings.duration, module.resetOpacity);
            }
          }
          $activeContent.slideDown(settings.duration, settings.easing, function () {
            $activeContent.removeClass(className.animating).addClass(className.active);
            module.reset.display.call(this);
            settings.onOpen.call(this);
            settings.onChange.call(this);
          });
        },

        close: function close(query) {
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),
              isAnimating = $activeContent.hasClass(className.animating),
              isActive = $activeContent.hasClass(className.active),
              isOpening = !isActive && isAnimating,
              isClosing = isActive && isAnimating;
          if ((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            settings.onClosing.call($activeContent);
            $activeTitle.removeClass(className.active);
            $activeContent.stop(true, true).addClass(className.animating);
            if (settings.animateChildren) {
              if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent.children().transition({
                  animation: 'fade out',
                  queue: false,
                  useFailSafe: true,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration
                });
              } else {
                $activeContent.children().stop(true, true).animate({
                  opacity: 0
                }, settings.duration, module.resetOpacity);
              }
            }
            $activeContent.slideUp(settings.duration, settings.easing, function () {
              $activeContent.removeClass(className.animating).removeClass(className.active);
              module.reset.display.call(this);
              settings.onClose.call(this);
              settings.onChange.call(this);
            });
          }
        },

        closeOthers: function closeOthers(index) {
          var $activeTitle = index !== undefined ? $title.eq(index) : $(this).closest(selector.title),
              $parentTitles = $activeTitle.parents(selector.content).prev(selector.title),
              $activeAccordion = $activeTitle.closest(selector.accordion),
              activeSelector = selector.title + '.' + className.active + ':visible',
              activeContent = selector.content + '.' + className.active + ':visible',
              $openTitles,
              $nestedTitles,
              $openContents;
          if (settings.closeNested) {
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
          } else {
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
          }
          if ($openTitles.length > 0) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles.removeClass(className.active);
            $openContents.removeClass(className.animating).stop(true, true);
            if (settings.animateChildren) {
              if ($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents.children().transition({
                  animation: 'fade out',
                  useFailSafe: true,
                  debug: settings.debug,
                  verbose: settings.verbose,
                  duration: settings.duration
                });
              } else {
                $openContents.children().stop(true, true).animate({
                  opacity: 0
                }, settings.duration, module.resetOpacity);
              }
            }
            $openContents.slideUp(settings.duration, settings.easing, function () {
              $(this).removeClass(className.active);
              module.reset.display.call(this);
            });
          }
        },

        reset: {

          display: function display() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if ($(this).attr('style') === '') {
              $(this).attr('style', '').removeAttr('style');
            }
          },

          opacity: function opacity() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if ($(this).attr('style') === '') {
              $(this).attr('style', '').removeAttr('style');
            }
          }

        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          module.debug('Changing internal', name, value);
          if (value !== undefined) {
            if ($.isPlainObject(name)) {
              $.extend(true, module, name);
            } else {
              module[name] = value;
            }
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.accordion.settings = {

    name: 'Accordion',
    namespace: 'accordion',

    debug: false,
    verbose: false,
    performance: true,

    on: 'click',

    exclusive: true,
    collapsible: true,
    closeNested: false,
    animateChildren: true,

    duration: 350,
    easing: 'easeOutQuad',

    onOpening: function onOpening() {},
    onOpen: function onOpen() {},
    onClosing: function onClosing() {},
    onClose: function onClose() {},
    onChange: function onChange() {},

    error: {
      method: 'The method you called is not defined'
    },

    className: {
      active: 'active',
      animating: 'animating'
    },

    selector: {
      accordion: '.accordion',
      title: '.title',
      trigger: '.title',
      content: '.content'
    }

  };

  // Adds easing
  $.extend($.easing, {
    easeOutQuad: function easeOutQuad(x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    }
  });
})(jQuery, window, document);
});

require.register("web/static/css/components/accordion.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Accordion
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, i) {
  "use strict";e.fn.accordion = function (t) {
    {
      var o,
          a = e(this),
          s = new Date().getTime(),
          r = [],
          c = arguments[0],
          l = "string" == typeof c,
          u = [].slice.call(arguments, 1);n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      };
    }return (a.each(function () {
      var d,
          g,
          m = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.accordion.settings, t) : e.extend({}, e.fn.accordion.settings),
          f = m.className,
          p = m.namespace,
          v = m.selector,
          b = m.error,
          h = "." + p,
          y = "module-" + p,
          C = a.selector || "",
          O = e(this),
          x = O.find(v.title),
          A = O.find(v.content),
          F = this,
          T = O.data(y);g = { initialize: function initialize() {
          g.debug("Initializing", O), g.bind.events(), g.observeChanges(), g.instantiate();
        }, instantiate: function instantiate() {
          T = g, O.data(y, g);
        }, destroy: function destroy() {
          g.debug("Destroying previous instance", O), O.off(h).removeData(y);
        }, refresh: function refresh() {
          x = O.find(v.title), A = O.find(v.content);
        }, observeChanges: function observeChanges() {
          "MutationObserver" in n && (d = new MutationObserver(function (e) {
            g.debug("DOM tree modified, updating selector cache"), g.refresh();
          }), d.observe(F, { childList: !0, subtree: !0 }), g.debug("Setting up mutation observer", d));
        }, bind: { events: function events() {
            g.debug("Binding delegated events"), O.on(m.on + h, v.trigger, g.event.click);
          } }, event: { click: function click() {
            g.toggle.call(this);
          } }, toggle: function toggle(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(A),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = s && !a,
              c = !s && a;g.debug("Toggling visibility of content", t), r || c ? m.collapsible ? g.close.call(t) : g.debug("Cannot close accordion content collapsing is disabled") : g.open.call(t);
        }, open: function open(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(A),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = s || a;return r ? void g.debug("Accordion already open, skipping", o) : (g.debug("Opening accordion content", t), m.onOpening.call(o), m.exclusive && g.closeOthers.call(t), t.addClass(f.active), o.stop(!0, !0).addClass(f.animating), m.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? o.children().transition({ animation: "fade in", queue: !1, useFailSafe: !0, debug: m.debug, verbose: m.verbose, duration: m.duration }) : o.children().stop(!0, !0).animate({ opacity: 1 }, m.duration, g.resetOpacity)), void o.slideDown(m.duration, m.easing, function () {
            o.removeClass(f.animating).addClass(f.active), g.reset.display.call(this), m.onOpen.call(this), m.onChange.call(this);
          }));
        }, close: function close(n) {
          var t = n !== i ? "number" == typeof n ? x.eq(n) : e(n).closest(v.title) : e(this).closest(v.title),
              o = t.next(A),
              a = o.hasClass(f.animating),
              s = o.hasClass(f.active),
              r = !s && a,
              c = s && a;!s && !r || c || (g.debug("Closing accordion content", o), m.onClosing.call(o), t.removeClass(f.active), o.stop(!0, !0).addClass(f.animating), m.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? o.children().transition({ animation: "fade out", queue: !1, useFailSafe: !0, debug: m.debug, verbose: m.verbose, duration: m.duration }) : o.children().stop(!0, !0).animate({ opacity: 0 }, m.duration, g.resetOpacity)), o.slideUp(m.duration, m.easing, function () {
            o.removeClass(f.animating).removeClass(f.active), g.reset.display.call(this), m.onClose.call(this), m.onChange.call(this);
          }));
        }, closeOthers: function closeOthers(n) {
          var t,
              o,
              a,
              s = n !== i ? x.eq(n) : e(this).closest(v.title),
              r = s.parents(v.content).prev(v.title),
              c = s.closest(v.accordion),
              l = v.title + "." + f.active + ":visible",
              u = v.content + "." + f.active + ":visible";m.closeNested ? (t = c.find(l).not(r), a = t.next(A)) : (t = c.find(l).not(r), o = c.find(u).find(l).not(r), t = t.not(o), a = t.next(A)), t.length > 0 && (g.debug("Exclusive enabled, closing other content", t), t.removeClass(f.active), a.removeClass(f.animating).stop(!0, !0), m.animateChildren && (e.fn.transition !== i && O.transition("is supported") ? a.children().transition({ animation: "fade out", useFailSafe: !0, debug: m.debug, verbose: m.verbose, duration: m.duration }) : a.children().stop(!0, !0).animate({ opacity: 0 }, m.duration, g.resetOpacity)), a.slideUp(m.duration, m.easing, function () {
            e(this).removeClass(f.active), g.reset.display.call(this);
          }));
        }, reset: { display: function display() {
            g.verbose("Removing inline display from element", this), e(this).css("display", ""), "" === e(this).attr("style") && e(this).attr("style", "").removeAttr("style");
          }, opacity: function opacity() {
            g.verbose("Removing inline opacity from element", this), e(this).css("opacity", ""), "" === e(this).attr("style") && e(this).attr("style", "").removeAttr("style");
          } }, setting: function setting(n, t) {
          if ((g.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, m, n);else {
            if (t === i) return m[n];m[n] = t;
          }
        }, internal: function internal(n, t) {
          return (g.debug("Changing internal", n, t), t === i ? g[n] : void (e.isPlainObject(n) ? e.extend(!0, g, n) : g[n] = t));
        }, debug: function debug() {
          m.debug && (m.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, m.name + ":"), g.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          m.verbose && m.debug && (m.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, m.name + ":"), g.verbose.apply(console, arguments)));
        }, error: function error() {
          g.error = Function.prototype.bind.call(console.error, console, m.name + ":"), g.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, i;m.performance && (n = new Date().getTime(), i = s || n, t = n - i, s = n, r.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: F, "Execution Time": t })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 500);
          }, display: function display() {
            var n = m.name + ":",
                t = 0;s = !1, clearTimeout(g.performance.timer), e.each(r, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", C && (n += " '" + C + "'"), (console.group !== i || console.table !== i) && r.length > 0 && (console.groupCollapsed(n), console.table ? console.table(r) : e.each(r, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), r = [];
          } }, invoke: function invoke(n, t, a) {
          var s,
              r,
              c,
              l = T;return (t = t || u, a = F || a, "string" == typeof n && l !== i && (n = n.split(/[\. ]/), s = n.length - 1, e.each(n, function (t, o) {
            var a = t != s ? o + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(l[a]) && t != s) l = l[a];else {
              if (l[a] !== i) return (r = l[a], !1);if (!e.isPlainObject(l[o]) || t == s) return l[o] !== i ? (r = l[o], !1) : (g.error(b.method, n), !1);l = l[o];
            }
          })), e.isFunction(r) ? c = r.apply(a, t) : r !== i && (c = r), e.isArray(o) ? o.push(c) : o !== i ? o = [o, c] : c !== i && (o = c), r);
        } }, l ? (T === i && g.initialize(), g.invoke(c)) : (T !== i && T.invoke("destroy"), g.initialize());
    }), o !== i ? o : this);
  }, e.fn.accordion.settings = { name: "Accordion", namespace: "accordion", debug: !1, verbose: !1, performance: !0, on: "click", exclusive: !0, collapsible: !0, closeNested: !1, animateChildren: !0, duration: 350, easing: "easeOutQuad", onOpening: function onOpening() {}, onOpen: function onOpen() {}, onClosing: function onClosing() {}, onClose: function onClose() {}, onChange: function onChange() {}, error: { method: "The method you called is not defined" }, className: { active: "active", animating: "animating" }, selector: { accordion: ".accordion", title: ".title", trigger: ".title", content: ".content" } }, e.extend(e.easing, { easeOutQuad: function easeOutQuad(e, n, t, i, o) {
      return -i * (n /= o) * (n - 2) + t;
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/api", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.api = $.fn.api = function (parameters) {

    var
    // use window context if none specified
    $allModules = $.isFunction(this) ? $(window) : $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.api.settings, parameters) : $.extend({}, $.fn.api.settings),

      // internal aliases
      namespace = _settings.namespace,
          metadata = _settings.metadata,
          selector = _settings.selector,
          error = _settings.error,
          className = _settings.className,

      // define namespaces for modules
      eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,

      // element that creates request
      $module = $(this),
          $form = $module.closest(selector.form),

      // context used for state
      $context = _settings.stateContext ? $(_settings.stateContext) : $module,

      // request details
      ajaxSettings,
          requestSettings,
          url,
          data,
          requestStartTime,

      // standard module
      element = this,
          context = $context[0],
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          if (!methodInvoked) {
            module.bind.events();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        bind: {
          events: function events() {
            var triggerEvent = module.get.event();
            if (triggerEvent) {
              module.verbose('Attaching API events to element', triggerEvent);
              $module.on(triggerEvent + eventNamespace, module.event.trigger);
            } else if (_settings.on == 'now') {
              module.debug('Querying API now', triggerEvent);
              module.query();
            }
          }
        },

        read: {
          cachedResponse: function cachedResponse(url) {
            var response;
            if (window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            response = sessionStorage.getItem(url);
            module.debug('Using cached response', url, response);
            if (response !== undefined) {
              try {
                response = JSON.parse(response);
              } catch (e) {}
              return response;
            }
            return false;
          }
        },
        write: {
          cachedResponse: function cachedResponse(url, response) {
            if (response && response === '') {
              module.debug('Response empty, not caching', response);
              return;
            }
            if (window.Storage === undefined) {
              module.error(error.noStorage);
              return;
            }
            if ($.isPlainObject(response)) {
              response = JSON.stringify(response);
            }
            sessionStorage.setItem(url, response);
            module.verbose('Storing cached response for url', url, response);
          }
        },

        query: function query() {

          if (module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
          }

          if (module.is.loading()) {
            if (_settings.interruptRequests) {
              module.debug('Interrupting previous request');
              module.abort();
            } else {
              module.debug('Cancelling request, previous request is still pending');
              return;
            }
          }

          // pass element metadata to url (value, text)
          if (_settings.defaultData) {
            $.extend(true, _settings.urlData, module.get.defaultData());
          }

          // Add form content
          if (_settings.serializeForm) {
            _settings.data = module.add.formData(_settings.data);
          }

          // call beforesend and get any settings changes
          requestSettings = module.get.settings();

          // check if before send cancelled request
          if (requestSettings === false) {
            module.cancelled = true;
            module.error(error.beforeSend);
            return;
          } else {
            module.cancelled = false;
          }

          // get url
          url = module.get.templatedURL();

          if (!url && !module.is.mocked()) {
            module.error(error.missingURL);
            return;
          }

          // replace variables
          url = module.add.urlData(url);

          // missing url parameters
          if (!url && !module.is.mocked()) {
            return;
          }

          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {}, _settings, {
            type: _settings.method || _settings.type,
            data: data,
            url: _settings.base + url,
            beforeSend: _settings.beforeXHR,
            success: function success() {},
            failure: function failure() {},
            complete: function complete() {}
          });

          module.debug('Querying URL', ajaxSettings.url);
          module.verbose('Using AJAX settings', ajaxSettings);

          if (_settings.cache === 'local' && module.read.cachedResponse(url)) {
            module.debug('Response returned from local cache');
            module.request = module.create.request();
            module.request.resolveWith(context, [module.read.cachedResponse(url)]);
            return;
          }

          if (!_settings.throttle) {
            module.debug('Sending request', data, ajaxSettings.method);
            module.send.request();
          } else {
            if (!_settings.throttleFirstRequest && !module.timer) {
              module.debug('Sending request', data, ajaxSettings.method);
              module.send.request();
              module.timer = setTimeout(function () {}, _settings.throttle);
            } else {
              module.debug('Throttling request', _settings.throttle);
              clearTimeout(module.timer);
              module.timer = setTimeout(function () {
                if (module.timer) {
                  delete module.timer;
                }
                module.debug('Sending throttled request', data, ajaxSettings.method);
                module.send.request();
              }, _settings.throttle);
            }
          }
        },

        is: {
          disabled: function disabled() {
            return $module.filter(selector.disabled).length > 0;
          },
          form: function form() {
            return $module.is('form');
          },
          mocked: function mocked() {
            return _settings.mockResponse || _settings.mockResponseAsync;
          },
          input: function input() {
            return $module.is('input');
          },
          loading: function loading() {
            return module.request && module.request.state() == 'pending';
          },
          abortedRequest: function abortedRequest(xhr) {
            if (xhr && xhr.readyState !== undefined && xhr.readyState === 0) {
              module.verbose('XHR request determined to be aborted');
              return true;
            } else {
              module.verbose('XHR request was not aborted');
              return false;
            }
          },
          validResponse: function validResponse(response) {
            if (_settings.dataType !== 'json' || !$.isFunction(_settings.successTest)) {
              module.verbose('Response is not JSON, skipping validation', _settings.successTest, response);
              return true;
            }
            module.debug('Checking JSON returned success', _settings.successTest, response);
            if (_settings.successTest(response)) {
              module.debug('Response passed success test', response);
              return true;
            } else {
              module.debug('Response failed success test', response);
              return false;
            }
          }
        },

        was: {
          cancelled: function cancelled() {
            return module.cancelled || false;
          },
          succesful: function succesful() {
            return module.request && module.request.state() == 'resolved';
          },
          failure: function failure() {
            return module.request && module.request.state() == 'rejected';
          },
          complete: function complete() {
            return module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected');
          }
        },

        add: {
          urlData: function urlData(url, _urlData) {
            var requiredVariables, optionalVariables;
            if (url) {
              requiredVariables = url.match(_settings.regExp.required);
              optionalVariables = url.match(_settings.regExp.optional);
              _urlData = _urlData || _settings.urlData;
              if (requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function (index, templatedString) {
                  var
                  // allow legacy {$var} style
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(2, templatedString.length - 3) : templatedString.substr(1, templatedString.length - 2),
                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable];
                  // remove value
                  if (value === undefined) {
                    module.error(error.requiredParameter, variable, url);
                    url = false;
                    return false;
                  } else {
                    module.verbose('Found required variable', variable, value);
                    url = url.replace(templatedString, value);
                  }
                });
              }
              if (optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function (index, templatedString) {
                  var
                  // allow legacy {/$var} style
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(3, templatedString.length - 4) : templatedString.substr(2, templatedString.length - 3),
                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable];
                  // optional replacement
                  if (value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                  } else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if (url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                    } else {
                      url = url.replace(templatedString, '');
                    }
                  }
                });
              }
            }
            return url;
          },
          formData: function formData(data) {
            var canSerialize = $.fn.serializeObject !== undefined,
                formData = canSerialize ? $form.serializeObject() : $form.serialize(),
                hasOtherData;
            data = data || _settings.data;
            hasOtherData = $.isPlainObject(data);

            if (hasOtherData) {
              if (canSerialize) {
                module.debug('Extending existing data with form data', data, formData);
                data = $.extend(true, {}, data, formData);
              } else {
                module.error(error.missingSerialize);
                module.debug('Cant extend data. Replacing data with form data', data, formData);
                data = formData;
              }
            } else {
              module.debug('Adding form data', formData);
              data = formData;
            }
            return data;
          }
        },

        send: {
          request: function request() {
            module.set.loading();
            module.request = module.create.request();
            if (module.is.mocked()) {
              module.mockedXHR = module.create.mockedXHR();
            } else {
              module.xhr = module.create.xhr();
            }
            _settings.onRequest.call(context, module.request, module.xhr);
          }
        },

        event: {
          trigger: function trigger(event) {
            module.query();
            if (event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
            }
          },
          xhr: {
            always: function always() {},
            done: function done(response, textStatus, xhr) {
              var context = this,
                  elapsedTime = new Date().getTime() - requestStartTime,
                  timeLeft = _settings.loadingDuration - elapsedTime,
                  translatedResponse = $.isFunction(_settings.onResponse) ? _settings.onResponse.call(context, $.extend(true, {}, response)) : false;
              timeLeft = timeLeft > 0 ? timeLeft : 0;
              if (translatedResponse) {
                module.debug('Modified API response in onResponse callback', _settings.onResponse, translatedResponse, response);
                response = translatedResponse;
              }
              if (timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function () {
                if (module.is.validResponse(response)) {
                  module.request.resolveWith(context, [response]);
                } else {
                  module.request.rejectWith(context, [xhr, 'invalid']);
                }
              }, timeLeft);
            },
            fail: function fail(xhr, status, httpMessage) {
              var context = this,
                  elapsedTime = new Date().getTime() - requestStartTime,
                  timeLeft = _settings.loadingDuration - elapsedTime;
              timeLeft = timeLeft > 0 ? timeLeft : 0;
              if (timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
              }
              setTimeout(function () {
                if (module.is.abortedRequest(xhr)) {
                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);
                } else {
                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);
                }
              }, timeLeft);
            }
          },
          request: {
            complete: function complete(response) {
              module.remove.loading();
              _settings.onComplete.call(context, response, $module);
            },
            done: function done(response) {
              module.debug('Successful API Response', response);
              if (_settings.cache === 'local' && url) {
                module.write.cachedResponse(url, response);
                module.debug('Saving server response locally', module.cache);
              }
              _settings.onSuccess.call(context, response, $module);
            },
            fail: function fail(xhr, status, httpMessage) {
              var
              // pull response from xhr if available
              response = $.isPlainObject(xhr) ? xhr.responseText : false,
                  errorMessage = $.isPlainObject(response) && response.error !== undefined ? response.error // use json error message
              : _settings.error[status] !== undefined ? _settings.error[status] : httpMessage;
              if (status == 'aborted') {
                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);
                _settings.onAbort.call(context, status, $module);
              } else if (status == 'invalid') {
                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);
              } else if (status == 'error') {

                if (xhr !== undefined) {
                  module.debug('XHR produced a server error', status, httpMessage);
                  // make sure we have an error to display to console
                  if (xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);
                  }
                  _settings.onError.call(context, errorMessage, $module);
                }
              }

              if (_settings.errorDuration && status !== 'aborted') {
                module.debug('Adding error state');
                module.set.error();
                setTimeout(module.remove.error, _settings.errorDuration);
              }
              module.debug('API Request failed', errorMessage, xhr);
              _settings.onFailure.call(context, response, $module);
            }
          }
        },

        create: {

          request: function request() {
            // api request promise
            return $.Deferred().always(module.event.request.complete).done(module.event.request.done).fail(module.event.request.fail);
          },

          mockedXHR: function mockedXHR() {
            var
            // xhr does not simulate these properties of xhr but must return them
            textStatus = false,
                status = false,
                httpMessage = false,
                asyncCallback,
                response,
                mockedXHR;

            mockedXHR = $.Deferred().always(module.event.xhr.complete).done(module.event.xhr.done).fail(module.event.xhr.fail);

            if (_settings.mockResponse) {
              if ($.isFunction(_settings.mockResponse)) {
                module.debug('Using mocked callback returning response', _settings.mockResponse);
                response = _settings.mockResponse.call(context, _settings);
              } else {
                module.debug('Using specified response', _settings.mockResponse);
                response = _settings.mockResponse;
              }
              // simulating response
              mockedXHR.resolveWith(context, [response, textStatus, { responseText: response }]);
            } else if ($.isFunction(_settings.mockResponseAsync)) {
              asyncCallback = function (response) {
                module.debug('Async callback returned response', response);

                if (response) {
                  mockedXHR.resolveWith(context, [response, textStatus, { responseText: response }]);
                } else {
                  mockedXHR.rejectWith(context, [{ responseText: response }, status, httpMessage]);
                }
              };
              module.debug('Using async mocked response', _settings.mockResponseAsync);
              _settings.mockResponseAsync.call(context, _settings, asyncCallback);
            }
            return mockedXHR;
          },

          xhr: function xhr() {
            var xhr;
            // ajax request promise
            xhr = $.ajax(ajaxSettings).always(module.event.xhr.always).done(module.event.xhr.done).fail(module.event.xhr.fail);
            module.verbose('Created server request', xhr);
            return xhr;
          }
        },

        set: {
          error: function error() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
          },
          loading: function loading() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
            requestStartTime = new Date().getTime();
          }
        },

        remove: {
          error: function error() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
          },
          loading: function loading() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
          }
        },

        get: {
          request: function request() {
            return module.request || false;
          },
          xhr: function xhr() {
            return module.xhr || false;
          },
          settings: function settings() {
            var runSettings;
            runSettings = _settings.beforeSend.call(context, _settings);
            if (runSettings) {
              if (runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
              }
              if (runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
              }
              if (runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
              }
            }
            if (runSettings === undefined) {
              module.error(error.noReturnedValue);
            }
            return runSettings !== undefined ? runSettings : _settings;
          },
          defaultData: function defaultData() {
            var data = {};
            if (!$.isWindow(element)) {
              if (module.is.input()) {
                data.value = $module.val();
              } else if (!module.is.form()) {} else {
                data.text = $module.text();
              }
            }
            return data;
          },
          event: function event() {
            if ($.isWindow(element) || _settings.on == 'now') {
              module.debug('API called without element, no events attached');
              return false;
            } else if (_settings.on == 'auto') {
              if ($module.is('input')) {
                return element.oninput !== undefined ? 'input' : element.onpropertychange !== undefined ? 'propertychange' : 'keyup';
              } else if ($module.is('form')) {
                return 'submit';
              } else {
                return 'click';
              }
            } else {
              return _settings.on;
            }
          },
          templatedURL: function templatedURL(action) {
            action = action || $module.data(metadata.action) || _settings.action || false;
            url = $module.data(metadata.url) || _settings.url || false;
            if (url) {
              module.debug('Using specified url', url);
              return url;
            }
            if (action) {
              module.debug('Looking up url for action', action, _settings.api);
              if (_settings.api[action] === undefined && !module.is.mocked()) {
                module.error(error.missingAction, _settings.action, _settings.api);
                return;
              }
              url = _settings.api[action];
            } else if (module.is.form()) {
              url = $module.attr('action') || false;
              module.debug('No url or action specified, defaulting to form action', url);
            }
            return url;
          }
        },

        abort: function abort() {
          var xhr = module.get.xhr();
          if (xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
          }
        },

        // reset state
        reset: function reset() {
          module.remove.error();
          module.remove.loading();
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, _settings, name);
          } else if (value !== undefined) {
            _settings[name] = value;
          } else {
            return _settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (_settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (_settings.verbose && _settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (_settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = _settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.api.settings = {

    name: 'API',
    namespace: 'api',

    debug: true,
    verbose: false,
    performance: true,

    // object containing all templates endpoints
    api: {},

    // whether to cache responses
    cache: true,

    // whether new requests should abort previous requests
    interruptRequests: true,

    // event binding
    on: 'auto',

    // context for applying state classes
    stateContext: false,

    // duration for loading state
    loadingDuration: 0,

    // duration for error state
    errorDuration: 2000,

    // API action to use
    action: false,

    // templated URL to use
    url: false,

    // base URL to apply to all endpoints
    base: '',

    // data that will
    urlData: {},

    // whether to add default data to url data
    defaultData: true,

    // whether to serialize closest form
    serializeForm: false,

    // how long to wait before request should occur
    throttle: 0,

    // whether to throttle first request or only repeated
    throttleFirstRequest: true,

    // standard ajax settings
    method: 'get',
    data: {},
    dataType: 'json',

    // mock response
    mockResponse: false,
    mockResponseAsync: false,

    // callbacks before request
    beforeSend: function beforeSend(settings) {
      return settings;
    },
    beforeXHR: function beforeXHR(xhr) {},
    onRequest: function onRequest(promise, xhr) {},

    // after request
    onResponse: false, // function(response) { },

    // response was successful, if JSON passed validation
    onSuccess: function onSuccess(response, $module) {},

    // request finished without aborting
    onComplete: function onComplete(response, $module) {},

    // failed JSON success test
    onFailure: function onFailure(response, $module) {},

    // server error
    onError: function onError(errorMessage, $module) {},

    // request aborted
    onAbort: function onAbort(errorMessage, $module) {},

    successTest: false,

    // errors
    error: {
      beforeSend: 'The before send function has aborted the request',
      error: 'There was an error with your request',
      exitConditions: 'API Request Aborted. Exit conditions met',
      JSONParse: 'JSON could not be parsed during error handling',
      legacyParameters: 'You are using legacy API success callback names',
      method: 'The method you called is not defined',
      missingAction: 'API action used but no url was defined',
      missingSerialize: 'jquery-serialize-object is required to add form data to an existing data object',
      missingURL: 'No URL specified for api event',
      noReturnedValue: 'The beforeSend callback must return a settings object, beforeSend ignored.',
      noStorage: 'Caching respopnses locally requires session storage',
      parseError: 'There was an error parsing your request',
      requiredParameter: 'Missing a required URL parameter: ',
      statusMessage: 'Server gave an error: ',
      timeout: 'Your request timed out'
    },

    regExp: {
      required: /\{\$*[A-z0-9]+\}/g,
      optional: /\{\/\$*[A-z0-9]+\}/g
    },

    className: {
      loading: 'loading',
      error: 'error'
    },

    selector: {
      disabled: '.disabled',
      form: 'form'
    },

    metadata: {
      action: 'action',
      url: 'url'
    }
  };
})(jQuery, window, document);

// didnt store object

// calculate if loading time was below minimum threshold
// use server error message
});

require.register("web/static/css/components/api.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - API
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, r, n) {
  "use strict";e.api = e.fn.api = function (r) {
    var o,
        s = e(e.isFunction(this) ? t : this),
        a = s.selector || "",
        i = new Date().getTime(),
        u = [],
        c = arguments[0],
        d = "string" == typeof c,
        l = [].slice.call(arguments, 1);return (s.each(function () {
      var s,
          g,
          f,
          m,
          p,
          b,
          v = e.isPlainObject(r) ? e.extend(!0, {}, e.fn.api.settings, r) : e.extend({}, e.fn.api.settings),
          h = v.namespace,
          y = v.metadata,
          q = v.selector,
          R = v.error,
          x = v.className,
          k = "." + h,
          A = "module-" + h,
          S = e(this),
          T = S.closest(q.form),
          P = v.stateContext ? e(v.stateContext) : S,
          w = this,
          j = P[0],
          D = S.data(A);b = { initialize: function initialize() {
          d || b.bind.events(), b.instantiate();
        }, instantiate: function instantiate() {
          b.verbose("Storing instance of module", b), D = b, S.data(A, D);
        }, destroy: function destroy() {
          b.verbose("Destroying previous module for", w), S.removeData(A).off(k);
        }, bind: { events: function events() {
            var e = b.get.event();e ? (b.verbose("Attaching API events to element", e), S.on(e + k, b.event.trigger)) : "now" == v.on && (b.debug("Querying API now", e), b.query());
          } }, read: { cachedResponse: function cachedResponse(e) {
            var r;if (t.Storage === n) return void b.error(R.noStorage);if ((r = sessionStorage.getItem(e), b.debug("Using cached response", e, r), r !== n)) {
              try {
                r = JSON.parse(r);
              } catch (o) {}return r;
            }return !1;
          } }, write: { cachedResponse: function cachedResponse(r, o) {
            return o && "" === o ? void b.debug("Response empty, not caching", o) : t.Storage === n ? void b.error(R.noStorage) : (e.isPlainObject(o) && (o = JSON.stringify(o)), sessionStorage.setItem(r, o), void b.verbose("Storing cached response for url", r, o));
          } }, query: function query() {
          if (b.is.disabled()) return void b.debug("Element is disabled API request aborted");if (b.is.loading()) {
            if (!v.interruptRequests) return void b.debug("Cancelling request, previous request is still pending");b.debug("Interrupting previous request"), b.abort();
          }return (v.defaultData && e.extend(!0, v.urlData, b.get.defaultData()), v.serializeForm && (v.data = b.add.formData(v.data)), g = b.get.settings(), g === !1 ? (b.cancelled = !0, void b.error(R.beforeSend)) : (b.cancelled = !1, f = b.get.templatedURL(), f || b.is.mocked() ? (f = b.add.urlData(f), f || b.is.mocked() ? (s = e.extend(!0, {}, v, { type: v.method || v.type, data: m, url: v.base + f, beforeSend: v.beforeXHR, success: function success() {}, failure: function failure() {}, complete: function complete() {} }), b.debug("Querying URL", s.url), b.verbose("Using AJAX settings", s), "local" === v.cache && b.read.cachedResponse(f) ? (b.debug("Response returned from local cache"), b.request = b.create.request(), void b.request.resolveWith(j, [b.read.cachedResponse(f)])) : void (v.throttle ? v.throttleFirstRequest || b.timer ? (b.debug("Throttling request", v.throttle), clearTimeout(b.timer), b.timer = setTimeout(function () {
            b.timer && delete b.timer, b.debug("Sending throttled request", m, s.method), b.send.request();
          }, v.throttle)) : (b.debug("Sending request", m, s.method), b.send.request(), b.timer = setTimeout(function () {}, v.throttle)) : (b.debug("Sending request", m, s.method), b.send.request()))) : void 0) : void b.error(R.missingURL)));
        }, is: { disabled: function disabled() {
            return S.filter(q.disabled).length > 0;
          }, form: function form() {
            return S.is("form");
          }, mocked: function mocked() {
            return v.mockResponse || v.mockResponseAsync;
          }, input: function input() {
            return S.is("input");
          }, loading: function loading() {
            return b.request && "pending" == b.request.state();
          }, abortedRequest: function abortedRequest(e) {
            return e && e.readyState !== n && 0 === e.readyState ? (b.verbose("XHR request determined to be aborted"), !0) : (b.verbose("XHR request was not aborted"), !1);
          }, validResponse: function validResponse(t) {
            return "json" === v.dataType && e.isFunction(v.successTest) ? (b.debug("Checking JSON returned success", v.successTest, t), v.successTest(t) ? (b.debug("Response passed success test", t), !0) : (b.debug("Response failed success test", t), !1)) : (b.verbose("Response is not JSON, skipping validation", v.successTest, t), !0);
          } }, was: { cancelled: function cancelled() {
            return b.cancelled || !1;
          }, succesful: function succesful() {
            return b.request && "resolved" == b.request.state();
          }, failure: function failure() {
            return b.request && "rejected" == b.request.state();
          }, complete: function complete() {
            return b.request && ("resolved" == b.request.state() || "rejected" == b.request.state());
          } }, add: { urlData: function urlData(t, r) {
            var o, s;return (t && (o = t.match(v.regExp.required), s = t.match(v.regExp.optional), r = r || v.urlData, o && (b.debug("Looking for required URL variables", o), e.each(o, function (o, s) {
              var a = -1 !== s.indexOf("$") ? s.substr(2, s.length - 3) : s.substr(1, s.length - 2),
                  i = e.isPlainObject(r) && r[a] !== n ? r[a] : S.data(a) !== n ? S.data(a) : P.data(a) !== n ? P.data(a) : r[a];return i === n ? (b.error(R.requiredParameter, a, t), t = !1, !1) : (b.verbose("Found required variable", a, i), void (t = t.replace(s, i)));
            })), s && (b.debug("Looking for optional URL variables", o), e.each(s, function (o, s) {
              var a = -1 !== s.indexOf("$") ? s.substr(3, s.length - 4) : s.substr(2, s.length - 3),
                  i = e.isPlainObject(r) && r[a] !== n ? r[a] : S.data(a) !== n ? S.data(a) : P.data(a) !== n ? P.data(a) : r[a];i !== n ? (b.verbose("Optional variable Found", a, i), t = t.replace(s, i)) : (b.verbose("Optional variable not found", a), t = -1 !== t.indexOf("/" + s) ? t.replace("/" + s, "") : t.replace(s, ""));
            }))), t);
          }, formData: function formData(t) {
            var r,
                o = e.fn.serializeObject !== n,
                s = o ? T.serializeObject() : T.serialize();return (t = t || v.data, r = e.isPlainObject(t), r ? o ? (b.debug("Extending existing data with form data", t, s), t = e.extend(!0, {}, t, s)) : (b.error(R.missingSerialize), b.debug("Cant extend data. Replacing data with form data", t, s), t = s) : (b.debug("Adding form data", s), t = s), t);
          } }, send: { request: function request() {
            b.set.loading(), b.request = b.create.request(), b.is.mocked() ? b.mockedXHR = b.create.mockedXHR() : b.xhr = b.create.xhr(), v.onRequest.call(j, b.request, b.xhr);
          } }, event: { trigger: function trigger(e) {
            b.query(), ("submit" == e.type || "click" == e.type) && e.preventDefault();
          }, xhr: { always: function always() {}, done: function done(t, r, n) {
              var o = this,
                  s = new Date().getTime() - p,
                  a = v.loadingDuration - s,
                  i = e.isFunction(v.onResponse) ? v.onResponse.call(o, e.extend(!0, {}, t)) : !1;a = a > 0 ? a : 0, i && (b.debug("Modified API response in onResponse callback", v.onResponse, i, t), t = i), a > 0 && b.debug("Response completed early delaying state change by", a), setTimeout(function () {
                b.is.validResponse(t) ? b.request.resolveWith(o, [t]) : b.request.rejectWith(o, [n, "invalid"]);
              }, a);
            }, fail: function fail(e, t, r) {
              var n = this,
                  o = new Date().getTime() - p,
                  s = v.loadingDuration - o;s = s > 0 ? s : 0, s > 0 && b.debug("Response completed early delaying state change by", s), setTimeout(function () {
                b.is.abortedRequest(e) ? b.request.rejectWith(n, [e, "aborted", r]) : b.request.rejectWith(n, [e, "error", t, r]);
              }, s);
            } }, request: { complete: function complete(e) {
              b.remove.loading(), v.onComplete.call(j, e, S);
            }, done: function done(e) {
              b.debug("Successful API Response", e), "local" === v.cache && f && (b.write.cachedResponse(f, e), b.debug("Saving server response locally", b.cache)), v.onSuccess.call(j, e, S);
            }, fail: function fail(t, r, o) {
              var a = e.isPlainObject(t) ? t.responseText : !1,
                  i = e.isPlainObject(a) && a.error !== n ? a.error : v.error[r] !== n ? v.error[r] : o;"aborted" == r ? (b.debug("XHR Aborted (Most likely caused by page navigation or CORS Policy)", r, o), v.onAbort.call(j, r, S)) : "invalid" == r ? b.debug("JSON did not pass success test. A server-side error has most likely occurred", a) : "error" == r && t !== n && (b.debug("XHR produced a server error", r, o), 200 != t.status && o !== n && "" !== o && b.error(R.statusMessage + o, s.url), v.onError.call(j, i, S)), v.errorDuration && "aborted" !== r && (b.debug("Adding error state"), b.set.error(), setTimeout(b.remove.error, v.errorDuration)), b.debug("API Request failed", i, t), v.onFailure.call(j, a, S);
            } } }, create: { request: function request() {
            return e.Deferred().always(b.event.request.complete).done(b.event.request.done).fail(b.event.request.fail);
          }, mockedXHR: function mockedXHR() {
            var t,
                r,
                n,
                o = !1,
                s = !1,
                a = !1;return (n = e.Deferred().always(b.event.xhr.complete).done(b.event.xhr.done).fail(b.event.xhr.fail), v.mockResponse ? (e.isFunction(v.mockResponse) ? (b.debug("Using mocked callback returning response", v.mockResponse), r = v.mockResponse.call(j, v)) : (b.debug("Using specified response", v.mockResponse), r = v.mockResponse), n.resolveWith(j, [r, o, { responseText: r }])) : e.isFunction(v.mockResponseAsync) && (t = function (e) {
              b.debug("Async callback returned response", e), e ? n.resolveWith(j, [e, o, { responseText: e }]) : n.rejectWith(j, [{ responseText: e }, s, a]);
            }, b.debug("Using async mocked response", v.mockResponseAsync), v.mockResponseAsync.call(j, v, t)), n);
          }, xhr: function xhr() {
            var t;return (t = e.ajax(s).always(b.event.xhr.always).done(b.event.xhr.done).fail(b.event.xhr.fail), b.verbose("Created server request", t), t);
          } }, set: { error: function error() {
            b.verbose("Adding error state to element", P), P.addClass(x.error);
          }, loading: function loading() {
            b.verbose("Adding loading state to element", P), P.addClass(x.loading), p = new Date().getTime();
          } }, remove: { error: function error() {
            b.verbose("Removing error state from element", P), P.removeClass(x.error);
          }, loading: function loading() {
            b.verbose("Removing loading state from element", P), P.removeClass(x.loading);
          } }, get: { request: function request() {
            return b.request || !1;
          }, xhr: function xhr() {
            return b.xhr || !1;
          }, settings: function settings() {
            var e;return (e = v.beforeSend.call(j, v), e && (e.success !== n && (b.debug("Legacy success callback detected", e), b.error(R.legacyParameters, e.success), e.onSuccess = e.success), e.failure !== n && (b.debug("Legacy failure callback detected", e), b.error(R.legacyParameters, e.failure), e.onFailure = e.failure), e.complete !== n && (b.debug("Legacy complete callback detected", e), b.error(R.legacyParameters, e.complete), e.onComplete = e.complete)), e === n && b.error(R.noReturnedValue), e !== n ? e : v);
          }, defaultData: function defaultData() {
            var t = {};return (e.isWindow(w) || (b.is.input() ? t.value = S.val() : b.is.form() && (t.text = S.text())), t);
          }, event: function event() {
            return e.isWindow(w) || "now" == v.on ? (b.debug("API called without element, no events attached"), !1) : "auto" == v.on ? S.is("input") ? w.oninput !== n ? "input" : w.onpropertychange !== n ? "propertychange" : "keyup" : S.is("form") ? "submit" : "click" : v.on;
          }, templatedURL: function templatedURL(e) {
            if ((e = e || S.data(y.action) || v.action || !1, f = S.data(y.url) || v.url || !1)) return (b.debug("Using specified url", f), f);if (e) {
              if ((b.debug("Looking up url for action", e, v.api), v.api[e] === n && !b.is.mocked())) return void b.error(R.missingAction, v.action, v.api);f = v.api[e];
            } else b.is.form() && (f = S.attr("action") || !1, b.debug("No url or action specified, defaulting to form action", f));return f;
          } }, abort: function abort() {
          var e = b.get.xhr();e && "resolved" !== e.state() && (b.debug("Cancelling API request"), e.abort());
        }, reset: function reset() {
          b.remove.error(), b.remove.loading();
        }, setting: function setting(t, r) {
          if ((b.debug("Changing setting", t, r), e.isPlainObject(t))) e.extend(!0, v, t);else {
            if (r === n) return v[t];v[t] = r;
          }
        }, internal: function internal(t, r) {
          if (e.isPlainObject(t)) e.extend(!0, b, t);else {
            if (r === n) return b[t];b[t] = r;
          }
        }, debug: function debug() {
          v.debug && (v.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, v.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          v.verbose && v.debug && (v.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, v.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, v.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, r, n;v.performance && (t = new Date().getTime(), n = i || t, r = t - n, i = t, u.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", "Execution Time": r })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 500);
          }, display: function display() {
            var t = v.name + ":",
                r = 0;i = !1, clearTimeout(b.performance.timer), e.each(u, function (e, t) {
              r += t["Execution Time"];
            }), t += " " + r + "ms", a && (t += " '" + a + "'"), (console.group !== n || console.table !== n) && u.length > 0 && (console.groupCollapsed(t), console.table ? console.table(u) : e.each(u, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), u = [];
          } }, invoke: function invoke(t, r, s) {
          var a,
              i,
              u,
              c = D;return (r = r || l, s = w || s, "string" == typeof t && c !== n && (t = t.split(/[\. ]/), a = t.length - 1, e.each(t, function (r, o) {
            var s = r != a ? o + t[r + 1].charAt(0).toUpperCase() + t[r + 1].slice(1) : t;if (e.isPlainObject(c[s]) && r != a) c = c[s];else {
              if (c[s] !== n) return (i = c[s], !1);if (!e.isPlainObject(c[o]) || r == a) return c[o] !== n ? (i = c[o], !1) : (b.error(R.method, t), !1);c = c[o];
            }
          })), e.isFunction(i) ? u = i.apply(s, r) : i !== n && (u = i), e.isArray(o) ? o.push(u) : o !== n ? o = [o, u] : u !== n && (o = u), i);
        } }, d ? (D === n && b.initialize(), b.invoke(c)) : (D !== n && D.invoke("destroy"), b.initialize());
    }), o !== n ? o : this);
  }, e.api.settings = { name: "API", namespace: "api", debug: !0, verbose: !1, performance: !0, api: {}, cache: !0, interruptRequests: !0, on: "auto", stateContext: !1, loadingDuration: 0, errorDuration: 2000, action: !1, url: !1, base: "", urlData: {}, defaultData: !0, serializeForm: !1, throttle: 0, throttleFirstRequest: !0, method: "get", data: {}, dataType: "json", mockResponse: !1, mockResponseAsync: !1, beforeSend: function beforeSend(e) {
      return e;
    }, beforeXHR: function beforeXHR(e) {}, onRequest: function onRequest(e, t) {}, onResponse: !1, onSuccess: function onSuccess(e, t) {}, onComplete: function onComplete(e, t) {}, onFailure: function onFailure(e, t) {}, onError: function onError(e, t) {}, onAbort: function onAbort(e, t) {}, successTest: !1, error: { beforeSend: "The before send function has aborted the request", error: "There was an error with your request", exitConditions: "API Request Aborted. Exit conditions met", JSONParse: "JSON could not be parsed during error handling", legacyParameters: "You are using legacy API success callback names", method: "The method you called is not defined", missingAction: "API action used but no url was defined", missingSerialize: "jquery-serialize-object is required to add form data to an existing data object", missingURL: "No URL specified for api event", noReturnedValue: "The beforeSend callback must return a settings object, beforeSend ignored.", noStorage: "Caching respopnses locally requires session storage", parseError: "There was an error parsing your request", requiredParameter: "Missing a required URL parameter: ", statusMessage: "Server gave an error: ", timeout: "Your request timed out" }, regExp: { required: /\{\$*[A-z0-9]+\}/g, optional: /\{\/\$*[A-z0-9]+\}/g }, className: { loading: "loading", error: "error" }, selector: { disabled: ".disabled", form: "form" }, metadata: { action: "action", url: "url" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/checkbox", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.checkbox = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.extend(true, {}, $.fn.checkbox.settings, parameters),
          className = settings.className,
          namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $label = $(this).children(selector.label),
          $input = $(this).children(selector.input),
          instance = $module.data(moduleNamespace),
          observer,
          element = this,
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.bind.events();

          module.set.tabbable();
          module.hide.input();

          module.observeChanges();
          module.instantiate();
          module.setup();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying module');
          module.unbind.events();
          module.show.input();
          $module.removeData(moduleNamespace);
        },

        fix: {
          reference: function reference() {
            if ($module.is(selector.input)) {
              module.debug('Behavior called on <input> adjusting invoked element');
              $module = $module.closest(selector.checkbox);
              module.refresh();
            }
          }
        },

        setup: function setup() {
          if (module.is.indeterminate()) {
            module.debug('Initial value is indeterminate');
            module.set.indeterminate();
            if (settings.fireOnInit) {
              settings.onIndeterminate.call($input[0]);
              settings.onChange.call($input[0]);
            }
          } else if (module.is.checked()) {
            module.debug('Initial value is checked');
            module.set.checked();
            if (settings.fireOnInit) {
              settings.onChecked.call($input[0]);
              settings.onChange.call($input[0]);
            }
          } else {
            module.debug('Initial value is unchecked');
            module.set.unchecked();
            if (settings.fireOnInit) {
              settings.onUnchecked.call($input[0]);
              settings.onChange.call($input[0]);
            }
          }
        },

        refresh: function refresh() {
          $label = $module.children(selector.label);
          $input = $module.children(selector.input);
        },

        hide: {
          input: function input() {
            module.verbose('Modfying <input> z-index to be unselectable');
            $input.addClass(className.hidden);
          }
        },
        show: {
          input: function input() {
            module.verbose('Modfying <input> z-index to be selectable');
            $input.removeClass(className.hidden);
          }
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        attachEvents: function attachEvents(selector, event) {
          var $element = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element.on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound);
          }
        },

        event: {
          click: function click(event) {
            if ($(event.target).is(selector.input)) {
              module.verbose('Using default check action on initialized checkbox');
              return;
            }
            module.toggle();
          },
          keydown: function keydown(event) {
            var key = event.which,
                keyCode = {
              enter: 13,
              space: 32,
              escape: 27
            };
            if (key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $input.blur();
              event.preventDefault();
            }
            if (!event.ctrlKey && (key == keyCode.enter || key == keyCode.space)) {
              module.verbose('Enter key pressed, toggling checkbox');
              module.toggle();
              event.preventDefault();
            }
          }
        },

        check: function check() {
          if (!module.is.indeterminate() && module.is.checked()) {
            module.debug('Checkbox is already checked');
            return;
          }
          module.debug('Checking checkbox', $input);
          module.set.checked();
          settings.onChecked.call($input[0]);
          settings.onChange.call($input[0]);
        },

        uncheck: function uncheck() {
          if (!module.is.indeterminate() && module.is.unchecked()) {
            module.debug('Checkbox is already unchecked');
            return;
          }
          module.debug('Unchecking checkbox');
          module.set.unchecked();
          settings.onUnchecked.call($input[0]);
          settings.onChange.call($input[0]);
        },

        indeterminate: function indeterminate() {
          if (module.is.indeterminate()) {
            module.debug('Checkbox is already indeterminate');
            return;
          }
          module.debug('Making checkbox indeterminate');
          module.set.indeterminate();
          settings.onIndeterminate.call($input[0]);
          settings.onChange.call($input[0]);
        },

        determinate: function determinate() {
          if (module.is.determinate()) {
            module.debug('Checkbox is already determinate');
            return;
          }
          module.debug('Making checkbox determinate');
          module.set.determinate();
          settings.onDeterminate.call($input[0]);
          settings.onChange.call($input[0]);
        },

        enable: function enable() {
          if (module.is.enabled()) {
            module.debug('Checkbox is already enabled');
            return;
          }
          module.debug('Enabling checkbox');
          module.set.enabled();
          settings.onEnable.call($input[0]);
        },

        disable: function disable() {
          if (module.is.disabled()) {
            module.debug('Checkbox is already disabled');
            return;
          }
          module.debug('Disabling checkbox');
          module.set.disabled();
          settings.onDisable.call($input[0]);
        },

        get: {
          radios: function radios() {
            var name = module.get.name();
            return $('input[name="' + name + '"]').closest(selector.checkbox);
          },
          name: function name() {
            return $input.attr('name');
          }
        },

        is: {
          radio: function radio() {
            return $input.hasClass(className.radio) || $input.attr('type') == 'radio';
          },
          indeterminate: function indeterminate() {
            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');
          },
          checked: function checked() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
          },
          disabled: function disabled() {
            return $input.prop('disabled') !== undefined && $input.prop('disabled');
          },
          enabled: function enabled() {
            return !module.is.disabled();
          },
          determinate: function determinate() {
            return !module.is.indeterminate();
          },
          unchecked: function unchecked() {
            return !module.is.checked();
          }
        },

        can: {
          change: function change() {
            return !($module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly'));
          },
          uncheck: function uncheck() {
            return typeof settings.uncheckable === 'boolean' ? settings.uncheckable : !module.is.radio();
          }
        },

        set: {
          checked: function checked() {
            if (!module.is.indeterminate() && module.is.checked()) {
              module.debug('Input is already checked');
              return;
            }
            module.verbose('Setting state to checked', $input[0]);
            if (module.is.radio()) {
              module.uncheckOthers();
            }
            $input.prop('indeterminate', false).prop('checked', true);
            $module.removeClass(className.indeterminate).addClass(className.checked);
            module.trigger.change();
          },
          unchecked: function unchecked() {
            if (!module.is.indeterminate() && module.is.unchecked()) {
              module.debug('Input is already unchecked');
              return;
            }
            module.debug('Setting state to unchecked');
            $input.prop('indeterminate', false).prop('checked', false);
            $module.removeClass(className.indeterminate).removeClass(className.checked);
            module.trigger.change();
          },
          indeterminate: function indeterminate() {
            if (module.is.indeterminate()) {
              module.debug('Input is already indeterminate');
              return;
            }
            module.debug('Setting state to indeterminate');
            $input.prop('indeterminate', true);
            $module.addClass(className.indeterminate);
            module.trigger.change();
          },
          determinate: function determinate() {
            if (module.is.determinate()) {
              module.debug('Input is already determinate');
              return;
            }
            module.debug('Setting state to determinate');
            $input.prop('indeterminate', false);
            $module.removeClass(className.indeterminate);
          },
          disabled: function disabled() {
            if (module.is.disabled()) {
              module.debug('Input is already disabled');
              return;
            }
            module.debug('Setting state to disabled');
            $input.prop('disabled', 'disabled');
            $module.addClass(className.disabled);
            module.trigger.change();
          },
          enabled: function enabled() {
            if (module.is.enabled()) {
              module.debug('Input is already enabled');
              return;
            }
            module.debug('Setting state to enabled');
            $input.prop('disabled', false);
            $module.removeClass(className.disabled);
            module.trigger.change();
          },
          tabbable: function tabbable() {
            module.verbose('Adding tabindex to checkbox');
            if ($input.attr('tabindex') === undefined) {
              $input.attr('tabindex', 0);
            }
          }
        },

        trigger: {
          change: function change() {
            module.verbose('Triggering change event from programmatic change');
            $input.trigger('change');
          }
        },

        create: {
          label: function label() {
            if ($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
            } else if (!module.has.label()) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
            }
          }
        },

        has: {
          label: function label() {
            return $label.length > 0;
          }
        },

        bind: {
          events: function events() {
            module.verbose('Attaching checkbox events');
            $module.on('click' + eventNamespace, module.event.click).on('keydown' + eventNamespace, selector.input, module.event.keydown);
          }
        },

        unbind: {
          events: function events() {
            module.debug('Removing events');
            $module.off(eventNamespace);
          }
        },

        uncheckOthers: function uncheckOthers() {
          var $radios = module.get.radios();
          module.debug('Unchecking other radios', $radios);
          $radios.removeClass(className.checked);
        },

        toggle: function toggle() {
          if (!module.can.change()) {
            if (!module.is.radio()) {
              module.debug('Checkbox is read-only or disabled, ignoring toggle');
            }
            return;
          }
          if (module.is.indeterminate() || module.is.unchecked()) {
            module.debug('Currently unchecked');
            module.check();
          } else if (module.is.checked() && module.can.uncheck()) {
            module.debug('Currently checked');
            module.uncheck();
          }
        },
        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.checkbox.settings = {

    name: 'Checkbox',
    namespace: 'checkbox',

    debug: false,
    verbose: true,
    performance: true,

    // delegated event context
    uncheckable: 'auto',
    fireOnInit: false,

    onChange: function onChange() {},

    onChecked: function onChecked() {},
    onUnchecked: function onUnchecked() {},

    onDeterminate: function onDeterminate() {},
    onIndeterminate: function onIndeterminate() {},

    onEnabled: function onEnabled() {},
    onDisabled: function onDisabled() {},

    className: {
      checked: 'checked',
      indeterminate: 'indeterminate',
      disabled: 'disabled',
      hidden: 'hidden',
      radio: 'radio',
      readOnly: 'read-only'
    },

    error: {
      method: 'The method you called is not defined'
    },

    selector: {
      checkbox: '.ui.checkbox',
      label: 'label, .box',
      input: 'input[type="checkbox"], input[type="radio"]'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/checkbox.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, i) {
  "use strict";e.fn.checkbox = function (t) {
    var o,
        a = e(this),
        c = a.selector || "",
        r = new Date().getTime(),
        d = [],
        s = arguments[0],
        l = "string" == typeof s,
        u = [].slice.call(arguments, 1);return (a.each(function () {
      var a,
          b,
          g = e.extend(!0, {}, e.fn.checkbox.settings, t),
          h = g.className,
          m = g.namespace,
          f = g.selector,
          p = g.error,
          k = "." + m,
          v = "module-" + m,
          y = e(this),
          x = e(this).children(f.label),
          C = e(this).children(f.input),
          I = y.data(v),
          O = this;b = { initialize: function initialize() {
          b.verbose("Initializing checkbox", g), b.create.label(), b.bind.events(), b.set.tabbable(), b.hide.input(), b.observeChanges(), b.instantiate(), b.setup();
        }, instantiate: function instantiate() {
          b.verbose("Storing instance of module", b), I = b, y.data(v, b);
        }, destroy: function destroy() {
          b.verbose("Destroying module"), b.unbind.events(), b.show.input(), y.removeData(v);
        }, fix: { reference: function reference() {
            y.is(f.input) && (b.debug("Behavior called on <input> adjusting invoked element"), y = y.closest(f.checkbox), b.refresh());
          } }, setup: function setup() {
          b.is.indeterminate() ? (b.debug("Initial value is indeterminate"), b.set.indeterminate(), g.fireOnInit && (g.onIndeterminate.call(C[0]), g.onChange.call(C[0]))) : b.is.checked() ? (b.debug("Initial value is checked"), b.set.checked(), g.fireOnInit && (g.onChecked.call(C[0]), g.onChange.call(C[0]))) : (b.debug("Initial value is unchecked"), b.set.unchecked(), g.fireOnInit && (g.onUnchecked.call(C[0]), g.onChange.call(C[0])));
        }, refresh: function refresh() {
          x = y.children(f.label), C = y.children(f.input);
        }, hide: { input: function input() {
            b.verbose("Modfying <input> z-index to be unselectable"), C.addClass(h.hidden);
          } }, show: { input: function input() {
            b.verbose("Modfying <input> z-index to be selectable"), C.removeClass(h.hidden);
          } }, observeChanges: function observeChanges() {
          "MutationObserver" in n && (a = new MutationObserver(function (e) {
            b.debug("DOM tree modified, updating selector cache"), b.refresh();
          }), a.observe(O, { childList: !0, subtree: !0 }), b.debug("Setting up mutation observer", a));
        }, attachEvents: function attachEvents(n, t) {
          var i = e(n);t = e.isFunction(b[t]) ? b[t] : b.toggle, i.length > 0 ? (b.debug("Attaching checkbox events to element", n, t), i.on("click" + k, t)) : b.error(p.notFound);
        }, event: { click: function click(n) {
            return e(n.target).is(f.input) ? void b.verbose("Using default check action on initialized checkbox") : void b.toggle();
          }, keydown: function keydown(e) {
            var n = e.which,
                t = { enter: 13, space: 32, escape: 27 };n == t.escape && (b.verbose("Escape key pressed blurring field"), C.blur(), e.preventDefault()), e.ctrlKey || n != t.enter && n != t.space || (b.verbose("Enter key pressed, toggling checkbox"), b.toggle(), e.preventDefault());
          } }, check: function check() {
          return !b.is.indeterminate() && b.is.checked() ? void b.debug("Checkbox is already checked") : (b.debug("Checking checkbox", C), b.set.checked(), g.onChecked.call(C[0]), void g.onChange.call(C[0]));
        }, uncheck: function uncheck() {
          return !b.is.indeterminate() && b.is.unchecked() ? void b.debug("Checkbox is already unchecked") : (b.debug("Unchecking checkbox"), b.set.unchecked(), g.onUnchecked.call(C[0]), void g.onChange.call(C[0]));
        }, indeterminate: function indeterminate() {
          return b.is.indeterminate() ? void b.debug("Checkbox is already indeterminate") : (b.debug("Making checkbox indeterminate"), b.set.indeterminate(), g.onIndeterminate.call(C[0]), void g.onChange.call(C[0]));
        }, determinate: function determinate() {
          return b.is.determinate() ? void b.debug("Checkbox is already determinate") : (b.debug("Making checkbox determinate"), b.set.determinate(), g.onDeterminate.call(C[0]), void g.onChange.call(C[0]));
        }, enable: function enable() {
          return b.is.enabled() ? void b.debug("Checkbox is already enabled") : (b.debug("Enabling checkbox"), b.set.enabled(), void g.onEnable.call(C[0]));
        }, disable: function disable() {
          return b.is.disabled() ? void b.debug("Checkbox is already disabled") : (b.debug("Disabling checkbox"), b.set.disabled(), void g.onDisable.call(C[0]));
        }, get: { radios: function radios() {
            var n = b.get.name();return e("input[name=\"" + n + "\"]").closest(f.checkbox);
          }, name: function name() {
            return C.attr("name");
          } }, is: { radio: function radio() {
            return C.hasClass(h.radio) || "radio" == C.attr("type");
          }, indeterminate: function indeterminate() {
            return C.prop("indeterminate") !== i && C.prop("indeterminate");
          }, checked: function checked() {
            return C.prop("checked") !== i && C.prop("checked");
          }, disabled: function disabled() {
            return C.prop("disabled") !== i && C.prop("disabled");
          }, enabled: function enabled() {
            return !b.is.disabled();
          }, determinate: function determinate() {
            return !b.is.indeterminate();
          }, unchecked: function unchecked() {
            return !b.is.checked();
          } }, can: { change: function change() {
            return !(y.hasClass(h.disabled) || y.hasClass(h.readOnly) || C.prop("disabled") || C.prop("readonly"));
          }, uncheck: function uncheck() {
            return "boolean" == typeof g.uncheckable ? g.uncheckable : !b.is.radio();
          } }, set: { checked: function checked() {
            return !b.is.indeterminate() && b.is.checked() ? void b.debug("Input is already checked") : (b.verbose("Setting state to checked", C[0]), b.is.radio() && b.uncheckOthers(), C.prop("indeterminate", !1).prop("checked", !0), y.removeClass(h.indeterminate).addClass(h.checked), void b.trigger.change());
          }, unchecked: function unchecked() {
            return !b.is.indeterminate() && b.is.unchecked() ? void b.debug("Input is already unchecked") : (b.debug("Setting state to unchecked"), C.prop("indeterminate", !1).prop("checked", !1), y.removeClass(h.indeterminate).removeClass(h.checked), void b.trigger.change());
          }, indeterminate: function indeterminate() {
            return b.is.indeterminate() ? void b.debug("Input is already indeterminate") : (b.debug("Setting state to indeterminate"), C.prop("indeterminate", !0), y.addClass(h.indeterminate), void b.trigger.change());
          }, determinate: function determinate() {
            return b.is.determinate() ? void b.debug("Input is already determinate") : (b.debug("Setting state to determinate"), C.prop("indeterminate", !1), void y.removeClass(h.indeterminate));
          }, disabled: function disabled() {
            return b.is.disabled() ? void b.debug("Input is already disabled") : (b.debug("Setting state to disabled"), C.prop("disabled", "disabled"), y.addClass(h.disabled), void b.trigger.change());
          }, enabled: function enabled() {
            return b.is.enabled() ? void b.debug("Input is already enabled") : (b.debug("Setting state to enabled"), C.prop("disabled", !1), y.removeClass(h.disabled), void b.trigger.change());
          }, tabbable: function tabbable() {
            b.verbose("Adding tabindex to checkbox"), C.attr("tabindex") === i && C.attr("tabindex", 0);
          } }, trigger: { change: function change() {
            b.verbose("Triggering change event from programmatic change"), C.trigger("change");
          } }, create: { label: function label() {
            C.prevAll(f.label).length > 0 ? (C.prev(f.label).detach().insertAfter(C), b.debug("Moving existing label", x)) : b.has.label() || (x = e("<label>").insertAfter(C), b.debug("Creating label", x));
          } }, has: { label: function label() {
            return x.length > 0;
          } }, bind: { events: function events() {
            b.verbose("Attaching checkbox events"), y.on("click" + k, b.event.click).on("keydown" + k, f.input, b.event.keydown);
          } }, unbind: { events: function events() {
            b.debug("Removing events"), y.off(k);
          } }, uncheckOthers: function uncheckOthers() {
          var e = b.get.radios();b.debug("Unchecking other radios", e), e.removeClass(h.checked);
        }, toggle: function toggle() {
          return b.can.change() ? void (b.is.indeterminate() || b.is.unchecked() ? (b.debug("Currently unchecked"), b.check()) : b.is.checked() && b.can.uncheck() && (b.debug("Currently checked"), b.uncheck())) : void (b.is.radio() || b.debug("Checkbox is read-only or disabled, ignoring toggle"));
        }, setting: function setting(n, t) {
          if ((b.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, g, n);else {
            if (t === i) return g[n];g[n] = t;
          }
        }, internal: function internal(n, t) {
          if (e.isPlainObject(n)) e.extend(!0, b, n);else {
            if (t === i) return b[n];b[n] = t;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? b.performance.log(arguments) : (b.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), b.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? b.performance.log(arguments) : (b.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), b.verbose.apply(console, arguments)));
        }, error: function error() {
          b.error = Function.prototype.bind.call(console.error, console, g.name + ":"), b.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, i;g.performance && (n = new Date().getTime(), i = r || n, t = n - i, r = n, d.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: O, "Execution Time": t })), clearTimeout(b.performance.timer), b.performance.timer = setTimeout(b.performance.display, 500);
          }, display: function display() {
            var n = g.name + ":",
                t = 0;r = !1, clearTimeout(b.performance.timer), e.each(d, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", c && (n += " '" + c + "'"), (console.group !== i || console.table !== i) && d.length > 0 && (console.groupCollapsed(n), console.table ? console.table(d) : e.each(d, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), d = [];
          } }, invoke: function invoke(n, t, a) {
          var c,
              r,
              d,
              s = I;return (t = t || u, a = O || a, "string" == typeof n && s !== i && (n = n.split(/[\. ]/), c = n.length - 1, e.each(n, function (t, o) {
            var a = t != c ? o + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(s[a]) && t != c) s = s[a];else {
              if (s[a] !== i) return (r = s[a], !1);if (!e.isPlainObject(s[o]) || t == c) return s[o] !== i ? (r = s[o], !1) : (b.error(p.method, n), !1);s = s[o];
            }
          })), e.isFunction(r) ? d = r.apply(a, t) : r !== i && (d = r), e.isArray(o) ? o.push(d) : o !== i ? o = [o, d] : d !== i && (o = d), r);
        } }, l ? (I === i && b.initialize(), b.invoke(s)) : (I !== i && I.invoke("destroy"), b.initialize());
    }), o !== i ? o : this);
  }, e.fn.checkbox.settings = { name: "Checkbox", namespace: "checkbox", debug: !1, verbose: !0, performance: !0, uncheckable: "auto", fireOnInit: !1, onChange: function onChange() {}, onChecked: function onChecked() {}, onUnchecked: function onUnchecked() {}, onDeterminate: function onDeterminate() {}, onIndeterminate: function onIndeterminate() {}, onEnabled: function onEnabled() {}, onDisabled: function onDisabled() {}, className: { checked: "checked", indeterminate: "indeterminate", disabled: "disabled", hidden: "hidden", radio: "radio", readOnly: "read-only" }, error: { method: "The method you called is not defined" }, selector: { checkbox: ".ui.checkbox", label: "label, .box", input: "input[type=\"checkbox\"], input[type=\"radio\"]" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/colorize", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Colorize
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.colorize = function (parameters) {
    var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.colorize.settings, parameters) : $.extend({}, $.fn.colorize.settings),

    // hoist arguments
    moduleArguments = arguments || false;
    $(this).each(function (instanceIndex) {

      var $module = $(this),
          mainCanvas = $('<canvas />')[0],
          imageCanvas = $('<canvas />')[0],
          overlayCanvas = $('<canvas />')[0],
          backgroundImage = new Image(),

      // defs
      mainContext,
          imageContext,
          overlayContext,
          _image,
          imageName,
          width,
          height,

      // shortucts
      _colors = settings.colors,
          paths = settings.paths,
          namespace = settings.namespace,
          error = settings.error,

      // boilerplate
      instance = $module.data('module-' + namespace),
          module;

      module = {

        checkPreconditions: function checkPreconditions() {
          module.debug('Checking pre-conditions');

          if (!$.isPlainObject(_colors) || $.isEmptyObject(_colors)) {
            module.error(error.undefinedColors);
            return false;
          }
          return true;
        },

        async: function async(callback) {
          if (settings.async) {
            setTimeout(callback, 0);
          } else {
            callback();
          }
        },

        getMetadata: function getMetadata() {
          module.debug('Grabbing metadata');
          _image = $module.data('image') || settings.image || undefined;
          imageName = $module.data('name') || settings.name || instanceIndex;
          width = settings.width || $module.width();
          height = settings.height || $module.height();
          if (width === 0 || height === 0) {
            module.error(error.undefinedSize);
          }
        },

        initialize: function initialize() {
          module.debug('Initializing with colors', _colors);
          if (module.checkPreconditions()) {

            module.async(function () {
              module.getMetadata();
              module.canvas.create();

              module.draw.image(function () {
                module.draw.colors();
                module.canvas.merge();
              });
              $module.data('module-' + namespace, module);
            });
          }
        },

        redraw: function redraw() {
          module.debug('Redrawing image');
          module.async(function () {
            module.canvas.clear();
            module.draw.colors();
            module.canvas.merge();
          });
        },

        change: {
          color: function color(colorName, _color) {
            module.debug('Changing color', colorName);
            if (_colors[colorName] === undefined) {
              module.error(error.missingColor);
              return false;
            }
            _colors[colorName] = _color;
            module.redraw();
          }
        },

        canvas: {
          create: function create() {
            module.debug('Creating canvases');

            mainCanvas.width = width;
            mainCanvas.height = height;
            imageCanvas.width = width;
            imageCanvas.height = height;
            overlayCanvas.width = width;
            overlayCanvas.height = height;

            mainContext = mainCanvas.getContext('2d');
            imageContext = imageCanvas.getContext('2d');
            overlayContext = overlayCanvas.getContext('2d');

            $module.append(mainCanvas);
            mainContext = $module.children('canvas')[0].getContext('2d');
          },
          clear: function clear(context) {
            module.debug('Clearing canvas');
            overlayContext.fillStyle = '#FFFFFF';
            overlayContext.fillRect(0, 0, width, height);
          },
          merge: function merge() {
            if (!$.isFunction(mainContext.blendOnto)) {
              module.error(error.missingPlugin);
              return;
            }
            mainContext.putImageData(imageContext.getImageData(0, 0, width, height), 0, 0);
            overlayContext.blendOnto(mainContext, 'multiply');
          }
        },

        draw: {

          image: function image(callback) {
            module.debug('Drawing image');
            callback = callback || function () {};
            if (_image) {
              backgroundImage.src = _image;
              backgroundImage.onload = function () {
                imageContext.drawImage(backgroundImage, 0, 0);
                callback();
              };
            } else {
              module.error(error.noImage);
              callback();
            }
          },

          colors: function colors() {
            module.debug('Drawing color overlays', _colors);
            $.each(_colors, function (colorName, color) {
              settings.onDraw(overlayContext, imageName, colorName, color);
            });
          }

        },

        debug: function debug(message, variableName) {
          if (settings.debug) {
            if (variableName !== undefined) {
              console.info(settings.name + ': ' + message, variableName);
            } else {
              console.info(settings.name + ': ' + message);
            }
          }
        },
        error: function error(errorMessage) {
          console.warn(settings.name + ': ' + errorMessage);
        },
        invoke: function invoke(methodName, context, methodArguments) {
          var method;
          methodArguments = methodArguments || Array.prototype.slice.call(arguments, 2);

          if (typeof methodName == 'string' && instance !== undefined) {
            methodName = methodName.split('.');
            $.each(methodName, function (index, name) {
              if ($.isPlainObject(instance[name])) {
                instance = instance[name];
                return true;
              } else if ($.isFunction(instance[name])) {
                method = instance[name];
                return true;
              }
              module.error(settings.error.method);
              return false;
            });
          }
          return $.isFunction(method) ? method.apply(context, methodArguments) : false;
        }

      };
      if (instance !== undefined && moduleArguments) {
        // simpler than invoke realizing to invoke itself (and losing scope due prototype.call()
        if (moduleArguments[0] == 'invoke') {
          moduleArguments = Array.prototype.slice.call(moduleArguments, 1);
        }
        return module.invoke(moduleArguments[0], this, Array.prototype.slice.call(moduleArguments, 1));
      }
      // initializing
      module.initialize();
    });
    return this;
  };

  $.fn.colorize.settings = {
    name: 'Image Colorizer',
    debug: true,
    namespace: 'colorize',

    onDraw: function onDraw(overlayContext, imageName, colorName, color) {},

    // whether to block execution while updating canvas
    async: true,
    // object containing names and default values of color regions
    colors: {},

    metadata: {
      image: 'image',
      name: 'name'
    },

    error: {
      noImage: 'No tracing image specified',
      undefinedColors: 'No default colors specified.',
      missingColor: 'Attempted to change color that does not exist',
      missingPlugin: 'Blend onto plug-in must be included',
      undefinedHeight: 'The width or height of image canvas could not be automatically determined. Please specify a height.'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/colorize.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Colorize
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, i, t) {
  "use strict";e.fn.colorize = function (n) {
    var i = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.colorize.settings, n) : e.extend({}, e.fn.colorize.settings),
        o = arguments || !1;return (e(this).each(function (n) {
      var a,
          r,
          c,
          s,
          d,
          g,
          u,
          l,
          m = e(this),
          f = e("<canvas />")[0],
          h = e("<canvas />")[0],
          p = e("<canvas />")[0],
          v = new Image(),
          w = i.colors,
          b = (i.paths, i.namespace),
          y = i.error,
          C = m.data("module-" + b);return (l = { checkPreconditions: function checkPreconditions() {
          return (l.debug("Checking pre-conditions"), !e.isPlainObject(w) || e.isEmptyObject(w) ? (l.error(y.undefinedColors), !1) : !0);
        }, async: function async(e) {
          i.async ? setTimeout(e, 0) : e();
        }, getMetadata: function getMetadata() {
          l.debug("Grabbing metadata"), s = m.data("image") || i.image || t, d = m.data("name") || i.name || n, g = i.width || m.width(), u = i.height || m.height(), (0 === g || 0 === u) && l.error(y.undefinedSize);
        }, initialize: function initialize() {
          l.debug("Initializing with colors", w), l.checkPreconditions() && l.async(function () {
            l.getMetadata(), l.canvas.create(), l.draw.image(function () {
              l.draw.colors(), l.canvas.merge();
            }), m.data("module-" + b, l);
          });
        }, redraw: function redraw() {
          l.debug("Redrawing image"), l.async(function () {
            l.canvas.clear(), l.draw.colors(), l.canvas.merge();
          });
        }, change: { color: function color(e, n) {
            return (l.debug("Changing color", e), w[e] === t ? (l.error(y.missingColor), !1) : (w[e] = n, void l.redraw()));
          } }, canvas: { create: function create() {
            l.debug("Creating canvases"), f.width = g, f.height = u, h.width = g, h.height = u, p.width = g, p.height = u, a = f.getContext("2d"), r = h.getContext("2d"), c = p.getContext("2d"), m.append(f), a = m.children("canvas")[0].getContext("2d");
          }, clear: function clear(e) {
            l.debug("Clearing canvas"), c.fillStyle = "#FFFFFF", c.fillRect(0, 0, g, u);
          }, merge: function merge() {
            return e.isFunction(a.blendOnto) ? (a.putImageData(r.getImageData(0, 0, g, u), 0, 0), void c.blendOnto(a, "multiply")) : void l.error(y.missingPlugin);
          } }, draw: { image: function image(e) {
            l.debug("Drawing image"), e = e || function () {}, s ? (v.src = s, v.onload = function () {
              r.drawImage(v, 0, 0), e();
            }) : (l.error(y.noImage), e());
          }, colors: function colors() {
            l.debug("Drawing color overlays", w), e.each(w, function (e, n) {
              i.onDraw(c, d, e, n);
            });
          } }, debug: function debug(e, n) {
          i.debug && (n !== t ? console.info(i.name + ": " + e, n) : console.info(i.name + ": " + e));
        }, error: function error(e) {
          console.warn(i.name + ": " + e);
        }, invoke: function invoke(n, o, a) {
          var r;return (a = a || Array.prototype.slice.call(arguments, 2), "string" == typeof n && C !== t && (n = n.split("."), e.each(n, function (n, t) {
            return e.isPlainObject(C[t]) ? (C = C[t], !0) : e.isFunction(C[t]) ? (r = C[t], !0) : (l.error(i.error.method), !1);
          })), e.isFunction(r) ? r.apply(o, a) : !1);
        } }, C !== t && o ? ("invoke" == o[0] && (o = Array.prototype.slice.call(o, 1)), l.invoke(o[0], this, Array.prototype.slice.call(o, 1))) : void l.initialize());
    }), this);
  }, e.fn.colorize.settings = { name: "Image Colorizer", debug: !0, namespace: "colorize", onDraw: function onDraw(e, n, i, t) {}, async: !0, colors: {}, metadata: { image: "image", name: "name" }, error: { noImage: "No tracing image specified", undefinedColors: "No default colors specified.", missingColor: "Attempted to change color that does not exist", missingPlugin: "Blend onto plug-in must be included", undefinedHeight: "The width or height of image canvas could not be automatically determined. Please specify a height." } };
})(jQuery, window, document);
});

require.register("web/static/css/components/dimmer", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.dimmer = function (parameters) {
    var $allModules = $(this),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dimmer.settings, parameters) : $.extend({}, $.fn.dimmer.settings),
          selector = settings.selector,
          namespace = settings.namespace,
          className = settings.className,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          moduleSelector = $allModules.selector || '',
          clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click',
          $module = $(this),
          $dimmer,
          $dimmable,
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        preinitialize: function preinitialize() {
          if (module.is.dimmer()) {

            $dimmable = $module.parent();
            $dimmer = $module;
          } else {
            $dimmable = $module;
            if (module.has.dimmer()) {
              if (settings.dimmerName) {
                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);
              } else {
                $dimmer = $dimmable.find(selector.dimmer);
              }
            } else {
              $dimmer = module.create();
            }
          }
        },

        initialize: function initialize() {
          module.debug('Initializing dimmer', settings);
          if (settings.on == 'hover') {
            $dimmable.on('mouseenter' + eventNamespace, module.show).on('mouseleave' + eventNamespace, module.hide);
          } else if (settings.on == 'click') {
            $dimmable.on(clickEvent + eventNamespace, module.toggle);
          }
          if (module.is.page()) {
            module.debug('Setting as a page dimmer', $dimmable);
            module.set.pageDimmer();
          }

          if (module.is.closable()) {
            module.verbose('Adding dimmer close event', $dimmer);
            $dimmable.on(clickEvent + eventNamespace, selector.dimmer, module.event.click);
          }
          module.set.dimmable();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', $dimmer);
          $module.removeData(moduleNamespace);
          $dimmable.off(eventNamespace);
        },

        event: {
          click: function click(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if ($dimmer.find(event.target).length === 0 || $(event.target).is(selector.content)) {
              module.hide();
              event.stopImmediatePropagation();
            }
          }
        },

        addContent: function addContent(element) {
          var $content = $(element);
          module.debug('Add content to dimmer', $content);
          if ($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
          }
        },

        create: function create() {
          var $element = $(settings.template.dimmer());
          if (settings.variation) {
            module.debug('Creating dimmer with variation', settings.variation);
            $element.addClass(settings.variation);
          }
          if (settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
          }
          $element.appendTo($dimmable);
          return $element;
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.debug('Showing dimmer', $dimmer, settings);
          if ((!module.is.dimmed() || module.is.animating()) && module.is.enabled()) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
          } else {
            module.debug('Dimmer is already shown or disabled');
          }
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.dimmed() || module.is.animating()) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
          } else {
            module.debug('Dimmer is not visible');
          }
        },

        toggle: function toggle() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if (!module.is.dimmed()) {
            module.show();
          } else {
            module.hide();
          }
        },

        animate: {
          show: function show(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if (settings.opacity !== 'auto') {
                module.set.opacity();
              }
              $dimmer.transition({
                animation: settings.transition + ' in',
                queue: false,
                duration: module.get.duration(),
                useFailSafe: true,
                onStart: function onStart() {
                  module.set.dimmed();
                },
                onComplete: function onComplete() {
                  module.set.active();
                  callback();
                }
              });
            } else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if (settings.opacity == 'auto') {
                settings.opacity = 0.8;
              }
              $dimmer.stop().css({
                opacity: 0,
                width: '100%',
                height: '100%'
              }).fadeTo(module.get.duration(), settings.opacity, function () {
                $dimmer.removeAttr('style');
                module.set.active();
                callback();
              });
            }
          },
          hide: function hide(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer.transition({
                animation: settings.transition + ' out',
                queue: false,
                duration: module.get.duration(),
                useFailSafe: true,
                onStart: function onStart() {
                  module.remove.dimmed();
                },
                onComplete: function onComplete() {
                  module.remove.active();
                  callback();
                }
              });
            } else {
              module.verbose('Hiding dimmer with javascript');
              module.remove.dimmed();
              $dimmer.stop().fadeOut(module.get.duration(), function () {
                module.remove.active();
                $dimmer.removeAttr('style');
                callback();
              });
            }
          }
        },

        get: {
          dimmer: function dimmer() {
            return $dimmer;
          },
          duration: function duration() {
            if (typeof settings.duration == 'object') {
              if (module.is.active()) {
                return settings.duration.hide;
              } else {
                return settings.duration.show;
              }
            }
            return settings.duration;
          }
        },

        has: {
          dimmer: function dimmer() {
            if (settings.dimmerName) {
              return $module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0;
            } else {
              return $module.find(selector.dimmer).length > 0;
            }
          }
        },

        is: {
          active: function active() {
            return $dimmer.hasClass(className.active);
          },
          animating: function animating() {
            return $dimmer.is(':animated') || $dimmer.hasClass(className.animating);
          },
          closable: function closable() {
            if (settings.closable == 'auto') {
              if (settings.on == 'hover') {
                return false;
              }
              return true;
            }
            return settings.closable;
          },
          dimmer: function dimmer() {
            return $module.hasClass(className.dimmer);
          },
          dimmable: function dimmable() {
            return $module.hasClass(className.dimmable);
          },
          dimmed: function dimmed() {
            return $dimmable.hasClass(className.dimmed);
          },
          disabled: function disabled() {
            return $dimmable.hasClass(className.disabled);
          },
          enabled: function enabled() {
            return !module.is.disabled();
          },
          page: function page() {
            return $dimmable.is('body');
          },
          pageDimmer: function pageDimmer() {
            return $dimmer.hasClass(className.pageDimmer);
          }
        },

        can: {
          show: function show() {
            return !$dimmer.hasClass(className.disabled);
          }
        },

        set: {
          opacity: function opacity(opacity) {
            var opacity = settings.opacity || opacity,
                color = $dimmer.css('background-color'),
                colorArray = color.split(','),
                isRGBA = colorArray && colorArray.length == 4;
            if (isRGBA) {
              colorArray[3] = opacity + ')';
              color = colorArray.join(',');
            } else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
            }
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
          },
          active: function active() {
            $dimmer.addClass(className.active);
          },
          dimmable: function dimmable() {
            $dimmable.addClass(className.dimmable);
          },
          dimmed: function dimmed() {
            $dimmable.addClass(className.dimmed);
          },
          pageDimmer: function pageDimmer() {
            $dimmer.addClass(className.pageDimmer);
          },
          disabled: function disabled() {
            $dimmer.addClass(className.disabled);
          }
        },

        remove: {
          active: function active() {
            $dimmer.removeClass(className.active);
          },
          dimmed: function dimmed() {
            $dimmable.removeClass(className.dimmed);
          },
          disabled: function disabled() {
            $dimmer.removeClass(className.disabled);
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      module.preinitialize();

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.dimmer.settings = {

    name: 'Dimmer',
    namespace: 'dimmer',

    debug: false,
    verbose: false,
    performance: true,

    // name to distinguish between multiple dimmers in context
    dimmerName: false,

    // whether to add a variation type
    variation: false,

    // whether to bind close events
    closable: 'auto',

    // whether to use css animations
    useCSS: true,

    // css animation to use
    transition: 'fade',

    // event to bind to
    on: false,

    // overriding opacity value
    opacity: 'auto',

    // transition durations
    duration: {
      show: 500,
      hide: 500
    },

    onChange: function onChange() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    error: {
      method: 'The method you called is not defined.'
    },

    className: {
      active: 'active',
      animating: 'animating',
      dimmable: 'dimmable',
      dimmed: 'dimmed',
      dimmer: 'dimmer',
      disabled: 'disabled',
      hide: 'hide',
      pageDimmer: 'page',
      show: 'show'
    },

    selector: {
      dimmer: '> .ui.dimmer',
      content: '.ui.dimmer > .content, .ui.dimmer > .content > .center'
    },

    template: {
      dimmer: function dimmer() {
        return $('<div />').attr('class', 'ui dimmer');
      }
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/dimmer.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, i, n, t) {
  "use strict";e.fn.dimmer = function (i) {
    var o,
        a = e(this),
        r = new Date().getTime(),
        m = [],
        s = arguments[0],
        d = "string" == typeof s,
        c = [].slice.call(arguments, 1);return (a.each(function () {
      var u,
          l,
          f,
          g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.dimmer.settings, i) : e.extend({}, e.fn.dimmer.settings),
          p = g.selector,
          h = g.namespace,
          b = g.className,
          v = g.error,
          y = "." + h,
          C = "module-" + h,
          w = a.selector || "",
          S = "ontouchstart" in n.documentElement ? "touchstart" : "click",
          D = e(this),
          T = this,
          N = D.data(C);f = { preinitialize: function preinitialize() {
          f.is.dimmer() ? (l = D.parent(), u = D) : (l = D, u = f.has.dimmer() ? g.dimmerName ? l.find(p.dimmer).filter("." + g.dimmerName) : l.find(p.dimmer) : f.create());
        }, initialize: function initialize() {
          f.debug("Initializing dimmer", g), "hover" == g.on ? l.on("mouseenter" + y, f.show).on("mouseleave" + y, f.hide) : "click" == g.on && l.on(S + y, f.toggle), f.is.page() && (f.debug("Setting as a page dimmer", l), f.set.pageDimmer()), f.is.closable() && (f.verbose("Adding dimmer close event", u), l.on(S + y, p.dimmer, f.event.click)), f.set.dimmable(), f.instantiate();
        }, instantiate: function instantiate() {
          f.verbose("Storing instance of module", f), N = f, D.data(C, N);
        }, destroy: function destroy() {
          f.verbose("Destroying previous module", u), D.removeData(C), l.off(y);
        }, event: { click: function click(i) {
            f.verbose("Determining if event occured on dimmer", i), (0 === u.find(i.target).length || e(i.target).is(p.content)) && (f.hide(), i.stopImmediatePropagation());
          } }, addContent: function addContent(i) {
          var n = e(i);f.debug("Add content to dimmer", n), n.parent()[0] !== u[0] && n.detach().appendTo(u);
        }, create: function create() {
          var i = e(g.template.dimmer());return (g.variation && (f.debug("Creating dimmer with variation", g.variation), i.addClass(g.variation)), g.dimmerName && (f.debug("Creating named dimmer", g.dimmerName), i.addClass(g.dimmerName)), i.appendTo(l), i);
        }, show: function show(i) {
          i = e.isFunction(i) ? i : function () {}, f.debug("Showing dimmer", u, g), f.is.dimmed() && !f.is.animating() || !f.is.enabled() ? f.debug("Dimmer is already shown or disabled") : (f.animate.show(i), g.onShow.call(T), g.onChange.call(T));
        }, hide: function hide(i) {
          i = e.isFunction(i) ? i : function () {}, f.is.dimmed() || f.is.animating() ? (f.debug("Hiding dimmer", u), f.animate.hide(i), g.onHide.call(T), g.onChange.call(T)) : f.debug("Dimmer is not visible");
        }, toggle: function toggle() {
          f.verbose("Toggling dimmer visibility", u), f.is.dimmed() ? f.hide() : f.show();
        }, animate: { show: function show(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? ("auto" !== g.opacity && f.set.opacity(), u.transition({ animation: g.transition + " in", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.set.dimmed();
              }, onComplete: function onComplete() {
                f.set.active(), i();
              } })) : (f.verbose("Showing dimmer animation with javascript"), f.set.dimmed(), "auto" == g.opacity && (g.opacity = 0.8), u.stop().css({ opacity: 0, width: "100%", height: "100%" }).fadeTo(f.get.duration(), g.opacity, function () {
              u.removeAttr("style"), f.set.active(), i();
            }));
          }, hide: function hide(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? (f.verbose("Hiding dimmer with css"), u.transition({ animation: g.transition + " out", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.remove.dimmed();
              }, onComplete: function onComplete() {
                f.remove.active(), i();
              } })) : (f.verbose("Hiding dimmer with javascript"), f.remove.dimmed(), u.stop().fadeOut(f.get.duration(), function () {
              f.remove.active(), u.removeAttr("style"), i();
            }));
          } }, get: { dimmer: function dimmer() {
            return u;
          }, duration: function duration() {
            return "object" == typeof g.duration ? f.is.active() ? g.duration.hide : g.duration.show : g.duration;
          } }, has: { dimmer: function dimmer() {
            return g.dimmerName ? D.find(p.dimmer).filter("." + g.dimmerName).length > 0 : D.find(p.dimmer).length > 0;
          } }, is: { active: function active() {
            return u.hasClass(b.active);
          }, animating: function animating() {
            return u.is(":animated") || u.hasClass(b.animating);
          }, closable: function closable() {
            return "auto" == g.closable ? "hover" == g.on ? !1 : !0 : g.closable;
          }, dimmer: function dimmer() {
            return D.hasClass(b.dimmer);
          }, dimmable: function dimmable() {
            return D.hasClass(b.dimmable);
          }, dimmed: function dimmed() {
            return l.hasClass(b.dimmed);
          }, disabled: function disabled() {
            return l.hasClass(b.disabled);
          }, enabled: function enabled() {
            return !f.is.disabled();
          }, page: function page() {
            return l.is("body");
          }, pageDimmer: function pageDimmer() {
            return u.hasClass(b.pageDimmer);
          } }, can: { show: function show() {
            return !u.hasClass(b.disabled);
          } }, set: { opacity: function opacity(e) {
            var e = g.opacity || e,
                i = u.css("background-color"),
                n = i.split(","),
                t = n && 4 == n.length;t ? (n[3] = e + ")", i = n.join(",")) : i = "rgba(0, 0, 0, " + e + ")", f.debug("Setting opacity to", e), u.css("background-color", i);
          }, active: function active() {
            u.addClass(b.active);
          }, dimmable: function dimmable() {
            l.addClass(b.dimmable);
          }, dimmed: function dimmed() {
            l.addClass(b.dimmed);
          }, pageDimmer: function pageDimmer() {
            u.addClass(b.pageDimmer);
          }, disabled: function disabled() {
            u.addClass(b.disabled);
          } }, remove: { active: function active() {
            u.removeClass(b.active);
          }, dimmed: function dimmed() {
            l.removeClass(b.dimmed);
          }, disabled: function disabled() {
            u.removeClass(b.disabled);
          } }, setting: function setting(i, n) {
          if ((f.debug("Changing setting", i, n), e.isPlainObject(i))) e.extend(!0, g, i);else {
            if (n === t) return g[i];g[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, f, i);else {
            if (n === t) return f[i];f[i] = n;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), f.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), f.verbose.apply(console, arguments)));
        }, error: function error() {
          f.error = Function.prototype.bind.call(console.error, console, g.name + ":"), f.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var i, n, t;g.performance && (i = new Date().getTime(), t = r || i, n = i - t, r = i, m.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": n })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 500);
          }, display: function display() {
            var i = g.name + ":",
                n = 0;r = !1, clearTimeout(f.performance.timer), e.each(m, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", w && (i += " '" + w + "'"), a.length > 1 && (i += " (" + a.length + ")"), (console.group !== t || console.table !== t) && m.length > 0 && (console.groupCollapsed(i), console.table ? console.table(m) : e.each(m, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), m = [];
          } }, invoke: function invoke(i, n, a) {
          var r,
              m,
              s,
              d = N;return (n = n || c, a = T || a, "string" == typeof i && d !== t && (i = i.split(/[\. ]/), r = i.length - 1, e.each(i, function (n, o) {
            var a = n != r ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(d[a]) && n != r) d = d[a];else {
              if (d[a] !== t) return (m = d[a], !1);if (!e.isPlainObject(d[o]) || n == r) return d[o] !== t ? (m = d[o], !1) : (f.error(v.method, i), !1);d = d[o];
            }
          })), e.isFunction(m) ? s = m.apply(a, n) : m !== t && (s = m), e.isArray(o) ? o.push(s) : o !== t ? o = [o, s] : s !== t && (o = s), m);
        } }, f.preinitialize(), d ? (N === t && f.initialize(), f.invoke(s)) : (N !== t && N.invoke("destroy"), f.initialize());
    }), o !== t ? o : this);
  }, e.fn.dimmer.settings = { name: "Dimmer", namespace: "dimmer", debug: !1, verbose: !1, performance: !0, dimmerName: !1, variation: !1, closable: "auto", useCSS: !0, transition: "fade", on: !1, opacity: "auto", duration: { show: 500, hide: 500 }, onChange: function onChange() {}, onShow: function onShow() {}, onHide: function onHide() {}, error: { method: "The method you called is not defined." }, className: { active: "active", animating: "animating", dimmable: "dimmable", dimmed: "dimmed", dimmer: "dimmer", disabled: "disabled", hide: "hide", pageDimmer: "page", show: "show" }, selector: { dimmer: "> .ui.dimmer", content: ".ui.dimmer > .content, .ui.dimmer > .content > .center" }, template: { dimmer: function dimmer() {
        return e("<div />").attr("class", "ui dimmer");
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/dropdown", function(exports, require, module) {
'use strict';;(function($, window, document, undefined){'use strict';$.fn.dropdown = function(parameters){var $allModules=$(this), $document=$(document), moduleSelector=$allModules.selector || '', hasTouch=('ontouchstart' in document.documentElement), time=new Date().getTime(), performance=[], query=arguments[0], methodInvoked=typeof query == 'string', queryArguments=[].slice.call(arguments, 1), returnedValue;$allModules.each(function(elementIndex){var settings=$.isPlainObject(parameters)?$.extend(true, {}, $.fn.dropdown.settings, parameters):$.extend({}, $.fn.dropdown.settings), className=settings.className, message=settings.message, metadata=settings.metadata, namespace=settings.namespace, _regExp=settings.regExp, selector=settings.selector, error=settings.error, templates=settings.templates, eventNamespace='.' + namespace, moduleNamespace='module-' + namespace, $module=$(this), $context=$(settings.context), $text=$module.find(selector.text), $search=$module.find(selector.search), $input=$module.find(selector.input), $icon=$module.find(selector.icon), $combo=$module.prev().find(selector.text).length > 0?$module.prev().find(selector.text):$module.prev(), $menu=$module.children(selector.menu), $item=$menu.find(selector.item), activated=false, itemActivated=false, element=this, instance=$module.data(moduleNamespace), _initialLoad, pageLostFocus, elementNamespace, _id, selectObserver, menuObserver, module;module = {initialize:function initialize(){module.debug('Initializing dropdown', settings);if(module.is.alreadySetup()){module.setup.reference();}else {module.setup.layout();module.refreshData();module.save.defaults();module.restore.selected();module.create.id();if(hasTouch){module.bind.touchEvents();}module.bind.mouseEvents();module.bind.keyboardEvents();module.observeChanges();module.instantiate();}}, instantiate:function instantiate(){module.verbose('Storing instance of dropdown', module);instance = module;$module.data(moduleNamespace, module);}, destroy:function destroy(){module.verbose('Destroying previous dropdown', $module);module.remove.tabbable();$module.off(eventNamespace).removeData(moduleNamespace);$menu.off(eventNamespace);$document.off(elementNamespace);if(selectObserver){selectObserver.disconnect();}if(menuObserver){menuObserver.disconnect();}}, observeChanges:function observeChanges(){if('MutationObserver' in window){selectObserver = new MutationObserver(function(mutations){module.debug('<select> modified, recreating menu');module.setup.select();});menuObserver = new MutationObserver(function(mutations){module.debug('Menu modified, updating selector cache');module.refresh();});if(module.has.input()){selectObserver.observe($input[0], {childList:true, subtree:true});}if(module.has.menu()){menuObserver.observe($menu[0], {childList:true, subtree:true});}module.debug('Setting up mutation observer', selectObserver, menuObserver);}}, create:{id:function id(){_id = (Math.random().toString(16) + '000000000').substr(2, 8);elementNamespace = '.' + _id;module.verbose('Creating unique id for element', _id);}, userChoice:function userChoice(values){var $userChoices, $userChoice, isUserValue, html;values = values || module.get.userValues();if(!values){return false;}values = $.isArray(values)?values:[values];$.each(values, function(index, value){if(module.get.item(value) === false){html = settings.templates.addition(value);$userChoice = $('<div />').html(html).data(metadata.value, value).addClass(className.addition).addClass(className.item);$userChoices = $userChoices === undefined?$userChoice:$userChoices.add($userChoice);module.verbose('Creating user choices for value', value, $userChoice);}});return $userChoices;}, userLabels:function userLabels(value){var userValues=module.get.userValues();if(userValues){module.debug('Adding user labels', userValues);$.each(userValues, function(index, value){module.verbose('Adding custom user value');module.add.label(value, value);});}}}, search:function search(query){query = query !== undefined?query:module.get.query();module.verbose('Searching for query', query);module.filter(query);}, select:{firstUnfiltered:function firstUnfiltered(){module.verbose('Selecting first non-filtered element');module.remove.selectedItem();$item.not(selector.unselectable).eq(0).addClass(className.selected);}, nextAvailable:function nextAvailable($selected){$selected = $selected.eq(0);var $nextAvailable=$selected.nextAll(selector.item).not(selector.unselectable).eq(0), $prevAvailable=$selected.prevAll(selector.item).not(selector.unselectable).eq(0), hasNext=$nextAvailable.length > 0;if(hasNext){module.verbose('Moving selection to', $nextAvailable);$nextAvailable.addClass(className.selected);}else {module.verbose('Moving selection to', $prevAvailable);$prevAvailable.addClass(className.selected);}}}, setup:{api:function api(){var apiSettings={debug:settings.debug, on:false};module.verbose('First request, initializing API');$module.api(apiSettings);}, layout:function layout(){if($module.is('select')){module.setup.select();module.setup.returnedObject();console.log($module);}if(module.is.search() && !module.has.search()){module.verbose('Adding search input');$search = $('<input />').addClass(className.search).insertBefore($text);}if(settings.allowTab){module.set.tabbable();}if($menu.length === 0){$menu = $('<div />').addClass(className.menu).appendTo($module);}}, select:function select(){var selectValues=module.get.selectValues();module.debug('Dropdown initialized on a select', selectValues);if($module.is('select')){$input = $module;}if($input.parent(selector.dropdown).length > 0){module.debug('UI dropdown already exists. Creating dropdown menu only');$module = $input.closest(selector.dropdown);$menu = $module.children(selector.menu);module.setup.menu(selectValues);}else {module.debug('Creating entire dropdown from select');$module = $('<div />').attr('class', $input.attr('class')).addClass(className.selection).addClass(className.dropdown).html(templates.dropdown(selectValues)).insertBefore($input);$input.removeAttr('class').detach().prependTo($module);console.log($module);}if($input.is('[multiple]')){module.set.multiple();}module.refresh();}, menu:function menu(values){$menu.html(templates.menu(values));$item = $menu.find(selector.item);}, reference:function reference(){module.debug('Dropdown behavior was called on select, replacing with closest dropdown');$module = $module.parent(selector.dropdown);module.refresh();module.setup.returnedObject();if(methodInvoked){instance = module;module.invoke(query);}}, returnedObject:function returnedObject(){var $firstModules=$allModules.slice(0, elementIndex), $lastModules=$allModules.slice(elementIndex + 1);$allModules = $firstModules.add($module).add($lastModules);}}, refresh:function refresh(){module.refreshSelectors();module.refreshData();}, refreshSelectors:function refreshSelectors(){module.verbose('Refreshing selector cache');$text = $module.find(selector.text);$search = $module.find(selector.search);$input = $module.find(selector.input);$icon = $module.find(selector.icon);$combo = $module.prev().find(selector.text).length > 0?$module.prev().find(selector.text):$module.prev();$menu = $module.children(selector.menu);$item = $menu.find(selector.item);}, refreshData:function refreshData(){module.verbose('Refreshing cached metadata');$item.removeData(metadata.text).removeData(metadata.value);$module.removeData(metadata.defaultText).removeData(metadata.defaultValue).removeData(metadata.placeholderText);}, toggle:function toggle(){module.verbose('Toggling menu visibility');if(!module.is.active()){module.show();}else {module.hide();}}, show:function show(callback){callback = $.isFunction(callback)?callback:function(){};if(module.can.show() && !module.is.active()){module.debug('Showing dropdown');if(module.is.multiple()){if(!module.has.search() && module.is.allFiltered()){return true;}}module.animate.show(function(){if(module.can.click()){module.bind.intent();}module.set.visible();callback.call(element);});settings.onShow.call(element);}}, hide:function hide(callback){callback = $.isFunction(callback)?callback:function(){};if(module.is.active()){module.debug('Hiding dropdown');module.animate.hide(function(){module.remove.visible();callback.call(element);});settings.onHide.call(element);}}, hideOthers:function hideOthers(){module.verbose('Finding other dropdowns to hide');$allModules.not($module).has(selector.menu + '.' + className.visible).dropdown('hide');}, hideMenu:function hideMenu(){module.verbose('Hiding menu  instantaneously');module.remove.active();module.remove.visible();$menu.transition('hide');}, hideSubMenus:function hideSubMenus(){var $subMenus=$menu.children(selector.item).find(selector.menu);module.verbose('Hiding sub menus', $subMenus);$subMenus.transition('hide');}, bind:{keyboardEvents:function keyboardEvents(){module.debug('Binding keyboard events');$module.on('keydown' + eventNamespace, module.event.keydown);if(module.has.search()){$module.on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input);}if(module.is.multiple()){$document.on('keydown' + elementNamespace, module.event.document.keydown);}}, touchEvents:function touchEvents(){module.debug('Touch device detected binding additional touch events');if(module.is.searchSelection()){}else {$module.on('touchstart' + eventNamespace, module.event.test.toggle);}$menu.on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter);}, mouseEvents:function mouseEvents(){module.debug('Mouse detected binding mouse events');if(module.is.multiple()){$module.on('click' + eventNamespace, selector.label, module.event.label.click).on('click' + eventNamespace, selector.remove, module.event.remove.click);}if(module.is.searchSelection()){$module.on('mousedown' + eventNamespace, selector.menu, module.event.menu.mousedown).on('mouseup' + eventNamespace, selector.menu, module.event.menu.mouseup).on('click' + eventNamespace, selector.search, module.show).on('focus' + eventNamespace, selector.search, module.event.search.focus).on('blur' + eventNamespace, selector.search, module.event.search.blur).on('click' + eventNamespace, selector.text, module.event.text.focus);if(module.is.multiple()){$module.on('click' + eventNamespace, module.event.click);}}else {if(settings.on == 'click'){$module.on('click' + eventNamespace, module.event.test.toggle);}else if(settings.on == 'hover'){$module.on('mouseenter' + eventNamespace, module.delay.show).on('mouseleave' + eventNamespace, module.delay.hide);}else {$module.on(settings.on + eventNamespace, module.toggle);}$module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('focus' + eventNamespace, module.event.focus).on('blur' + eventNamespace, module.event.blur);}$menu.on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter).on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave).on('click' + eventNamespace, selector.item, module.event.item.click);}, intent:function intent(){module.verbose('Binding hide intent event to document');if(hasTouch){$document.on('touchstart' + elementNamespace, module.event.test.touch).on('touchmove' + elementNamespace, module.event.test.touch);}$document.on('click' + elementNamespace, module.event.test.hide);}}, unbind:{intent:function intent(){module.verbose('Removing hide intent event from document');if(hasTouch){$document.off('touchstart' + elementNamespace).off('touchmove' + elementNamespace);}$document.off('click' + elementNamespace);}}, filter:function filter(query){var searchTerm=query !== undefined?query:module.get.query(), afterFiltered=function afterFiltered(){if(module.is.multiple()){module.filterActive();}module.select.firstUnfiltered();if(module.has.allResultsFiltered()){if(settings.onNoResults.call(element, searchTerm)){if(!settings.allowAdditions){module.verbose('All items filtered, showing message', searchTerm);module.add.message(message.noResults);}}else {module.verbose('All items filtered, hiding dropdown', searchTerm);module.hideMenu();}}else {module.remove.message();}if(settings.allowAdditions){module.add.userSuggestion(query);}if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch()){module.show();}};if(module.has.maxSelections()){return;}if(settings.apiSettings){if(module.can.useAPI()){module.queryRemote(searchTerm, function(){afterFiltered();});}else {module.error(error.noAPI);}}else {module.filterItems(searchTerm);afterFiltered();}}, queryRemote:function queryRemote(query, callback){var apiSettings={errorDuration:false, throttle:settings.throttle, cache:'local', urlData:{query:query}, onError:function onError(){module.add.message(message.serverError);callback();}, onFailure:function onFailure(){module.add.message(message.serverError);callback();}, onSuccess:function onSuccess(response){module.remove.message();module.setup.menu({values:response.results});callback();}};if(!$module.api('get request')){module.setup.api();}apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);$module.api('setting', apiSettings).api('query');}, filterItems:function filterItems(query){var searchTerm=query !== undefined?query:module.get.query(), $results=$(), escapedTerm=module.escape.regExp(searchTerm), beginsWithRegExp=new RegExp('^' + escapedTerm, 'igm');if(searchTerm === ''){$results = $item;}else {module.verbose('Searching for matching values', searchTerm);$item.each(function(){var $choice=$(this), text, value;if(settings.match == 'both' || settings.match == 'text'){text = String(module.get.choiceText($choice, false));if(text.search(beginsWithRegExp) !== -1){$results = $results.add($choice);return true;}else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, text)){$results = $results.add($choice);return true;}}if(settings.match == 'both' || settings.match == 'value'){value = String(module.get.choiceValue($choice, text));if(value.search(beginsWithRegExp) !== -1){$results = $results.add($choice);return true;}else if(settings.fullTextSearch && module.fuzzySearch(searchTerm, value)){$results = $results.add($choice);return true;}}});}module.debug('Showing only matched items', searchTerm);module.remove.filteredItem();$item.not($results).addClass(className.filtered);}, fuzzySearch:function fuzzySearch(query, term){var termLength=term.length, queryLength=query.length;query = query.toLowerCase();term = term.toLowerCase();if(queryLength > termLength){return false;}if(queryLength === termLength){return query === term;}search: for(var characterIndex=0, nextCharacterIndex=0; characterIndex < queryLength; characterIndex++) {var queryCharacter=query.charCodeAt(characterIndex);while(nextCharacterIndex < termLength) {if(term.charCodeAt(nextCharacterIndex++) === queryCharacter){continue search;}}return false;}return true;}, filterActive:function filterActive(){if(settings.useLabels){$item.filter('.' + className.active).addClass(className.filtered);}}, focusSearch:function focusSearch(){if(module.is.search() && !module.is.focusedOnSearch()){$search[0].focus();}}, forceSelection:function forceSelection(){var $currentlySelected=$item.not(className.filtered).filter('.' + className.selected).eq(0), $activeItem=$item.not(className.filtered).filter('.' + className.active).eq(0), $selectedItem=$currentlySelected.length > 0?$currentlySelected:$activeItem, hasSelected=$selectedItem.size() > 0;if(hasSelected){module.debug('Forcing partial selection to selected item', $selectedItem);module.event.item.click.call($selectedItem);}else {module.hide();}}, event:{focus:function focus(){if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus){module.show();}}, click:function click(event){var $target=$(event.target);if(($target.is($module) || $target.is($icon)) && !module.is.focusedOnSearch()){module.focusSearch();}}, blur:function blur(event){pageLostFocus = document.activeElement === this;if(!activated && !pageLostFocus){module.remove.activeLabel();module.hide();}}, mousedown:function mousedown(){activated = true;}, mouseup:function mouseup(){activated = false;}, search:{focus:function focus(){activated = true;if(module.is.multiple()){module.remove.activeLabel();}if(settings.showOnFocus){module.show();}}, blur:function blur(event){pageLostFocus = document.activeElement === this;if(!itemActivated && !pageLostFocus){if(module.is.multiple()){module.remove.activeLabel();module.hide();}else if(settings.forceSelection){module.forceSelection();}else {module.hide();}}}}, text:{focus:function focus(event){activated = true;module.focusSearch();}}, input:function input(event){if(module.is.multiple() || module.is.searchSelection()){module.set.filtered();}clearTimeout(module.timer);module.timer = setTimeout(module.search, settings.delay.search);}, label:{click:function click(event){var $label=$(this), $labels=$module.find(selector.label), $activeLabels=$labels.filter('.' + className.active), $nextActive=$label.nextAll('.' + className.active), $prevActive=$label.prevAll('.' + className.active), $range=$nextActive.length > 0?$label.nextUntil($nextActive).add($activeLabels).add($label):$label.prevUntil($prevActive).add($activeLabels).add($label);if(event.shiftKey){$activeLabels.removeClass(className.active);$range.addClass(className.active);}else if(event.ctrlKey){$label.toggleClass(className.active);}else {$activeLabels.removeClass(className.active);$label.addClass(className.active);}settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));}}, remove:{click:function click(){var $label=$(this).parent();if($label.hasClass(className.active)){module.remove.activeLabels();}else {module.remove.activeLabels($label);}}}, test:{toggle:function toggle(event){var toggleBehavior=module.is.multiple()?module.show:module.toggle;if(module.determine.eventOnElement(event, toggleBehavior)){event.preventDefault();}}, touch:function touch(event){module.determine.eventOnElement(event, function(){if(event.type == 'touchstart'){module.timer = setTimeout(module.hide, settings.delay.touch);}else if(event.type == 'touchmove'){clearTimeout(module.timer);}});event.stopPropagation();}, hide:function hide(event){module.determine.eventInModule(event, module.hide);}}, menu:{mousedown:function mousedown(){itemActivated = true;}, mouseup:function mouseup(){itemActivated = false;}}, item:{mouseenter:function mouseenter(event){var $subMenu=$(this).children(selector.menu), $otherMenus=$(this).siblings(selector.item).children(selector.menu);if($subMenu.length > 0){clearTimeout(module.itemTimer);module.itemTimer = setTimeout(function(){module.verbose('Showing sub-menu', $subMenu);$.each($otherMenus, function(){module.animate.hide(false, $(this));});module.animate.show(false, $subMenu);}, settings.delay.show);event.preventDefault();}}, mouseleave:function mouseleave(event){var $subMenu=$(this).children(selector.menu);if($subMenu.length > 0){clearTimeout(module.itemTimer);module.itemTimer = setTimeout(function(){module.verbose('Hiding sub-menu', $subMenu);module.animate.hide(false, $subMenu);}, settings.delay.hide);}}, click:function click(event){var $choice=$(this), $target=event?$(event.target):$(''), $subMenu=$choice.find(selector.menu), text=module.get.choiceText($choice), value=module.get.choiceValue($choice, text), hasSubMenu=$subMenu.length > 0, isBubbledEvent=$subMenu.find($target).length > 0;if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)){if(!settings.useLabels){module.remove.searchTerm();}module.determine.selectAction.call(this, text, value);}}}, document:{keydown:function keydown(event){var pressedKey=event.which, keys=module.get.shortcutKeys(), isShortcutKey=module.is.inObject(pressedKey, keys);if(isShortcutKey){var $label=$module.find(selector.label), $activeLabel=$label.filter('.' + className.active), activeValue=$activeLabel.data('value'), labelIndex=$label.index($activeLabel), labelCount=$label.length, hasActiveLabel=$activeLabel.length > 0, hasMultipleActive=$activeLabel.length > 1, isFirstLabel=labelIndex === 0, isLastLabel=labelIndex + 1 == labelCount, isSearch=module.is.searchSelection(), isFocusedOnSearch=module.is.focusedOnSearch(), isFocused=module.is.focused(), caretAtStart=isFocusedOnSearch && module.get.caretPosition() === 0, $nextLabel;if(isSearch && !hasActiveLabel && !isFocusedOnSearch){return;}if(pressedKey == keys.leftArrow){if((isFocused || caretAtStart) && !hasActiveLabel){module.verbose('Selecting previous label');$label.last().addClass(className.active);}else if(hasActiveLabel){if(!event.shiftKey){module.verbose('Selecting previous label');$label.removeClass(className.active);}else {module.verbose('Adding previous label to selection');}if(isFirstLabel && !hasMultipleActive){$activeLabel.addClass(className.active);}else {$activeLabel.prev(selector.siblingLabel).addClass(className.active).end();}event.preventDefault();}}else if(pressedKey == keys.rightArrow){if(isFocused && !hasActiveLabel){$label.first().addClass(className.active);}if(hasActiveLabel){if(!event.shiftKey){module.verbose('Selecting next label');$label.removeClass(className.active);}else {module.verbose('Adding next label to selection');}if(isLastLabel){if(isSearch){if(!isFocusedOnSearch){module.focusSearch();}else {$label.removeClass(className.active);}}else if(hasMultipleActive){$activeLabel.next(selector.siblingLabel).addClass(className.active);}else {$activeLabel.addClass(className.active);}}else {$activeLabel.next(selector.siblingLabel).addClass(className.active);}event.preventDefault();}}else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace){if(hasActiveLabel){module.verbose('Removing active labels');if(isLastLabel){if(isSearch && !isFocusedOnSearch){module.focusSearch();}}$activeLabel.last().next(selector.siblingLabel).addClass(className.active);module.remove.activeLabels($activeLabel);event.preventDefault();}else if(caretAtStart && !hasActiveLabel && pressedKey == keys.backspace){module.verbose('Removing last label on input backspace');$activeLabel = $label.last().addClass(className.active);module.remove.activeLabels($activeLabel);}}else {$activeLabel.removeClass(className.active);}}}}, keydown:function keydown(event){var pressedKey=event.which, keys=module.get.shortcutKeys(), isShortcutKey=module.is.inObject(pressedKey, keys);if(isShortcutKey){var $currentlySelected=$item.not(selector.unselectable).filter('.' + className.selected).eq(0), $activeItem=$menu.children('.' + className.active).eq(0), $selectedItem=$currentlySelected.length > 0?$currentlySelected:$activeItem, $visibleItems=$selectedItem.length > 0?$selectedItem.siblings(':not(.' + className.filtered + ')').andSelf():$menu.children(':not(.' + className.filtered + ')'), $subMenu=$selectedItem.children(selector.menu), $parentMenu=$selectedItem.closest(selector.menu), inVisibleMenu=$parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0, hasSubMenu=$subMenu.length > 0, hasSelectedItem=$selectedItem.length > 0, selectedIsVisible=$selectedItem.not(selector.unselectable).length > 0, $nextItem, isSubMenuItem, newIndex;if(module.is.visible()){if(pressedKey == keys.enter || pressedKey == keys.delimiter){if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection){module.verbose('Pressed enter on unselectable category, opening sub menu');pressedKey = keys.rightArrow;}else if(selectedIsVisible){module.verbose('Selecting item from keyboard shortcut', $selectedItem);module.event.item.click.call($selectedItem, event);if(settings.useLabels && module.is.searchSelection()){module.hideAndClear();}else {module.remove.searchTerm();}}event.preventDefault();}if(pressedKey == keys.leftArrow){isSubMenuItem = $parentMenu[0] !== $menu[0];if(isSubMenuItem){module.verbose('Left key pressed, closing sub-menu');module.animate.hide(false, $parentMenu);$selectedItem.removeClass(className.selected);$parentMenu.closest(selector.item).addClass(className.selected);event.preventDefault();}}if(pressedKey == keys.rightArrow){if(hasSubMenu){module.verbose('Right key pressed, opening sub-menu');module.animate.show(false, $subMenu);$selectedItem.removeClass(className.selected);$subMenu.find(selector.item).eq(0).addClass(className.selected);event.preventDefault();}}if(pressedKey == keys.upArrow){$nextItem = hasSelectedItem && inVisibleMenu?$selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0):$item.eq(0);if($visibleItems.index($nextItem) < 0){module.verbose('Up key pressed but reached top of current menu');event.preventDefault();return;}else {module.verbose('Up key pressed, changing active item');$selectedItem.removeClass(className.selected);$nextItem.addClass(className.selected);module.set.scrollPosition($nextItem);}event.preventDefault();}if(pressedKey == keys.downArrow){$nextItem = hasSelectedItem && inVisibleMenu?$nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0):$item.eq(0);if($nextItem.length === 0){module.verbose('Down key pressed but reached bottom of current menu');event.preventDefault();return;}else {module.verbose('Down key pressed, changing active item');$item.removeClass(className.selected);$nextItem.addClass(className.selected);module.set.scrollPosition($nextItem);}event.preventDefault();}if(pressedKey == keys.pageUp){module.scrollPage('up');event.preventDefault();}if(pressedKey == keys.pageDown){module.scrollPage('down');event.preventDefault();}if(pressedKey == keys.escape){module.verbose('Escape key pressed, closing dropdown');module.hide();}}else {if(pressedKey == keys.delimiter){event.preventDefault();}if(pressedKey == keys.downArrow){module.verbose('Down key pressed, showing dropdown');module.show();event.preventDefault();}}}else {if(module.is.selection() && !module.is.search()){module.set.selectedLetter(String.fromCharCode(pressedKey));}}}}, determine:{selectAction:function selectAction(text, value){module.verbose('Determining action', settings.action);if($.isFunction(module.action[settings.action])){module.verbose('Triggering preset action', settings.action, text, value);module.action[settings.action].call(this, text, value);}else if($.isFunction(settings.action)){module.verbose('Triggering user action', settings.action, text, value);settings.action.call(this, text, value);}else {module.error(error.action, settings.action);}}, eventInModule:function eventInModule(event, callback){callback = $.isFunction(callback)?callback:function(){};if($(event.target).closest($module).length === 0){module.verbose('Triggering event', callback);callback();return true;}else {module.verbose('Event occurred in dropdown, canceling callback');return false;}}, eventOnElement:function eventOnElement(event, callback){var $target=$(event.target);callback = $.isFunction(callback)?callback:function(){};if($target.closest($menu).length === 0){module.verbose('Triggering event', callback);callback();return true;}else {module.verbose('Event occurred in dropdown menu, canceling callback');return false;}}}, action:{nothing:function nothing(){}, activate:function activate(text, value){value = value !== undefined?value:text;module.set.selected(value, $(this));if(module.is.multiple() && !module.is.allFiltered()){return;}else {module.hideAndClear();}}, select:function select(text, value){module.action.activate.call(this);}, combo:function combo(text, value){value = value !== undefined?value:text;module.set.selected(value, $(this));module.hideAndClear();}, hide:function hide(){module.hideAndClear();}}, get:{id:function id(){return _id;}, text:function text(){return $text.text();}, query:function query(){return $.trim($search.val());}, searchWidth:function searchWidth(characterCount){return characterCount * settings.glyphWidth + 'em';}, selectionCount:function selectionCount(){var values=module.get.values();return module.is.multiple()?$.isArray(values)?values.length:0:module.get.value() !== ''?1:0;}, transition:function transition($subMenu){return settings.transition == 'auto'?module.is.upward($subMenu)?'slide up':'slide down':settings.transition;}, userValues:function userValues(){var values=module.get.values();if(!values){return false;}values = $.isArray(values)?values:[values];return $.grep(values, function(value){return module.get.item(value) === false;});}, uniqueArray:function uniqueArray(array){return $.grep(array, function(value, index){return $.inArray(value, array) === index;});}, caretPosition:function caretPosition(){var input=$search.get(0), range, rangeLength;if('selectionStart' in input){return input.selectionStart;}else if(document.selection){input.focus();range = document.selection.createRange();rangeLength = range.text.length;range.moveStart('character', -input.value.length);return range.text.length - rangeLength;}}, shortcutKeys:function shortcutKeys(){return {backspace:8, delimiter:188, deleteKey:46, enter:13, escape:27, pageUp:33, pageDown:34, leftArrow:37, upArrow:38, rightArrow:39, downArrow:40};}, value:function value(){return $input.length > 0?$input.val():$module.data(metadata.value);}, values:function values(){var value=module.get.value();if(value === ''){return '';}return !$input.is('select') && module.is.multiple()?typeof value == 'string'?value.split(settings.delimiter):'':value;}, remoteValues:function remoteValues(){var values=module.get.values(), remoteValues=false;if(values){if(typeof values == 'string'){values = [values];}remoteValues = {};$.each(values, function(index, value){var name=module.read.remoteData(value);module.verbose('Restoring value from session data', name, value);remoteValues[value] = name?name:value;});}return remoteValues;}, choiceText:function choiceText($choice, preserveHTML){preserveHTML = preserveHTML !== undefined?preserveHTML:settings.preserveHTML;if($choice){if($choice.find(selector.menu).length > 0){module.verbose('Retreiving text of element with sub-menu');$choice = $choice.clone();$choice.find(selector.menu).remove();$choice.find(selector.menuIcon).remove();}return $choice.data(metadata.text) !== undefined?$choice.data(metadata.text):preserveHTML?$choice.html().trim():$choice.text().trim();}}, choiceValue:function choiceValue($choice, choiceText){choiceText = choiceText || module.get.choiceText($choice);if(!$choice){return false;}return $choice.data(metadata.value) !== undefined?$choice.data(metadata.value):typeof choiceText === 'string'?choiceText.toLowerCase().trim():choiceText;}, inputEvent:function inputEvent(){var input=$search[0];if(input){return input.oninput !== undefined?'input':input.onpropertychange !== undefined?'propertychange':'keyup';}return false;}, selectValues:function selectValues(){var select={};select.values = [];$module.find('option').each(function(){var $option=$(this), name=$option.html(), disabled=$option.attr('disabled'), value=$option.attr('value') !== undefined?$option.attr('value'):name;if(settings.placeholder === 'auto' && value === ''){select.placeholder = name;}else {select.values.push({name:name, value:value, disabled:disabled});}});if(settings.placeholder && settings.placeholder !== 'auto'){module.debug('Setting placeholder value to', settings.placeholder);select.placeholder = settings.placeholder;}if(settings.sortSelect){select.values.sort(function(a, b){return a.name > b.name?1:-1;});module.debug('Retrieved and sorted values from select', select);}else {module.debug('Retreived values from select', select);}return select;}, activeItem:function activeItem(){return $item.filter('.' + className.active);}, selectedItem:function selectedItem(){var $selectedItem=$item.not(selector.unselectable).filter('.' + className.selected);return $selectedItem.length > 0?$selectedItem:$item.eq(0);}, itemWithAdditions:function itemWithAdditions(value){var $items=module.get.item(value), $userItems=module.create.userChoice(value), hasUserItems=$userItems && $userItems.length > 0;if(hasUserItems){$items = $items.length > 0?$items.add($userItems):$userItems;}return $items;}, item:function item(value, strict){var $selectedItem=false, shouldSearch, isMultiple;value = value !== undefined?value:module.get.values() !== undefined?module.get.values():module.get.text();shouldSearch = isMultiple?value.length > 0:value !== undefined && value !== '' && value !== null;isMultiple = module.is.multiple() && $.isArray(value);strict = value === '' || value === 0?true:strict || false;if(shouldSearch){$item.each(function(){var $choice=$(this), optionText=module.get.choiceText($choice), optionValue=module.get.choiceValue($choice, optionText);if(optionValue === null || optionValue === undefined){return;}if(isMultiple){if($.inArray(optionValue.toString(), value) !== -1 || $.inArray(optionText, value) !== -1){$selectedItem = $selectedItem?$selectedItem.add($choice):$choice;}}else if(strict){module.verbose('Ambiguous dropdown value using strict type check', $choice, value);if(optionValue === value || optionText === value){$selectedItem = $choice;return true;}}else {if(optionValue.toString() == value.toString() || optionText == value){module.verbose('Found select item by value', optionValue, value);$selectedItem = $choice;return true;}}});}return $selectedItem;}}, check:{maxSelections:function maxSelections(selectionCount){if(settings.maxSelections){selectionCount = selectionCount !== undefined?selectionCount:module.get.selectionCount();if(selectionCount >= settings.maxSelections){module.debug('Maximum selection count reached');$item.addClass(className.filtered);module.add.message(message.maxSelections);return true;}else {module.verbose('No longer at maximum selection count');module.remove.message();module.remove.filteredItem();if(module.is.searchSelection()){module.filterItems();}return false;}}return true;}}, restore:{defaults:function defaults(){module.restore.defaultText();module.restore.defaultValue();}, defaultText:function defaultText(){var defaultText=$module.data(metadata.defaultText);module.debug('Restoring default text', defaultText);module.set.text(defaultText);$text.addClass(className.placeholder);}, defaultValue:function defaultValue(){var defaultValue=$module.data(metadata.defaultValue);if(defaultValue !== undefined){module.debug('Restoring default value', defaultValue);if(defaultValue !== ''){module.set.value(defaultValue);module.set.selected();}else {module.remove.activeItem();module.remove.selectedItem();}}}, labels:function labels(){if(settings.allowAdditions){if(!settings.useLabels){module.error(error.labels);settings.useLabels = true;}module.debug('Restoring selected values');module.create.userLabels();}module.check.maxSelections();}, selected:function selected(){module.restore.values();if(module.is.multiple()){module.debug('Restoring previously selected values and labels');module.restore.labels();}else {module.debug('Restoring previously selected values');}}, values:function values(){module.set.initialLoad();if(settings.apiSettings){if(settings.saveRemoteData){module.restore.remoteValues();}else {module.clearValue();}}else {module.set.selected();}module.remove.initialLoad();}, remoteValues:function remoteValues(){var values=module.get.remoteValues();module.debug('Recreating selected from session data', values);if(values){if(module.is.single()){$.each(values, function(value, name){module.set.text(name);});}else {$.each(values, function(value, name){module.add.label(value, name);});}}}}, read:{remoteData:function remoteData(value){var name;if(window.Storage === undefined){module.error(error.noStorage);return;}name = sessionStorage.getItem(value);return name !== undefined?name:false;}}, save:{defaults:function defaults(){module.save.defaultText();module.save.placeholderText();module.save.defaultValue();}, defaultValue:function defaultValue(){var value=module.get.value();module.verbose('Saving default value as', value);$module.data(metadata.defaultValue, value);}, defaultText:function defaultText(){var text=module.get.text();module.verbose('Saving default text as', text);$module.data(metadata.defaultText, text);}, placeholderText:function placeholderText(){var text;if($text.hasClass(className.placeholder)){text = module.get.text();module.verbose('Saving placeholder text as', text);$module.data(metadata.placeholderText, text);}}, remoteData:function remoteData(name, value){if(window.Storage === undefined){module.error(error.noStorage);return;}module.verbose('Saving remote data to session storage', value, name);sessionStorage.setItem(value, name);}}, clear:function clear(){if(module.is.multiple()){module.remove.labels();}else {module.remove.activeItem();module.remove.selectedItem();}module.set.placeholderText();module.clearValue();}, clearValue:function clearValue(){module.set.value('');}, scrollPage:function scrollPage(direction, $selectedItem){var $selectedItem=$selectedItem || module.get.selectedItem(), $menu=$selectedItem.closest(selector.menu), menuHeight=$menu.outerHeight(), currentScroll=$menu.scrollTop(), itemHeight=$item.eq(0).outerHeight(), itemsPerPage=Math.floor(menuHeight / itemHeight), maxScroll=$menu.prop('scrollHeight'), newScroll=direction == 'up'?currentScroll - itemHeight * itemsPerPage:currentScroll + itemHeight * itemsPerPage, $selectableItem=$item.not(selector.unselectable), isWithinRange, $nextSelectedItem, elementIndex;elementIndex = direction == 'up'?$selectableItem.index($selectedItem) - itemsPerPage:$selectableItem.index($selectedItem) + itemsPerPage;isWithinRange = direction == 'up'?elementIndex >= 0:elementIndex < $selectableItem.length;$nextSelectedItem = isWithinRange?$selectableItem.eq(elementIndex):direction == 'up'?$selectableItem.first():$selectableItem.last();if($nextSelectedItem.length > 0){module.debug('Scrolling page', direction, $nextSelectedItem);$selectedItem.removeClass(className.selected);$nextSelectedItem.addClass(className.selected);$menu.scrollTop(newScroll);}}, set:{filtered:function filtered(){var isMultiple=module.is.multiple(), isSearch=module.is.searchSelection(), isSearchMultiple=isMultiple && isSearch, searchValue=isSearch?module.get.query():'', hasSearchValue=typeof searchValue === 'string' && searchValue.length > 0, searchWidth=module.get.searchWidth(searchValue.length), valueIsSet=searchValue !== '';if(isMultiple && hasSearchValue){module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);$search.css('width', searchWidth);}if(hasSearchValue || isSearchMultiple && valueIsSet){module.verbose('Hiding placeholder text');$text.addClass(className.filtered);}else if(!isMultiple || isSearchMultiple && !valueIsSet){module.verbose('Showing placeholder text');$text.removeClass(className.filtered);}}, loading:function loading(){$module.addClass(className.loading);}, placeholderText:function placeholderText(text){text = text || $module.data(metadata.placeholderText);if(text){module.debug('Restoring placeholder text');module.set.text(text);$text.addClass(className.placeholder);}}, tabbable:function tabbable(){if(module.has.search()){module.debug('Added tabindex to searchable dropdown');$search.val('').attr('tabindex', 0);$menu.attr('tabindex', -1);}else {module.debug('Added tabindex to dropdown');if(!$module.attr('tabindex')){$module.attr('tabindex', 0);$menu.attr('tabindex', -1);}}}, initialLoad:function initialLoad(){module.verbose('Setting initial load');_initialLoad = true;}, scrollPosition:function scrollPosition($item, forceScroll){var edgeTolerance=5, $menu, hasActive, offset, itemHeight, itemOffset, menuOffset, menuScroll, menuHeight, abovePage, belowPage;$item = $item || module.get.selectedItem();$menu = $item.closest(selector.menu);hasActive = $item && $item.length > 0;forceScroll = forceScroll !== undefined?forceScroll:false;if($item && $menu.length > 0 && hasActive){itemOffset = $item.position().top;$menu.addClass(className.loading);menuScroll = $menu.scrollTop();menuOffset = $menu.offset().top;itemOffset = $item.offset().top;offset = menuScroll - menuOffset + itemOffset;if(!forceScroll){menuHeight = $menu.height();belowPage = menuScroll + menuHeight < offset + edgeTolerance;abovePage = offset - edgeTolerance < menuScroll;}module.debug('Scrolling to active item', offset);if(forceScroll || abovePage || belowPage){$menu.scrollTop(offset);}$menu.removeClass(className.loading);}}, text:function text(_text){if(settings.action !== 'select'){if(settings.action == 'combo'){module.debug('Changing combo button text', _text, $combo);if(settings.preserveHTML){$combo.html(_text);}else {$combo.text(_text);}}else {module.debug('Changing text', _text, $text);$text.removeClass(className.filtered).removeClass(className.placeholder);if(settings.preserveHTML){$text.html(_text);}else {$text.text(_text);}}}}, selectedLetter:function selectedLetter(letter){var $selectedItem=$item.filter('.' + className.selected), $nextValue=false;$item.each(function(){var $choice=$(this), text=module.get.choiceText($choice, false), firstLetter=String(text).charAt(0).toLowerCase(), matchedLetter=letter.toLowerCase();if(firstLetter == matchedLetter){$nextValue = $choice;return false;}});if($nextValue){module.verbose('Scrolling to next value with letter', letter);module.set.scrollPosition($nextValue);$selectedItem.removeClass(className.selected);$nextValue.addClass(className.selected);}}, direction:function direction($menu){if(settings.direction == 'auto'){if(module.is.onScreen($menu)){module.remove.upward($menu);}else {module.set.upward($menu);}}else if(settings.direction == 'upward'){module.set.upward($menu);}}, upward:function upward($menu){var $element=$menu || $module;$element.addClass(className.upward);}, value:function value(_value, text, $selected){var hasInput=$input.length > 0, isAddition=!module.has.value(_value), currentValue=module.get.values(), stringValue=typeof _value == 'number'?_value.toString():_value, newValue;if(hasInput){if(stringValue == currentValue){module.verbose('Skipping value update already same value', _value, currentValue);if(!module.is.initialLoad()){return;}}module.debug('Updating input value', _value, currentValue);$input.val(_value).trigger('change');}else {module.verbose('Storing value in metadata', _value, $input);if(_value !== currentValue){$module.data(metadata.value, _value);}}if(settings.fireOnInit === false && module.is.initialLoad()){module.verbose('No callback on initial load', settings.onChange);}else {settings.onChange.call(element, _value, text, $selected);}}, active:function active(){$module.addClass(className.active);}, multiple:function multiple(){$module.addClass(className.multiple);}, visible:function visible(){$module.addClass(className.visible);}, selected:function selected(value, $selectedItem){var isMultiple=module.is.multiple(), $userSelectedItem;$selectedItem = settings.allowAdditions?$selectedItem || module.get.itemWithAdditions(value):$selectedItem || module.get.item(value);if(!$selectedItem){return;}module.debug('Setting selected menu item to', $selectedItem);if(module.is.single()){module.remove.activeItem();module.remove.selectedItem();}else if(settings.useLabels){module.remove.selectedItem();}$selectedItem.each(function(){var $selected=$(this), selectedText=module.get.choiceText($selected), selectedValue=module.get.choiceValue($selected, selectedText), isFiltered=$selected.hasClass(className.filtered), isActive=$selected.hasClass(className.active), isUserValue=$selected.hasClass(className.addition), shouldAnimate=isMultiple && $selectedItem.length == 1;if(isMultiple){if(!isActive || isUserValue){if(settings.apiSettings && settings.saveRemoteData){module.save.remoteData(selectedText, selectedValue);}if(settings.useLabels){module.add.value(selectedValue, selectedText, $selected);module.add.label(selectedValue, selectedText, shouldAnimate);$selected.addClass(className.active);module.filterActive();module.select.nextAvailable($selectedItem);}else {module.add.value(selectedValue, selectedText, $selected);module.set.text(module.add.variables(message.count));$selected.addClass(className.active);}}else if(!isFiltered){module.debug('Selected active value, removing label');module.remove.selected(selectedValue);}}else {if(settings.apiSettings && settings.saveRemoteData){module.save.remoteData(selectedText, selectedValue);}module.set.value(selectedValue, selectedText, $selected);module.set.text(selectedText);$selected.addClass(className.active).addClass(className.selected);}});}}, add:{label:function label(value, text, shouldAnimate){var $next=module.is.searchSelection()?$search:$text, $label;$label = $('<a />').addClass(className.label).attr('data-value', value).html(templates.label(value, text));$label = settings.onLabelCreate.call($label, value, text);if(module.has.label(value)){module.debug('Label already exists, skipping', value);return;}if(settings.label.variation){$label.addClass(settings.label.variation);}if(shouldAnimate === true){module.debug('Animating in label', $label);$label.addClass(className.hidden).insertBefore($next).transition(settings.label.transition, settings.label.duration);}else {module.debug('Adding selection label', $label);$label.insertBefore($next);}}, message:function message(_message){var $message=$menu.children(selector.message), html=settings.templates.message(module.add.variables(_message));if($message.length > 0){$message.html(html);}else {$message = $('<div/>').html(html).addClass(className.message).appendTo($menu);}}, optionValue:function optionValue(value){var $option=$input.find('option[value="' + value + '"]'), hasOption=$option.length > 0;if(hasOption){return;}if(selectObserver){selectObserver.disconnect();module.verbose('Temporarily disconnecting mutation observer', value);}$('<option/>').prop('value', value).html(value).appendTo($input);module.verbose('Adding user addition as an <option>', value);if(selectObserver){selectObserver.observe($input[0], {childList:true, subtree:true});}}, userSuggestion:function userSuggestion(value){var $addition=$menu.children(selector.addition), alreadyHasValue=module.get.item(value), hasUserSuggestion=$addition.length > 0, html;if(module.has.maxSelections()){return;}if(value === '' || alreadyHasValue){$addition.remove();return;}$item.removeClass(className.selected);if(hasUserSuggestion){html = settings.templates.addition(value);$addition.html(html).data(metadata.value, value).removeClass(className.filtered).addClass(className.selected);module.verbose('Replacing user suggestion with new value', $addition);}else {$addition = module.create.userChoice(value);$addition.prependTo($menu).addClass(className.selected);module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);}}, variables:function variables(message){var hasCount=message.search('{count}') !== -1, hasMaxCount=message.search('{maxCount}') !== -1, hasTerm=message.search('{term}') !== -1, values, count, query;module.verbose('Adding templated variables to message', message);if(hasCount){count = module.get.selectionCount();message = message.replace('{count}', count);}if(hasMaxCount){count = module.get.selectionCount();message = message.replace('{maxCount}', settings.maxSelections);}if(hasTerm){query = module.get.query();message = message.replace('{term}', query);}return message;}, value:function value(addedValue, addedText, $selectedItem){var currentValue=module.get.values(), newValue;if(addedValue === ''){module.debug('Cannot select blank values from multiselect');return;}if($.isArray(currentValue)){newValue = currentValue.concat([addedValue]);newValue = module.get.uniqueArray(newValue);}else {newValue = [addedValue];}if($input.is('select')){if(settings.allowAdditions){module.add.optionValue(addedValue);module.debug('Adding value to select', addedValue, newValue, $input);}}else {newValue = newValue.join(settings.delimiter);module.debug('Setting hidden input to delimited value', newValue, $input);}if(settings.fireOnInit === false && module.is.initialLoad()){module.verbose('No callback on initial load', settings.onAdd);}else {settings.onAdd.call(element, addedValue, addedText, $selectedItem);}module.set.value(newValue, addedValue, addedText, $selectedItem);module.check.maxSelections();}}, remove:{active:function active(){$module.removeClass(className.active);}, activeLabel:function activeLabel(){$module.find(selector.label).removeClass(className.active);}, loading:function loading(){$module.removeClass(className.loading);}, initialLoad:function initialLoad(){_initialLoad = false;}, upward:function upward($menu){var $element=$menu || $module;$element.removeClass(className.upward);}, visible:function visible(){$module.removeClass(className.visible);}, activeItem:function activeItem(){$item.removeClass(className.active);}, filteredItem:function filteredItem(){if(module.has.maxSelections()){return;}if(settings.useLabels){$item.not('.' + className.active).removeClass(className.filtered);}else {$item.removeClass(className.filtered);}}, message:function message(){$menu.children(selector.message).remove();}, searchTerm:function searchTerm(){module.verbose('Cleared search term');$search.val('');module.set.filtered();}, selected:function selected(value, $selectedItem){$selectedItem = settings.allowAdditions?$selectedItem || module.get.itemWithAdditions(value):$selectedItem || module.get.item(value);if(!$selectedItem){return false;}$selectedItem.each(function(){var $selected=$(this), selectedText=module.get.choiceText($selected), selectedValue=module.get.choiceValue($selected, selectedText);if(module.is.multiple()){if(settings.useLabels){module.remove.value(selectedValue, selectedText, $selected);module.remove.label(selectedValue);}else {module.remove.value(selectedValue, selectedText, $selected);module.set.text(module.add.variables(message.count));}}else {module.remove.value(selectedValue, selectedText, $selected);}$selected.removeClass(className.filtered).removeClass(className.active);if(settings.useLabels){$selected.removeClass(className.selected);}});}, selectedItem:function selectedItem(){$item.removeClass(className.selected);}, value:function value(removedValue, removedText, $removedItem){var values=$input.val(), newValue;if($input.is('select')){module.verbose('Input is <select> removing selected option', removedValue);newValue = module.remove.arrayValue(removedValue, values);}else {module.verbose('Removing from delimited values', removedValue);values = values.split(settings.delimiter);newValue = module.remove.arrayValue(removedValue, values);newValue = newValue.join(settings.delimiter);}if(settings.fireOnInit === false && module.is.initialLoad()){module.verbose('No callback on initial load', settings.onRemove);}else {settings.onRemove.call(element, removedValue, removedText, $removedItem);}module.set.value(newValue, removedText, $removedItem);module.check.maxSelections();}, arrayValue:function arrayValue(removedValue, values){values = $.grep(values, function(value){return removedValue != value;});module.verbose('Removed value from delimited string', removedValue, values);return values;}, label:function label(value){var $labels=$module.find(selector.label), $removedLabel=$labels.filter('[data-value="' + value + '"]'), labelCount=$labels.length, isLastLabel=$labels.index($removedLabel) + 1 == labelCount, shouldAnimate=(!module.is.searchSelection() || !module.is.focusedOnSearch()) && isLastLabel;if(shouldAnimate){module.verbose('Animating and removing label', $removedLabel);$removedLabel.transition(settings.label.transition, settings.label.duration, function(){$removedLabel.remove();});}else {module.verbose('Removing label', $removedLabel);$removedLabel.remove();}}, activeLabels:function activeLabels($activeLabels){$activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);module.verbose('Removing active label selections', $activeLabels);module.remove.labels($activeLabels);}, labels:function labels($labels){$labels = $labels || $module.find(selector.label);module.verbose('Removing labels', $labels);$labels.each(function(){var value=$(this).data('value'), isUserValue=module.is.userValue(value);if(isUserValue){module.remove.value(value);module.remove.label(value);}else {module.remove.selected(value);}});}, tabbable:function tabbable(){if(module.has.search()){module.debug('Searchable dropdown initialized');$search.attr('tabindex', '-1');$menu.attr('tabindex', '-1');}else {module.debug('Simple selection dropdown initialized');$module.attr('tabindex', '-1');$menu.attr('tabindex', '-1');}}}, has:{search:function search(){return $search.length > 0;}, input:function input(){return $input.length > 0;}, menu:function menu(){return $menu.length > 0;}, message:function message(){return $menu.children(selector.message).length !== 0;}, label:function label(value){var $labels=$module.find(selector.label);return $labels.filter('[data-value="' + value + '"]').length > 0;}, maxSelections:function maxSelections(){return settings.maxSelections && module.get.selectionCount() >= settings.maxSelections;}, allResultsFiltered:function allResultsFiltered(){return $item.filter(selector.unselectable).length === $item.length;}, value:function value(_value2){var values=module.get.values(), hasValue=$.isArray(values)?values && $.inArray(_value2, values) !== -1:values == _value2;return hasValue?true:false;}}, is:{active:function active(){return $module.hasClass(className.active);}, alreadySetup:function alreadySetup(){return $module.is('select') && $module.parent(selector.dropdown).length > 0 && $module.prev().length === 0;}, animating:function animating($subMenu){return $subMenu?$subMenu.transition && $subMenu.transition('is animating'):$menu.transition && $menu.transition('is animating');}, focused:function focused(){return document.activeElement === $module[0];}, focusedOnSearch:function focusedOnSearch(){return document.activeElement === $search[0];}, allFiltered:function allFiltered(){return (module.is.multiple() || module.has.search()) && !module.has.message() && module.has.allResultsFiltered();}, hidden:function hidden($subMenu){return !module.is.visible($subMenu);}, initialLoad:function initialLoad(){return _initialLoad;}, onScreen:function onScreen($subMenu){var $currentMenu=$subMenu || $menu, canOpenDownward=true, onScreen={}, calculations;$currentMenu.addClass(className.loading);calculations = {context:{scrollTop:$context.scrollTop(), height:$context.outerHeight()}, menu:{offset:$currentMenu.offset(), height:$currentMenu.outerHeight()}};onScreen = {above:calculations.context.scrollTop <= calculations.menu.offset.top - calculations.menu.height, below:calculations.context.scrollTop + calculations.context.height >= calculations.menu.offset.top + calculations.menu.height};if(onScreen.below){module.verbose('Dropdown can fit in context downward', onScreen);canOpenDownward = true;}else if(!onScreen.below && !onScreen.above){module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);canOpenDownward = true;}else {module.verbose('Dropdown cannot fit below, opening upward', onScreen);canOpenDownward = false;}$currentMenu.removeClass(className.loading);return canOpenDownward;}, inObject:function inObject(needle, object){var found=false;$.each(object, function(index, property){if(property == needle){found = true;return true;}});return found;}, multiple:function multiple(){return $module.hasClass(className.multiple);}, single:function single(){return !module.is.multiple();}, selectMutation:function selectMutation(mutations){var selectChanged=false;$.each(mutations, function(index, mutation){if(mutation.target && $(mutation.target).is('select')){selectChanged = true;return true;}});return selectChanged;}, search:function search(){return $module.hasClass(className.search);}, searchSelection:function searchSelection(){return module.has.search() && $search.closest(selector.menu).length === 0;}, selection:function selection(){return $module.hasClass(className.selection);}, userValue:function userValue(value){return $.inArray(value, module.get.userValues()) !== -1;}, upward:function upward($menu){var $element=$menu || $module;return $element.hasClass(className.upward);}, visible:function visible($subMenu){return $subMenu?$subMenu.hasClass(className.visible):$menu.hasClass(className.visible);}}, can:{click:function click(){return hasTouch || settings.on == 'click';}, show:function show(){return !$module.hasClass(className.disabled) && $item.length > 0;}, useAPI:function useAPI(){return $.fn.api !== undefined;}}, animate:{show:function show(callback, $subMenu){var $currentMenu=$subMenu || $menu, start=$subMenu?function(){}:function(){module.hideSubMenus();module.hideOthers();module.set.active();}, transition;callback = $.isFunction(callback)?callback:function(){};module.verbose('Doing menu show animation', $currentMenu);module.set.direction($subMenu);transition = module.get.transition($subMenu);if(module.is.selection()){module.set.scrollPosition(module.get.selectedItem(), true);}if(module.is.hidden($currentMenu) || module.is.animating($currentMenu)){if(transition == 'none'){start();$currentMenu.transition('show');callback.call(element);}else if($.fn.transition !== undefined && $module.transition('is supported')){$currentMenu.transition({animation:transition + ' in', debug:settings.debug, verbose:settings.verbose, duration:settings.duration, queue:true, onStart:start, onComplete:function onComplete(){callback.call(element);}});}else {module.error(error.noTransition, transition);}}}, hide:function hide(callback, $subMenu){var $currentMenu=$subMenu || $menu, duration=$subMenu?settings.duration * 0.9:settings.duration, start=$subMenu?function(){}:function(){if(module.can.click()){module.unbind.intent();}module.remove.active();}, transition=module.get.transition($subMenu);callback = $.isFunction(callback)?callback:function(){};if(module.is.visible($currentMenu) || module.is.animating($currentMenu)){module.verbose('Doing menu hide animation', $currentMenu);if(transition == 'none'){start();$currentMenu.transition('hide');callback.call(element);}else if($.fn.transition !== undefined && $module.transition('is supported')){$currentMenu.transition({animation:transition + ' out', duration:settings.duration, debug:settings.debug, verbose:settings.verbose, queue:true, onStart:start, onComplete:function onComplete(){if(settings.direction == 'auto'){module.remove.upward($subMenu);}callback.call(element);}});}else {module.error(error.transition);}}}}, hideAndClear:function hideAndClear(){if(module.has.search()){module.remove.searchTerm();module.hide(function(){module.remove.filteredItem();});}else {module.hide();}}, delay:{show:function show(){module.verbose('Delaying show event to ensure user intent');clearTimeout(module.timer);module.timer = setTimeout(module.show, settings.delay.show);}, hide:function hide(){module.verbose('Delaying hide event to ensure user intent');clearTimeout(module.timer);module.timer = setTimeout(module.hide, settings.delay.hide);}}, escape:{regExp:function regExp(text){text = String(text);return text.replace(_regExp.escape, '\\$&');}}, setting:function setting(name, value){module.debug('Changing setting', name, value);if($.isPlainObject(name)){$.extend(true, settings, name);}else if(value !== undefined){settings[name] = value;}else {return settings[name];}}, internal:function internal(name, value){if($.isPlainObject(name)){$.extend(true, module, name);}else if(value !== undefined){module[name] = value;}else {return module[name];}}, debug:function debug(){if(settings.debug){if(settings.performance){module.performance.log(arguments);}else {module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');module.debug.apply(console, arguments);}}}, verbose:function verbose(){if(settings.verbose && settings.debug){if(settings.performance){module.performance.log(arguments);}else {module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');module.verbose.apply(console, arguments);}}}, error:function error(){module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');module.error.apply(console, arguments);}, performance:{log:function log(message){var currentTime, executionTime, previousTime;if(settings.performance){currentTime = new Date().getTime();previousTime = time || currentTime;executionTime = currentTime - previousTime;time = currentTime;performance.push({'Name':message[0], 'Arguments':[].slice.call(message, 1) || '', 'Element':element, 'Execution Time':executionTime});}clearTimeout(module.performance.timer);module.performance.timer = setTimeout(module.performance.display, 500);}, display:function display(){var title=settings.name + ':', totalTime=0;time = false;clearTimeout(module.performance.timer);$.each(performance, function(index, data){totalTime += data['Execution Time'];});title += ' ' + totalTime + 'ms';if(moduleSelector){title += ' \'' + moduleSelector + '\'';}if((console.group !== undefined || console.table !== undefined) && performance.length > 0){console.groupCollapsed(title);if(console.table){console.table(performance);}else {$.each(performance, function(index, data){console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');});}console.groupEnd();}performance = [];}}, invoke:function invoke(query, passedArguments, context){var object=instance, maxDepth, found, response;passedArguments = passedArguments || queryArguments;context = element || context;if(typeof query == 'string' && object !== undefined){query = query.split(/[\. ]/);maxDepth = query.length - 1;$.each(query, function(depth, value){var camelCaseValue=depth != maxDepth?value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1):query;if($.isPlainObject(object[camelCaseValue]) && depth != maxDepth){object = object[camelCaseValue];}else if(object[camelCaseValue] !== undefined){found = object[camelCaseValue];return false;}else if($.isPlainObject(object[value]) && depth != maxDepth){object = object[value];}else if(object[value] !== undefined){found = object[value];return false;}else {module.error(error.method, query);return false;}});}if($.isFunction(found)){response = found.apply(context, passedArguments);}else if(found !== undefined){response = found;}if($.isArray(returnedValue)){returnedValue.push(response);}else if(returnedValue !== undefined){returnedValue = [returnedValue, response];}else if(response !== undefined){returnedValue = response;}return found;}};if(methodInvoked){if(instance === undefined){module.initialize();}module.invoke(query);}else {if(instance !== undefined){instance.invoke('destroy');}module.initialize();}});return returnedValue !== undefined?returnedValue:$allModules;};$.fn.dropdown.settings = {debug:false, verbose:false, performance:true, on:'click', action:'activate', apiSettings:false, saveRemoteData:true, throttle:200, context:window, direction:'auto', keepOnScreen:true, match:'both', fullTextSearch:false, placeholder:'auto', preserveHTML:true, sortSelect:false, forceSelection:true, allowAdditions:false, maxSelections:false, useLabels:true, delimiter:',', showOnFocus:true, allowTab:true, allowCategorySelection:false, fireOnInit:false, transition:'auto', duration:200, glyphWidth:1.0714, label:{transition:'scale', duration:200, variation:false}, delay:{hide:300, show:200, search:20, touch:50}, onChange:function onChange(value, text, $selected){}, onAdd:function onAdd(value, text, $selected){}, onRemove:function onRemove(value, text, $selected){}, onLabelSelect:function onLabelSelect($selectedLabels){}, onLabelCreate:function onLabelCreate(value, text){return $(this);}, onNoResults:function onNoResults(searchTerm){return true;}, onShow:function onShow(){}, onHide:function onHide(){}, name:'Dropdown', namespace:'dropdown', message:{addResult:'Add <b>{term}</b>', count:'{count} selected', maxSelections:'Max {maxCount} selections', noResults:'No results found.', serverError:'There was an error contacting the server'}, error:{action:'You called a dropdown action that was not defined', alreadySetup:'Once a select has been initialized behaviors must be called on the created ui dropdown', labels:'Allowing user additions currently requires the use of labels.', method:'The method you called is not defined.', noAPI:'The API module is required to load resources remotely', noStorage:'Saving remote data requires session storage', noTransition:'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'}, regExp:{escape:/[-[\]{}()*+?.,\\^$|#\s]/g}, metadata:{defaultText:'defaultText', defaultValue:'defaultValue', placeholderText:'placeholder', text:'text', value:'value'}, selector:{addition:'.addition', dropdown:'.ui.dropdown', icon:'> .dropdown.icon', input:'> input[type="hidden"], > select', item:'.item', label:'> .label', remove:'> .label > .delete.icon', siblingLabel:'.label', menu:'.menu', message:'.message', menuIcon:'.dropdown.icon', search:'input.search, .menu > .search > input', text:'> .text:not(.icon)', unselectable:'.disabled, .filtered'}, className:{active:'active', addition:'addition', animating:'animating', disabled:'disabled', dropdown:'ui dropdown', filtered:'filtered', hidden:'hidden transition', item:'item', label:'ui label', loading:'loading', menu:'menu', message:'message', multiple:'multiple', placeholder:'default', search:'search', selected:'selected', selection:'selection', upward:'upward', visible:'visible'}};$.fn.dropdown.settings.templates = {dropdown:function dropdown(select){var placeholder=select.placeholder || false, values=select.values || {}, html='';html += '<i class="dropdown icon"></i>';if(select.placeholder){html += '<div class="default text">' + placeholder + '</div>';}else {html += '<div class="text"></div>';}html += '<div class="menu">';$.each(select.values, function(index, option){html += option.disabled?'<div class="disabled item" data-value="' + option.value + '">' + option.name + '</div>':'<div class="item" data-value="' + option.value + '">' + option.name + '</div>';});html += '</div>';return html;}, menu:function menu(response){var values=response.values || {}, html='';$.each(response.values, function(index, option){html += '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';});return html;}, label:function label(value, text){return text + '<i class="delete icon"></i>';}, message:function message(_message2){return _message2;}, addition:function addition(choice){return choice;}};})(jQuery, window, document);
});

require.register("web/static/css/components/dropdown.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Dropdown
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, i) {
  "use strict";e.fn.dropdown = function (a) {
    var o,
        r = e(this),
        s = e(n),
        l = r.selector || "",
        c = ("ontouchstart" in n.documentElement),
        u = new Date().getTime(),
        d = [],
        v = arguments[0],
        m = "string" == typeof v,
        f = [].slice.call(arguments, 1);return (r.each(function (h) {
      var g,
          b,
          p,
          w,
          x,
          C,
          S,
          y = e.isPlainObject(a) ? e.extend(!0, {}, e.fn.dropdown.settings, a) : e.extend({}, e.fn.dropdown.settings),
          A = y.className,
          T = y.message,
          k = y.metadata,
          L = y.namespace,
          D = y.regExp,
          I = y.selector,
          R = y.error,
          q = y.templates,
          O = "." + L,
          V = "module-" + L,
          E = e(this),
          F = e(y.context),
          P = E.find(I.text),
          M = E.find(I.search),
          z = E.find(I.input),
          H = E.find(I.icon),
          j = E.prev().find(I.text).length > 0 ? E.prev().find(I.text) : E.prev(),
          U = E.children(I.menu),
          N = U.find(I.item),
          K = !1,
          W = !1,
          B = this,
          $ = E.data(V);S = { initialize: function initialize() {
          S.debug("Initializing dropdown", y), S.is.alreadySetup() ? S.setup.reference() : (S.setup.layout(), S.refreshData(), S.save.defaults(), S.restore.selected(), S.create.id(), c && S.bind.touchEvents(), S.bind.mouseEvents(), S.bind.keyboardEvents(), S.observeChanges(), S.instantiate());
        }, instantiate: function instantiate() {
          S.verbose("Storing instance of dropdown", S), $ = S, E.data(V, S);
        }, destroy: function destroy() {
          S.verbose("Destroying previous dropdown", E), S.remove.tabbable(), E.off(O).removeData(V), U.off(O), s.off(p), x && x.disconnect(), C && C.disconnect();
        }, observeChanges: function observeChanges() {
          "MutationObserver" in t && (x = new MutationObserver(function (e) {
            S.debug("<select> modified, recreating menu"), S.setup.select();
          }), C = new MutationObserver(function (e) {
            S.debug("Menu modified, updating selector cache"), S.refresh();
          }), S.has.input() && x.observe(z[0], { childList: !0, subtree: !0 }), S.has.menu() && C.observe(U[0], { childList: !0, subtree: !0 }), S.debug("Setting up mutation observer", x, C));
        }, create: { id: function id() {
            w = (Math.random().toString(16) + "000000000").substr(2, 8), p = "." + w, S.verbose("Creating unique id for element", w);
          }, userChoice: function userChoice(t) {
            var n, a, o;return (t = t || S.get.userValues()) ? (t = e.isArray(t) ? t : [t], e.each(t, function (t, r) {
              S.get.item(r) === !1 && (o = y.templates.addition(r), a = e("<div />").html(o).data(k.value, r).addClass(A.addition).addClass(A.item), n = n === i ? a : n.add(a), S.verbose("Creating user choices for value", r, a));
            }), n) : !1;
          }, userLabels: function userLabels(t) {
            var n = S.get.userValues();n && (S.debug("Adding user labels", n), e.each(n, function (e, t) {
              S.verbose("Adding custom user value"), S.add.label(t, t);
            }));
          } }, search: function search(e) {
          e = e !== i ? e : S.get.query(), S.verbose("Searching for query", e), S.filter(e);
        }, select: { firstUnfiltered: function firstUnfiltered() {
            S.verbose("Selecting first non-filtered element"), S.remove.selectedItem(), N.not(I.unselectable).eq(0).addClass(A.selected);
          }, nextAvailable: function nextAvailable(e) {
            e = e.eq(0);var t = e.nextAll(I.item).not(I.unselectable).eq(0),
                n = e.prevAll(I.item).not(I.unselectable).eq(0),
                i = t.length > 0;i ? (S.verbose("Moving selection to", t), t.addClass(A.selected)) : (S.verbose("Moving selection to", n), n.addClass(A.selected));
          } }, setup: { api: function api() {
            var e = { debug: y.debug, on: !1 };S.verbose("First request, initializing API"), E.api(e);
          }, layout: function layout() {
            E.is("select") && (S.setup.select(), S.setup.returnedObject(), console.log(E)), S.is.search() && !S.has.search() && (S.verbose("Adding search input"), M = e("<input />").addClass(A.search).insertBefore(P)), y.allowTab && S.set.tabbable(), 0 === U.length && (U = e("<div />").addClass(A.menu).appendTo(E));
          }, select: function select() {
            var t = S.get.selectValues();S.debug("Dropdown initialized on a select", t), E.is("select") && (z = E), z.parent(I.dropdown).length > 0 ? (S.debug("UI dropdown already exists. Creating dropdown menu only"), E = z.closest(I.dropdown), U = E.children(I.menu), S.setup.menu(t)) : (S.debug("Creating entire dropdown from select"), E = e("<div />").attr("class", z.attr("class")).addClass(A.selection).addClass(A.dropdown).html(q.dropdown(t)).insertBefore(z), z.removeAttr("class").detach().prependTo(E), console.log(E)), z.is("[multiple]") && S.set.multiple(), S.refresh();
          }, menu: function menu(e) {
            U.html(q.menu(e)), N = U.find(I.item);
          }, reference: function reference() {
            S.debug("Dropdown behavior was called on select, replacing with closest dropdown"), E = E.parent(I.dropdown), S.refresh(), S.setup.returnedObject(), m && ($ = S, S.invoke(v));
          }, returnedObject: function returnedObject() {
            var e = r.slice(0, h),
                t = r.slice(h + 1);r = e.add(E).add(t);
          } }, refresh: function refresh() {
          S.refreshSelectors(), S.refreshData();
        }, refreshSelectors: function refreshSelectors() {
          S.verbose("Refreshing selector cache"), P = E.find(I.text), M = E.find(I.search), z = E.find(I.input), H = E.find(I.icon), j = E.prev().find(I.text).length > 0 ? E.prev().find(I.text) : E.prev(), U = E.children(I.menu), N = U.find(I.item);
        }, refreshData: function refreshData() {
          S.verbose("Refreshing cached metadata"), N.removeData(k.text).removeData(k.value), E.removeData(k.defaultText).removeData(k.defaultValue).removeData(k.placeholderText);
        }, toggle: function toggle() {
          S.verbose("Toggling menu visibility"), S.is.active() ? S.hide() : S.show();
        }, show: function show(t) {
          if ((t = e.isFunction(t) ? t : function () {}, S.can.show() && !S.is.active())) {
            if ((S.debug("Showing dropdown"), S.is.multiple() && !S.has.search() && S.is.allFiltered())) return !0;S.animate.show(function () {
              S.can.click() && S.bind.intent(), S.set.visible(), t.call(B);
            }), y.onShow.call(B);
          }
        }, hide: function hide(t) {
          t = e.isFunction(t) ? t : function () {}, S.is.active() && (S.debug("Hiding dropdown"), S.animate.hide(function () {
            S.remove.visible(), t.call(B);
          }), y.onHide.call(B));
        }, hideOthers: function hideOthers() {
          S.verbose("Finding other dropdowns to hide"), r.not(E).has(I.menu + "." + A.visible).dropdown("hide");
        }, hideMenu: function hideMenu() {
          S.verbose("Hiding menu  instantaneously"), S.remove.active(), S.remove.visible(), U.transition("hide");
        }, hideSubMenus: function hideSubMenus() {
          var e = U.children(I.item).find(I.menu);S.verbose("Hiding sub menus", e), e.transition("hide");
        }, bind: { keyboardEvents: function keyboardEvents() {
            S.debug("Binding keyboard events"), E.on("keydown" + O, S.event.keydown), S.has.search() && E.on(S.get.inputEvent() + O, I.search, S.event.input), S.is.multiple() && s.on("keydown" + p, S.event.document.keydown);
          }, touchEvents: function touchEvents() {
            S.debug("Touch device detected binding additional touch events"), S.is.searchSelection() || E.on("touchstart" + O, S.event.test.toggle), U.on("touchstart" + O, I.item, S.event.item.mouseenter);
          }, mouseEvents: function mouseEvents() {
            S.debug("Mouse detected binding mouse events"), S.is.multiple() && E.on("click" + O, I.label, S.event.label.click).on("click" + O, I.remove, S.event.remove.click), S.is.searchSelection() ? (E.on("mousedown" + O, I.menu, S.event.menu.mousedown).on("mouseup" + O, I.menu, S.event.menu.mouseup).on("click" + O, I.search, S.show).on("focus" + O, I.search, S.event.search.focus).on("blur" + O, I.search, S.event.search.blur).on("click" + O, I.text, S.event.text.focus), S.is.multiple() && E.on("click" + O, S.event.click)) : ("click" == y.on ? E.on("click" + O, S.event.test.toggle) : "hover" == y.on ? E.on("mouseenter" + O, S.delay.show).on("mouseleave" + O, S.delay.hide) : E.on(y.on + O, S.toggle), E.on("mousedown" + O, S.event.mousedown).on("mouseup" + O, S.event.mouseup).on("focus" + O, S.event.focus).on("blur" + O, S.event.blur)), U.on("mouseenter" + O, I.item, S.event.item.mouseenter).on("mouseleave" + O, I.item, S.event.item.mouseleave).on("click" + O, I.item, S.event.item.click);
          }, intent: function intent() {
            S.verbose("Binding hide intent event to document"), c && s.on("touchstart" + p, S.event.test.touch).on("touchmove" + p, S.event.test.touch), s.on("click" + p, S.event.test.hide);
          } }, unbind: { intent: function intent() {
            S.verbose("Removing hide intent event from document"), c && s.off("touchstart" + p).off("touchmove" + p), s.off("click" + p);
          } }, filter: function filter(e) {
          var t = e !== i ? e : S.get.query(),
              n = function n() {
            S.is.multiple() && S.filterActive(), S.select.firstUnfiltered(), S.has.allResultsFiltered() ? y.onNoResults.call(B, t) ? y.allowAdditions || (S.verbose("All items filtered, showing message", t), S.add.message(T.noResults)) : (S.verbose("All items filtered, hiding dropdown", t), S.hideMenu()) : S.remove.message(), y.allowAdditions && S.add.userSuggestion(e), S.is.searchSelection() && S.can.show() && S.is.focusedOnSearch() && S.show();
          };S.has.maxSelections() || (y.apiSettings ? S.can.useAPI() ? S.queryRemote(t, function () {
            n();
          }) : S.error(R.noAPI) : (S.filterItems(t), n()));
        }, queryRemote: function queryRemote(t, n) {
          var i = { errorDuration: !1, throttle: y.throttle, cache: "local", urlData: { query: t }, onError: function onError() {
              S.add.message(T.serverError), n();
            }, onFailure: function onFailure() {
              S.add.message(T.serverError), n();
            }, onSuccess: function onSuccess(e) {
              S.remove.message(), S.setup.menu({ values: e.results }), n();
            } };E.api("get request") || S.setup.api(), i = e.extend(!0, {}, i, y.apiSettings), E.api("setting", i).api("query");
        }, filterItems: function filterItems(t) {
          var n = t !== i ? t : S.get.query(),
              a = e(),
              o = S.escape.regExp(n),
              r = new RegExp("^" + o, "igm");"" === n ? a = N : (S.verbose("Searching for matching values", n), N.each(function () {
            var t,
                i,
                o = e(this);if ("both" == y.match || "text" == y.match) {
              if ((t = String(S.get.choiceText(o, !1)), -1 !== t.search(r))) return (a = a.add(o), !0);if (y.fullTextSearch && S.fuzzySearch(n, t)) return (a = a.add(o), !0);
            }if ("both" == y.match || "value" == y.match) {
              if ((i = String(S.get.choiceValue(o, t)), -1 !== i.search(r))) return (a = a.add(o), !0);if (y.fullTextSearch && S.fuzzySearch(n, i)) return (a = a.add(o), !0);
            }
          })), S.debug("Showing only matched items", n), S.remove.filteredItem(), N.not(a).addClass(A.filtered);
        }, fuzzySearch: function fuzzySearch(e, t) {
          var n = t.length,
              i = e.length;if ((e = e.toLowerCase(), t = t.toLowerCase(), i > n)) return !1;if (i === n) return e === t;e: for (var a = 0, o = 0; i > a; a++) {
            for (var r = e.charCodeAt(a); n > o;) if (t.charCodeAt(o++) === r) continue e;return !1;
          }return !0;
        }, filterActive: function filterActive() {
          y.useLabels && N.filter("." + A.active).addClass(A.filtered);
        }, focusSearch: function focusSearch() {
          S.is.search() && !S.is.focusedOnSearch() && M[0].focus();
        }, forceSelection: function forceSelection() {
          var e = N.not(A.filtered).filter("." + A.selected).eq(0),
              t = N.not(A.filtered).filter("." + A.active).eq(0),
              n = e.length > 0 ? e : t,
              i = n.size() > 0;i ? (S.debug("Forcing partial selection to selected item", n), S.event.item.click.call(n)) : S.hide();
        }, event: { focus: function focus() {
            y.showOnFocus && !K && S.is.hidden() && !b && S.show();
          }, click: function click(t) {
            var n = e(t.target);!n.is(E) && !n.is(H) || S.is.focusedOnSearch() || S.focusSearch();
          }, blur: function blur(e) {
            b = n.activeElement === this, K || b || (S.remove.activeLabel(), S.hide());
          }, mousedown: function mousedown() {
            K = !0;
          }, mouseup: function mouseup() {
            K = !1;
          }, search: { focus: function focus() {
              K = !0, S.is.multiple() && S.remove.activeLabel(), y.showOnFocus && S.show();
            }, blur: function blur(e) {
              b = n.activeElement === this, W || b || (S.is.multiple() ? (S.remove.activeLabel(), S.hide()) : y.forceSelection ? S.forceSelection() : S.hide());
            } }, text: { focus: function focus(e) {
              K = !0, S.focusSearch();
            } }, input: function input(e) {
            (S.is.multiple() || S.is.searchSelection()) && S.set.filtered(), clearTimeout(S.timer), S.timer = setTimeout(S.search, y.delay.search);
          }, label: { click: function click(t) {
              var n = e(this),
                  i = E.find(I.label),
                  a = i.filter("." + A.active),
                  o = n.nextAll("." + A.active),
                  r = n.prevAll("." + A.active),
                  s = o.length > 0 ? n.nextUntil(o).add(a).add(n) : n.prevUntil(r).add(a).add(n);t.shiftKey ? (a.removeClass(A.active), s.addClass(A.active)) : t.ctrlKey ? n.toggleClass(A.active) : (a.removeClass(A.active), n.addClass(A.active)), y.onLabelSelect.apply(this, i.filter("." + A.active));
            } }, remove: { click: function click() {
              var t = e(this).parent();t.hasClass(A.active) ? S.remove.activeLabels() : S.remove.activeLabels(t);
            } }, test: { toggle: function toggle(e) {
              var t = S.is.multiple() ? S.show : S.toggle;S.determine.eventOnElement(e, t) && e.preventDefault();
            }, touch: function touch(e) {
              S.determine.eventOnElement(e, function () {
                "touchstart" == e.type ? S.timer = setTimeout(S.hide, y.delay.touch) : "touchmove" == e.type && clearTimeout(S.timer);
              }), e.stopPropagation();
            }, hide: function hide(e) {
              S.determine.eventInModule(e, S.hide);
            } }, menu: { mousedown: function mousedown() {
              W = !0;
            }, mouseup: function mouseup() {
              W = !1;
            } }, item: { mouseenter: function mouseenter(t) {
              var n = e(this).children(I.menu),
                  i = e(this).siblings(I.item).children(I.menu);n.length > 0 && (clearTimeout(S.itemTimer), S.itemTimer = setTimeout(function () {
                S.verbose("Showing sub-menu", n), e.each(i, function () {
                  S.animate.hide(!1, e(this));
                }), S.animate.show(!1, n);
              }, y.delay.show), t.preventDefault());
            }, mouseleave: function mouseleave(t) {
              var n = e(this).children(I.menu);n.length > 0 && (clearTimeout(S.itemTimer), S.itemTimer = setTimeout(function () {
                S.verbose("Hiding sub-menu", n), S.animate.hide(!1, n);
              }, y.delay.hide));
            }, click: function click(t) {
              var n = e(this),
                  i = e(t ? t.target : ""),
                  a = n.find(I.menu),
                  o = S.get.choiceText(n),
                  r = S.get.choiceValue(n, o),
                  s = a.length > 0,
                  l = a.find(i).length > 0;l || s && !y.allowCategorySelection || (y.useLabels || S.remove.searchTerm(), S.determine.selectAction.call(this, o, r));
            } }, document: { keydown: function keydown(e) {
              var t = e.which,
                  n = S.get.shortcutKeys(),
                  i = S.is.inObject(t, n);if (i) {
                var a = E.find(I.label),
                    o = a.filter("." + A.active),
                    r = (o.data("value"), a.index(o)),
                    s = a.length,
                    l = o.length > 0,
                    c = o.length > 1,
                    u = 0 === r,
                    d = r + 1 == s,
                    v = S.is.searchSelection(),
                    m = S.is.focusedOnSearch(),
                    f = S.is.focused(),
                    h = m && 0 === S.get.caretPosition();if (v && !l && !m) return;t == n.leftArrow ? !f && !h || l ? l && (e.shiftKey ? S.verbose("Adding previous label to selection") : (S.verbose("Selecting previous label"), a.removeClass(A.active)), u && !c ? o.addClass(A.active) : o.prev(I.siblingLabel).addClass(A.active).end(), e.preventDefault()) : (S.verbose("Selecting previous label"), a.last().addClass(A.active)) : t == n.rightArrow ? (f && !l && a.first().addClass(A.active), l && (e.shiftKey ? S.verbose("Adding next label to selection") : (S.verbose("Selecting next label"), a.removeClass(A.active)), d ? v ? m ? a.removeClass(A.active) : S.focusSearch() : c ? o.next(I.siblingLabel).addClass(A.active) : o.addClass(A.active) : o.next(I.siblingLabel).addClass(A.active), e.preventDefault())) : t == n.deleteKey || t == n.backspace ? l ? (S.verbose("Removing active labels"), d && v && !m && S.focusSearch(), o.last().next(I.siblingLabel).addClass(A.active), S.remove.activeLabels(o), e.preventDefault()) : h && !l && t == n.backspace && (S.verbose("Removing last label on input backspace"), o = a.last().addClass(A.active), S.remove.activeLabels(o)) : o.removeClass(A.active);
              }
            } }, keydown: function keydown(e) {
            var t = e.which,
                n = S.get.shortcutKeys(),
                i = S.is.inObject(t, n);if (i) {
              var a,
                  o,
                  r = N.not(I.unselectable).filter("." + A.selected).eq(0),
                  s = U.children("." + A.active).eq(0),
                  l = r.length > 0 ? r : s,
                  c = l.length > 0 ? l.siblings(":not(." + A.filtered + ")").andSelf() : U.children(":not(." + A.filtered + ")"),
                  u = l.children(I.menu),
                  d = l.closest(I.menu),
                  v = d.hasClass(A.visible) || d.hasClass(A.animating) || d.parent(I.menu).length > 0,
                  m = u.length > 0,
                  f = l.length > 0,
                  h = l.not(I.unselectable).length > 0;if (S.is.visible()) {
                if (((t == n.enter || t == n.delimiter) && (t == n.enter && f && m && !y.allowCategorySelection ? (S.verbose("Pressed enter on unselectable category, opening sub menu"), t = n.rightArrow) : h && (S.verbose("Selecting item from keyboard shortcut", l), S.event.item.click.call(l, e), y.useLabels && S.is.searchSelection() ? S.hideAndClear() : S.remove.searchTerm()), e.preventDefault()), t == n.leftArrow && (o = d[0] !== U[0], o && (S.verbose("Left key pressed, closing sub-menu"), S.animate.hide(!1, d), l.removeClass(A.selected), d.closest(I.item).addClass(A.selected), e.preventDefault())), t == n.rightArrow && m && (S.verbose("Right key pressed, opening sub-menu"), S.animate.show(!1, u), l.removeClass(A.selected), u.find(I.item).eq(0).addClass(A.selected), e.preventDefault()), t == n.upArrow)) {
                  if ((a = f && v ? l.prevAll(I.item + ":not(" + I.unselectable + ")").eq(0) : N.eq(0), c.index(a) < 0)) return (S.verbose("Up key pressed but reached top of current menu"), void e.preventDefault());S.verbose("Up key pressed, changing active item"), l.removeClass(A.selected), a.addClass(A.selected), S.set.scrollPosition(a), e.preventDefault();
                }if (t == n.downArrow) {
                  if ((a = f && v ? a = l.nextAll(I.item + ":not(" + I.unselectable + ")").eq(0) : N.eq(0), 0 === a.length)) return (S.verbose("Down key pressed but reached bottom of current menu"), void e.preventDefault());S.verbose("Down key pressed, changing active item"), N.removeClass(A.selected), a.addClass(A.selected), S.set.scrollPosition(a), e.preventDefault();
                }t == n.pageUp && (S.scrollPage("up"), e.preventDefault()), t == n.pageDown && (S.scrollPage("down"), e.preventDefault()), t == n.escape && (S.verbose("Escape key pressed, closing dropdown"), S.hide());
              } else t == n.delimiter && e.preventDefault(), t == n.downArrow && (S.verbose("Down key pressed, showing dropdown"), S.show(), e.preventDefault());
            } else S.is.selection() && !S.is.search() && S.set.selectedLetter(String.fromCharCode(t));
          } }, determine: { selectAction: function selectAction(t, n) {
            S.verbose("Determining action", y.action), e.isFunction(S.action[y.action]) ? (S.verbose("Triggering preset action", y.action, t, n), S.action[y.action].call(this, t, n)) : e.isFunction(y.action) ? (S.verbose("Triggering user action", y.action, t, n), y.action.call(this, t, n)) : S.error(R.action, y.action);
          }, eventInModule: function eventInModule(t, n) {
            return (n = e.isFunction(n) ? n : function () {}, 0 === e(t.target).closest(E).length ? (S.verbose("Triggering event", n), n(), !0) : (S.verbose("Event occurred in dropdown, canceling callback"), !1));
          }, eventOnElement: function eventOnElement(t, n) {
            var i = e(t.target);return (n = e.isFunction(n) ? n : function () {}, 0 === i.closest(U).length ? (S.verbose("Triggering event", n), n(), !0) : (S.verbose("Event occurred in dropdown menu, canceling callback"), !1));
          } }, action: { nothing: function nothing() {}, activate: function activate(t, n) {
            n = n !== i ? n : t, S.set.selected(n, e(this)), (!S.is.multiple() || S.is.allFiltered()) && S.hideAndClear();
          }, select: function select(e, t) {
            S.action.activate.call(this);
          }, combo: function combo(t, n) {
            n = n !== i ? n : t, S.set.selected(n, e(this)), S.hideAndClear();
          }, hide: function hide() {
            S.hideAndClear();
          } }, get: { id: function id() {
            return w;
          }, text: function text() {
            return P.text();
          }, query: function query() {
            return e.trim(M.val());
          }, searchWidth: function searchWidth(e) {
            return e * y.glyphWidth + "em";
          }, selectionCount: function selectionCount() {
            var t = S.get.values();return S.is.multiple() ? e.isArray(t) ? t.length : 0 : "" !== S.get.value() ? 1 : 0;
          }, transition: function transition(e) {
            return "auto" == y.transition ? S.is.upward(e) ? "slide up" : "slide down" : y.transition;
          }, userValues: function userValues() {
            var t = S.get.values();return t ? (t = e.isArray(t) ? t : [t], e.grep(t, function (e) {
              return S.get.item(e) === !1;
            })) : !1;
          }, uniqueArray: function uniqueArray(t) {
            return e.grep(t, function (n, i) {
              return e.inArray(n, t) === i;
            });
          }, caretPosition: function caretPosition() {
            var e,
                t,
                i = M.get(0);return "selectionStart" in i ? i.selectionStart : n.selection ? (i.focus(), e = n.selection.createRange(), t = e.text.length, e.moveStart("character", -i.value.length), e.text.length - t) : void 0;
          }, shortcutKeys: function shortcutKeys() {
            return { backspace: 8, delimiter: 188, deleteKey: 46, enter: 13, escape: 27, pageUp: 33, pageDown: 34, leftArrow: 37, upArrow: 38, rightArrow: 39, downArrow: 40 };
          }, value: function value() {
            return z.length > 0 ? z.val() : E.data(k.value);
          }, values: function values() {
            var e = S.get.value();return "" === e ? "" : !z.is("select") && S.is.multiple() ? "string" == typeof e ? e.split(y.delimiter) : "" : e;
          }, remoteValues: function remoteValues() {
            var t = S.get.values(),
                n = !1;return (t && ("string" == typeof t && (t = [t]), n = {}, e.each(t, function (e, t) {
              var i = S.read.remoteData(t);S.verbose("Restoring value from session data", i, t), n[t] = i ? i : t;
            })), n);
          }, choiceText: function choiceText(e, t) {
            return (t = t !== i ? t : y.preserveHTML, e ? (e.find(I.menu).length > 0 && (S.verbose("Retreiving text of element with sub-menu"), e = e.clone(), e.find(I.menu).remove(), e.find(I.menuIcon).remove()), e.data(k.text) !== i ? e.data(k.text) : t ? e.html().trim() : e.text().trim()) : void 0);
          }, choiceValue: function choiceValue(e, t) {
            return (t = t || S.get.choiceText(e), e ? e.data(k.value) !== i ? e.data(k.value) : "string" == typeof t ? t.toLowerCase().trim() : t : !1);
          }, inputEvent: function inputEvent() {
            var e = M[0];return e ? e.oninput !== i ? "input" : e.onpropertychange !== i ? "propertychange" : "keyup" : !1;
          }, selectValues: function selectValues() {
            var t = {};return (t.values = [], E.find("option").each(function () {
              var n = e(this),
                  a = n.html(),
                  o = n.attr("disabled"),
                  r = n.attr("value") !== i ? n.attr("value") : a;"auto" === y.placeholder && "" === r ? t.placeholder = a : t.values.push({ name: a, value: r, disabled: o });
            }), y.placeholder && "auto" !== y.placeholder && (S.debug("Setting placeholder value to", y.placeholder), t.placeholder = y.placeholder), y.sortSelect ? (t.values.sort(function (e, t) {
              return e.name > t.name ? 1 : -1;
            }), S.debug("Retrieved and sorted values from select", t)) : S.debug("Retreived values from select", t), t);
          }, activeItem: function activeItem() {
            return N.filter("." + A.active);
          }, selectedItem: function selectedItem() {
            var e = N.not(I.unselectable).filter("." + A.selected);return e.length > 0 ? e : N.eq(0);
          }, itemWithAdditions: function itemWithAdditions(e) {
            var t = S.get.item(e),
                n = S.create.userChoice(e),
                i = n && n.length > 0;return (i && (t = t.length > 0 ? t.add(n) : n), t);
          }, item: function item(t, n) {
            var a,
                o,
                r = !1;return (t = t !== i ? t : S.get.values() !== i ? S.get.values() : S.get.text(), a = o ? t.length > 0 : t !== i && "" !== t && null !== t, o = S.is.multiple() && e.isArray(t), n = "" === t || 0 === t ? !0 : n || !1, a && N.each(function () {
              var a = e(this),
                  s = S.get.choiceText(a),
                  l = S.get.choiceValue(a, s);if (null !== l && l !== i) if (o) (-1 !== e.inArray(l.toString(), t) || -1 !== e.inArray(s, t)) && (r = r ? r.add(a) : a);else if (n) {
                if ((S.verbose("Ambiguous dropdown value using strict type check", a, t), l === t || s === t)) return (r = a, !0);
              } else if (l.toString() == t.toString() || s == t) return (S.verbose("Found select item by value", l, t), r = a, !0);
            }), r);
          } }, check: { maxSelections: function maxSelections(e) {
            return y.maxSelections ? (e = e !== i ? e : S.get.selectionCount(), e >= y.maxSelections ? (S.debug("Maximum selection count reached"), N.addClass(A.filtered), S.add.message(T.maxSelections), !0) : (S.verbose("No longer at maximum selection count"), S.remove.message(), S.remove.filteredItem(), S.is.searchSelection() && S.filterItems(), !1)) : !0;
          } }, restore: { defaults: function defaults() {
            S.restore.defaultText(), S.restore.defaultValue();
          }, defaultText: function defaultText() {
            var e = E.data(k.defaultText);S.debug("Restoring default text", e), S.set.text(e), P.addClass(A.placeholder);
          }, defaultValue: function defaultValue() {
            var e = E.data(k.defaultValue);e !== i && (S.debug("Restoring default value", e), "" !== e ? (S.set.value(e), S.set.selected()) : (S.remove.activeItem(), S.remove.selectedItem()));
          }, labels: function labels() {
            y.allowAdditions && (y.useLabels || (S.error(R.labels), y.useLabels = !0), S.debug("Restoring selected values"), S.create.userLabels()), S.check.maxSelections();
          }, selected: function selected() {
            S.restore.values(), S.is.multiple() ? (S.debug("Restoring previously selected values and labels"), S.restore.labels()) : S.debug("Restoring previously selected values");
          }, values: function values() {
            S.set.initialLoad(), y.apiSettings ? y.saveRemoteData ? S.restore.remoteValues() : S.clearValue() : S.set.selected(), S.remove.initialLoad();
          }, remoteValues: function remoteValues() {
            var t = S.get.remoteValues();S.debug("Recreating selected from session data", t), t && (S.is.single() ? e.each(t, function (e, t) {
              S.set.text(t);
            }) : e.each(t, function (e, t) {
              S.add.label(e, t);
            }));
          } }, read: { remoteData: function remoteData(e) {
            var n;return t.Storage === i ? void S.error(R.noStorage) : (n = sessionStorage.getItem(e), n !== i ? n : !1);
          } }, save: { defaults: function defaults() {
            S.save.defaultText(), S.save.placeholderText(), S.save.defaultValue();
          }, defaultValue: function defaultValue() {
            var e = S.get.value();S.verbose("Saving default value as", e), E.data(k.defaultValue, e);
          }, defaultText: function defaultText() {
            var e = S.get.text();S.verbose("Saving default text as", e), E.data(k.defaultText, e);
          }, placeholderText: function placeholderText() {
            var e;P.hasClass(A.placeholder) && (e = S.get.text(), S.verbose("Saving placeholder text as", e), E.data(k.placeholderText, e));
          }, remoteData: function remoteData(e, n) {
            return t.Storage === i ? void S.error(R.noStorage) : (S.verbose("Saving remote data to session storage", n, e), void sessionStorage.setItem(n, e));
          } }, clear: function clear() {
          S.is.multiple() ? S.remove.labels() : (S.remove.activeItem(), S.remove.selectedItem()), S.set.placeholderText(), S.clearValue();
        }, clearValue: function clearValue() {
          S.set.value("");
        }, scrollPage: function scrollPage(e, t) {
          var n,
              i,
              a,
              t = t || S.get.selectedItem(),
              o = t.closest(I.menu),
              r = o.outerHeight(),
              s = o.scrollTop(),
              l = N.eq(0).outerHeight(),
              c = Math.floor(r / l),
              u = (o.prop("scrollHeight"), "up" == e ? s - l * c : s + l * c),
              d = N.not(I.unselectable);a = "up" == e ? d.index(t) - c : d.index(t) + c, n = "up" == e ? a >= 0 : a < d.length, i = n ? d.eq(a) : "up" == e ? d.first() : d.last(), i.length > 0 && (S.debug("Scrolling page", e, i), t.removeClass(A.selected), i.addClass(A.selected), o.scrollTop(u));
        }, set: { filtered: function filtered() {
            var e = S.is.multiple(),
                t = S.is.searchSelection(),
                n = e && t,
                i = t ? S.get.query() : "",
                a = "string" == typeof i && i.length > 0,
                o = S.get.searchWidth(i.length),
                r = "" !== i;e && a && (S.verbose("Adjusting input width", o, y.glyphWidth), M.css("width", o)), a || n && r ? (S.verbose("Hiding placeholder text"), P.addClass(A.filtered)) : (!e || n && !r) && (S.verbose("Showing placeholder text"), P.removeClass(A.filtered));
          }, loading: function loading() {
            E.addClass(A.loading);
          }, placeholderText: function placeholderText(e) {
            e = e || E.data(k.placeholderText), e && (S.debug("Restoring placeholder text"), S.set.text(e), P.addClass(A.placeholder));
          }, tabbable: function tabbable() {
            S.has.search() ? (S.debug("Added tabindex to searchable dropdown"), M.val("").attr("tabindex", 0), U.attr("tabindex", -1)) : (S.debug("Added tabindex to dropdown"), E.attr("tabindex") || (E.attr("tabindex", 0), U.attr("tabindex", -1)));
          }, initialLoad: function initialLoad() {
            S.verbose("Setting initial load"), g = !0;
          }, scrollPosition: function scrollPosition(e, t) {
            var n,
                a,
                o,
                r,
                s,
                l,
                c,
                u,
                d,
                v = 5;e = e || S.get.selectedItem(), n = e.closest(I.menu), a = e && e.length > 0, t = t !== i ? t : !1, e && n.length > 0 && a && (r = e.position().top, n.addClass(A.loading), l = n.scrollTop(), s = n.offset().top, r = e.offset().top, o = l - s + r, t || (c = n.height(), d = o + v > l + c, u = l > o - v), S.debug("Scrolling to active item", o), (t || u || d) && n.scrollTop(o), n.removeClass(A.loading));
          }, text: function text(e) {
            "select" !== y.action && ("combo" == y.action ? (S.debug("Changing combo button text", e, j), y.preserveHTML ? j.html(e) : j.text(e)) : (S.debug("Changing text", e, P), P.removeClass(A.filtered).removeClass(A.placeholder), y.preserveHTML ? P.html(e) : P.text(e)));
          }, selectedLetter: function selectedLetter(t) {
            var n = N.filter("." + A.selected),
                i = !1;N.each(function () {
              var n = e(this),
                  a = S.get.choiceText(n, !1),
                  o = String(a).charAt(0).toLowerCase(),
                  r = t.toLowerCase();return o == r ? (i = n, !1) : void 0;
            }), i && (S.verbose("Scrolling to next value with letter", t), S.set.scrollPosition(i), n.removeClass(A.selected), i.addClass(A.selected));
          }, direction: function direction(e) {
            "auto" == y.direction ? S.is.onScreen(e) ? S.remove.upward(e) : S.set.upward(e) : "upward" == y.direction && S.set.upward(e);
          }, upward: function upward(e) {
            var t = e || E;t.addClass(A.upward);
          }, value: function value(e, t, n) {
            var i = z.length > 0,
                a = (!S.has.value(e), S.get.values()),
                o = "number" == typeof e ? e.toString() : e;if (i) {
              if (o == a && (S.verbose("Skipping value update already same value", e, a), !S.is.initialLoad())) return;S.debug("Updating input value", e, a), z.val(e).trigger("change");
            } else S.verbose("Storing value in metadata", e, z), e !== a && E.data(k.value, e);y.fireOnInit === !1 && S.is.initialLoad() ? S.verbose("No callback on initial load", y.onChange) : y.onChange.call(B, e, t, n);
          }, active: function active() {
            E.addClass(A.active);
          }, multiple: function multiple() {
            E.addClass(A.multiple);
          }, visible: function visible() {
            E.addClass(A.visible);
          }, selected: function selected(t, n) {
            var i = S.is.multiple();n = y.allowAdditions ? n || S.get.itemWithAdditions(t) : n || S.get.item(t), n && (S.debug("Setting selected menu item to", n), S.is.single() ? (S.remove.activeItem(), S.remove.selectedItem()) : y.useLabels && S.remove.selectedItem(), n.each(function () {
              var t = e(this),
                  a = S.get.choiceText(t),
                  o = S.get.choiceValue(t, a),
                  r = t.hasClass(A.filtered),
                  s = t.hasClass(A.active),
                  l = t.hasClass(A.addition),
                  c = i && 1 == n.length;i ? !s || l ? (y.apiSettings && y.saveRemoteData && S.save.remoteData(a, o), y.useLabels ? (S.add.value(o, a, t), S.add.label(o, a, c), t.addClass(A.active), S.filterActive(), S.select.nextAvailable(n)) : (S.add.value(o, a, t), S.set.text(S.add.variables(T.count)), t.addClass(A.active))) : r || (S.debug("Selected active value, removing label"), S.remove.selected(o)) : (y.apiSettings && y.saveRemoteData && S.save.remoteData(a, o), S.set.value(o, a, t), S.set.text(a), t.addClass(A.active).addClass(A.selected));
            }));
          } }, add: { label: function label(t, n, i) {
            var a,
                o = S.is.searchSelection() ? M : P;return (a = e("<a />").addClass(A.label).attr("data-value", t).html(q.label(t, n)), a = y.onLabelCreate.call(a, t, n), S.has.label(t) ? void S.debug("Label already exists, skipping", t) : (y.label.variation && a.addClass(y.label.variation), void (i === !0 ? (S.debug("Animating in label", a), a.addClass(A.hidden).insertBefore(o).transition(y.label.transition, y.label.duration)) : (S.debug("Adding selection label", a), a.insertBefore(o)))));
          }, message: function message(t) {
            var n = U.children(I.message),
                i = y.templates.message(S.add.variables(t));n.length > 0 ? n.html(i) : n = e("<div/>").html(i).addClass(A.message).appendTo(U);
          }, optionValue: function optionValue(t) {
            var n = z.find("option[value=\"" + t + "\"]"),
                i = n.length > 0;i || (x && (x.disconnect(), S.verbose("Temporarily disconnecting mutation observer", t)), e("<option/>").prop("value", t).html(t).appendTo(z), S.verbose("Adding user addition as an <option>", t), x && x.observe(z[0], { childList: !0, subtree: !0 }));
          }, userSuggestion: function userSuggestion(e) {
            var t,
                n = U.children(I.addition),
                i = S.get.item(e),
                a = n.length > 0;if (!S.has.maxSelections()) {
              if ("" === e || i) return void n.remove();N.removeClass(A.selected), a ? (t = y.templates.addition(e), n.html(t).data(k.value, e).removeClass(A.filtered).addClass(A.selected), S.verbose("Replacing user suggestion with new value", n)) : (n = S.create.userChoice(e), n.prependTo(U).addClass(A.selected), S.verbose("Adding item choice to menu corresponding with user choice addition", n));
            }
          }, variables: function variables(e) {
            var t,
                n,
                i = -1 !== e.search("{count}"),
                a = -1 !== e.search("{maxCount}"),
                o = -1 !== e.search("{term}");return (S.verbose("Adding templated variables to message", e), i && (t = S.get.selectionCount(), e = e.replace("{count}", t)), a && (t = S.get.selectionCount(), e = e.replace("{maxCount}", y.maxSelections)), o && (n = S.get.query(), e = e.replace("{term}", n)), e);
          }, value: function value(t, n, i) {
            var a,
                o = S.get.values();return "" === t ? void S.debug("Cannot select blank values from multiselect") : (e.isArray(o) ? (a = o.concat([t]), a = S.get.uniqueArray(a)) : a = [t], z.is("select") ? y.allowAdditions && (S.add.optionValue(t), S.debug("Adding value to select", t, a, z)) : (a = a.join(y.delimiter), S.debug("Setting hidden input to delimited value", a, z)), y.fireOnInit === !1 && S.is.initialLoad() ? S.verbose("No callback on initial load", y.onAdd) : y.onAdd.call(B, t, n, i), S.set.value(a, t, n, i), void S.check.maxSelections());
          } }, remove: { active: function active() {
            E.removeClass(A.active);
          }, activeLabel: function activeLabel() {
            E.find(I.label).removeClass(A.active);
          }, loading: function loading() {
            E.removeClass(A.loading);
          }, initialLoad: function initialLoad() {
            g = !1;
          }, upward: function upward(e) {
            var t = e || E;t.removeClass(A.upward);
          }, visible: function visible() {
            E.removeClass(A.visible);
          }, activeItem: function activeItem() {
            N.removeClass(A.active);
          }, filteredItem: function filteredItem() {
            S.has.maxSelections() || (y.useLabels ? N.not("." + A.active).removeClass(A.filtered) : N.removeClass(A.filtered));
          }, message: function message() {
            U.children(I.message).remove();
          }, searchTerm: function searchTerm() {
            S.verbose("Cleared search term"), M.val(""), S.set.filtered();
          }, selected: function selected(t, n) {
            return (n = y.allowAdditions ? n || S.get.itemWithAdditions(t) : n || S.get.item(t)) ? void n.each(function () {
              var t = e(this),
                  n = S.get.choiceText(t),
                  i = S.get.choiceValue(t, n);S.is.multiple() ? y.useLabels ? (S.remove.value(i, n, t), S.remove.label(i)) : (S.remove.value(i, n, t), S.set.text(S.add.variables(T.count))) : S.remove.value(i, n, t), t.removeClass(A.filtered).removeClass(A.active), y.useLabels && t.removeClass(A.selected);
            }) : !1;
          }, selectedItem: function selectedItem() {
            N.removeClass(A.selected);
          }, value: function value(e, t, n) {
            var i,
                a = z.val();z.is("select") ? (S.verbose("Input is <select> removing selected option", e), i = S.remove.arrayValue(e, a)) : (S.verbose("Removing from delimited values", e), a = a.split(y.delimiter), i = S.remove.arrayValue(e, a), i = i.join(y.delimiter)), y.fireOnInit === !1 && S.is.initialLoad() ? S.verbose("No callback on initial load", y.onRemove) : y.onRemove.call(B, e, t, n), S.set.value(i, t, n), S.check.maxSelections();
          }, arrayValue: function arrayValue(t, n) {
            return (n = e.grep(n, function (e) {
              return t != e;
            }), S.verbose("Removed value from delimited string", t, n), n);
          }, label: function label(e) {
            var t = E.find(I.label),
                n = t.filter("[data-value=\"" + e + "\"]"),
                i = t.length,
                a = t.index(n) + 1 == i,
                o = (!S.is.searchSelection() || !S.is.focusedOnSearch()) && a;o ? (S.verbose("Animating and removing label", n), n.transition(y.label.transition, y.label.duration, function () {
              n.remove();
            })) : (S.verbose("Removing label", n), n.remove());
          }, activeLabels: function activeLabels(e) {
            e = e || E.find(I.label).filter("." + A.active), S.verbose("Removing active label selections", e), S.remove.labels(e);
          }, labels: function labels(t) {
            t = t || E.find(I.label), S.verbose("Removing labels", t), t.each(function () {
              var t = e(this).data("value"),
                  n = S.is.userValue(t);n ? (S.remove.value(t), S.remove.label(t)) : S.remove.selected(t);
            });
          }, tabbable: function tabbable() {
            S.has.search() ? (S.debug("Searchable dropdown initialized"), M.attr("tabindex", "-1"), U.attr("tabindex", "-1")) : (S.debug("Simple selection dropdown initialized"), E.attr("tabindex", "-1"), U.attr("tabindex", "-1"));
          } }, has: { search: function search() {
            return M.length > 0;
          }, input: function input() {
            return z.length > 0;
          }, menu: function menu() {
            return U.length > 0;
          }, message: function message() {
            return 0 !== U.children(I.message).length;
          }, label: function label(e) {
            var t = E.find(I.label);return t.filter("[data-value=\"" + e + "\"]").length > 0;
          }, maxSelections: function maxSelections() {
            return y.maxSelections && S.get.selectionCount() >= y.maxSelections;
          }, allResultsFiltered: function allResultsFiltered() {
            return N.filter(I.unselectable).length === N.length;
          }, value: function value(t) {
            var n = S.get.values(),
                i = e.isArray(n) ? n && -1 !== e.inArray(t, n) : n == t;return i ? !0 : !1;
          } }, is: { active: function active() {
            return E.hasClass(A.active);
          }, alreadySetup: function alreadySetup() {
            return E.is("select") && E.parent(I.dropdown).length > 0 && 0 === E.prev().length;
          }, animating: function animating(e) {
            return e ? e.transition && e.transition("is animating") : U.transition && U.transition("is animating");
          }, focused: function focused() {
            return n.activeElement === E[0];
          }, focusedOnSearch: function focusedOnSearch() {
            return n.activeElement === M[0];
          }, allFiltered: function allFiltered() {
            return (S.is.multiple() || S.has.search()) && !S.has.message() && S.has.allResultsFiltered();
          }, hidden: function hidden(e) {
            return !S.is.visible(e);
          }, initialLoad: function initialLoad() {
            return g;
          }, onScreen: function onScreen(e) {
            var t,
                n = e || U,
                i = !0,
                a = {};return (n.addClass(A.loading), t = { context: { scrollTop: F.scrollTop(), height: F.outerHeight() }, menu: { offset: n.offset(), height: n.outerHeight() } }, a = { above: t.context.scrollTop <= t.menu.offset.top - t.menu.height, below: t.context.scrollTop + t.context.height >= t.menu.offset.top + t.menu.height }, a.below ? (S.verbose("Dropdown can fit in context downward", a), i = !0) : a.below || a.above ? (S.verbose("Dropdown cannot fit below, opening upward", a), i = !1) : (S.verbose("Dropdown cannot fit in either direction, favoring downward", a), i = !0), n.removeClass(A.loading), i);
          }, inObject: function inObject(t, n) {
            var i = !1;return (e.each(n, function (e, n) {
              return n == t ? (i = !0, !0) : void 0;
            }), i);
          }, multiple: function multiple() {
            return E.hasClass(A.multiple);
          }, single: function single() {
            return !S.is.multiple();
          }, selectMutation: function selectMutation(t) {
            var n = !1;return (e.each(t, function (t, i) {
              return i.target && e(i.target).is("select") ? (n = !0, !0) : void 0;
            }), n);
          }, search: function search() {
            return E.hasClass(A.search);
          }, searchSelection: function searchSelection() {
            return S.has.search() && 0 === M.closest(I.menu).length;
          }, selection: function selection() {
            return E.hasClass(A.selection);
          }, userValue: function userValue(t) {
            return -1 !== e.inArray(t, S.get.userValues());
          }, upward: function upward(e) {
            var t = e || E;return t.hasClass(A.upward);
          }, visible: function visible(e) {
            return e ? e.hasClass(A.visible) : U.hasClass(A.visible);
          } }, can: { click: function click() {
            return c || "click" == y.on;
          }, show: function show() {
            return !E.hasClass(A.disabled) && N.length > 0;
          }, useAPI: function useAPI() {
            return e.fn.api !== i;
          } }, animate: { show: function show(t, n) {
            var a,
                o = n || U,
                r = n ? function () {} : function () {
              S.hideSubMenus(), S.hideOthers(), S.set.active();
            };t = e.isFunction(t) ? t : function () {}, S.verbose("Doing menu show animation", o), S.set.direction(n), a = S.get.transition(n), S.is.selection() && S.set.scrollPosition(S.get.selectedItem(), !0), (S.is.hidden(o) || S.is.animating(o)) && ("none" == a ? (r(), o.transition("show"), t.call(B)) : e.fn.transition !== i && E.transition("is supported") ? o.transition({ animation: a + " in", debug: y.debug, verbose: y.verbose, duration: y.duration, queue: !0, onStart: r, onComplete: function onComplete() {
                t.call(B);
              } }) : S.error(R.noTransition, a));
          }, hide: function hide(t, n) {
            var a = n || U,
                o = (n ? 0.9 * y.duration : y.duration, n ? function () {} : function () {
              S.can.click() && S.unbind.intent(), S.remove.active();
            }),
                r = S.get.transition(n);t = e.isFunction(t) ? t : function () {}, (S.is.visible(a) || S.is.animating(a)) && (S.verbose("Doing menu hide animation", a), "none" == r ? (o(), a.transition("hide"), t.call(B)) : e.fn.transition !== i && E.transition("is supported") ? a.transition({ animation: r + " out", duration: y.duration, debug: y.debug, verbose: y.verbose, queue: !0, onStart: o, onComplete: function onComplete() {
                "auto" == y.direction && S.remove.upward(n), t.call(B);
              } }) : S.error(R.transition));
          } }, hideAndClear: function hideAndClear() {
          S.has.search() ? (S.remove.searchTerm(), S.hide(function () {
            S.remove.filteredItem();
          })) : S.hide();
        }, delay: { show: function show() {
            S.verbose("Delaying show event to ensure user intent"), clearTimeout(S.timer), S.timer = setTimeout(S.show, y.delay.show);
          }, hide: function hide() {
            S.verbose("Delaying hide event to ensure user intent"), clearTimeout(S.timer), S.timer = setTimeout(S.hide, y.delay.hide);
          } }, escape: { regExp: function regExp(e) {
            return (e = String(e), e.replace(D.escape, "\\$&"));
          } }, setting: function setting(t, n) {
          if ((S.debug("Changing setting", t, n), e.isPlainObject(t))) e.extend(!0, y, t);else {
            if (n === i) return y[t];y[t] = n;
          }
        }, internal: function internal(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, S, t);else {
            if (n === i) return S[t];S[t] = n;
          }
        }, debug: function debug() {
          y.debug && (y.performance ? S.performance.log(arguments) : (S.debug = Function.prototype.bind.call(console.info, console, y.name + ":"), S.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          y.verbose && y.debug && (y.performance ? S.performance.log(arguments) : (S.verbose = Function.prototype.bind.call(console.info, console, y.name + ":"), S.verbose.apply(console, arguments)));
        }, error: function error() {
          S.error = Function.prototype.bind.call(console.error, console, y.name + ":"), S.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, n, i;y.performance && (t = new Date().getTime(), i = u || t, n = t - i, u = t, d.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: B, "Execution Time": n })), clearTimeout(S.performance.timer), S.performance.timer = setTimeout(S.performance.display, 500);
          }, display: function display() {
            var t = y.name + ":",
                n = 0;u = !1, clearTimeout(S.performance.timer), e.each(d, function (e, t) {
              n += t["Execution Time"];
            }), t += " " + n + "ms", l && (t += " '" + l + "'"), (console.group !== i || console.table !== i) && d.length > 0 && (console.groupCollapsed(t), console.table ? console.table(d) : e.each(d, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), d = [];
          } }, invoke: function invoke(t, n, a) {
          var r,
              s,
              l,
              c = $;return (n = n || f, a = B || a, "string" == typeof t && c !== i && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (n, a) {
            var o = n != r ? a + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(c[o]) && n != r) c = c[o];else {
              if (c[o] !== i) return (s = c[o], !1);if (!e.isPlainObject(c[a]) || n == r) return c[a] !== i ? (s = c[a], !1) : (S.error(R.method, t), !1);c = c[a];
            }
          })), e.isFunction(s) ? l = s.apply(a, n) : s !== i && (l = s), e.isArray(o) ? o.push(l) : o !== i ? o = [o, l] : l !== i && (o = l), s);
        } }, m ? ($ === i && S.initialize(), S.invoke(v)) : ($ !== i && $.invoke("destroy"), S.initialize());
    }), o !== i ? o : r);
  }, e.fn.dropdown.settings = { debug: !1, verbose: !1, performance: !0, on: "click", action: "activate", apiSettings: !1, saveRemoteData: !0, throttle: 200, context: t, direction: "auto", keepOnScreen: !0, match: "both", fullTextSearch: !1, placeholder: "auto", preserveHTML: !0, sortSelect: !1, forceSelection: !0, allowAdditions: !1, maxSelections: !1, useLabels: !0, delimiter: ",", showOnFocus: !0, allowTab: !0, allowCategorySelection: !1, fireOnInit: !1, transition: "auto", duration: 200, glyphWidth: 1.0714, label: { transition: "scale", duration: 200, variation: !1 }, delay: { hide: 300, show: 200, search: 20, touch: 50 }, onChange: function onChange(e, t, n) {}, onAdd: function onAdd(e, t, n) {}, onRemove: function onRemove(e, t, n) {}, onLabelSelect: function onLabelSelect(e) {}, onLabelCreate: function onLabelCreate(t, n) {
      return e(this);
    }, onNoResults: function onNoResults(e) {
      return !0;
    }, onShow: function onShow() {}, onHide: function onHide() {}, name: "Dropdown", namespace: "dropdown", message: { addResult: "Add <b>{term}</b>", count: "{count} selected", maxSelections: "Max {maxCount} selections", noResults: "No results found.", serverError: "There was an error contacting the server" }, error: { action: "You called a dropdown action that was not defined", alreadySetup: "Once a select has been initialized behaviors must be called on the created ui dropdown", labels: "Allowing user additions currently requires the use of labels.", method: "The method you called is not defined.", noAPI: "The API module is required to load resources remotely", noStorage: "Saving remote data requires session storage", noTransition: "This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>" }, regExp: { escape: /[-[\]{}()*+?.,\\^$|#\s]/g }, metadata: { defaultText: "defaultText", defaultValue: "defaultValue", placeholderText: "placeholder", text: "text", value: "value" }, selector: { addition: ".addition", dropdown: ".ui.dropdown", icon: "> .dropdown.icon", input: "> input[type=\"hidden\"], > select", item: ".item", label: "> .label", remove: "> .label > .delete.icon", siblingLabel: ".label", menu: ".menu", message: ".message", menuIcon: ".dropdown.icon", search: "input.search, .menu > .search > input", text: "> .text:not(.icon)", unselectable: ".disabled, .filtered" }, className: { active: "active", addition: "addition", animating: "animating", disabled: "disabled", dropdown: "ui dropdown", filtered: "filtered", hidden: "hidden transition", item: "item", label: "ui label", loading: "loading", menu: "menu", message: "message", multiple: "multiple", placeholder: "default", search: "search", selected: "selected", selection: "selection", upward: "upward", visible: "visible" } }, e.fn.dropdown.settings.templates = { dropdown: function dropdown(t) {
      var n = t.placeholder || !1,
          i = (t.values || {}, "");return (i += "<i class=\"dropdown icon\"></i>", i += t.placeholder ? "<div class=\"default text\">" + n + "</div>" : "<div class=\"text\"></div>", i += "<div class=\"menu\">", e.each(t.values, function (e, t) {
        i += t.disabled ? "<div class=\"disabled item\" data-value=\"" + t.value + "\">" + t.name + "</div>" : "<div class=\"item\" data-value=\"" + t.value + "\">" + t.name + "</div>";
      }), i += "</div>");
    }, menu: function menu(t) {
      var n = (t.values || {}, "");return (e.each(t.values, function (e, t) {
        n += "<div class=\"item\" data-value=\"" + t.value + "\">" + t.name + "</div>";
      }), n);
    }, label: function label(e, t) {
      return t + "<i class=\"delete icon\"></i>";
    }, message: function message(e) {
      return e;
    }, addition: function addition(e) {
      return e;
    } };
})(jQuery, window, document);
});

require.register("web/static/css/components/embed", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.embed = function (parameters) {

    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.embed.settings, parameters) : $.extend({}, $.fn.embed.settings),
          selector = settings.selector,
          className = settings.className,
          sources = settings.sources,
          error = settings.error,
          metadata = settings.metadata,
          namespace = settings.namespace,
          templates = settings.templates,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $window = $(window),
          $module = $(this),
          $placeholder = $module.find(selector.placeholder),
          $icon = $module.find(selector.icon),
          $embed = $module.find(selector.embed),
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing embed');
          module.determine.autoplay();
          module.create();
          module.bind.events();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance of embed');
          module.reset();
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $icon = $module.find(selector.icon);
          $embed = $module.find(selector.embed);
        },

        bind: {
          events: function events() {
            if (module.has.placeholder()) {
              module.debug('Adding placeholder events');
              console.log($module, selector.placeholder);
              $module.on('click' + eventNamespace, selector.placeholder, module.createAndShow).on('click' + eventNamespace, selector.icon, module.createAndShow);
            }
          }
        },

        create: function create() {
          var placeholder = module.get.placeholder();
          if (placeholder) {
            module.createPlaceholder();
          } else {
            module.createAndShow();
          }
        },

        createPlaceholder: function createPlaceholder(placeholder) {
          var icon = module.get.icon(),
              url = module.get.url(),
              embed = module.generate.embed(url);
          placeholder = placeholder || module.get.placeholder();
          $module.html(templates.placeholder(placeholder, icon));
          module.debug('Creating placeholder for embed', placeholder, icon);
        },

        createEmbed: function createEmbed(url) {
          module.refresh();
          url = url || module.get.url();
          console.log(url);
          $embed = $('<div/>').addClass(className.embed).html(module.generate.embed(url)).appendTo($module);
          settings.onCreate.call(element, url);
          module.debug('Creating embed object', $embed);
        },

        createAndShow: function createAndShow() {
          console.log('cands');
          module.createEmbed();
          module.show();
        },

        // sets new embed
        change: function change(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module.data(metadata.source, source).data(metadata.id, id).data(metadata.url, url);
          module.create();
        },

        // clears embed
        reset: function reset() {
          module.debug('Clearing embed and showing placeholder');
          module.remove.active();
          module.remove.embed();
          module.showPlaceholder();
          settings.onReset.call(element);
        },

        // shows current embed
        show: function show() {
          module.debug('Showing embed');
          module.set.active();
          settings.onDisplay.call(element);
        },

        hide: function hide() {
          module.debug('Hiding embed');
          module.showPlaceholder();
        },

        showPlaceholder: function showPlaceholder() {
          module.debug('Showing placeholder image');
          module.remove.active();
          settings.onPlaceholderDisplay.call(element);
        },

        get: {
          id: function id() {
            return settings.id || $module.data(metadata.id);
          },
          placeholder: function placeholder() {
            return settings.placeholder || $module.data(metadata.placeholder);
          },
          icon: function icon() {
            return settings.icon ? settings.icon : $module.data(metadata.icon) !== undefined ? $module.data(metadata.icon) : module.determine.icon();
          },
          source: function source(url) {
            return settings.source ? settings.source : $module.data(metadata.source) !== undefined ? $module.data(metadata.source) : module.determine.source();
          },
          type: function type() {
            var source = module.get.source();
            return sources[source] !== undefined ? sources[source].type : false;
          },
          url: function url() {
            return settings.url ? settings.url : $module.data(metadata.url) !== undefined ? $module.data(metadata.url) : module.determine.url();
          }
        },

        determine: {
          autoplay: function autoplay() {
            if (module.should.autoplay()) {
              settings.autoplay = true;
            }
          },
          source: function source(url) {
            var matchedSource = false;
            url = url || module.get.url();
            if (url) {
              $.each(sources, function (name, source) {
                if (url.search(source.domain) !== -1) {
                  matchedSource = name;
                  return false;
                }
              });
            }
            return matchedSource;
          },
          icon: function icon() {
            var source = module.get.source();
            return sources[source] !== undefined ? sources[source].icon : false;
          },
          url: function url() {
            var id = settings.id || $module.data(metadata.id),
                source = settings.source || $module.data(metadata.source),
                url;
            url = sources[source] !== undefined ? sources[source].url.replace('{id}', id) : false;
            if (url) {
              $module.data(metadata.url, url);
            }
            return url;
          }
        },

        set: {
          active: function active() {
            $module.addClass(className.active);
          }
        },

        remove: {
          active: function active() {
            $module.removeClass(className.active);
          },
          embed: function embed() {
            $embed.empty();
          }
        },

        encode: {
          parameters: function parameters(_parameters) {
            var urlString = [],
                index;
            for (index in _parameters) {
              urlString.push(encodeURIComponent(index) + '=' + encodeURIComponent(_parameters[index]));
            }
            return urlString.join('&amp;');
          }
        },

        generate: {
          embed: function embed(url) {
            module.debug('Generating embed html');
            var source = module.get.source(),
                html,
                parameters;
            url = module.get.url(url);
            if (url) {
              parameters = module.generate.parameters(source);
              html = templates.iframe(url, parameters);
            } else {
              module.error(error.noURL, $module);
            }
            return html;
          },
          parameters: function parameters(source, extraParameters) {
            var parameters = sources[source] && sources[source].parameters !== undefined ? sources[source].parameters(settings) : {};
            extraParameters = extraParameters || settings.parameters;
            if (extraParameters) {
              parameters = $.extend({}, parameters, extraParameters);
            }
            parameters = settings.onEmbed(parameters);
            return module.encode.parameters(parameters);
          }
        },

        has: {
          placeholder: function placeholder() {
            return settings.placeholder || $module.data(metadata.placeholder);
          }
        },

        should: {
          autoplay: function autoplay() {
            return settings.autoplay === 'auto' ? settings.placeholder || $module.data(metadata.placeholder) !== undefined : settings.autoplay;
          }
        },

        is: {
          video: function video() {
            return module.get.type() == 'video';
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.embed.settings = {

    name: 'Embed',
    namespace: 'embed',

    debug: false,
    verbose: false,
    performance: true,

    icon: false,
    source: false,
    url: false,
    id: false,

    // standard video settings
    autoplay: 'auto',
    color: '#444444',
    hd: true,
    brandedUI: false,

    // additional parameters to include with the embed
    parameters: false,

    onDisplay: function onDisplay() {},
    onPlaceholderDisplay: function onPlaceholderDisplay() {},
    onReset: function onReset() {},
    onCreate: function onCreate(url) {},
    onEmbed: function onEmbed(parameters) {
      return parameters;
    },

    metadata: {
      id: 'id',
      icon: 'icon',
      placeholder: 'placeholder',
      source: 'source',
      url: 'url'
    },

    error: {
      noURL: 'No URL specified',
      method: 'The method you called is not defined'
    },

    className: {
      active: 'active',
      embed: 'embed'
    },

    selector: {
      embed: '.embed',
      placeholder: '.placeholder',
      icon: '.icon'
    },

    sources: {
      youtube: {
        name: 'youtube',
        type: 'video',
        icon: 'video play',
        domain: 'youtube.com',
        url: '//www.youtube.com/embed/{id}',
        parameters: function parameters(settings) {
          return {
            autohide: !settings.brandedUI,
            autoplay: settings.autoplay,
            color: settings.colors || undefined,
            hq: settings.hd,
            jsapi: settings.api,
            modestbranding: !settings.brandedUI
          };
        }
      },
      vimeo: {
        name: 'vimeo',
        type: 'video',
        icon: 'video play',
        domain: 'vimeo.com',
        url: '//player.vimeo.com/video/{id}',
        parameters: function parameters(settings) {
          return {
            api: settings.api,
            autoplay: settings.autoplay,
            byline: settings.brandedUI,
            color: settings.colors || undefined,
            portrait: settings.brandedUI,
            title: settings.brandedUI
          };
        }
      }
    },

    templates: {
      iframe: function iframe(url, parameters) {
        return '' + '<iframe src="' + url + '?=' + parameters + '"' + ' width="100%" height="100%"' + ' frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
      },
      placeholder: function placeholder(image, icon) {
        var html = '';
        if (icon) {
          html += '<i class="' + icon + ' icon"></i>';
        }
        if (image) {
          html += '<img class="placeholder" src="' + image + '">';
        }
        return html;
      }
    },

    // NOT YET IMPLEMENTED
    api: true,
    onPause: function onPause() {},
    onPlay: function onPlay() {},
    onStop: function onStop() {}

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/embed.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, o, r) {
  "use strict";e.fn.embed = function (o) {
    var t,
        a = e(this),
        i = a.selector || "",
        c = new Date().getTime(),
        l = [],
        d = arguments[0],
        u = "string" == typeof d,
        s = [].slice.call(arguments, 1);return (a.each(function () {
      var m,
          p = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.embed.settings, o) : e.extend({}, e.fn.embed.settings),
          f = p.selector,
          h = p.className,
          g = p.sources,
          b = p.error,
          v = p.metadata,
          y = p.namespace,
          w = p.templates,
          C = "." + y,
          P = "module-" + y,
          U = (e(n), e(this)),
          E = U.find(f.placeholder),
          S = U.find(f.icon),
          T = U.find(f.embed),
          j = this,
          A = U.data(P);m = { initialize: function initialize() {
          m.debug("Initializing embed"), m.determine.autoplay(), m.create(), m.bind.events(), m.instantiate();
        }, instantiate: function instantiate() {
          m.verbose("Storing instance of module", m), A = m, U.data(P, m);
        }, destroy: function destroy() {
          m.verbose("Destroying previous instance of embed"), m.reset(), U.removeData(P).off(C);
        }, refresh: function refresh() {
          m.verbose("Refreshing selector cache"), E = U.find(f.placeholder), S = U.find(f.icon), T = U.find(f.embed);
        }, bind: { events: function events() {
            m.has.placeholder() && (m.debug("Adding placeholder events"), console.log(U, f.placeholder), U.on("click" + C, f.placeholder, m.createAndShow).on("click" + C, f.icon, m.createAndShow));
          } }, create: function create() {
          var e = m.get.placeholder();e ? m.createPlaceholder() : m.createAndShow();
        }, createPlaceholder: function createPlaceholder(e) {
          {
            var n = m.get.icon(),
                o = m.get.url();m.generate.embed(o);
          }e = e || m.get.placeholder(), U.html(w.placeholder(e, n)), m.debug("Creating placeholder for embed", e, n);
        }, createEmbed: function createEmbed(n) {
          m.refresh(), n = n || m.get.url(), console.log(n), T = e("<div/>").addClass(h.embed).html(m.generate.embed(n)).appendTo(U), p.onCreate.call(j, n), m.debug("Creating embed object", T);
        }, createAndShow: function createAndShow() {
          console.log("cands"), m.createEmbed(), m.show();
        }, change: function change(e, n, o) {
          m.debug("Changing video to ", e, n, o), U.data(v.source, e).data(v.id, n).data(v.url, o), m.create();
        }, reset: function reset() {
          m.debug("Clearing embed and showing placeholder"), m.remove.active(), m.remove.embed(), m.showPlaceholder(), p.onReset.call(j);
        }, show: function show() {
          m.debug("Showing embed"), m.set.active(), p.onDisplay.call(j);
        }, hide: function hide() {
          m.debug("Hiding embed"), m.showPlaceholder();
        }, showPlaceholder: function showPlaceholder() {
          m.debug("Showing placeholder image"), m.remove.active(), p.onPlaceholderDisplay.call(j);
        }, get: { id: function id() {
            return p.id || U.data(v.id);
          }, placeholder: function placeholder() {
            return p.placeholder || U.data(v.placeholder);
          }, icon: function icon() {
            return p.icon ? p.icon : U.data(v.icon) !== r ? U.data(v.icon) : m.determine.icon();
          }, source: function source(e) {
            return p.source ? p.source : U.data(v.source) !== r ? U.data(v.source) : m.determine.source();
          }, type: function type() {
            var e = m.get.source();return g[e] !== r ? g[e].type : !1;
          }, url: function url() {
            return p.url ? p.url : U.data(v.url) !== r ? U.data(v.url) : m.determine.url();
          } }, determine: { autoplay: function autoplay() {
            m.should.autoplay() && (p.autoplay = !0);
          }, source: function source(n) {
            var o = !1;return (n = n || m.get.url(), n && e.each(g, function (e, r) {
              return -1 !== n.search(r.domain) ? (o = e, !1) : void 0;
            }), o);
          }, icon: function icon() {
            var e = m.get.source();return g[e] !== r ? g[e].icon : !1;
          }, url: function url() {
            var e,
                n = p.id || U.data(v.id),
                o = p.source || U.data(v.source);return (e = g[o] !== r ? g[o].url.replace("{id}", n) : !1, e && U.data(v.url, e), e);
          } }, set: { active: function active() {
            U.addClass(h.active);
          } }, remove: { active: function active() {
            U.removeClass(h.active);
          }, embed: function embed() {
            T.empty();
          } }, encode: { parameters: function parameters(e) {
            var n,
                o = [];for (n in e) o.push(encodeURIComponent(n) + "=" + encodeURIComponent(e[n]));return o.join("&amp;");
          } }, generate: { embed: function embed(e) {
            m.debug("Generating embed html");var n,
                o,
                r = m.get.source();return (e = m.get.url(e), e ? (o = m.generate.parameters(r), n = w.iframe(e, o)) : m.error(b.noURL, U), n);
          }, parameters: function parameters(n, o) {
            var t = g[n] && g[n].parameters !== r ? g[n].parameters(p) : {};return (o = o || p.parameters, o && (t = e.extend({}, t, o)), t = p.onEmbed(t), m.encode.parameters(t));
          } }, has: { placeholder: function placeholder() {
            return p.placeholder || U.data(v.placeholder);
          } }, should: { autoplay: function autoplay() {
            return "auto" === p.autoplay ? p.placeholder || U.data(v.placeholder) !== r : p.autoplay;
          } }, is: { video: function video() {
            return "video" == m.get.type();
          } }, setting: function setting(n, o) {
          if ((m.debug("Changing setting", n, o), e.isPlainObject(n))) e.extend(!0, p, n);else {
            if (o === r) return p[n];p[n] = o;
          }
        }, internal: function internal(n, o) {
          if (e.isPlainObject(n)) e.extend(!0, m, n);else {
            if (o === r) return m[n];m[n] = o;
          }
        }, debug: function debug() {
          p.debug && (p.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, p.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          p.verbose && p.debug && (p.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, p.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, p.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, o, r;p.performance && (n = new Date().getTime(), r = c || n, o = n - r, c = n, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: j, "Execution Time": o })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 500);
          }, display: function display() {
            var n = p.name + ":",
                o = 0;c = !1, clearTimeout(m.performance.timer), e.each(l, function (e, n) {
              o += n["Execution Time"];
            }), n += " " + o + "ms", i && (n += " '" + i + "'"), a.length > 1 && (n += " (" + a.length + ")"), (console.group !== r || console.table !== r) && l.length > 0 && (console.groupCollapsed(n), console.table ? console.table(l) : e.each(l, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(n, o, a) {
          var i,
              c,
              l,
              d = A;return (o = o || s, a = j || a, "string" == typeof n && d !== r && (n = n.split(/[\. ]/), i = n.length - 1, e.each(n, function (o, t) {
            var a = o != i ? t + n[o + 1].charAt(0).toUpperCase() + n[o + 1].slice(1) : n;if (e.isPlainObject(d[a]) && o != i) d = d[a];else {
              if (d[a] !== r) return (c = d[a], !1);if (!e.isPlainObject(d[t]) || o == i) return d[t] !== r ? (c = d[t], !1) : (m.error(b.method, n), !1);d = d[t];
            }
          })), e.isFunction(c) ? l = c.apply(a, o) : c !== r && (l = c), e.isArray(t) ? t.push(l) : t !== r ? t = [t, l] : l !== r && (t = l), c);
        } }, u ? (A === r && m.initialize(), m.invoke(d)) : (A !== r && A.invoke("destroy"), m.initialize());
    }), t !== r ? t : this);
  }, e.fn.embed.settings = { name: "Embed", namespace: "embed", debug: !1, verbose: !1, performance: !0, icon: !1, source: !1, url: !1, id: !1, autoplay: "auto", color: "#444444", hd: !0, brandedUI: !1, parameters: !1, onDisplay: function onDisplay() {}, onPlaceholderDisplay: function onPlaceholderDisplay() {}, onReset: function onReset() {}, onCreate: function onCreate(e) {}, onEmbed: function onEmbed(e) {
      return e;
    }, metadata: { id: "id", icon: "icon", placeholder: "placeholder", source: "source", url: "url" }, error: { noURL: "No URL specified", method: "The method you called is not defined" }, className: { active: "active", embed: "embed" }, selector: { embed: ".embed", placeholder: ".placeholder", icon: ".icon" }, sources: { youtube: { name: "youtube", type: "video", icon: "video play", domain: "youtube.com", url: "//www.youtube.com/embed/{id}", parameters: function parameters(e) {
          return { autohide: !e.brandedUI, autoplay: e.autoplay, color: e.colors || r, hq: e.hd, jsapi: e.api, modestbranding: !e.brandedUI };
        } }, vimeo: { name: "vimeo", type: "video", icon: "video play", domain: "vimeo.com", url: "//player.vimeo.com/video/{id}", parameters: function parameters(e) {
          return { api: e.api, autoplay: e.autoplay, byline: e.brandedUI, color: e.colors || r, portrait: e.brandedUI, title: e.brandedUI };
        } } }, templates: { iframe: function iframe(e, n) {
        return "<iframe src=\"" + e + "?=" + n + "\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>";
      }, placeholder: function placeholder(e, n) {
        var o = "";return (n && (o += "<i class=\"" + n + " icon\"></i>"), e && (o += "<img class=\"placeholder\" src=\"" + e + "\">"), o);
      } }, api: !0, onPause: function onPause() {}, onPlay: function onPlay() {}, onStop: function onStop() {} };
})(jQuery, window, document);
});

require.register("web/static/css/components/form", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.form = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        legacyParameters = arguments[1],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var $module = $(this),
          element = this,
          formErrors = [],
          keyHeldDown = false,

      // set at run-time
      $field,
          $group,
          $message,
          $prompt,
          $submit,
          $clear,
          $reset,
          _settings,
          _validation,
          metadata,
          selector,
          className,
          error,
          namespace,
          moduleNamespace,
          eventNamespace,
          instance,
          module;

      module = {

        initialize: function initialize() {

          // settings grabbed at run time
          module.get.settings();
          if (methodInvoked) {
            if (instance === undefined) {
              module.instantiate();
            }
            module.invoke(query);
          } else {
            module.verbose('Initializing form validation', $module, _settings);
            module.bindEvents();
            module.set.defaults();
            module.instantiate();
          }
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $field = $module.find(selector.field);
          $group = $module.find(selector.group);
          $message = $module.find(selector.message);
          $prompt = $module.find(selector.prompt);

          $submit = $module.find(selector.submit);
          $clear = $module.find(selector.clear);
          $reset = $module.find(selector.reset);
        },

        submit: function submit() {
          module.verbose('Submitting form', $module);
          $module.submit();
        },

        attachEvents: function attachEvents(selector, action) {
          action = action || 'submit';
          $(selector).on('click' + eventNamespace, function (event) {
            module[action]();
            event.preventDefault();
          });
        },

        bindEvents: function bindEvents() {
          module.verbose('Attaching form events');
          $module.on('submit' + eventNamespace, module.validate.form).on('blur' + eventNamespace, selector.field, module.event.field.blur).on('click' + eventNamespace, selector.submit, module.submit).on('click' + eventNamespace, selector.reset, module.reset).on('click' + eventNamespace, selector.clear, module.clear);
          if (_settings.keyboardShortcuts) {
            $module.on('keydown' + eventNamespace, selector.field, module.event.field.keydown);
          }
          $field.each(function () {
            var $input = $(this),
                type = $input.prop('type'),
                inputEvent = module.get.changeEvent(type, $input);
            $(this).on(inputEvent + eventNamespace, module.event.field.change);
          });
        },

        clear: function clear() {
          $field.each(function () {
            var $field = $(this),
                $element = $field.parent(),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue) || '',
                isCheckbox = $element.is(selector.uiCheckbox),
                isDropdown = $element.is(selector.uiDropdown),
                isErrored = $fieldGroup.hasClass(className.error);
            if (isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
            }
            if (isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('clear');
            } else if (isCheckbox) {
              $field.prop('checked', false);
            } else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val('');
            }
          });
        },

        reset: function reset() {
          $field.each(function () {
            var $field = $(this),
                $element = $field.parent(),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.find(selector.prompt),
                defaultValue = $field.data(metadata.defaultValue),
                isCheckbox = $element.is(selector.uiCheckbox),
                isDropdown = $element.is(selector.uiDropdown),
                isErrored = $fieldGroup.hasClass(className.error);
            if (defaultValue === undefined) {
              defaultValue = '';
            }
            if (isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
            }
            if (isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('restore defaults');
            } else if (isCheckbox) {
              module.verbose('Resetting checkbox value', $element, defaultValue);
              $field.prop('checked', defaultValue);
            } else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val(defaultValue);
            }
          });
        },

        is: {
          valid: function valid() {
            var allValid = true;
            module.verbose('Checking if form is valid');
            $.each(_validation, function (fieldName, field) {
              if (!module.validate.field(field)) {
                allValid = false;
              }
            });
            return allValid;
          }
        },

        removeEvents: function removeEvents() {
          $module.off(eventNamespace);
          $field.off(eventNamespace);
          $submit.off(eventNamespace);
          $field.off(eventNamespace);
        },

        event: {
          field: {
            keydown: function keydown(event) {
              var $field = $(this),
                  key = event.which,
                  keyCode = {
                enter: 13,
                escape: 27
              };
              if (key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field.blur();
              }
              if (!event.ctrlKey && key == keyCode.enter && $field.is(selector.input) && $field.not(selector.checkbox).length > 0) {
                if (!keyHeldDown) {
                  $field.one('keyup' + eventNamespace, module.event.field.keyup);
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
                }
                keyHeldDown = true;
              }
            },
            keyup: function keyup() {
              keyHeldDown = false;
            },
            blur: function blur() {
              var $field = $(this),
                  $fieldGroup = $field.closest($group),
                  validationRules = module.get.validation($field);
              if ($fieldGroup.hasClass(className.error)) {
                module.debug('Revalidating field', $field, validationRules);
                module.validate.field(validationRules);
              } else if (_settings.on == 'blur' || _settings.on == 'change') {
                module.validate.field(validationRules);
              }
            },
            change: function change() {
              var $field = $(this),
                  $fieldGroup = $field.closest($group);
              if (_settings.on == 'change' || $fieldGroup.hasClass(className.error) && _settings.revalidate) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function () {
                  module.debug('Revalidating field', $field, module.get.validation($field));
                  module.validate.field(module.get.validation($field));
                }, _settings.delay);
              }
            }
          }

        },

        get: {
          changeEvent: function changeEvent(type, $input) {
            if (type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {
              return 'change';
            } else {
              return module.get.inputEvent();
            }
          },
          inputEvent: function inputEvent() {
            return document.createElement('input').oninput !== undefined ? 'input' : document.createElement('input').onpropertychange !== undefined ? 'propertychange' : 'keyup';
          },
          settings: function settings() {
            var firstProperty;
            if ($.isPlainObject(parameters)) {
              var keys = Object.keys(parameters),
                  isLegacySettings = keys.length > 0 ? parameters[keys[0]].identifier !== undefined : false;
              if (isLegacySettings) {
                // 1.x (ducktyped)
                _settings = $.extend(true, {}, $.fn.form.settings, legacyParameters);
                _validation = $.extend({}, $.fn.form.settings.defaults, parameters);
                module.error(_settings.error.oldSyntax, element);
                module.verbose('Extending settings from legacy parameters', _validation, _settings);
              } else {
                // 2.x
                _settings = $.extend(true, {}, $.fn.form.settings, parameters);
                _validation = $.extend({}, $.fn.form.settings.defaults, _settings.fields);
                module.verbose('Extending settings', _validation, _settings);
              }
            } else {
              _settings = $.fn.form.settings;
              _validation = $.fn.form.settings.defaults;
              module.verbose('Using default form validation', _validation, _settings);
            }

            // shorthand
            namespace = _settings.namespace;
            metadata = _settings.metadata;
            selector = _settings.selector;
            className = _settings.className;
            error = _settings.error;
            moduleNamespace = 'module-' + namespace;
            eventNamespace = '.' + namespace;

            // grab instance
            instance = $module.data(moduleNamespace);

            // refresh selector cache
            module.refresh();
          },
          field: function field(identifier) {
            module.verbose('Finding field with identifier', identifier);
            if ($field.filter('#' + identifier).length > 0) {
              return $field.filter('#' + identifier);
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {
              return $field.filter('[name="' + identifier + '"]');
            } else if ($field.filter('[name="' + identifier + '[]"]').length > 0) {
              return $field.filter('[name="' + identifier + '[]"]');
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {
              return $field.filter('[data-' + metadata.validate + '="' + identifier + '"]');
            }
            return $('<input/>');
          },
          fields: function fields(_fields) {
            var $fields = $();
            $.each(_fields, function (index, name) {
              $fields = $fields.add(module.get.field(name));
            });
            return $fields;
          },
          validation: function validation($field) {
            var rules;
            if (!_validation) {
              return false;
            }
            $.each(_validation, function (fieldName, field) {
              if (module.get.field(field.identifier)[0] == $field[0]) {
                rules = field;
              }
            });
            return rules || false;
          },
          value: function value(field) {
            var fields = [],
                results;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
          },
          values: function values(fields) {
            var $fields = $.isArray(fields) ? module.get.fields(fields) : $field,
                values = {};
            $fields.each(function (index, field) {
              var $field = $(field),
                  type = $field.prop('type'),
                  name = $field.prop('name'),
                  value = $field.val(),
                  isCheckbox = $field.is(selector.checkbox),
                  isRadio = $field.is(selector.radio),
                  isMultiple = name.indexOf('[]') !== -1,
                  isChecked = isCheckbox ? $field.is(':checked') : false;
              if (name) {
                if (isMultiple) {
                  name = name.replace('[]', '');
                  if (!values[name]) {
                    values[name] = [];
                  }
                  if (isCheckbox) {
                    if (isChecked) {
                      values[name].push(value);
                    } else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  } else {
                    values[name].push(value);
                  }
                } else {
                  if (isRadio) {
                    if (isChecked) {
                      values[name] = value;
                    }
                  } else if (isCheckbox) {
                    if (isChecked) {
                      values[name] = true;
                    } else {
                      module.debug('Omitted unchecked checkbox', $field);
                      return true;
                    }
                  } else {
                    values[name] = value;
                  }
                }
              }
            });
            return values;
          }
        },

        has: {

          field: function field(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            if ($field.filter('#' + identifier).length > 0) {
              return true;
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {
              return true;
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {
              return true;
            }
            return false;
          }

        },

        add: {
          prompt: function prompt(identifier, errors) {
            var $field = module.get.field(identifier),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.children(selector.prompt),
                promptExists = $prompt.length !== 0;
            errors = typeof errors == 'string' ? [errors] : errors;
            module.verbose('Adding field error state', identifier);
            $fieldGroup.addClass(className.error);
            if (_settings.inline) {
              if (!promptExists) {
                $prompt = _settings.templates.prompt(errors);
                $prompt.appendTo($fieldGroup);
              }
              $prompt.html(errors[0]);
              if (!promptExists) {
                if (_settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', _settings.transition);
                  $prompt.transition(_settings.transition + ' in', _settings.duration);
                } else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt.fadeIn(_settings.duration);
                }
              } else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
              }
            }
          },
          errors: function errors(_errors) {
            module.debug('Adding form error messages', _errors);
            $message.html(_settings.templates.error(_errors));
          }
        },

        remove: {
          prompt: function prompt(field) {
            var $field = module.get.field(field.identifier),
                $fieldGroup = $field.closest($group),
                $prompt = $fieldGroup.children(selector.prompt);
            $fieldGroup.removeClass(className.error);
            if (_settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', field);
              if (_settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                $prompt.transition(_settings.transition + ' out', _settings.duration, function () {
                  $prompt.remove();
                });
              } else {
                $prompt.fadeOut(_settings.duration, function () {
                  $prompt.remove();
                });
              }
            }
          }
        },

        set: {
          success: function success() {
            $module.removeClass(className.error).addClass(className.success);
          },
          defaults: function defaults() {
            $field.each(function () {
              var $field = $(this),
                  isCheckbox = $field.filter(selector.checkbox).length > 0,
                  value = isCheckbox ? $field.is(':checked') : $field.val();
              $field.data(metadata.defaultValue, value);
            });
          },
          error: function error() {
            $module.removeClass(className.success).addClass(className.error);
          },
          value: function value(field, _value) {
            var fields = {};
            fields[field] = _value;
            return module.set.values.call(element, fields);
          },
          values: function values(fields) {
            if ($.isEmptyObject(fields)) {
              return;
            }
            $.each(fields, function (key, value) {
              var $field = module.get.field(key),
                  $element = $field.parent(),
                  isMultiple = $.isArray(value),
                  isCheckbox = $element.is(selector.uiCheckbox),
                  isDropdown = $element.is(selector.uiDropdown),
                  isRadio = $field.is(selector.radio) && isCheckbox,
                  fieldExists = $field.length > 0,
                  $multipleField;
              if (fieldExists) {
                if (isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function (index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element = $multipleField.parent();
                    if ($multipleField.length > 0) {
                      $element.checkbox('check');
                    }
                  });
                } else if (isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]').parent(selector.uiCheckbox).checkbox('check');
                } else if (isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if (value === true) {
                    $element.checkbox('check');
                  } else {
                    $element.checkbox('uncheck');
                  }
                } else if (isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
                } else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
                }
              }
            });
          }
        },

        validate: {

          form: function form(event) {
            var apiRequest;

            // input keydown event will fire submit repeatedly by browser default
            if (keyHeldDown) {
              return false;
            }

            // reset errors
            formErrors = [];
            if (module.is.valid()) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              return _settings.onSuccess.call(element, event);
            } else {
              module.debug('Form has errors');
              module.set.error();
              if (!_settings.inline) {
                module.add.errors(formErrors);
              }
              // prevent ajax submit
              if ($module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
              }
              return _settings.onFailure.call(element, formErrors);
            }
          },

          // takes a validation object and returns whether field passes validation
          field: function field(_field) {
            var $field = module.get.field(_field.identifier),
                fieldValid = true,
                fieldErrors = [];
            if ($field.prop('disabled')) {
              module.debug('Field is disabled. Skipping', _field.identifier);
              fieldValid = true;
            } else if (_field.optional && $.trim($field.val()) === '') {
              module.debug('Field is optional and empty. Skipping', _field.identifier);
              fieldValid = true;
            } else if (_field.rules !== undefined) {
              $.each(_field.rules, function (index, rule) {
                if (module.has.field(_field.identifier) && !module.validate.rule(_field, rule)) {
                  module.debug('Field is invalid', _field.identifier, rule.type);
                  fieldErrors.push(rule.prompt);
                  fieldValid = false;
                }
              });
            }
            if (fieldValid) {
              module.remove.prompt(_field, fieldErrors);
              _settings.onValid.call($field);
            } else {
              formErrors = formErrors.concat(fieldErrors);
              module.add.prompt(_field.identifier, fieldErrors);
              _settings.onInvalid.call($field, fieldErrors);
              return false;
            }
            return true;
          },

          // takes validation rule and returns whether field passes rule
          rule: function rule(field, validation) {
            var $field = module.get.field(field.identifier),
                type = validation.type,
                value = $field.val(),
                bracket = type.match(_settings.regExp.bracket),
                isValid = true,
                rule,
                ancillary,
                functionType;
            // cast to string
            value = $.trim($field.val() + '');

            // if bracket notation is used, pass in extra parameters
            if (bracket) {
              ancillary = '' + bracket[1];
              functionType = type.replace(bracket[0], '');
              rule = _settings.rules[functionType];
              if (!$.isFunction(rule)) {
                module.error(error.noRule, functionType);
                return;
              }
              isValid = rule.call($field, value, ancillary);
            } else {
              rule = _settings.rules[type];
              if (!$.isFunction(rule)) {
                module.error(error.noRule, type);
                return;
              }
              isValid = rule.call($field, value);
            }
            return isValid;
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, _settings, name);
          } else if (value !== undefined) {
            _settings[name] = value;
          } else {
            return _settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (_settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (_settings.verbose && _settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (_settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = _settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      module.initialize();
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.form.settings = {

    name: 'Form',
    namespace: 'form',

    debug: false,
    verbose: false,
    performance: true,

    fields: false,

    keyboardShortcuts: true,
    on: 'submit',
    inline: false,

    delay: 200,
    revalidate: true,

    transition: 'scale',
    duration: 200,

    onValid: function onValid() {},
    onInvalid: function onInvalid() {},
    onSuccess: function onSuccess() {
      return true;
    },
    onFailure: function onFailure() {
      return false;
    },

    metadata: {
      defaultValue: 'default',
      validate: 'validate'
    },

    regExp: {
      bracket: /\[(.*)\]/i,
      escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
      email: '[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?',
      integer: /^\-?\d+$/,
      flags: /^\/(.*)\/(.*)?/,
      url: /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i
    },

    selector: {
      checkbox: 'input[type="checkbox"], input[type="radio"]',
      clear: '.clear',
      field: 'input, textarea, select',
      group: '.field',
      input: 'input',
      message: '.error.message',
      prompt: '.prompt.label',
      radio: 'input[type="radio"]',
      reset: '.reset:not([type="reset"])',
      submit: '.submit:not([type="submit"])',
      uiCheckbox: '.ui.checkbox',
      uiDropdown: '.ui.dropdown'
    },

    className: {
      error: 'error',
      label: 'ui prompt label',
      pressed: 'down',
      success: 'success'
    },

    error: {
      oldSyntax: 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.',
      noRule: 'There is no rule matching the one you specified',
      method: 'The method you called is not defined.'
    },

    templates: {

      // template that produces error message
      error: function error(errors) {
        var html = '<ul class="list">';
        $.each(errors, function (index, value) {
          html += '<li>' + value + '</li>';
        });
        html += '</ul>';
        return $(html);
      },

      // template that produces label
      prompt: function prompt(errors) {
        return $('<div/>').addClass('ui red pointing prompt label').html(errors[0]);
      }
    },

    rules: {

      // checkbox checked
      checked: function checked() {
        return $(this).filter(':checked').length > 0;
      },

      // value contains text (insensitive)
      contains: function contains(value, text) {
        // escape regex characters
        text = text.replace($.fn.form.settings.regExp.escape, '\\$&');
        return value.search(new RegExp(text, 'i')) !== -1;
      },

      // value contains text (case sensitive)
      containsExactly: function containsExactly(value, text) {
        // escape regex characters
        text = text.replace($.fn.form.settings.regExp.escape, '\\$&');
        return value.search(new RegExp(text)) !== -1;
      },

      // is most likely an email
      email: function email(value) {
        var emailRegExp = new RegExp($.fn.form.settings.regExp.email, 'i');
        return emailRegExp.test(value);
      },

      // is not empty or blank string
      empty: function empty(value) {
        return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);
      },

      // is valid integer
      integer: function integer(value, range) {
        var intRegExp = $.fn.form.settings.regExp.integer,
            min,
            max,
            parts;
        if (range === undefined || range === '' || range === '..') {} else if (range.indexOf('..') == -1) {
          if (intRegExp.test(range)) {
            min = max = range - 0;
          }
        } else {
          parts = range.split('..', 2);
          if (intRegExp.test(parts[0])) {
            min = parts[0] - 0;
          }
          if (intRegExp.test(parts[1])) {
            max = parts[1] - 0;
          }
        }
        return intRegExp.test(value) && (min === undefined || value >= min) && (max === undefined || value <= max);
      },

      // is value (case insensitive)
      is: function is(value, text) {
        text = typeof text == 'string' ? text.toLowerCase() : text;
        value = typeof value == 'string' ? value.toLowerCase() : value;
        return value == text;
      },

      // is value
      isExactly: function isExactly(value, text) {
        return value == text;
      },

      // is at least string length
      length: function length(value, requiredLength) {
        return value !== undefined ? value.length >= requiredLength : false;
      },

      // matches another field
      different: function different(value, identifier) {
        // use either id or name of field
        var $form = $(this),
            matchingValue;
        if ($('[data-validate="' + identifier + '"]').length > 0) {
          matchingValue = $('[data-validate="' + identifier + '"]').val();
        } else if ($('#' + identifier).length > 0) {
          matchingValue = $('#' + identifier).val();
        } else if ($('[name="' + identifier + '"]').length > 0) {
          matchingValue = $('[name="' + identifier + '"]').val();
        } else if ($('[name="' + identifier + '[]"]').length > 0) {
          matchingValue = $('[name="' + identifier + '[]"]');
        }
        return matchingValue !== undefined ? value.toString() !== matchingValue.toString() : false;
      },

      // matches another field
      match: function match(value, identifier) {
        // use either id or name of field
        var $form = $(this),
            matchingValue;
        if ($('[data-validate="' + identifier + '"]').length > 0) {
          matchingValue = $('[data-validate="' + identifier + '"]').val();
        } else if ($('#' + identifier).length > 0) {
          matchingValue = $('#' + identifier).val();
        } else if ($('[name="' + identifier + '"]').length > 0) {
          matchingValue = $('[name="' + identifier + '"]').val();
        } else if ($('[name="' + identifier + '[]"]').length > 0) {
          matchingValue = $('[name="' + identifier + '[]"]');
        }
        return matchingValue !== undefined ? value.toString() == matchingValue.toString() : false;
      },

      maxCount: function maxCount(value, count) {
        value = value.split(',');
        return $.isArray(value) && value.length <= count;
      },

      exactCount: function exactCount(value, count) {
        value = value.split(',');
        return $.isArray(value) && value.length == count;
      },

      minCount: function minCount(value, count) {
        value = value.split(',');
        return $.isArray(value) && value.length >= count;
      },

      regExp: function regExp(value, _regExp) {
        var regExpParts = _regExp.match($.fn.form.settings.regExp.flags),
            flags;
        // regular expression specified as /baz/gi (flags)
        if (regExpParts) {
          _regExp = regExpParts.length >= 2 ? regExpParts[1] : _regExp;
          flags = regExpParts.length >= 3 ? regExpParts[2] : '';
        }
        return value.match(new RegExp(_regExp, flags));
      },

      // string length is less than max length
      maxLength: function maxLength(value, _maxLength) {
        return value !== undefined ? value.length <= _maxLength : false;
      },

      // value is not value (case insensitive)
      not: function not(value, notValue) {
        value = typeof value == 'string' ? value.toLowerCase() : value;
        notValue = typeof notValue == 'string' ? notValue.toLowerCase() : notValue;
        return value != notValue;
      },

      // value is not value (case sensitive)
      notExactly: function notExactly(value, notValue) {
        return value != notValue;
      },

      // value is most likely url
      url: function url(value) {
        return $.fn.form.settings.regExp.url.match(value);
      }
    }

  };
})(jQuery, window, document);

// do nothing
});

require.register("web/static/css/components/form.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Form Validation
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, i) {
  "use strict";e.fn.form = function (t) {
    var r,
        o = e(this),
        a = o.selector || "",
        s = new Date().getTime(),
        l = [],
        c = arguments[0],
        u = arguments[1],
        f = "string" == typeof c,
        d = [].slice.call(arguments, 1);return (o.each(function () {
      var p,
          g,
          m,
          v,
          h,
          b,
          y,
          k,
          x,
          w,
          E,
          C,
          S,
          R,
          F,
          A,
          T,
          O,
          z = e(this),
          D = this,
          j = [],
          V = !1;O = { initialize: function initialize() {
          O.get.settings(), f ? (T === i && O.instantiate(), O.invoke(c)) : (O.verbose("Initializing form validation", z, k), O.bindEvents(), O.set.defaults(), O.instantiate());
        }, instantiate: function instantiate() {
          O.verbose("Storing instance of module", O), T = O, z.data(F, O);
        }, destroy: function destroy() {
          O.verbose("Destroying previous module", T), O.removeEvents(), z.removeData(F);
        }, refresh: function refresh() {
          O.verbose("Refreshing selector cache"), p = z.find(E.field), g = z.find(E.group), m = z.find(E.message), v = z.find(E.prompt), h = z.find(E.submit), b = z.find(E.clear), y = z.find(E.reset);
        }, submit: function submit() {
          O.verbose("Submitting form", z), z.submit();
        }, attachEvents: function attachEvents(t, n) {
          n = n || "submit", e(t).on("click" + A, function (e) {
            O[n](), e.preventDefault();
          });
        }, bindEvents: function bindEvents() {
          O.verbose("Attaching form events"), z.on("submit" + A, O.validate.form).on("blur" + A, E.field, O.event.field.blur).on("click" + A, E.submit, O.submit).on("click" + A, E.reset, O.reset).on("click" + A, E.clear, O.clear), k.keyboardShortcuts && z.on("keydown" + A, E.field, O.event.field.keydown), p.each(function () {
            var t = e(this),
                n = t.prop("type"),
                i = O.get.changeEvent(n, t);e(this).on(i + A, O.event.field.change);
          });
        }, clear: function clear() {
          p.each(function () {
            var t = e(this),
                n = t.parent(),
                i = t.closest(g),
                r = i.find(E.prompt),
                o = t.data(w.defaultValue) || "",
                a = n.is(E.uiCheckbox),
                s = n.is(E.uiDropdown),
                l = i.hasClass(C.error);l && (O.verbose("Resetting error on field", i), i.removeClass(C.error), r.remove()), s ? (O.verbose("Resetting dropdown value", n, o), n.dropdown("clear")) : a ? t.prop("checked", !1) : (O.verbose("Resetting field value", t, o), t.val(""));
          });
        }, reset: function reset() {
          p.each(function () {
            var t = e(this),
                n = t.parent(),
                r = t.closest(g),
                o = r.find(E.prompt),
                a = t.data(w.defaultValue),
                s = n.is(E.uiCheckbox),
                l = n.is(E.uiDropdown),
                c = r.hasClass(C.error);a === i && (a = ""), c && (O.verbose("Resetting error on field", r), r.removeClass(C.error), o.remove()), l ? (O.verbose("Resetting dropdown value", n, a), n.dropdown("restore defaults")) : s ? (O.verbose("Resetting checkbox value", n, a), t.prop("checked", a)) : (O.verbose("Resetting field value", t, a), t.val(a));
          });
        }, is: { valid: function valid() {
            var t = !0;return (O.verbose("Checking if form is valid"), e.each(x, function (e, n) {
              O.validate.field(n) || (t = !1);
            }), t);
          } }, removeEvents: function removeEvents() {
          z.off(A), p.off(A), h.off(A), p.off(A);
        }, event: { field: { keydown: function keydown(t) {
              var n = e(this),
                  i = t.which,
                  r = { enter: 13, escape: 27 };i == r.escape && (O.verbose("Escape key pressed blurring field"), n.blur()), !t.ctrlKey && i == r.enter && n.is(E.input) && n.not(E.checkbox).length > 0 && (V || (n.one("keyup" + A, O.event.field.keyup), O.submit(), O.debug("Enter pressed on input submitting form")), V = !0);
            }, keyup: function keyup() {
              V = !1;
            }, blur: function blur() {
              var t = e(this),
                  n = t.closest(g),
                  i = O.get.validation(t);n.hasClass(C.error) ? (O.debug("Revalidating field", t, i), O.validate.field(i)) : ("blur" == k.on || "change" == k.on) && O.validate.field(i);
            }, change: function change() {
              var t = e(this),
                  n = t.closest(g);("change" == k.on || n.hasClass(C.error) && k.revalidate) && (clearTimeout(O.timer), O.timer = setTimeout(function () {
                O.debug("Revalidating field", t, O.get.validation(t)), O.validate.field(O.get.validation(t));
              }, k.delay));
            } } }, get: { changeEvent: function changeEvent(e, t) {
            return "checkbox" == e || "radio" == e || "hidden" == e || t.is("select") ? "change" : O.get.inputEvent();
          }, inputEvent: function inputEvent() {
            return n.createElement("input").oninput !== i ? "input" : n.createElement("input").onpropertychange !== i ? "propertychange" : "keyup";
          }, settings: function settings() {
            if (e.isPlainObject(t)) {
              var n = Object.keys(t),
                  r = n.length > 0 ? t[n[0]].identifier !== i : !1;r ? (k = e.extend(!0, {}, e.fn.form.settings, u), x = e.extend({}, e.fn.form.settings.defaults, t), O.error(k.error.oldSyntax, D), O.verbose("Extending settings from legacy parameters", x, k)) : (k = e.extend(!0, {}, e.fn.form.settings, t), x = e.extend({}, e.fn.form.settings.defaults, k.fields), O.verbose("Extending settings", x, k));
            } else k = e.fn.form.settings, x = e.fn.form.settings.defaults, O.verbose("Using default form validation", x, k);R = k.namespace, w = k.metadata, E = k.selector, C = k.className, S = k.error, F = "module-" + R, A = "." + R, T = z.data(F), O.refresh();
          }, field: function field(t) {
            return (O.verbose("Finding field with identifier", t), p.filter("#" + t).length > 0 ? p.filter("#" + t) : p.filter("[name=\"" + t + "\"]").length > 0 ? p.filter("[name=\"" + t + "\"]") : p.filter("[name=\"" + t + "[]\"]").length > 0 ? p.filter("[name=\"" + t + "[]\"]") : p.filter("[data-" + w.validate + "=\"" + t + "\"]").length > 0 ? p.filter("[data-" + w.validate + "=\"" + t + "\"]") : e("<input/>"));
          }, fields: function fields(t) {
            var n = e();return (e.each(t, function (e, t) {
              n = n.add(O.get.field(t));
            }), n);
          }, validation: function validation(t) {
            var n;return x ? (e.each(x, function (e, i) {
              O.get.field(i.identifier)[0] == t[0] && (n = i);
            }), n || !1) : !1;
          }, value: function value(e) {
            var t,
                n = [];return (n.push(e), t = O.get.values.call(D, n), t[e]);
          }, values: function values(t) {
            var n = e.isArray(t) ? O.get.fields(t) : p,
                i = {};return (n.each(function (t, n) {
              var r = e(n),
                  o = (r.prop("type"), r.prop("name")),
                  a = r.val(),
                  s = r.is(E.checkbox),
                  l = r.is(E.radio),
                  c = -1 !== o.indexOf("[]"),
                  u = s ? r.is(":checked") : !1;if (o) if (c) if ((o = o.replace("[]", ""), i[o] || (i[o] = []), s)) {
                if (!u) return (O.debug("Omitted unchecked checkbox", r), !0);i[o].push(a);
              } else i[o].push(a);else if (l) u && (i[o] = a);else if (s) {
                if (!u) return (O.debug("Omitted unchecked checkbox", r), !0);i[o] = !0;
              } else i[o] = a;
            }), i);
          } }, has: { field: function field(e) {
            return (O.verbose("Checking for existence of a field with identifier", e), p.filter("#" + e).length > 0 ? !0 : p.filter("[name=\"" + e + "\"]").length > 0 ? !0 : p.filter("[data-" + w.validate + "=\"" + e + "\"]").length > 0 ? !0 : !1);
          } }, add: { prompt: function prompt(t, n) {
            var r = O.get.field(t),
                o = r.closest(g),
                a = o.children(E.prompt),
                s = 0 !== a.length;n = "string" == typeof n ? [n] : n, O.verbose("Adding field error state", t), o.addClass(C.error), k.inline && (s || (a = k.templates.prompt(n), a.appendTo(o)), a.html(n[0]), s ? O.verbose("Inline errors are disabled, no inline error added", t) : k.transition && e.fn.transition !== i && z.transition("is supported") ? (O.verbose("Displaying error with css transition", k.transition), a.transition(k.transition + " in", k.duration)) : (O.verbose("Displaying error with fallback javascript animation"), a.fadeIn(k.duration)));
          }, errors: function errors(e) {
            O.debug("Adding form error messages", e), m.html(k.templates.error(e));
          } }, remove: { prompt: function prompt(t) {
            var n = O.get.field(t.identifier),
                r = n.closest(g),
                o = r.children(E.prompt);r.removeClass(C.error), k.inline && o.is(":visible") && (O.verbose("Removing prompt for field", t), k.transition && e.fn.transition !== i && z.transition("is supported") ? o.transition(k.transition + " out", k.duration, function () {
              o.remove();
            }) : o.fadeOut(k.duration, function () {
              o.remove();
            }));
          } }, set: { success: function success() {
            z.removeClass(C.error).addClass(C.success);
          }, defaults: function defaults() {
            p.each(function () {
              var t = e(this),
                  n = t.filter(E.checkbox).length > 0,
                  i = n ? t.is(":checked") : t.val();t.data(w.defaultValue, i);
            });
          }, error: function error() {
            z.removeClass(C.success).addClass(C.error);
          }, value: function value(e, t) {
            var n = {};return (n[e] = t, O.set.values.call(D, n));
          }, values: function values(t) {
            e.isEmptyObject(t) || e.each(t, function (t, n) {
              var i,
                  r = O.get.field(t),
                  o = r.parent(),
                  a = e.isArray(n),
                  s = o.is(E.uiCheckbox),
                  l = o.is(E.uiDropdown),
                  c = r.is(E.radio) && s,
                  u = r.length > 0;u && (a && s ? (O.verbose("Selecting multiple", n, r), o.checkbox("uncheck"), e.each(n, function (e, t) {
                i = r.filter("[value=\"" + t + "\"]"), o = i.parent(), i.length > 0 && o.checkbox("check");
              })) : c ? (O.verbose("Selecting radio value", n, r), r.filter("[value=\"" + n + "\"]").parent(E.uiCheckbox).checkbox("check")) : s ? (O.verbose("Setting checkbox value", n, o), o.checkbox(n === !0 ? "check" : "uncheck")) : l ? (O.verbose("Setting dropdown value", n, o), o.dropdown("set selected", n)) : (O.verbose("Setting field value", n, r), r.val(n)));
            });
          } }, validate: { form: function form(e) {
            return V ? !1 : (j = [], O.is.valid() ? (O.debug("Form has no validation errors, submitting"), O.set.success(), k.onSuccess.call(D, e)) : (O.debug("Form has errors"), O.set.error(), k.inline || O.add.errors(j), z.data("moduleApi") !== i && e.stopImmediatePropagation(), k.onFailure.call(D, j)));
          }, field: function field(t) {
            var n = O.get.field(t.identifier),
                r = !0,
                o = [];return (n.prop("disabled") ? (O.debug("Field is disabled. Skipping", t.identifier), r = !0) : t.optional && "" === e.trim(n.val()) ? (O.debug("Field is optional and empty. Skipping", t.identifier), r = !0) : t.rules !== i && e.each(t.rules, function (e, n) {
              O.has.field(t.identifier) && !O.validate.rule(t, n) && (O.debug("Field is invalid", t.identifier, n.type), o.push(n.prompt), r = !1);
            }), r ? (O.remove.prompt(t, o), k.onValid.call(n), !0) : (j = j.concat(o), O.add.prompt(t.identifier, o), k.onInvalid.call(n, o), !1));
          }, rule: function rule(t, n) {
            var i,
                r,
                o,
                a = O.get.field(t.identifier),
                s = n.type,
                l = a.val(),
                c = s.match(k.regExp.bracket),
                u = !0;if ((l = e.trim(a.val() + ""), c)) {
              if ((r = "" + c[1], o = s.replace(c[0], ""), i = k.rules[o], !e.isFunction(i))) return void O.error(S.noRule, o);u = i.call(a, l, r);
            } else {
              if ((i = k.rules[s], !e.isFunction(i))) return void O.error(S.noRule, s);u = i.call(a, l);
            }return u;
          } }, setting: function setting(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, k, t);else {
            if (n === i) return k[t];k[t] = n;
          }
        }, internal: function internal(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, O, t);else {
            if (n === i) return O[t];O[t] = n;
          }
        }, debug: function debug() {
          k.debug && (k.performance ? O.performance.log(arguments) : (O.debug = Function.prototype.bind.call(console.info, console, k.name + ":"), O.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          k.verbose && k.debug && (k.performance ? O.performance.log(arguments) : (O.verbose = Function.prototype.bind.call(console.info, console, k.name + ":"), O.verbose.apply(console, arguments)));
        }, error: function error() {
          O.error = Function.prototype.bind.call(console.error, console, k.name + ":"), O.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, n, i;k.performance && (t = new Date().getTime(), i = s || t, n = t - i, s = t, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: D, "Execution Time": n })), clearTimeout(O.performance.timer), O.performance.timer = setTimeout(O.performance.display, 500);
          }, display: function display() {
            var t = k.name + ":",
                n = 0;s = !1, clearTimeout(O.performance.timer), e.each(l, function (e, t) {
              n += t["Execution Time"];
            }), t += " " + n + "ms", a && (t += " '" + a + "'"), o.length > 1 && (t += " (" + o.length + ")"), (console.group !== i || console.table !== i) && l.length > 0 && (console.groupCollapsed(t), console.table ? console.table(l) : e.each(l, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(t, n, o) {
          var a,
              s,
              l,
              c = T;return (n = n || d, o = D || o, "string" == typeof t && c !== i && (t = t.split(/[\. ]/), a = t.length - 1, e.each(t, function (n, r) {
            var o = n != a ? r + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(c[o]) && n != a) c = c[o];else {
              if (c[o] !== i) return (s = c[o], !1);if (!e.isPlainObject(c[r]) || n == a) return c[r] !== i ? (s = c[r], !1) : !1;c = c[r];
            }
          })), e.isFunction(s) ? l = s.apply(o, n) : s !== i && (l = s), e.isArray(r) ? r.push(l) : r !== i ? r = [r, l] : l !== i && (r = l), s);
        } }, O.initialize();
    }), r !== i ? r : this);
  }, e.fn.form.settings = { name: "Form", namespace: "form", debug: !1, verbose: !1, performance: !0, fields: !1, keyboardShortcuts: !0, on: "submit", inline: !1, delay: 200, revalidate: !0, transition: "scale", duration: 200, onValid: function onValid() {}, onInvalid: function onInvalid() {}, onSuccess: function onSuccess() {
      return !0;
    }, onFailure: function onFailure() {
      return !1;
    }, metadata: { defaultValue: "default", validate: "validate" }, regExp: { bracket: /\[(.*)\]/i, escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, email: "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?", integer: /^\-?\d+$/, flags: /^\/(.*)\/(.*)?/, url: /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/i }, selector: { checkbox: "input[type=\"checkbox\"], input[type=\"radio\"]", clear: ".clear", field: "input, textarea, select", group: ".field", input: "input", message: ".error.message", prompt: ".prompt.label", radio: "input[type=\"radio\"]", reset: ".reset:not([type=\"reset\"])", submit: ".submit:not([type=\"submit\"])", uiCheckbox: ".ui.checkbox", uiDropdown: ".ui.dropdown" }, className: { error: "error", label: "ui prompt label", pressed: "down", success: "success" }, error: { oldSyntax: "Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.", noRule: "There is no rule matching the one you specified", method: "The method you called is not defined." }, templates: { error: function error(t) {
        var n = "<ul class=\"list\">";return (e.each(t, function (e, t) {
          n += "<li>" + t + "</li>";
        }), n += "</ul>", e(n));
      }, prompt: function prompt(t) {
        return e("<div/>").addClass("ui red pointing prompt label").html(t[0]);
      } }, rules: { checked: function checked() {
        return e(this).filter(":checked").length > 0;
      }, contains: function contains(t, n) {
        return (n = n.replace(e.fn.form.settings.regExp.escape, "\\$&"), -1 !== t.search(new RegExp(n, "i")));
      }, containsExactly: function containsExactly(t, n) {
        return (n = n.replace(e.fn.form.settings.regExp.escape, "\\$&"), -1 !== t.search(new RegExp(n)));
      }, email: function email(t) {
        var n = new RegExp(e.fn.form.settings.regExp.email, "i");return n.test(t);
      }, empty: function empty(t) {
        return !(t === i || "" === t || e.isArray(t) && 0 === t.length);
      }, integer: function integer(t, n) {
        var r,
            o,
            a,
            s = e.fn.form.settings.regExp.integer;return (n === i || "" === n || ".." === n || (-1 == n.indexOf("..") ? s.test(n) && (r = o = n - 0) : (a = n.split("..", 2), s.test(a[0]) && (r = a[0] - 0), s.test(a[1]) && (o = a[1] - 0))), s.test(t) && (r === i || t >= r) && (o === i || o >= t));
      }, is: function is(e, t) {
        return (t = "string" == typeof t ? t.toLowerCase() : t, e = "string" == typeof e ? e.toLowerCase() : e, e == t);
      }, isExactly: function isExactly(e, t) {
        return e == t;
      }, length: function length(e, t) {
        return e !== i ? e.length >= t : !1;
      }, different: function different(t, n) {
        {
          var r;e(this);
        }return (e("[data-validate=\"" + n + "\"]").length > 0 ? r = e("[data-validate=\"" + n + "\"]").val() : e("#" + n).length > 0 ? r = e("#" + n).val() : e("[name=\"" + n + "\"]").length > 0 ? r = e("[name=\"" + n + "\"]").val() : e("[name=\"" + n + "[]\"]").length > 0 && (r = e("[name=\"" + n + "[]\"]")), r !== i ? t.toString() !== r.toString() : !1);
      }, match: function match(t, n) {
        {
          var r;e(this);
        }return (e("[data-validate=\"" + n + "\"]").length > 0 ? r = e("[data-validate=\"" + n + "\"]").val() : e("#" + n).length > 0 ? r = e("#" + n).val() : e("[name=\"" + n + "\"]").length > 0 ? r = e("[name=\"" + n + "\"]").val() : e("[name=\"" + n + "[]\"]").length > 0 && (r = e("[name=\"" + n + "[]\"]")), r !== i ? t.toString() == r.toString() : !1);
      }, maxCount: function maxCount(t, n) {
        return (t = t.split(","), e.isArray(t) && t.length <= n);
      }, exactCount: function exactCount(t, n) {
        return (t = t.split(","), e.isArray(t) && t.length == n);
      }, minCount: function minCount(t, n) {
        return (t = t.split(","), e.isArray(t) && t.length >= n);
      }, regExp: function regExp(t, n) {
        var i,
            r = n.match(e.fn.form.settings.regExp.flags);return (r && (n = r.length >= 2 ? r[1] : n, i = r.length >= 3 ? r[2] : ""), t.match(new RegExp(n, i)));
      }, maxLength: function maxLength(e, t) {
        return e !== i ? e.length <= t : !1;
      }, not: function not(e, t) {
        return (e = "string" == typeof e ? e.toLowerCase() : e, t = "string" == typeof t ? t.toLowerCase() : t, e != t);
      }, notExactly: function notExactly(e, t) {
        return e != t;
      }, url: function url(t) {
        return e.fn.form.settings.regExp.url.match(t);
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/modal", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.modal = function (parameters) {
    var $allModules = $(this),
        $window = $(window),
        $document = $(document),
        $body = $('body'),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings),
          selector = settings.selector,
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $close = $module.find(selector.close),
          $allModals,
          $otherModals,
          $focusedElement,
          $dimmable,
          $dimmer,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          observer,
          module;
      module = {

        initialize: function initialize() {
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();
          module.refreshModals();

          module.bind.events();
          if (settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        create: {
          dimmer: function dimmer() {
            var defaultSettings = {
              debug: settings.debug,
              dimmerName: 'modals',
              duration: {
                show: settings.duration,
                hide: settings.duration
              }
            },
                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);
            if (settings.inverted) {
              dimmerSettings.variation = dimmerSettings.variation !== undefined ? dimmerSettings.variation + ' inverted' : 'inverted';
            }
            if ($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
            }
            module.debug('Creating dimmer with settings', dimmerSettings);
            $dimmable = $context.dimmer(dimmerSettings);
            if (settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
            } else {
              module.set.undetached();
            }
            if (settings.blurring) {
              $dimmable.addClass(className.blurring);
            }
            $dimmer = $dimmable.dimmer('get dimmer');
          },
          id: function id() {
            _id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + _id;
            module.verbose('Creating unique id for element', _id);
          }
        },

        destroy: function destroy() {
          module.verbose('Destroying previous modal');
          $module.removeData(moduleNamespace).off(eventNamespace);
          $window.off(elementNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        refresh: function refresh() {
          module.remove.scrolling();
          module.cacheSizes();
          module.set.screenHeight();
          module.set.type();
          module.set.position();
        },

        refreshModals: function refreshModals() {
          $otherModals = $module.siblings(selector.modal);
          $allModals = $otherModals.add($module);
        },

        attachEvents: function attachEvents(selector, event) {
          var $toggle = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle.off(eventNamespace).on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound, selector);
          }
        },

        bind: {
          events: function events() {
            module.verbose('Attaching events');
            $module.on('click' + eventNamespace, selector.close, module.event.close).on('click' + eventNamespace, selector.approve, module.event.approve).on('click' + eventNamespace, selector.deny, module.event.deny);
            $window.on('resize' + elementNamespace, module.event.resize);
          }
        },

        get: {
          id: function id() {
            return (Math.random().toString(16) + '000000000').substr(2, 8);
          }
        },

        event: {
          approve: function approve() {
            if (settings.onApprove.call(element, $(this)) === false) {
              module.verbose('Approve callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          deny: function deny() {
            if (settings.onDeny.call(element, $(this)) === false) {
              module.verbose('Deny callback returned false cancelling hide');
              return;
            }
            module.hide();
          },
          close: function close() {
            module.hide();
          },
          click: function click(event) {
            var $target = $(event.target),
                isInModal = $target.closest(selector.modal).length > 0,
                isInDOM = $.contains(document.documentElement, event.target);
            if (!isInModal && isInDOM) {
              module.debug('Dimmer clicked, hiding all modals');
              if (module.is.active()) {
                module.remove.clickaway();
                if (settings.allowMultiple) {
                  module.hide();
                } else {
                  module.hideAll();
                }
              }
            }
          },
          debounce: function debounce(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
          },
          keyboard: function keyboard(event) {
            var keyCode = event.which,
                escapeKey = 27;
            if (keyCode == escapeKey) {
              if (settings.closable) {
                module.debug('Escape key pressed hiding modal');
                module.hide();
              } else {
                module.debug('Escape key pressed, but closable is set to false');
              }
              event.preventDefault();
            }
          },
          resize: function resize() {
            if ($dimmable.dimmer('is active')) {
              requestAnimationFrame(module.refresh);
            }
          }
        },

        toggle: function toggle() {
          if (module.is.active() || module.is.animating()) {
            module.hide();
          } else {
            module.show();
          }
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.refreshModals();
          module.showModal(callback);
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.refreshModals();
          module.hideModal(callback);
        },

        showModal: function showModal(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.animating() || !module.is.active()) {

            module.showDimmer();
            module.cacheSizes();
            module.set.position();
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if (!settings.allowMultiple && module.others.active()) {
              module.hideOthers(module.showModal);
            } else {
              settings.onShow.call(element);
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module.transition({
                  debug: settings.debug,
                  animation: settings.transition + ' in',
                  queue: settings.queue,
                  duration: settings.duration,
                  useFailSafe: true,
                  onComplete: function onComplete() {
                    settings.onVisible.apply(element);
                    module.add.keyboardShortcuts();
                    module.save.focus();
                    module.set.active();
                    module.set.autofocus();
                    callback();
                  }
                });
              } else {
                module.error(error.noTransition);
              }
            }
          } else {
            module.debug('Modal is already visible');
          }
        },

        hideModal: function hideModal(callback, keepDimmed) {
          callback = $.isFunction(callback) ? callback : function () {};
          module.debug('Hiding modal');
          settings.onHide.call(element);

          if (module.is.animating() || module.is.active()) {
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module.transition({
                debug: settings.debug,
                animation: settings.transition + ' out',
                queue: settings.queue,
                duration: settings.duration,
                useFailSafe: true,
                onStart: function onStart() {
                  if (!module.others.active() && !keepDimmed) {
                    module.hideDimmer();
                  }
                  module.remove.keyboardShortcuts();
                },
                onComplete: function onComplete() {
                  settings.onHidden.call(element);
                  module.restore.focus();
                  callback();
                }
              });
            } else {
              module.error(error.noTransition);
            }
          }
        },

        showDimmer: function showDimmer() {
          if ($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active')) {
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
          } else {
            module.debug('Dimmer already visible');
          }
        },

        hideDimmer: function hideDimmer() {
          if ($dimmable.dimmer('is animating') || $dimmable.dimmer('is active')) {
            $dimmable.dimmer('hide', function () {
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.remove.clickaway();
                module.remove.screenHeight();
              }
            });
          } else {
            module.debug('Dimmer is not visible cannot hide');
            return;
          }
        },

        hideAll: function hideAll(callback) {
          var $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating);
          callback = $.isFunction(callback) ? callback : function () {};
          if ($visibleModals.length > 0) {
            module.debug('Hiding all visible modals');
            module.hideDimmer();
            $visibleModals.modal('hide modal', callback);
          }
        },

        hideOthers: function hideOthers(callback) {
          var $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating);
          callback = $.isFunction(callback) ? callback : function () {};
          if ($visibleModals.length > 0) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals.modal('hide modal', callback, true);
          }
        },

        others: {
          active: function active() {
            return $otherModals.filter('.' + className.active).length > 0;
          },
          animating: function animating() {
            return $otherModals.filter('.' + className.animating).length > 0;
          }
        },

        add: {
          keyboardShortcuts: function keyboardShortcuts() {
            module.verbose('Adding keyboard shortcuts');
            $document.on('keyup' + eventNamespace, module.event.keyboard);
          }
        },

        save: {
          focus: function focus() {
            $focusedElement = $(document.activeElement).blur();
          }
        },

        restore: {
          focus: function focus() {
            if ($focusedElement && $focusedElement.length > 0) {
              $focusedElement.focus();
            }
          }
        },

        remove: {
          active: function active() {
            $module.removeClass(className.active);
          },
          clickaway: function clickaway() {
            if (settings.closable) {
              $dimmer.off('click' + elementNamespace);
            }
          },
          screenHeight: function screenHeight() {
            if (module.cache.height > module.cache.pageHeight) {
              module.debug('Removing page height');
              $body.css('height', '');
            }
          },
          keyboardShortcuts: function keyboardShortcuts() {
            module.verbose('Removing keyboard shortcuts');
            $document.off('keyup' + eventNamespace);
          },
          scrolling: function scrolling() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
          }
        },

        cacheSizes: function cacheSizes() {
          var modalHeight = $module.outerHeight();
          if (module.cache === undefined || modalHeight !== 0) {
            module.cache = {
              pageHeight: $(document).outerHeight(),
              height: modalHeight + settings.offset,
              contextHeight: settings.context == 'body' ? $(window).height() : $dimmable.height()
            };
          }
          module.debug('Caching modal and container sizes', module.cache);
        },

        can: {
          fit: function fit() {
            return module.cache.height + settings.padding * 2 < module.cache.contextHeight;
          }
        },

        is: {
          active: function active() {
            return $module.hasClass(className.active);
          },
          animating: function animating() {
            return $module.transition('is supported') ? $module.transition('is animating') : $module.is(':visible');
          },
          scrolling: function scrolling() {
            return $dimmable.hasClass(className.scrolling);
          },
          modernBrowser: function modernBrowser() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || 'ActiveXObject' in window);
          }
        },

        set: {
          autofocus: function autofocus() {
            if (settings.autofocus) {
              var $inputs = $module.filter(':input').filter(':visible'),
                  $autofocus = $inputs.filter('[autofocus]'),
                  $input = $autofocus.length > 0 ? $autofocus.first() : $inputs.first();
              if ($input.length > 0) {
                $input.focus();
              }
            }
          },
          clickaway: function clickaway() {
            if (settings.closable) {
              $dimmer.on('click' + elementNamespace, module.event.click);
            }
          },
          screenHeight: function screenHeight() {
            if (module.can.fit()) {
              $body.css('height', '');
            } else {
              module.debug('Modal is taller than page content, resizing page height');
              $body.css('height', module.cache.height + settings.padding * 2);
            }
          },
          active: function active() {
            $module.addClass(className.active);
          },
          scrolling: function scrolling() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
          },
          type: function type() {
            if (module.can.fit()) {
              module.verbose('Modal fits on screen');
              if (!module.others.active() && !module.others.animating()) {
                module.remove.scrolling();
              }
            } else {
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
            }
          },
          position: function position() {
            module.verbose('Centering modal on page', module.cache);
            if (module.can.fit()) {
              $module.css({
                top: '',
                marginTop: -(module.cache.height / 2)
              });
            } else {
              $module.css({
                marginTop: '',
                top: $document.scrollTop()
              });
            }
          },
          undetached: function undetached() {
            $dimmable.addClass(className.undetached);
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.modal.settings = {

    name: 'Modal',
    namespace: 'modal',

    debug: false,
    verbose: false,
    performance: true,

    observeChanges: false,

    allowMultiple: false,
    detachable: true,
    closable: true,
    autofocus: true,

    inverted: false,
    blurring: false,

    dimmerSettings: {
      closable: false,
      useCSS: true
    },

    context: 'body',

    queue: false,
    duration: 500,
    offset: 0,
    transition: 'scale',

    // padding with edge of page
    padding: 50,

    // called before show animation
    onShow: function onShow() {},

    // called after show animation
    onVisible: function onVisible() {},

    // called before hide animation
    onHide: function onHide() {},

    // called after hide animation
    onHidden: function onHidden() {},

    // called after approve selector match
    onApprove: function onApprove() {
      return true;
    },

    // called after deny selector match
    onDeny: function onDeny() {
      return true;
    },

    selector: {
      close: '.close',
      approve: '.actions .positive, .actions .approve, .actions .ok',
      deny: '.actions .negative, .actions .deny, .actions .cancel',
      modal: '.ui.modal'
    },
    error: {
      dimmer: 'UI Dimmer, a required component is not included in this page',
      method: 'The method you called is not defined.',
      notFound: 'The element you specified could not be found'
    },
    className: {
      active: 'active',
      animating: 'animating',
      blurring: 'blurring',
      scrolling: 'scrolling',
      undetached: 'undetached'
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/modal.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, i, t) {
  "use strict";e.fn.modal = function (o) {
    var a,
        r = e(this),
        s = e(n),
        c = e(i),
        l = e("body"),
        u = r.selector || "",
        d = new Date().getTime(),
        m = [],
        g = arguments[0],
        f = "string" == typeof g,
        h = [].slice.call(arguments, 1),
        v = n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (r.each(function () {
      var r,
          b,
          p,
          y,
          k,
          w,
          C,
          M,
          S,
          F = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.modal.settings, o) : e.extend({}, e.fn.modal.settings),
          D = F.selector,
          H = F.className,
          T = F.namespace,
          A = F.error,
          x = "." + T,
          z = "module-" + T,
          O = e(this),
          q = e(F.context),
          E = O.find(D.close),
          j = this,
          N = O.data(z);S = { initialize: function initialize() {
          S.verbose("Initializing dimmer", q), S.create.id(), S.create.dimmer(), S.refreshModals(), S.bind.events(), F.observeChanges && S.observeChanges(), S.instantiate();
        }, instantiate: function instantiate() {
          S.verbose("Storing instance of modal"), N = S, O.data(z, N);
        }, create: { dimmer: function dimmer() {
            var n = { debug: F.debug, dimmerName: "modals", duration: { show: F.duration, hide: F.duration } },
                i = e.extend(!0, n, F.dimmerSettings);return (F.inverted && (i.variation = i.variation !== t ? i.variation + " inverted" : "inverted"), e.fn.dimmer === t ? void S.error(A.dimmer) : (S.debug("Creating dimmer with settings", i), y = q.dimmer(i), F.detachable ? (S.verbose("Modal is detachable, moving content into dimmer"), y.dimmer("add content", O)) : S.set.undetached(), F.blurring && y.addClass(H.blurring), void (k = y.dimmer("get dimmer"))));
          }, id: function id() {
            C = (Math.random().toString(16) + "000000000").substr(2, 8), w = "." + C, S.verbose("Creating unique id for element", C);
          } }, destroy: function destroy() {
          S.verbose("Destroying previous modal"), O.removeData(z).off(x), s.off(w), E.off(x), q.dimmer("destroy");
        }, observeChanges: function observeChanges() {
          "MutationObserver" in n && (M = new MutationObserver(function (e) {
            S.debug("DOM tree modified, refreshing"), S.refresh();
          }), M.observe(j, { childList: !0, subtree: !0 }), S.debug("Setting up mutation observer", M));
        }, refresh: function refresh() {
          S.remove.scrolling(), S.cacheSizes(), S.set.screenHeight(), S.set.type(), S.set.position();
        }, refreshModals: function refreshModals() {
          b = O.siblings(D.modal), r = b.add(O);
        }, attachEvents: function attachEvents(n, i) {
          var t = e(n);i = e.isFunction(S[i]) ? S[i] : S.toggle, t.length > 0 ? (S.debug("Attaching modal events to element", n, i), t.off(x).on("click" + x, i)) : S.error(A.notFound, n);
        }, bind: { events: function events() {
            S.verbose("Attaching events"), O.on("click" + x, D.close, S.event.close).on("click" + x, D.approve, S.event.approve).on("click" + x, D.deny, S.event.deny), s.on("resize" + w, S.event.resize);
          } }, get: { id: function id() {
            return (Math.random().toString(16) + "000000000").substr(2, 8);
          } }, event: { approve: function approve() {
            return F.onApprove.call(j, e(this)) === !1 ? void S.verbose("Approve callback returned false cancelling hide") : void S.hide();
          }, deny: function deny() {
            return F.onDeny.call(j, e(this)) === !1 ? void S.verbose("Deny callback returned false cancelling hide") : void S.hide();
          }, close: function close() {
            S.hide();
          }, click: function click(n) {
            var t = e(n.target),
                o = t.closest(D.modal).length > 0,
                a = e.contains(i.documentElement, n.target);!o && a && (S.debug("Dimmer clicked, hiding all modals"), S.is.active() && (S.remove.clickaway(), F.allowMultiple ? S.hide() : S.hideAll()));
          }, debounce: function debounce(e, n) {
            clearTimeout(S.timer), S.timer = setTimeout(e, n);
          }, keyboard: function keyboard(e) {
            var n = e.which,
                i = 27;n == i && (F.closable ? (S.debug("Escape key pressed hiding modal"), S.hide()) : S.debug("Escape key pressed, but closable is set to false"), e.preventDefault());
          }, resize: function resize() {
            y.dimmer("is active") && v(S.refresh);
          } }, toggle: function toggle() {
          S.is.active() || S.is.animating() ? S.hide() : S.show();
        }, show: function show(n) {
          n = e.isFunction(n) ? n : function () {}, S.refreshModals(), S.showModal(n);
        }, hide: function hide(n) {
          n = e.isFunction(n) ? n : function () {}, S.refreshModals(), S.hideModal(n);
        }, showModal: function showModal(n) {
          n = e.isFunction(n) ? n : function () {}, S.is.animating() || !S.is.active() ? (S.showDimmer(), S.cacheSizes(), S.set.position(), S.set.screenHeight(), S.set.type(), S.set.clickaway(), !F.allowMultiple && S.others.active() ? S.hideOthers(S.showModal) : (F.onShow.call(j), F.transition && e.fn.transition !== t && O.transition("is supported") ? (S.debug("Showing modal with css animations"), O.transition({ debug: F.debug, animation: F.transition + " in", queue: F.queue, duration: F.duration, useFailSafe: !0, onComplete: function onComplete() {
              F.onVisible.apply(j), S.add.keyboardShortcuts(), S.save.focus(), S.set.active(), S.set.autofocus(), n();
            } })) : S.error(A.noTransition))) : S.debug("Modal is already visible");
        }, hideModal: function hideModal(n, i) {
          n = e.isFunction(n) ? n : function () {}, S.debug("Hiding modal"), F.onHide.call(j), (S.is.animating() || S.is.active()) && (F.transition && e.fn.transition !== t && O.transition("is supported") ? (S.remove.active(), O.transition({ debug: F.debug, animation: F.transition + " out", queue: F.queue, duration: F.duration, useFailSafe: !0, onStart: function onStart() {
              S.others.active() || i || S.hideDimmer(), S.remove.keyboardShortcuts();
            }, onComplete: function onComplete() {
              F.onHidden.call(j), S.restore.focus(), n();
            } })) : S.error(A.noTransition));
        }, showDimmer: function showDimmer() {
          y.dimmer("is animating") || !y.dimmer("is active") ? (S.debug("Showing dimmer"), y.dimmer("show")) : S.debug("Dimmer already visible");
        }, hideDimmer: function hideDimmer() {
          return y.dimmer("is animating") || y.dimmer("is active") ? void y.dimmer("hide", function () {
            F.transition && e.fn.transition !== t && O.transition("is supported") && (S.remove.clickaway(), S.remove.screenHeight());
          }) : void S.debug("Dimmer is not visible cannot hide");
        }, hideAll: function hideAll(n) {
          var i = r.filter("." + H.active + ", ." + H.animating);n = e.isFunction(n) ? n : function () {}, i.length > 0 && (S.debug("Hiding all visible modals"), S.hideDimmer(), i.modal("hide modal", n));
        }, hideOthers: function hideOthers(n) {
          var i = b.filter("." + H.active + ", ." + H.animating);n = e.isFunction(n) ? n : function () {}, i.length > 0 && (S.debug("Hiding other modals", b), i.modal("hide modal", n, !0));
        }, others: { active: function active() {
            return b.filter("." + H.active).length > 0;
          }, animating: function animating() {
            return b.filter("." + H.animating).length > 0;
          } }, add: { keyboardShortcuts: function keyboardShortcuts() {
            S.verbose("Adding keyboard shortcuts"), c.on("keyup" + x, S.event.keyboard);
          } }, save: { focus: function focus() {
            p = e(i.activeElement).blur();
          } }, restore: { focus: function focus() {
            p && p.length > 0 && p.focus();
          } }, remove: { active: function active() {
            O.removeClass(H.active);
          }, clickaway: function clickaway() {
            F.closable && k.off("click" + w);
          }, screenHeight: function screenHeight() {
            S.cache.height > S.cache.pageHeight && (S.debug("Removing page height"), l.css("height", ""));
          }, keyboardShortcuts: function keyboardShortcuts() {
            S.verbose("Removing keyboard shortcuts"), c.off("keyup" + x);
          }, scrolling: function scrolling() {
            y.removeClass(H.scrolling), O.removeClass(H.scrolling);
          } }, cacheSizes: function cacheSizes() {
          var o = O.outerHeight();(S.cache === t || 0 !== o) && (S.cache = { pageHeight: e(i).outerHeight(), height: o + F.offset, contextHeight: "body" == F.context ? e(n).height() : y.height() }), S.debug("Caching modal and container sizes", S.cache);
        }, can: { fit: function fit() {
            return S.cache.height + 2 * F.padding < S.cache.contextHeight;
          } }, is: { active: function active() {
            return O.hasClass(H.active);
          }, animating: function animating() {
            return O.transition("is supported") ? O.transition("is animating") : O.is(":visible");
          }, scrolling: function scrolling() {
            return y.hasClass(H.scrolling);
          }, modernBrowser: function modernBrowser() {
            return !(n.ActiveXObject || "ActiveXObject" in n);
          } }, set: { autofocus: function autofocus() {
            if (F.autofocus) {
              var e = O.filter(":input").filter(":visible"),
                  n = e.filter("[autofocus]"),
                  i = n.length > 0 ? n.first() : e.first();i.length > 0 && i.focus();
            }
          }, clickaway: function clickaway() {
            F.closable && k.on("click" + w, S.event.click);
          }, screenHeight: function screenHeight() {
            S.can.fit() ? l.css("height", "") : (S.debug("Modal is taller than page content, resizing page height"), l.css("height", S.cache.height + 2 * F.padding));
          }, active: function active() {
            O.addClass(H.active);
          }, scrolling: function scrolling() {
            y.addClass(H.scrolling), O.addClass(H.scrolling);
          }, type: function type() {
            S.can.fit() ? (S.verbose("Modal fits on screen"), S.others.active() || S.others.animating() || S.remove.scrolling()) : (S.verbose("Modal cannot fit on screen setting to scrolling"), S.set.scrolling());
          }, position: function position() {
            S.verbose("Centering modal on page", S.cache), O.css(S.can.fit() ? { top: "", marginTop: -(S.cache.height / 2) } : { marginTop: "", top: c.scrollTop() });
          }, undetached: function undetached() {
            y.addClass(H.undetached);
          } }, setting: function setting(n, i) {
          if ((S.debug("Changing setting", n, i), e.isPlainObject(n))) e.extend(!0, F, n);else {
            if (i === t) return F[n];F[n] = i;
          }
        }, internal: function internal(n, i) {
          if (e.isPlainObject(n)) e.extend(!0, S, n);else {
            if (i === t) return S[n];S[n] = i;
          }
        }, debug: function debug() {
          F.debug && (F.performance ? S.performance.log(arguments) : (S.debug = Function.prototype.bind.call(console.info, console, F.name + ":"), S.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          F.verbose && F.debug && (F.performance ? S.performance.log(arguments) : (S.verbose = Function.prototype.bind.call(console.info, console, F.name + ":"), S.verbose.apply(console, arguments)));
        }, error: function error() {
          S.error = Function.prototype.bind.call(console.error, console, F.name + ":"), S.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, i, t;F.performance && (n = new Date().getTime(), t = d || n, i = n - t, d = n, m.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: j, "Execution Time": i })), clearTimeout(S.performance.timer), S.performance.timer = setTimeout(S.performance.display, 500);
          }, display: function display() {
            var n = F.name + ":",
                i = 0;d = !1, clearTimeout(S.performance.timer), e.each(m, function (e, n) {
              i += n["Execution Time"];
            }), n += " " + i + "ms", u && (n += " '" + u + "'"), (console.group !== t || console.table !== t) && m.length > 0 && (console.groupCollapsed(n), console.table ? console.table(m) : e.each(m, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), m = [];
          } }, invoke: function invoke(n, i, o) {
          var r,
              s,
              c,
              l = N;return (i = i || h, o = j || o, "string" == typeof n && l !== t && (n = n.split(/[\. ]/), r = n.length - 1, e.each(n, function (i, o) {
            var a = i != r ? o + n[i + 1].charAt(0).toUpperCase() + n[i + 1].slice(1) : n;if (e.isPlainObject(l[a]) && i != r) l = l[a];else {
              if (l[a] !== t) return (s = l[a], !1);if (!e.isPlainObject(l[o]) || i == r) return l[o] !== t ? (s = l[o], !1) : !1;l = l[o];
            }
          })), e.isFunction(s) ? c = s.apply(o, i) : s !== t && (c = s), e.isArray(a) ? a.push(c) : a !== t ? a = [a, c] : c !== t && (a = c), s);
        } }, f ? (N === t && S.initialize(), S.invoke(g)) : (N !== t && N.invoke("destroy"), S.initialize());
    }), a !== t ? a : this);
  }, e.fn.modal.settings = { name: "Modal", namespace: "modal", debug: !1, verbose: !1, performance: !0, observeChanges: !1, allowMultiple: !1, detachable: !0, closable: !0, autofocus: !0, inverted: !1, blurring: !1, dimmerSettings: { closable: !1, useCSS: !0 }, context: "body", queue: !1, duration: 500, offset: 0, transition: "scale", padding: 50, onShow: function onShow() {}, onVisible: function onVisible() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, onApprove: function onApprove() {
      return !0;
    }, onDeny: function onDeny() {
      return !0;
    }, selector: { close: ".close", approve: ".actions .positive, .actions .approve, .actions .ok", deny: ".actions .negative, .actions .deny, .actions .cancel", modal: ".ui.modal" }, error: { dimmer: "UI Dimmer, a required component is not included in this page", method: "The method you called is not defined.", notFound: "The element you specified could not be found" }, className: { active: "active", animating: "animating", blurring: "blurring", scrolling: "scrolling", undetached: "undetached" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/nag", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.nag = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.nag.settings, parameters) : $.extend({}, $.fn.nag.settings),
          className = settings.className,
          selector = settings.selector,
          error = settings.error,
          namespace = settings.namespace,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          $close = $module.find(selector.close),
          $context = settings.context ? $(settings.context) : $('body'),
          element = this,
          instance = $module.data(moduleNamespace),
          moduleOffset,
          moduleHeight,
          contextWidth,
          contextHeight,
          contextOffset,
          yOffset,
          yPosition,
          timer,
          module,
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      };
      module = {

        initialize: function initialize() {
          module.verbose('Initializing element');

          $module.on('click' + eventNamespace, selector.close, module.dismiss).data(moduleNamespace, module);

          if (settings.detachable && $module.parent()[0] !== $context[0]) {
            $module.detach().prependTo($context);
          }

          if (settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
          }
          module.show();
        },

        destroy: function destroy() {
          module.verbose('Destroying instance');
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        show: function show() {
          if (module.should.show() && !$module.is(':visible')) {
            module.debug('Showing nag', settings.animation.show);
            if (settings.animation.show == 'fade') {
              $module.fadeIn(settings.duration, settings.easing);
            } else {
              $module.slideDown(settings.duration, settings.easing);
            }
          }
        },

        hide: function hide() {
          module.debug('Showing nag', settings.animation.hide);
          if (settings.animation.show == 'fade') {
            $module.fadeIn(settings.duration, settings.easing);
          } else {
            $module.slideUp(settings.duration, settings.easing);
          }
        },

        onHide: function onHide() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
          }
        },

        dismiss: function dismiss(event) {
          if (settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
          }
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
        },

        should: {
          show: function show() {
            if (settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
            }
            if (module.storage.get(settings.key) != settings.value.toString()) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
            }
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
          }
        },

        get: {
          storageOptions: function storageOptions() {
            var options = {};
            if (settings.expires) {
              options.expires = settings.expires;
            }
            if (settings.domain) {
              options.domain = settings.domain;
            }
            if (settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        clear: function clear() {
          module.storage.remove(settings.key);
        },

        storage: {
          set: function set(key, value) {
            var options = module.get.storageOptions();
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
            } else if ($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
            } else {
              module.error(error.noCookieStorage);
              return;
            }
          },
          get: function get(key, value) {
            var storedValue;
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
            }
            // get by cookie
            else if ($.cookie !== undefined) {
              storedValue = $.cookie(key);
            } else {
              module.error(error.noCookieStorage);
            }
            if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
            }
            return storedValue;
          },
          remove: function remove(key) {
            var options = module.get.storageOptions();
            if (settings.storageMethod == 'local' && window.store !== undefined) {
              window.localStorage.removeItem(key);
            }
            // store by cookie
            else if ($.cookie !== undefined) {
              $.removeCookie(key, options);
            } else {
              module.error(error.noStorage);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.nag.settings = {

    name: 'Nag',

    debug: false,
    verbose: false,
    performance: true,

    namespace: 'Nag',

    // allows cookie to be overriden
    persist: false,

    // set to zero to require manually dismissal, otherwise hides on its own
    displayTime: 0,

    animation: {
      show: 'slide',
      hide: 'slide'
    },

    context: false,
    detachable: false,

    expires: 30,
    domain: false,
    path: '/',

    // type of storage to use
    storageMethod: 'cookie',

    // value to store in dismissed localstorage/cookie
    key: 'nag',
    value: 'dismiss',

    error: {
      noCookieStorage: '$.cookie is not included. A storage solution is required.',
      noStorage: 'Neither $.cookie or store is defined. A storage solution is required for storing state',
      method: 'The method you called is not defined.'
    },

    className: {
      bottom: 'bottom',
      fixed: 'fixed'
    },

    selector: {
      close: '.close.icon'
    },

    speed: 500,
    easing: 'easeOutQuad',

    onHide: function onHide() {}

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/nag.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Nag
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, n, t) {
  "use strict";e.fn.nag = function (n) {
    var i,
        a = e(this),
        r = a.selector || "",
        s = new Date().getTime(),
        c = [],
        l = arguments[0],
        u = "string" == typeof l,
        g = [].slice.call(arguments, 1);return (a.each(function () {
      {
        var a,
            d = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.nag.settings, n) : e.extend({}, e.fn.nag.settings),
            m = (d.className, d.selector),
            f = d.error,
            p = d.namespace,
            h = "." + p,
            b = p + "-module",
            v = e(this),
            y = (v.find(m.close), e(d.context ? d.context : "body")),
            k = this,
            w = v.data(b);o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
          setTimeout(e, 0);
        };
      }a = { initialize: function initialize() {
          a.verbose("Initializing element"), v.on("click" + h, m.close, a.dismiss).data(b, a), d.detachable && v.parent()[0] !== y[0] && v.detach().prependTo(y), d.displayTime > 0 && setTimeout(a.hide, d.displayTime), a.show();
        }, destroy: function destroy() {
          a.verbose("Destroying instance"), v.removeData(b).off(h);
        }, show: function show() {
          a.should.show() && !v.is(":visible") && (a.debug("Showing nag", d.animation.show), "fade" == d.animation.show ? v.fadeIn(d.duration, d.easing) : v.slideDown(d.duration, d.easing));
        }, hide: function hide() {
          a.debug("Showing nag", d.animation.hide), "fade" == d.animation.show ? v.fadeIn(d.duration, d.easing) : v.slideUp(d.duration, d.easing);
        }, onHide: function onHide() {
          a.debug("Removing nag", d.animation.hide), v.remove(), d.onHide && d.onHide();
        }, dismiss: function dismiss(e) {
          d.storageMethod && a.storage.set(d.key, d.value), a.hide(), e.stopImmediatePropagation(), e.preventDefault();
        }, should: { show: function show() {
            return d.persist ? (a.debug("Persistent nag is set, can show nag"), !0) : a.storage.get(d.key) != d.value.toString() ? (a.debug("Stored value is not set, can show nag", a.storage.get(d.key)), !0) : (a.debug("Stored value is set, cannot show nag", a.storage.get(d.key)), !1);
          } }, get: { storageOptions: function storageOptions() {
            var e = {};return (d.expires && (e.expires = d.expires), d.domain && (e.domain = d.domain), d.path && (e.path = d.path), e);
          } }, clear: function clear() {
          a.storage.remove(d.key);
        }, storage: { set: function set(n, i) {
            var r = a.get.storageOptions();if ("localstorage" == d.storageMethod && o.localStorage !== t) o.localStorage.setItem(n, i), a.debug("Value stored using local storage", n, i);else {
              if (e.cookie === t) return void a.error(f.noCookieStorage);e.cookie(n, i, r), a.debug("Value stored using cookie", n, i, r);
            }
          }, get: function get(n, i) {
            var r;return ("localstorage" == d.storageMethod && o.localStorage !== t ? r = o.localStorage.getItem(n) : e.cookie !== t ? r = e.cookie(n) : a.error(f.noCookieStorage), ("undefined" == r || "null" == r || r === t || null === r) && (r = t), r);
          }, remove: function remove(n) {
            var i = a.get.storageOptions();"local" == d.storageMethod && o.store !== t ? o.localStorage.removeItem(n) : e.cookie !== t ? e.removeCookie(n, i) : a.error(f.noStorage);
          } }, setting: function setting(o, n) {
          if ((a.debug("Changing setting", o, n), e.isPlainObject(o))) e.extend(!0, d, o);else {
            if (n === t) return d[o];d[o] = n;
          }
        }, internal: function internal(o, n) {
          if (e.isPlainObject(o)) e.extend(!0, a, o);else {
            if (n === t) return a[o];a[o] = n;
          }
        }, debug: function debug() {
          d.debug && (d.performance ? a.performance.log(arguments) : (a.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), a.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          d.verbose && d.debug && (d.performance ? a.performance.log(arguments) : (a.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), a.verbose.apply(console, arguments)));
        }, error: function error() {
          a.error = Function.prototype.bind.call(console.error, console, d.name + ":"), a.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, n, t;d.performance && (o = new Date().getTime(), t = s || o, n = o - t, s = o, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: k, "Execution Time": n })), clearTimeout(a.performance.timer), a.performance.timer = setTimeout(a.performance.display, 500);
          }, display: function display() {
            var o = d.name + ":",
                n = 0;s = !1, clearTimeout(a.performance.timer), e.each(c, function (e, o) {
              n += o["Execution Time"];
            }), o += " " + n + "ms", r && (o += " '" + r + "'"), (console.group !== t || console.table !== t) && c.length > 0 && (console.groupCollapsed(o), console.table ? console.table(c) : e.each(c, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(o, n, r) {
          var s,
              c,
              l,
              u = w;return (n = n || g, r = k || r, "string" == typeof o && u !== t && (o = o.split(/[\. ]/), s = o.length - 1, e.each(o, function (n, i) {
            var r = n != s ? i + o[n + 1].charAt(0).toUpperCase() + o[n + 1].slice(1) : o;if (e.isPlainObject(u[r]) && n != s) u = u[r];else {
              if (u[r] !== t) return (c = u[r], !1);if (!e.isPlainObject(u[i]) || n == s) return u[i] !== t ? (c = u[i], !1) : (a.error(f.method, o), !1);u = u[i];
            }
          })), e.isFunction(c) ? l = c.apply(r, n) : c !== t && (l = c), e.isArray(i) ? i.push(l) : i !== t ? i = [i, l] : l !== t && (i = l), c);
        } }, u ? (w === t && a.initialize(), a.invoke(l)) : (w !== t && w.invoke("destroy"), a.initialize());
    }), i !== t ? i : this);
  }, e.fn.nag.settings = { name: "Nag", debug: !1, verbose: !1, performance: !0, namespace: "Nag", persist: !1, displayTime: 0, animation: { show: "slide", hide: "slide" }, context: !1, detachable: !1, expires: 30, domain: !1, path: "/", storageMethod: "cookie", key: "nag", value: "dismiss", error: { noCookieStorage: "$.cookie is not included. A storage solution is required.", noStorage: "Neither $.cookie or store is defined. A storage solution is required for storing state", method: "The method you called is not defined." }, className: { bottom: "bottom", fixed: "fixed" }, selector: { close: ".close.icon" }, speed: 500, easing: "easeOutQuad", onHide: function onHide() {} };
})(jQuery, window, document);
});

require.register("web/static/css/components/popup", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.popup = function (parameters) {
    var $allModules = $(this),
        $document = $(document),
        $window = $(window),
        $body = $('body'),
        moduleSelector = $allModules.selector || '',
        hasTouch = ('ontouchstart' in document.documentElement),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.popup.settings, parameters) : $.extend({}, $.fn.popup.settings),
          selector = settings.selector,
          className = settings.className,
          error = settings.error,
          metadata = settings.metadata,
          namespace = settings.namespace,
          eventNamespace = '.' + settings.namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $target = settings.target ? $(settings.target) : $module,
          $popup,
          $offsetParent,
          searchDepth = 0,
          triedPositions = false,
          openedWithTouch = false,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          module;

      module = {

        // binds events
        initialize: function initialize() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if (!module.exists() && settings.preserve) {
            module.create();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        refresh: function refresh() {
          if (settings.popup) {
            $popup = $(settings.popup).eq(0);
          } else {
            if (settings.inline) {
              $popup = $target.next(selector.popup).eq(0);
              settings.popup = $popup;
            }
          }
          if (settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if (settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');
              $popup.detach().appendTo($offsetParent);
            }
          } else {
            $offsetParent = settings.inline ? module.get.offsetParent($target) : module.has.popup() ? module.get.offsetParent($popup) : $body;
          }
          if ($offsetParent.is('html')) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
          }
        },

        reposition: function reposition() {
          module.refresh();
          module.set.position();
        },

        destroy: function destroy() {
          module.debug('Destroying previous module');
          // remove element only if was created dynamically
          if ($popup && !settings.preserve) {
            module.removePopup();
          }
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          $window.off(elementNamespace);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        event: {
          start: function start(event) {
            var delay = $.isPlainObject(settings.delay) ? settings.delay.show : settings.delay;
            clearTimeout(module.hideTimer);
            module.showTimer = setTimeout(module.show, delay);
          },
          end: function end() {
            var delay = $.isPlainObject(settings.delay) ? settings.delay.hide : settings.delay;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(module.hide, delay);
          },
          touchstart: function touchstart(event) {
            openedWithTouch = true;
            module.event.start();
          },
          resize: function resize() {
            if (module.is.visible()) {
              module.set.position();
            }
          },
          hideGracefully: function hideGracefully(event) {
            // don't close on clicks inside popup
            if (event && $(event.target).closest(selector.popup).length === 0) {
              module.debug('Click occurred outside popup hiding popup');
              module.hide();
            } else {
              module.debug('Click was inside popup, keeping popup open');
            }
          }
        },

        // generates popup html from metadata
        create: function create() {
          var html = module.get.html(),
              variation = module.get.variation(),
              title = module.get.title(),
              content = module.get.content();

          if (html || content || title) {
            module.debug('Creating pop-up html');
            if (!html) {
              html = settings.templates.popup({
                title: title,
                content: content
              });
            }
            $popup = $('<div/>').addClass(className.popup).addClass(variation).data(metadata.activator, $module).html(html);
            if (variation) {
              $popup.addClass(variation);
            }
            if (settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup.insertAfter($module);
            } else {
              module.verbose('Appending popup element to body', $popup);
              $popup.appendTo($context);
            }
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
            settings.onCreate.call($popup, element);
          } else if ($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popups = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
          } else if (settings.popup) {
            $(settings.popup).data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if (settings.hoverable) {
              module.bind.popup();
            }
          } else {
            module.debug('No content specified skipping display', element);
          }
        },

        createID: function createID() {
          _id = (Math.random().toString(16) + '000000000').substr(2, 8);
          elementNamespace = '.' + _id;
          module.verbose('Creating unique id for element', _id);
        },

        // determines popup state
        toggle: function toggle() {
          module.debug('Toggling pop-up');
          if (module.is.hidden()) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
          } else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
          }
        },

        show: function show(callback) {
          callback = callback || function () {};
          module.debug('Showing pop-up', settings.transition);

          if (module.is.hidden() && !(module.is.active() && module.is.dropdown())) {
            if (!module.exists()) {
              module.create();
            }
            if (settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
            } else if (!settings.preserve && !settings.popup) {
              module.refresh();
            }
            if ($popup && module.set.position()) {
              module.save.conditions();
              if (settings.exclusive) {
                module.hideAll();
              }
              module.animate.show(callback);
            }
          }
        },

        hide: function hide(callback) {
          callback = callback || function () {};
          if (module.is.visible() || module.is.animating()) {
            if (settings.onHide.call($popup, element) === false) {
              module.debug('onHide callback returned false, cancelling popup animation');
              return;
            }
            module.remove.visible();
            module.unbind.close();
            module.restore.conditions();
            module.animate.hide(callback);
          }
        },

        hideAll: function hideAll() {
          $(selector.popup).filter('.' + className.visible).each(function () {
            $(this).data(metadata.activator).popup('hide');
          });
        },
        exists: function exists() {
          if (!$popup) {
            return false;
          }
          if (settings.inline || settings.popup) {
            return module.has.popup();
          } else {
            return $popup.closest($context).length >= 1 ? true : false;
          }
        },

        removePopup: function removePopup() {
          module.debug('Removing popup', $popup);
          if (module.has.popup() && !settings.popup) {
            $popup.remove();
            $popup = undefined;
          }
          settings.onRemove.call($popup, element);
        },

        save: {
          conditions: function conditions() {
            module.cache = {
              title: $module.attr('title')
            };
            if (module.cache.title) {
              $module.removeAttr('title');
            }
            module.verbose('Saving original attributes', module.cache.title);
          }
        },
        restore: {
          conditions: function conditions() {
            if (module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
            }
            return true;
          }
        },
        animate: {
          show: function show(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup.transition({
                animation: settings.transition + ' in',
                queue: false,
                debug: settings.debug,
                verbose: settings.verbose,
                duration: settings.duration,
                onComplete: function onComplete() {
                  module.bind.close();
                  callback.call($popup, element);
                  settings.onVisible.call($popup, element);
                }
              });
            } else {
              module.error(error.noTransition);
            }
          },
          hide: function hide(callback) {
            callback = $.isFunction(callback) ? callback : function () {};
            module.debug('Hiding pop-up');
            if (settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
            }
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup.transition({
                animation: settings.transition + ' out',
                queue: false,
                duration: settings.duration,
                debug: settings.debug,
                verbose: settings.verbose,
                onComplete: function onComplete() {
                  module.reset();
                  callback.call($popup, element);
                  settings.onHidden.call($popup, element);
                }
              });
            } else {
              module.error(error.noTransition);
            }
          }
        },

        get: {
          html: function html() {
            $module.removeData(metadata.html);
            return $module.data(metadata.html) || settings.html;
          },
          title: function title() {
            $module.removeData(metadata.title);
            return $module.data(metadata.title) || settings.title;
          },
          content: function content() {
            $module.removeData(metadata.content);
            return $module.data(metadata.content) || $module.attr('title') || settings.content;
          },
          variation: function variation() {
            $module.removeData(metadata.variation);
            return $module.data(metadata.variation) || settings.variation;
          },
          calculations: function calculations() {
            var targetElement = $target[0],
                targetPosition = settings.inline || settings.popup ? $target.position() : $target.offset(),
                calculations = {},
                screen;
            calculations = {
              // element which is launching popup
              target: {
                element: $target[0],
                width: $target.outerWidth(),
                height: $target.outerHeight(),
                top: targetPosition.top,
                left: targetPosition.left,
                margin: {}
              },
              // popup itself
              popup: {
                width: $popup.outerWidth(),
                height: $popup.outerHeight()
              },
              // offset container (or 3d context)
              parent: {
                width: $offsetParent.outerWidth(),
                height: $offsetParent.outerHeight()
              },
              // screen boundaries
              screen: {
                scroll: {
                  top: $window.scrollTop(),
                  left: $window.scrollLeft()
                },
                width: $window.width(),
                height: $window.height()
              }
            };

            // add in margins if inline
            calculations.target.margin.top = settings.inline ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10) : 0;
            calculations.target.margin.left = settings.inline ? module.is.rtl() ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10) : parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-left'), 10) : 0;
            // calculate screen boundaries
            screen = calculations.screen;
            calculations.boundary = {
              top: screen.scroll.top,
              bottom: screen.scroll.top + screen.height,
              left: screen.scroll.left,
              right: screen.scroll.left + screen.width
            };
            return calculations;
          },
          id: function id() {
            return _id;
          },
          startEvent: function startEvent() {
            if (settings.on == 'hover') {
              return 'mouseenter';
            } else if (settings.on == 'focus') {
              return 'focus';
            }
            return false;
          },
          scrollEvent: function scrollEvent() {
            return 'scroll';
          },
          endEvent: function endEvent() {
            if (settings.on == 'hover') {
              return 'mouseleave';
            } else if (settings.on == 'focus') {
              return 'blur';
            }
            return false;
          },
          offsetParent: function offsetParent($target) {
            var element = $target !== undefined ? $target[0] : $module[0],
                parentNode = element.parentNode,
                $node = $(parentNode);
            if (parentNode) {
              var is2D = $node.css('transform') === 'none',
                  isStatic = $node.css('position') === 'static',
                  isHTML = $node.is('html');
              while (parentNode && !isHTML && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node = $(parentNode);
                is2D = $node.css('transform') === 'none';
                isStatic = $node.css('position') === 'static';
                isHTML = $node.is('html');
              }
            }
            return $node && $node.length > 0 ? $node : $();
          },
          offstagePosition: function offstagePosition(position, calculations) {
            var offset = $popup.offset(),
                offstage = {},
                offstagePositions = [],
                popup,
                boundary;
            position = position || false;
            calculations = calculations || module.get.calculations();
            // shorthand
            popup = calculations.popup;
            boundary = calculations.boundary;

            if (offset && position) {
              offstage = {
                top: offset.top < boundary.top,
                bottom: offset.top + popup.height > boundary.bottom,
                right: offset.left + popup.width > boundary.right,
                left: offset.left < boundary.left
              };
              module.verbose('Offstage positions determined', offset, offstage);
            }
            // return only boundaries that have been surpassed
            $.each(offstage, function (direction, isOffstage) {
              if (isOffstage) {
                offstagePositions.push(direction);
              }
            });
            return offstagePositions.length > 0 ? offstagePositions.join(' ') : false;
          },
          positions: function positions() {
            return {
              'top left': false,
              'top center': false,
              'top right': false,
              'bottom left': false,
              'bottom center': false,
              'bottom right': false,
              'left center': false,
              'right center': false
            };
          },
          nextPosition: function nextPosition(position) {
            var positions = position.split(' '),
                verticalPosition = positions[0],
                horizontalPosition = positions[1],
                opposite = {
              top: 'bottom',
              bottom: 'top',
              left: 'right',
              right: 'left'
            },
                adjacent = {
              left: 'center',
              center: 'right',
              right: 'left'
            },
                backup = {
              'top left': 'top center',
              'top center': 'top right',
              'top right': 'right center',
              'right center': 'bottom right',
              'bottom right': 'bottom center',
              'bottom center': 'bottom left',
              'bottom left': 'left center',
              'left center': 'top left'
            },
                adjacentsAvailable = verticalPosition == 'top' || verticalPosition == 'bottom',
                oppositeTried = false,
                adjacentTried = false,
                nextPosition = false;
            if (!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
            }

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if (settings.prefer === 'opposite') {
              nextPosition = [opposite[verticalPosition], horizontalPosition];
              nextPosition = nextPosition.join(' ');
              oppositeTried = triedPositions[nextPosition] === true;
              module.debug('Trying opposite strategy', nextPosition);
            }
            if (settings.prefer === 'adjacent' && adjacentsAvailable) {
              nextPosition = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition = nextPosition.join(' ');
              adjacentTried = triedPositions[nextPosition] === true;
              module.debug('Trying adjacent strategy', nextPosition);
            }
            if (adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
            }
            return nextPosition;
          }
        },

        set: {
          position: function position(_position, calculations) {

            // exit conditions
            if ($target.length === 0 || $popup.length === 0) {
              module.error(error.notFound);
              return;
            }
            var offset, distanceAway, target, popup, parent, computedPosition, positioning, offstagePosition;
            calculations = calculations || module.get.calculations();
            _position = _position || $module.data(metadata.position) || settings.position;

            offset = $module.data(metadata.offset) || settings.offset;
            distanceAway = settings.distanceAway;

            // shorthand
            target = calculations.target;
            popup = calculations.popup;
            parent = calculations.parent;

            if (target.top === 0 && target.left === 0) {
              module.debug('Popup target is hidden, no action taken');
              return false;
            }

            if (settings.inline) {
              module.debug('Adding margin to calculation', target.margin);
              if (_position == 'left center' || _position == 'right center') {
                offset += target.margin.top;
                distanceAway += -target.margin.left;
              } else if (_position == 'top left' || _position == 'top center' || _position == 'top right') {
                offset += target.margin.left;
                distanceAway -= target.margin.top;
              } else {
                offset += target.margin.left;
                distanceAway += target.margin.top;
              }
            }

            module.debug('Determining popup position from calculations', _position, calculations);

            if (module.is.rtl()) {
              _position = _position.replace(/left|right/g, function (match) {
                return match == 'left' ? 'right' : 'left';
              });
              module.debug('RTL: Popup position updated', _position);
            }

            if (searchDepth == settings.maxSearchDepth && settings.lastResort) {
              module.debug('Using "last resort" position to display', settings.lastResort);
              _position = settings.lastResort;
            }

            switch (_position) {
              case 'top left':
                positioning = {
                  top: 'auto',
                  bottom: parent.height - target.top + distanceAway,
                  left: target.left + offset,
                  right: 'auto'
                };
                break;
              case 'top center':
                positioning = {
                  bottom: parent.height - target.top + distanceAway,
                  left: target.left + target.width / 2 - popup.width / 2 + offset,
                  top: 'auto',
                  right: 'auto'
                };
                break;
              case 'top right':
                positioning = {
                  bottom: parent.height - target.top + distanceAway,
                  right: parent.width - target.left - target.width - offset,
                  top: 'auto',
                  left: 'auto'
                };
                break;
              case 'left center':
                positioning = {
                  top: target.top + target.height / 2 - popup.height / 2 + offset,
                  right: parent.width - target.left + distanceAway,
                  left: 'auto',
                  bottom: 'auto'
                };
                break;
              case 'right center':
                positioning = {
                  top: target.top + target.height / 2 - popup.height / 2 + offset,
                  left: target.left + target.width + distanceAway,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom left':
                positioning = {
                  top: target.top + target.height + distanceAway,
                  left: target.left + offset,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom center':
                positioning = {
                  top: target.top + target.height + distanceAway,
                  left: target.left + target.width / 2 - popup.width / 2 + offset,
                  bottom: 'auto',
                  right: 'auto'
                };
                break;
              case 'bottom right':
                positioning = {
                  top: target.top + target.height + distanceAway,
                  right: parent.width - target.left - target.width - offset,
                  left: 'auto',
                  bottom: 'auto'
                };
                break;
            }
            if (positioning === undefined) {
              module.error(error.invalidPosition, _position);
            }

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup.css(positioning).removeClass(className.position).addClass(_position).addClass(className.loading);
            // check if is offstage
            offstagePosition = module.get.offstagePosition(_position, calculations);

            // recursively find new positioning
            if (offstagePosition) {
              module.debug('Popup cant fit into viewport', _position, offstagePosition);
              if (searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                _position = module.get.nextPosition(_position);
                module.debug('Trying new position', _position);
                return $popup ? module.set.position(_position, calculations) : false;
              } else if (!settings.lastResort) {
                module.debug('Popup could not find a position in view', $popup);
                // module.error(error.cannotPlace, element);
                module.remove.attempts();
                module.remove.loading();
                module.reset();
                return false;
              }
            }

            module.debug('Position is on stage', _position);
            module.remove.attempts();
            module.set.fluidWidth(calculations);
            module.remove.loading();
            return true;
          },

          fluidWidth: function fluidWidth(calculations) {
            calculations = calculations || module.get.calculations();
            if (settings.setFluidWidth && $popup.hasClass(className.fluid)) {
              $popup.css('width', calculations.parent.width);
            }
          },

          visible: function visible() {
            $module.addClass(className.visible);
          }
        },

        remove: {
          loading: function loading() {
            $popup.removeClass(className.loading);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          attempts: function attempts() {
            module.verbose('Resetting all searched positions');
            searchDepth = 0;
            triedPositions = false;
          }
        },

        bind: {
          events: function events() {
            module.debug('Binding popup events to module');
            if (settings.on == 'click') {
              $module.on('click' + eventNamespace, module.toggle);
            }
            if (settings.on == 'hover' && hasTouch) {
              $module.on('touchstart' + eventNamespace, module.event.touchstart);
            } else if (module.get.startEvent()) {
              $module.on(module.get.startEvent() + eventNamespace, module.event.start).on(module.get.endEvent() + eventNamespace, module.event.end);
            }
            if (settings.target) {
              module.debug('Target set to element', $target);
            }
            $window.on('resize' + elementNamespace, module.event.resize);
          },
          popup: function popup() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if ($popup && module.has.popup()) {
              $popup.on('mouseenter' + eventNamespace, module.event.start).on('mouseleave' + eventNamespace, module.event.end);
            }
          },
          close: function close() {
            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document.one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully);
              $context.one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully);
            }
            if (settings.on == 'hover' && openedWithTouch) {
              module.verbose('Binding popup close event to document');
              $document.on('touchstart' + elementNamespace, function (event) {
                module.verbose('Touched away from popup');
                module.event.hideGracefully.call(element, event);
              });
            }
            if (settings.on == 'click' && settings.closable) {
              module.verbose('Binding popup close event to document');
              $document.on('click' + elementNamespace, function (event) {
                module.verbose('Clicked away from popup');
                module.event.hideGracefully.call(element, event);
              });
            }
          }
        },

        unbind: {
          close: function close() {
            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {
              $document.off('scroll' + elementNamespace, module.hide);
              $context.off('scroll' + elementNamespace, module.hide);
            }
            if (settings.on == 'hover' && openedWithTouch) {
              $document.off('touchstart' + elementNamespace);
              openedWithTouch = false;
            }
            if (settings.on == 'click' && settings.closable) {
              module.verbose('Removing close event from document');
              $document.off('click' + elementNamespace);
            }
          }
        },

        has: {
          popup: function popup() {
            return $popup && $popup.length > 0;
          }
        },

        is: {
          active: function active() {
            return $module.hasClass(className.active);
          },
          animating: function animating() {
            return $popup && $popup.hasClass(className.animating);
          },
          visible: function visible() {
            return $popup && $popup.hasClass(className.visible);
          },
          dropdown: function dropdown() {
            return $module.hasClass(className.dropdown);
          },
          hidden: function hidden() {
            return !module.is.visible();
          },
          rtl: function rtl() {
            return $module.css('direction') == 'rtl';
          }
        },

        reset: function reset() {
          module.remove.visible();
          if (settings.preserve) {
            if ($.fn.transition !== undefined) {
              $popup.transition('remove transition');
            }
          } else {
            module.removePopup();
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.popup.settings = {

    name: 'Popup',

    // module settings
    debug: false,
    verbose: false,
    performance: true,
    namespace: 'popup',

    // callback only when element added to dom
    onCreate: function onCreate() {},

    // callback before element removed from dom
    onRemove: function onRemove() {},

    // callback before show animation
    onShow: function onShow() {},

    // callback after show animation
    onVisible: function onVisible() {},

    // callback before hide animation
    onHide: function onHide() {},

    // callback after hide animation
    onHidden: function onHidden() {},

    // when to show popup
    on: 'hover',

    // whether to add touchstart events when using hover
    addTouchEvents: true,

    // default position relative to element
    position: 'top left',

    // name of variation to use
    variation: '',

    // whether popup should be moved to context
    movePopup: true,

    // element which popup should be relative to
    target: false,

    // jq selector or element that should be used as popup
    popup: false,

    // popup should remain inline next to activator
    inline: false,

    // popup should be removed from page on hide
    preserve: true,

    // popup should not close when being hovered on
    hoverable: false,

    // explicitly set content
    content: false,

    // explicitly set html
    html: false,

    // explicitly set title
    title: false,

    // whether automatically close on clickaway when on click
    closable: true,

    // automatically hide on scroll
    hideOnScroll: 'auto',

    // hide other popups on show
    exclusive: false,

    // context to attach popups
    context: 'body',

    // position to prefer when calculating new position
    prefer: 'opposite',

    // specify position to appear even if it doesn't fit
    lastResort: false,

    // delay used to prevent accidental refiring of animations due to user error
    delay: {
      show: 50,
      hide: 70
    },

    // whether fluid variation should assign width explicitly
    setFluidWidth: true,

    // transition settings
    duration: 200,
    transition: 'scale',

    // distance away from activating element in px
    distanceAway: 0,

    // offset on aligning axis from calculated position
    offset: 0,

    // maximum times to look for a position before failing (9 positions total)
    maxSearchDepth: 20,

    error: {
      invalidPosition: 'The position you specified is not a valid position',
      cannotPlace: 'No visible position could be found for the popup',
      method: 'The method you called is not defined.',
      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',
      notFound: 'The target or popup you specified does not exist on the page'
    },

    metadata: {
      activator: 'activator',
      content: 'content',
      html: 'html',
      offset: 'offset',
      position: 'position',
      title: 'title',
      variation: 'variation'
    },

    className: {
      active: 'active',
      animating: 'animating',
      dropdown: 'dropdown',
      fluid: 'fluid',
      loading: 'loading',
      popup: 'ui popup',
      position: 'top left center bottom right',
      visible: 'visible'
    },

    selector: {
      popup: '.ui.popup'
    },

    templates: {
      escape: function escape(string) {
        var badChars = /[&<>"'`]/g,
            shouldEscape = /[&<>"'`]/,
            escape = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        },
            escapedChar = function escapedChar(chr) {
          return escape[chr];
        };
        if (shouldEscape.test(string)) {
          return string.replace(badChars, escapedChar);
        }
        return string;
      },
      popup: function popup(text) {
        var html = '',
            escape = $.fn.popup.settings.templates.escape;
        if (typeof text !== undefined) {
          if (typeof text.title !== undefined && text.title) {
            text.title = escape(text.title);
            html += '<div class="header">' + text.title + '</div>';
          }
          if (typeof text.content !== undefined && text.content) {
            text.content = escape(text.content);
            html += '<div class="content">' + text.content + '</div>';
          }
        }
        return html;
      }
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/popup.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Popup
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (t, e, o, n) {
  "use strict";t.fn.popup = function (i) {
    var r,
        a = t(this),
        s = t(o),
        p = t(e),
        l = t("body"),
        u = a.selector || "",
        c = ("ontouchstart" in o.documentElement),
        d = new Date().getTime(),
        f = [],
        g = arguments[0],
        h = "string" == typeof g,
        m = [].slice.call(arguments, 1);return (a.each(function () {
      var o,
          a,
          v,
          b,
          y,
          w = t.isPlainObject(i) ? t.extend(!0, {}, t.fn.popup.settings, i) : t.extend({}, t.fn.popup.settings),
          T = w.selector,
          P = w.className,
          C = w.error,
          k = w.metadata,
          x = w.namespace,
          S = "." + w.namespace,
          E = "module-" + x,
          D = t(this),
          O = t(w.context),
          j = w.target ? t(w.target) : D,
          A = 0,
          R = !1,
          F = !1,
          H = this,
          I = D.data(E);y = { initialize: function initialize() {
          y.debug("Initializing", D), y.createID(), y.bind.events(), !y.exists() && w.preserve && y.create(), y.instantiate();
        }, instantiate: function instantiate() {
          y.verbose("Storing instance", y), I = y, D.data(E, I);
        }, refresh: function refresh() {
          w.popup ? o = t(w.popup).eq(0) : w.inline && (o = j.next(T.popup).eq(0), w.popup = o), w.popup ? (o.addClass(P.loading), a = y.get.offsetParent(), o.removeClass(P.loading), w.movePopup && y.has.popup() && y.get.offsetParent(o)[0] !== a[0] && (y.debug("Moving popup to the same offset parent as activating element"), o.detach().appendTo(a))) : a = w.inline ? y.get.offsetParent(j) : y.has.popup() ? y.get.offsetParent(o) : l, a.is("html") && (y.debug("Setting page as offset parent"), a = l);
        }, reposition: function reposition() {
          y.refresh(), y.set.position();
        }, destroy: function destroy() {
          y.debug("Destroying previous module"), o && !w.preserve && y.removePopup(), clearTimeout(y.hideTimer), clearTimeout(y.showTimer), p.off(v), D.off(S).removeData(E);
        }, event: { start: function start(e) {
            var o = t.isPlainObject(w.delay) ? w.delay.show : w.delay;clearTimeout(y.hideTimer), y.showTimer = setTimeout(y.show, o);
          }, end: function end() {
            var e = t.isPlainObject(w.delay) ? w.delay.hide : w.delay;clearTimeout(y.showTimer), y.hideTimer = setTimeout(y.hide, e);
          }, touchstart: function touchstart(t) {
            F = !0, y.event.start();
          }, resize: function resize() {
            y.is.visible() && y.set.position();
          }, hideGracefully: function hideGracefully(e) {
            e && 0 === t(e.target).closest(T.popup).length ? (y.debug("Click occurred outside popup hiding popup"), y.hide()) : y.debug("Click was inside popup, keeping popup open");
          } }, create: function create() {
          var e = y.get.html(),
              n = y.get.variation(),
              i = y.get.title(),
              r = y.get.content();e || r || i ? (y.debug("Creating pop-up html"), e || (e = w.templates.popup({ title: i, content: r })), o = t("<div/>").addClass(P.popup).addClass(n).data(k.activator, D).html(e), n && o.addClass(n), w.inline ? (y.verbose("Inserting popup element inline", o), o.insertAfter(D)) : (y.verbose("Appending popup element to body", o), o.appendTo(O)), y.refresh(), w.hoverable && y.bind.popup(), w.onCreate.call(o, H)) : 0 !== j.next(T.popup).length ? (y.verbose("Pre-existing popup found"), w.inline = !0, w.popups = j.next(T.popup).data(k.activator, D), y.refresh(), w.hoverable && y.bind.popup()) : w.popup ? (t(w.popup).data(k.activator, D), y.verbose("Used popup specified in settings"), y.refresh(), w.hoverable && y.bind.popup()) : y.debug("No content specified skipping display", H);
        }, createID: function createID() {
          b = (Math.random().toString(16) + "000000000").substr(2, 8), v = "." + b, y.verbose("Creating unique id for element", b);
        }, toggle: function toggle() {
          y.debug("Toggling pop-up"), y.is.hidden() ? (y.debug("Popup is hidden, showing pop-up"), y.unbind.close(), y.show()) : (y.debug("Popup is visible, hiding pop-up"), y.hide());
        }, show: function show(t) {
          if ((t = t || function () {}, y.debug("Showing pop-up", w.transition), y.is.hidden() && (!y.is.active() || !y.is.dropdown()))) {
            if ((y.exists() || y.create(), w.onShow.call(o, H) === !1)) return void y.debug("onShow callback returned false, cancelling popup animation");w.preserve || w.popup || y.refresh(), o && y.set.position() && (y.save.conditions(), w.exclusive && y.hideAll(), y.animate.show(t));
          }
        }, hide: function hide(t) {
          if ((t = t || function () {}, y.is.visible() || y.is.animating())) {
            if (w.onHide.call(o, H) === !1) return void y.debug("onHide callback returned false, cancelling popup animation");y.remove.visible(), y.unbind.close(), y.restore.conditions(), y.animate.hide(t);
          }
        }, hideAll: function hideAll() {
          t(T.popup).filter("." + P.visible).each(function () {
            t(this).data(k.activator).popup("hide");
          });
        }, exists: function exists() {
          return o ? w.inline || w.popup ? y.has.popup() : o.closest(O).length >= 1 ? !0 : !1 : !1;
        }, removePopup: function removePopup() {
          y.debug("Removing popup", o), y.has.popup() && !w.popup && (o.remove(), o = n), w.onRemove.call(o, H);
        }, save: { conditions: function conditions() {
            y.cache = { title: D.attr("title") }, y.cache.title && D.removeAttr("title"), y.verbose("Saving original attributes", y.cache.title);
          } }, restore: { conditions: function conditions() {
            return (y.cache && y.cache.title && (D.attr("title", y.cache.title), y.verbose("Restoring original attributes", y.cache.title)), !0);
          } }, animate: { show: function show(e) {
            e = t.isFunction(e) ? e : function () {}, w.transition && t.fn.transition !== n && D.transition("is supported") ? (y.set.visible(), o.transition({ animation: w.transition + " in", queue: !1, debug: w.debug, verbose: w.verbose, duration: w.duration, onComplete: function onComplete() {
                y.bind.close(), e.call(o, H), w.onVisible.call(o, H);
              } })) : y.error(C.noTransition);
          }, hide: function hide(e) {
            return (e = t.isFunction(e) ? e : function () {}, y.debug("Hiding pop-up"), w.onShow.call(o, H) === !1 ? void y.debug("onShow callback returned false, cancelling popup animation") : void (w.transition && t.fn.transition !== n && D.transition("is supported") ? o.transition({ animation: w.transition + " out", queue: !1, duration: w.duration, debug: w.debug, verbose: w.verbose, onComplete: function onComplete() {
                y.reset(), e.call(o, H), w.onHidden.call(o, H);
              } }) : y.error(C.noTransition)));
          } }, get: { html: function html() {
            return (D.removeData(k.html), D.data(k.html) || w.html);
          }, title: function title() {
            return (D.removeData(k.title), D.data(k.title) || w.title);
          }, content: function content() {
            return (D.removeData(k.content), D.data(k.content) || D.attr("title") || w.content);
          }, variation: function variation() {
            return (D.removeData(k.variation), D.data(k.variation) || w.variation);
          }, calculations: function calculations() {
            var t,
                n = j[0],
                i = w.inline || w.popup ? j.position() : j.offset(),
                r = {};return (r = { target: { element: j[0], width: j.outerWidth(), height: j.outerHeight(), top: i.top, left: i.left, margin: {} }, popup: { width: o.outerWidth(), height: o.outerHeight() }, parent: { width: a.outerWidth(), height: a.outerHeight() }, screen: { scroll: { top: p.scrollTop(), left: p.scrollLeft() }, width: p.width(), height: p.height() } }, r.target.margin.top = w.inline ? parseInt(e.getComputedStyle(n).getPropertyValue("margin-top"), 10) : 0, r.target.margin.left = w.inline ? y.is.rtl() ? parseInt(e.getComputedStyle(n).getPropertyValue("margin-right"), 10) : parseInt(e.getComputedStyle(n).getPropertyValue("margin-left"), 10) : 0, t = r.screen, r.boundary = { top: t.scroll.top, bottom: t.scroll.top + t.height, left: t.scroll.left, right: t.scroll.left + t.width }, r);
          }, id: function id() {
            return b;
          }, startEvent: function startEvent() {
            return "hover" == w.on ? "mouseenter" : "focus" == w.on ? "focus" : !1;
          }, scrollEvent: function scrollEvent() {
            return "scroll";
          }, endEvent: function endEvent() {
            return "hover" == w.on ? "mouseleave" : "focus" == w.on ? "blur" : !1;
          }, offsetParent: function offsetParent(e) {
            var o = e !== n ? e[0] : D[0],
                i = o.parentNode,
                r = t(i);if (i) for (var a = "none" === r.css("transform"), s = "static" === r.css("position"), p = r.is("html"); i && !p && s && a;) i = i.parentNode, r = t(i), a = "none" === r.css("transform"), s = "static" === r.css("position"), p = r.is("html");return r && r.length > 0 ? r : t();
          }, offstagePosition: function offstagePosition(e, n) {
            var i,
                r,
                a = o.offset(),
                s = {},
                p = [];return (e = e || !1, n = n || y.get.calculations(), i = n.popup, r = n.boundary, a && e && (s = { top: a.top < r.top, bottom: a.top + i.height > r.bottom, right: a.left + i.width > r.right, left: a.left < r.left }, y.verbose("Offstage positions determined", a, s)), t.each(s, function (t, e) {
              e && p.push(t);
            }), p.length > 0 ? p.join(" ") : !1);
          }, positions: function positions() {
            return { "top left": !1, "top center": !1, "top right": !1, "bottom left": !1, "bottom center": !1, "bottom right": !1, "left center": !1, "right center": !1 };
          }, nextPosition: function nextPosition(t) {
            var e = t.split(" "),
                o = e[0],
                n = e[1],
                i = { top: "bottom", bottom: "top", left: "right", right: "left" },
                r = { left: "center", center: "right", right: "left" },
                a = { "top left": "top center", "top center": "top right", "top right": "right center", "right center": "bottom right", "bottom right": "bottom center", "bottom center": "bottom left", "bottom left": "left center", "left center": "top left" },
                s = "top" == o || "bottom" == o,
                p = !1,
                l = !1,
                u = !1;return (R || (y.verbose("All available positions available"), R = y.get.positions()), y.debug("Recording last position tried", t), R[t] = !0, "opposite" === w.prefer && (u = [i[o], n], u = u.join(" "), p = R[u] === !0, y.debug("Trying opposite strategy", u)), "adjacent" === w.prefer && s && (u = [o, r[n]], u = u.join(" "), l = R[u] === !0, y.debug("Trying adjacent strategy", u)), (l || p) && (y.debug("Using backup position", u), u = a[t]), u);
          } }, set: { position: function position(t, e) {
            if (0 === j.length || 0 === o.length) return void y.error(C.notFound);var i, r, a, s, p, l, u;if ((e = e || y.get.calculations(), t = t || D.data(k.position) || w.position, i = D.data(k.offset) || w.offset, r = w.distanceAway, a = e.target, s = e.popup, p = e.parent, 0 === a.top && 0 === a.left)) return (y.debug("Popup target is hidden, no action taken"), !1);switch ((w.inline && (y.debug("Adding margin to calculation", a.margin), "left center" == t || "right center" == t ? (i += a.margin.top, r += -a.margin.left) : "top left" == t || "top center" == t || "top right" == t ? (i += a.margin.left, r -= a.margin.top) : (i += a.margin.left, r += a.margin.top)), y.debug("Determining popup position from calculations", t, e), y.is.rtl() && (t = t.replace(/left|right/g, function (t) {
              return "left" == t ? "right" : "left";
            }), y.debug("RTL: Popup position updated", t)), A == w.maxSearchDepth && w.lastResort && (y.debug("Using \"last resort\" position to display", w.lastResort), t = w.lastResort), t)) {case "top left":
                l = { top: "auto", bottom: p.height - a.top + r, left: a.left + i, right: "auto" };break;case "top center":
                l = { bottom: p.height - a.top + r, left: a.left + a.width / 2 - s.width / 2 + i, top: "auto", right: "auto" };break;case "top right":
                l = { bottom: p.height - a.top + r, right: p.width - a.left - a.width - i, top: "auto", left: "auto" };break;case "left center":
                l = { top: a.top + a.height / 2 - s.height / 2 + i, right: p.width - a.left + r, left: "auto", bottom: "auto" };break;case "right center":
                l = { top: a.top + a.height / 2 - s.height / 2 + i, left: a.left + a.width + r, bottom: "auto", right: "auto" };break;case "bottom left":
                l = { top: a.top + a.height + r, left: a.left + i, bottom: "auto", right: "auto" };break;case "bottom center":
                l = { top: a.top + a.height + r, left: a.left + a.width / 2 - s.width / 2 + i, bottom: "auto", right: "auto" };break;case "bottom right":
                l = { top: a.top + a.height + r, right: p.width - a.left - a.width - i, left: "auto", bottom: "auto" };}if ((l === n && y.error(C.invalidPosition, t), y.debug("Calculated popup positioning values", l), o.css(l).removeClass(P.position).addClass(t).addClass(P.loading), u = y.get.offstagePosition(t, e))) {
              if ((y.debug("Popup cant fit into viewport", t, u), A < w.maxSearchDepth)) return (A++, t = y.get.nextPosition(t), y.debug("Trying new position", t), o ? y.set.position(t, e) : !1);if (!w.lastResort) return (y.debug("Popup could not find a position in view", o), y.remove.attempts(), y.remove.loading(), y.reset(), !1);
            }return (y.debug("Position is on stage", t), y.remove.attempts(), y.set.fluidWidth(e), y.remove.loading(), !0);
          }, fluidWidth: function fluidWidth(t) {
            t = t || y.get.calculations(), w.setFluidWidth && o.hasClass(P.fluid) && o.css("width", t.parent.width);
          }, visible: function visible() {
            D.addClass(P.visible);
          } }, remove: { loading: function loading() {
            o.removeClass(P.loading);
          }, visible: function visible() {
            D.removeClass(P.visible);
          }, attempts: function attempts() {
            y.verbose("Resetting all searched positions"), A = 0, R = !1;
          } }, bind: { events: function events() {
            y.debug("Binding popup events to module"), "click" == w.on && D.on("click" + S, y.toggle), "hover" == w.on && c ? D.on("touchstart" + S, y.event.touchstart) : y.get.startEvent() && D.on(y.get.startEvent() + S, y.event.start).on(y.get.endEvent() + S, y.event.end), w.target && y.debug("Target set to element", j), p.on("resize" + v, y.event.resize);
          }, popup: function popup() {
            y.verbose("Allowing hover events on popup to prevent closing"), o && y.has.popup() && o.on("mouseenter" + S, y.event.start).on("mouseleave" + S, y.event.end);
          }, close: function close() {
            (w.hideOnScroll === !0 || "auto" == w.hideOnScroll && "click" != w.on) && (s.one(y.get.scrollEvent() + v, y.event.hideGracefully), O.one(y.get.scrollEvent() + v, y.event.hideGracefully)), "hover" == w.on && F && (y.verbose("Binding popup close event to document"), s.on("touchstart" + v, function (t) {
              y.verbose("Touched away from popup"), y.event.hideGracefully.call(H, t);
            })), "click" == w.on && w.closable && (y.verbose("Binding popup close event to document"), s.on("click" + v, function (t) {
              y.verbose("Clicked away from popup"), y.event.hideGracefully.call(H, t);
            }));
          } }, unbind: { close: function close() {
            (w.hideOnScroll === !0 || "auto" == w.hideOnScroll && "click" != w.on) && (s.off("scroll" + v, y.hide), O.off("scroll" + v, y.hide)), "hover" == w.on && F && (s.off("touchstart" + v), F = !1), "click" == w.on && w.closable && (y.verbose("Removing close event from document"), s.off("click" + v));
          } }, has: { popup: function popup() {
            return o && o.length > 0;
          } }, is: { active: function active() {
            return D.hasClass(P.active);
          }, animating: function animating() {
            return o && o.hasClass(P.animating);
          }, visible: function visible() {
            return o && o.hasClass(P.visible);
          }, dropdown: function dropdown() {
            return D.hasClass(P.dropdown);
          }, hidden: function hidden() {
            return !y.is.visible();
          }, rtl: function rtl() {
            return "rtl" == D.css("direction");
          } }, reset: function reset() {
          y.remove.visible(), w.preserve ? t.fn.transition !== n && o.transition("remove transition") : y.removePopup();
        }, setting: function setting(e, o) {
          if (t.isPlainObject(e)) t.extend(!0, w, e);else {
            if (o === n) return w[e];w[e] = o;
          }
        }, internal: function internal(e, o) {
          if (t.isPlainObject(e)) t.extend(!0, y, e);else {
            if (o === n) return y[e];y[e] = o;
          }
        }, debug: function debug() {
          w.debug && (w.performance ? y.performance.log(arguments) : (y.debug = Function.prototype.bind.call(console.info, console, w.name + ":"), y.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          w.verbose && w.debug && (w.performance ? y.performance.log(arguments) : (y.verbose = Function.prototype.bind.call(console.info, console, w.name + ":"), y.verbose.apply(console, arguments)));
        }, error: function error() {
          y.error = Function.prototype.bind.call(console.error, console, w.name + ":"), y.error.apply(console, arguments);
        }, performance: { log: function log(t) {
            var e, o, n;w.performance && (e = new Date().getTime(), n = d || e, o = e - n, d = e, f.push({ Name: t[0], Arguments: [].slice.call(t, 1) || "", Element: H, "Execution Time": o })), clearTimeout(y.performance.timer), y.performance.timer = setTimeout(y.performance.display, 500);
          }, display: function display() {
            var e = w.name + ":",
                o = 0;d = !1, clearTimeout(y.performance.timer), t.each(f, function (t, e) {
              o += e["Execution Time"];
            }), e += " " + o + "ms", u && (e += " '" + u + "'"), (console.group !== n || console.table !== n) && f.length > 0 && (console.groupCollapsed(e), console.table ? console.table(f) : t.each(f, function (t, e) {
              console.log(e.Name + ": " + e["Execution Time"] + "ms");
            }), console.groupEnd()), f = [];
          } }, invoke: function invoke(e, o, i) {
          var a,
              s,
              p,
              l = I;return (o = o || m, i = H || i, "string" == typeof e && l !== n && (e = e.split(/[\. ]/), a = e.length - 1, t.each(e, function (o, i) {
            var r = o != a ? i + e[o + 1].charAt(0).toUpperCase() + e[o + 1].slice(1) : e;if (t.isPlainObject(l[r]) && o != a) l = l[r];else {
              if (l[r] !== n) return (s = l[r], !1);if (!t.isPlainObject(l[i]) || o == a) return l[i] !== n ? (s = l[i], !1) : !1;l = l[i];
            }
          })), t.isFunction(s) ? p = s.apply(i, o) : s !== n && (p = s), t.isArray(r) ? r.push(p) : r !== n ? r = [r, p] : p !== n && (r = p), s);
        } }, h ? (I === n && y.initialize(), y.invoke(g)) : (I !== n && I.invoke("destroy"), y.initialize());
    }), r !== n ? r : this);
  }, t.fn.popup.settings = { name: "Popup", debug: !1, verbose: !1, performance: !0, namespace: "popup", onCreate: function onCreate() {}, onRemove: function onRemove() {}, onShow: function onShow() {}, onVisible: function onVisible() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, on: "hover", addTouchEvents: !0, position: "top left", variation: "", movePopup: !0, target: !1, popup: !1, inline: !1, preserve: !0, hoverable: !1, content: !1, html: !1, title: !1, closable: !0, hideOnScroll: "auto", exclusive: !1, context: "body", prefer: "opposite", lastResort: !1, delay: { show: 50, hide: 70 }, setFluidWidth: !0, duration: 200, transition: "scale", distanceAway: 0, offset: 0, maxSearchDepth: 20, error: { invalidPosition: "The position you specified is not a valid position", cannotPlace: "No visible position could be found for the popup", method: "The method you called is not defined.", noTransition: "This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>", notFound: "The target or popup you specified does not exist on the page" }, metadata: { activator: "activator", content: "content", html: "html", offset: "offset", position: "position", title: "title", variation: "variation" }, className: { active: "active", animating: "animating", dropdown: "dropdown", fluid: "fluid", loading: "loading", popup: "ui popup", position: "top left center bottom right", visible: "visible" }, selector: { popup: ".ui.popup" }, templates: { escape: function escape(t) {
        var e = /[&<>"'`]/g,
            o = /[&<>"'`]/,
            n = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;", "`": "&#x60;" },
            i = function i(t) {
          return n[t];
        };return o.test(t) ? t.replace(e, i) : t;
      }, popup: function popup(e) {
        var o = "",
            i = t.fn.popup.settings.templates.escape;return (typeof e !== n && (typeof e.title !== n && e.title && (e.title = i(e.title), o += "<div class=\"header\">" + e.title + "</div>"), typeof e.content !== n && e.content && (e.content = i(e.content), o += "<div class=\"content\">" + e.content + "</div>")), o);
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/progress", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.progress = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.progress.settings, parameters) : $.extend({}, $.fn.progress.settings),
          className = _settings.className,
          _metadata = _settings.metadata,
          namespace = _settings.namespace,
          selector = _settings.selector,
          error = _settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $bar = $(this).find(selector.bar),
          $progress = $(this).find(selector.progress),
          $label = $(this).find(selector.label),
          element = this,
          instance = $module.data(moduleNamespace),
          animating = false,
          transitionEnd,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing progress bar', _settings);

          module.set.duration();
          module.set.transitionEvent();

          module.read.metadata();
          module.read.settings();

          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },
        destroy: function destroy() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
        },

        reset: function reset() {
          module.set.percent(0);
        },

        complete: function complete() {
          if (module.percent === undefined || module.percent < 100) {
            module.set.percent(100);
          }
        },

        read: {
          metadata: function metadata() {
            var data = {
              percent: $module.data(_metadata.percent),
              total: $module.data(_metadata.total),
              value: $module.data(_metadata.value)
            };
            if (data.percent) {
              module.debug('Current percent value set from metadata', data.percent);
              module.set.percent(data.percent);
            }
            if (data.total) {
              module.debug('Total value set from metadata', data.total);
              module.set.total(data.total);
            }
            if (data.value) {
              module.debug('Current value set from metadata', data.value);
              module.set.value(data.value);
            }
          },
          settings: function settings() {
            if (_settings.total !== false) {
              module.debug('Current total set in settings', _settings.total);
              module.set.total(_settings.total);
            }
            if (_settings.value !== false) {
              module.debug('Current value set in settings', _settings.value);
              module.set.value(_settings.value);
              module.set.progress(module.value);
            }
            if (_settings.percent !== false) {
              module.debug('Current percent set in settings', _settings.percent);
              module.set.percent(_settings.percent);
            }
          }
        },

        increment: function increment(incrementValue) {
          var maxValue, startValue, newValue;
          if (module.has.total()) {
            startValue = module.get.value();
            incrementValue = incrementValue || 1;

            newValue = startValue + incrementValue;
            maxValue = module.get.total();

            module.debug('Incrementing value', startValue, newValue, maxValue);
            if (newValue > maxValue) {
              module.debug('Value cannot increment above total', maxValue);
              newValue = maxValue;
            }
          } else {
            startValue = module.get.percent();
            incrementValue = incrementValue || module.get.randomValue();

            newValue = startValue + incrementValue;
            maxValue = 100;

            module.debug('Incrementing percentage by', startValue, newValue);
            if (newValue > maxValue) {
              module.debug('Value cannot increment above 100 percent');
              newValue = maxValue;
            }
          }
          module.set.progress(newValue);
        },
        decrement: function decrement(decrementValue) {
          var total = module.get.total(),
              startValue,
              newValue;
          if (total) {
            startValue = module.get.value();
            decrementValue = decrementValue || 1;
            newValue = startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
          } else {
            startValue = module.get.percent();
            decrementValue = decrementValue || module.get.randomValue();
            newValue = startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
          }

          if (newValue < 0) {
            module.debug('Value cannot decrement below 0');
            newValue = 0;
          }
          module.set.progress(newValue);
        },

        has: {
          total: function total() {
            return module.get.total() !== false;
          }
        },

        get: {
          text: function text(templateText) {
            var value = module.value || 0,
                total = module.total || 0,
                percent = animating ? module.get.displayPercent() : module.percent || 0,
                left = module.total > 0 ? total - value : 100 - percent;
            templateText = templateText || '';
            templateText = templateText.replace('{value}', value).replace('{total}', total).replace('{left}', left).replace('{percent}', percent);
            module.debug('Adding variables to progress bar text', templateText);
            return templateText;
          },

          randomValue: function randomValue() {
            module.debug('Generating random increment percentage');
            return Math.floor(Math.random() * _settings.random.max + _settings.random.min);
          },

          numericValue: function numericValue(value) {
            return typeof value === 'string' ? value.replace(/[^\d.]/g, '') !== '' ? +value.replace(/[^\d.]/g, '') : false : value;
          },

          transitionEnd: function transitionEnd() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          },

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function displayPercent() {
            var barWidth = $bar.width(),
                totalWidth = $module.width(),
                minDisplay = parseInt($bar.css('min-width'), 10),
                displayPercent = barWidth > minDisplay ? barWidth / totalWidth * 100 : module.percent;
            return _settings.precision > 0 ? Math.round(displayPercent * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(displayPercent);
          },

          percent: function percent() {
            return module.percent || 0;
          },
          value: function value() {
            return module.value || 0;
          },
          total: function total() {
            return module.total || false;
          }
        },

        is: {
          success: function success() {
            return $module.hasClass(className.success);
          },
          warning: function warning() {
            return $module.hasClass(className.warning);
          },
          error: function error() {
            return $module.hasClass(className.error);
          },
          active: function active() {
            return $module.hasClass(className.active);
          },
          visible: function visible() {
            return $module.is(':visible');
          }
        },

        remove: {
          state: function state() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
          },
          active: function active() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
          },
          success: function success() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
          },
          warning: function warning() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
          },
          error: function error() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
          }
        },

        set: {
          barWidth: function barWidth(value) {
            if (value > 100) {
              module.error(error.tooHigh, value);
            } else if (value < 0) {
              module.error(error.tooLow, value);
            } else {
              $bar.css('width', value + '%');
              $module.attr('data-percent', parseInt(value, 10));
            }
          },
          duration: function duration(_duration) {
            _duration = _duration || _settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            module.verbose('Setting progress bar transition duration', _duration);
            $bar.css({
              'transition-duration': _duration
            });
          },
          percent: function percent(_percent) {
            _percent = typeof _percent == 'string' ? +_percent.replace('%', '') : _percent;
            // round display percentage
            _percent = _settings.precision > 0 ? Math.round(_percent * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(_percent);
            module.percent = _percent;
            if (!module.has.total()) {
              module.value = _settings.precision > 0 ? Math.round(_percent / 100 * module.total * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(_percent / 100 * module.total * 10) / 10;
              if (_settings.limitValues) {
                module.value = module.value > 100 ? 100 : module.value < 0 ? 0 : module.value;
              }
            }
            module.set.barWidth(_percent);
            module.set.labelInterval();
            module.set.labels();
            _settings.onChange.call(element, _percent, module.value, module.total);
          },
          labelInterval: function labelInterval() {
            var animationCallback = function animationCallback() {
              module.verbose('Bar finished animating, removing continuous label updates');
              clearInterval(module.interval);
              animating = false;
              module.set.labels();
            };
            clearInterval(module.interval);
            $bar.one(transitionEnd + eventNamespace, animationCallback);
            module.timer = setTimeout(animationCallback, _settings.duration + 100);
            animating = true;
            module.interval = setInterval(module.set.labels, _settings.framerate);
          },
          labels: function labels() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
          },
          label: function label(text) {
            text = text || '';
            if (text) {
              text = module.get.text(text);
              module.debug('Setting label to text', text);
              $label.text(text);
            }
          },
          state: function state(percent) {
            percent = percent !== undefined ? percent : module.percent;
            if (percent === 100) {
              if (_settings.autoSuccess && !(module.is.warning() || module.is.error())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
              } else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
              }
            } else if (percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
            } else {
              module.remove.active();
              module.set.label(_settings.text.active);
            }
          },
          barLabel: function barLabel(text) {
            if (text !== undefined) {
              $progress.text(module.get.text(text));
            } else if (_settings.label == 'ratio' && module.total) {
              module.debug('Adding ratio to bar label');
              $progress.text(module.get.text(_settings.text.ratio));
            } else if (_settings.label == 'percent') {
              module.debug('Adding percentage to bar label');
              $progress.text(module.get.text(_settings.text.percent));
            }
          },
          active: function active(text) {
            text = text || _settings.text.active;
            module.debug('Setting active state');
            if (_settings.showActivity && !module.is.active()) {
              $module.addClass(className.active);
            }
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            if (text) {
              module.set.label(text);
            }
            _settings.onActive.call(element, module.value, module.total);
          },
          success: function success(text) {
            text = text || _settings.text.success;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            _settings.onSuccess.call(element, module.total);
          },
          warning: function warning(text) {
            text = text || _settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            _settings.onWarning.call(element, module.value, module.total);
          },
          error: function error(text) {
            text = text || _settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete();
            if (text) {
              module.set.label(text);
            }
            _settings.onError.call(element, module.value, module.total);
          },
          transitionEvent: function transitionEvent() {
            transitionEnd = module.get.transitionEnd();
          },
          total: function total(totalValue) {
            module.total = totalValue;
          },
          value: function value(_value) {
            module.value = _value;
          },
          progress: function progress(value) {
            var numericValue = module.get.numericValue(value),
                percentComplete;
            if (numericValue === false) {
              module.error(error.nonNumeric, value);
            }
            if (module.has.total()) {
              module.set.value(numericValue);
              percentComplete = numericValue / module.total * 100;
              module.debug('Calculating percent complete from total', percentComplete);
              module.set.percent(percentComplete);
            } else {
              percentComplete = numericValue;
              module.debug('Setting value to exact percentage value', percentComplete);
              module.set.percent(percentComplete);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, _settings, name);
          } else if (value !== undefined) {
            _settings[name] = value;
          } else {
            return _settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (_settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (_settings.verbose && _settings.debug) {
            if (_settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (_settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = _settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.progress.settings = {

    name: 'Progress',
    namespace: 'progress',

    debug: true,
    verbose: false,
    performance: true,

    random: {
      min: 2,
      max: 5
    },

    duration: 300,

    autoSuccess: true,
    showActivity: true,
    limitValues: true,

    label: 'percent',
    precision: 0,
    framerate: 1000 / 30, /// 30 fps

    percent: false,
    total: false,
    value: false,

    onChange: function onChange(percent, value, total) {},
    onSuccess: function onSuccess(total) {},
    onActive: function onActive(value, total) {},
    onError: function onError(value, total) {},
    onWarning: function onWarning(value, total) {},

    error: {
      method: 'The method you called is not defined.',
      nonNumeric: 'Progress value is non numeric',
      tooHigh: 'Value specified is above 100%',
      tooLow: 'Value specified is below 0%'
    },

    regExp: {
      variable: /\{\$*[A-z0-9]+\}/g
    },

    metadata: {
      percent: 'percent',
      total: 'total',
      value: 'value'
    },

    selector: {
      bar: '> .bar',
      label: '> .label',
      progress: '.bar > .progress'
    },

    text: {
      active: false,
      error: false,
      success: false,
      warning: false,
      percent: '{percent}%',
      ratio: '{value} of {total}'
    },

    className: {
      active: 'active',
      error: 'error',
      success: 'success',
      warning: 'warning'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/progress.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Progress
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, r) {
  "use strict";e.fn.progress = function (t) {
    var a,
        o = e(this),
        i = o.selector || "",
        s = new Date().getTime(),
        c = [],
        l = arguments[0],
        u = "string" == typeof l,
        g = [].slice.call(arguments, 1);return (o.each(function () {
      var o,
          v,
          d = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.progress.settings, t) : e.extend({}, e.fn.progress.settings),
          p = d.className,
          m = d.metadata,
          b = d.namespace,
          f = d.selector,
          h = d.error,
          w = "." + b,
          x = "module-" + b,
          y = e(this),
          C = e(this).find(f.bar),
          T = e(this).find(f.progress),
          E = e(this).find(f.label),
          A = this,
          S = y.data(x),
          V = !1;v = { initialize: function initialize() {
          v.debug("Initializing progress bar", d), v.set.duration(), v.set.transitionEvent(), v.read.metadata(), v.read.settings(), v.instantiate();
        }, instantiate: function instantiate() {
          v.verbose("Storing instance of progress", v), S = v, y.data(x, v);
        }, destroy: function destroy() {
          v.verbose("Destroying previous progress for", y), clearInterval(S.interval), v.remove.state(), y.removeData(x), S = r;
        }, reset: function reset() {
          v.set.percent(0);
        }, complete: function complete() {
          (v.percent === r || v.percent < 100) && v.set.percent(100);
        }, read: { metadata: function metadata() {
            var e = { percent: y.data(m.percent), total: y.data(m.total), value: y.data(m.value) };e.percent && (v.debug("Current percent value set from metadata", e.percent), v.set.percent(e.percent)), e.total && (v.debug("Total value set from metadata", e.total), v.set.total(e.total)), e.value && (v.debug("Current value set from metadata", e.value), v.set.value(e.value));
          }, settings: function settings() {
            d.total !== !1 && (v.debug("Current total set in settings", d.total), v.set.total(d.total)), d.value !== !1 && (v.debug("Current value set in settings", d.value), v.set.value(d.value), v.set.progress(v.value)), d.percent !== !1 && (v.debug("Current percent set in settings", d.percent), v.set.percent(d.percent));
          } }, increment: function increment(e) {
          var t, n, r;v.has.total() ? (n = v.get.value(), e = e || 1, r = n + e, t = v.get.total(), v.debug("Incrementing value", n, r, t), r > t && (v.debug("Value cannot increment above total", t), r = t)) : (n = v.get.percent(), e = e || v.get.randomValue(), r = n + e, t = 100, v.debug("Incrementing percentage by", n, r), r > t && (v.debug("Value cannot increment above 100 percent"), r = t)), v.set.progress(r);
        }, decrement: function decrement(e) {
          var t,
              n,
              r = v.get.total();r ? (t = v.get.value(), e = e || 1, n = t - e, v.debug("Decrementing value by", e, t)) : (t = v.get.percent(), e = e || v.get.randomValue(), n = t - e, v.debug("Decrementing percentage by", e, t)), 0 > n && (v.debug("Value cannot decrement below 0"), n = 0), v.set.progress(n);
        }, has: { total: function total() {
            return v.get.total() !== !1;
          } }, get: { text: function text(e) {
            var t = v.value || 0,
                n = v.total || 0,
                r = V ? v.get.displayPercent() : v.percent || 0,
                a = v.total > 0 ? n - t : 100 - r;return (e = e || "", e = e.replace("{value}", t).replace("{total}", n).replace("{left}", a).replace("{percent}", r), v.debug("Adding variables to progress bar text", e), e);
          }, randomValue: function randomValue() {
            return (v.debug("Generating random increment percentage"), Math.floor(Math.random() * d.random.max + d.random.min));
          }, numericValue: function numericValue(e) {
            return "string" == typeof e ? "" !== e.replace(/[^\d.]/g, "") ? +e.replace(/[^\d.]/g, "") : !1 : e;
          }, transitionEnd: function transitionEnd() {
            var e,
                t = n.createElement("element"),
                a = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in a) if (t.style[e] !== r) return a[e];
          }, displayPercent: function displayPercent() {
            var e = C.width(),
                t = y.width(),
                n = parseInt(C.css("min-width"), 10),
                r = e > n ? e / t * 100 : v.percent;return d.precision > 0 ? Math.round(10 * r * d.precision) / (10 * d.precision) : Math.round(r);
          }, percent: function percent() {
            return v.percent || 0;
          }, value: function value() {
            return v.value || 0;
          }, total: function total() {
            return v.total || !1;
          } }, is: { success: function success() {
            return y.hasClass(p.success);
          }, warning: function warning() {
            return y.hasClass(p.warning);
          }, error: function error() {
            return y.hasClass(p.error);
          }, active: function active() {
            return y.hasClass(p.active);
          }, visible: function visible() {
            return y.is(":visible");
          } }, remove: { state: function state() {
            v.verbose("Removing stored state"), delete v.total, delete v.percent, delete v.value;
          }, active: function active() {
            v.verbose("Removing active state"), y.removeClass(p.active);
          }, success: function success() {
            v.verbose("Removing success state"), y.removeClass(p.success);
          }, warning: function warning() {
            v.verbose("Removing warning state"), y.removeClass(p.warning);
          }, error: function error() {
            v.verbose("Removing error state"), y.removeClass(p.error);
          } }, set: { barWidth: function barWidth(e) {
            e > 100 ? v.error(h.tooHigh, e) : 0 > e ? v.error(h.tooLow, e) : (C.css("width", e + "%"), y.attr("data-percent", parseInt(e, 10)));
          }, duration: function duration(e) {
            e = e || d.duration, e = "number" == typeof e ? e + "ms" : e, v.verbose("Setting progress bar transition duration", e), C.css({ "transition-duration": e });
          }, percent: function percent(e) {
            e = "string" == typeof e ? +e.replace("%", "") : e, e = d.precision > 0 ? Math.round(10 * e * d.precision) / (10 * d.precision) : Math.round(e), v.percent = e, v.has.total() || (v.value = d.precision > 0 ? Math.round(e / 100 * v.total * 10 * d.precision) / (10 * d.precision) : Math.round(e / 100 * v.total * 10) / 10, d.limitValues && (v.value = v.value > 100 ? 100 : v.value < 0 ? 0 : v.value)), v.set.barWidth(e), v.set.labelInterval(), v.set.labels(), d.onChange.call(A, e, v.value, v.total);
          }, labelInterval: function labelInterval() {
            var e = function e() {
              v.verbose("Bar finished animating, removing continuous label updates"), clearInterval(v.interval), V = !1, v.set.labels();
            };clearInterval(v.interval), C.one(o + w, e), v.timer = setTimeout(e, d.duration + 100), V = !0, v.interval = setInterval(v.set.labels, d.framerate);
          }, labels: function labels() {
            v.verbose("Setting both bar progress and outer label text"), v.set.barLabel(), v.set.state();
          }, label: function label(e) {
            e = e || "", e && (e = v.get.text(e), v.debug("Setting label to text", e), E.text(e));
          }, state: function state(e) {
            e = e !== r ? e : v.percent, 100 === e ? !d.autoSuccess || v.is.warning() || v.is.error() ? (v.verbose("Reached 100% removing active state"), v.remove.active()) : (v.set.success(), v.debug("Automatically triggering success at 100%")) : e > 0 ? (v.verbose("Adjusting active progress bar label", e), v.set.active()) : (v.remove.active(), v.set.label(d.text.active));
          }, barLabel: function barLabel(e) {
            e !== r ? T.text(v.get.text(e)) : "ratio" == d.label && v.total ? (v.debug("Adding ratio to bar label"), T.text(v.get.text(d.text.ratio))) : "percent" == d.label && (v.debug("Adding percentage to bar label"), T.text(v.get.text(d.text.percent)));
          }, active: function active(e) {
            e = e || d.text.active, v.debug("Setting active state"), d.showActivity && !v.is.active() && y.addClass(p.active), v.remove.warning(), v.remove.error(), v.remove.success(), e && v.set.label(e), d.onActive.call(A, v.value, v.total);
          }, success: function success(e) {
            e = e || d.text.success, v.debug("Setting success state"), y.addClass(p.success), v.remove.active(), v.remove.warning(), v.remove.error(), v.complete(), e && v.set.label(e), d.onSuccess.call(A, v.total);
          }, warning: function warning(e) {
            e = e || d.text.warning, v.debug("Setting warning state"), y.addClass(p.warning), v.remove.active(), v.remove.success(), v.remove.error(), v.complete(), e && v.set.label(e), d.onWarning.call(A, v.value, v.total);
          }, error: function error(e) {
            e = e || d.text.error, v.debug("Setting error state"), y.addClass(p.error), v.remove.active(), v.remove.success(), v.remove.warning(), v.complete(), e && v.set.label(e), d.onError.call(A, v.value, v.total);
          }, transitionEvent: function transitionEvent() {
            o = v.get.transitionEnd();
          }, total: function total(e) {
            v.total = e;
          }, value: function value(e) {
            v.value = e;
          }, progress: function progress(e) {
            var t,
                n = v.get.numericValue(e);n === !1 && v.error(h.nonNumeric, e), v.has.total() ? (v.set.value(n), t = n / v.total * 100, v.debug("Calculating percent complete from total", t), v.set.percent(t)) : (t = n, v.debug("Setting value to exact percentage value", t), v.set.percent(t));
          } }, setting: function setting(t, n) {
          if ((v.debug("Changing setting", t, n), e.isPlainObject(t))) e.extend(!0, d, t);else {
            if (n === r) return d[t];d[t] = n;
          }
        }, internal: function internal(t, n) {
          if (e.isPlainObject(t)) e.extend(!0, v, t);else {
            if (n === r) return v[t];v[t] = n;
          }
        }, debug: function debug() {
          d.debug && (d.performance ? v.performance.log(arguments) : (v.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), v.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          d.verbose && d.debug && (d.performance ? v.performance.log(arguments) : (v.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), v.verbose.apply(console, arguments)));
        }, error: function error() {
          v.error = Function.prototype.bind.call(console.error, console, d.name + ":"), v.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, n, r;d.performance && (t = new Date().getTime(), r = s || t, n = t - r, s = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: A, "Execution Time": n })), clearTimeout(v.performance.timer), v.performance.timer = setTimeout(v.performance.display, 500);
          }, display: function display() {
            var t = d.name + ":",
                n = 0;s = !1, clearTimeout(v.performance.timer), e.each(c, function (e, t) {
              n += t["Execution Time"];
            }), t += " " + n + "ms", i && (t += " '" + i + "'"), (console.group !== r || console.table !== r) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, n, o) {
          var i,
              s,
              c,
              l = S;return (n = n || g, o = A || o, "string" == typeof t && l !== r && (t = t.split(/[\. ]/), i = t.length - 1, e.each(t, function (n, a) {
            var o = n != i ? a + t[n + 1].charAt(0).toUpperCase() + t[n + 1].slice(1) : t;if (e.isPlainObject(l[o]) && n != i) l = l[o];else {
              if (l[o] !== r) return (s = l[o], !1);if (!e.isPlainObject(l[a]) || n == i) return l[a] !== r ? (s = l[a], !1) : (v.error(h.method, t), !1);l = l[a];
            }
          })), e.isFunction(s) ? c = s.apply(o, n) : s !== r && (c = s), e.isArray(a) ? a.push(c) : a !== r ? a = [a, c] : c !== r && (a = c), s);
        } }, u ? (S === r && v.initialize(), v.invoke(l)) : (S !== r && S.invoke("destroy"), v.initialize());
    }), a !== r ? a : this);
  }, e.fn.progress.settings = { name: "Progress", namespace: "progress", debug: !0, verbose: !1, performance: !0, random: { min: 2, max: 5 }, duration: 300, autoSuccess: !0, showActivity: !0, limitValues: !0, label: "percent", precision: 0, framerate: 1000 / 30, percent: !1, total: !1, value: !1, onChange: function onChange(e, t, n) {}, onSuccess: function onSuccess(e) {}, onActive: function onActive(e, t) {}, onError: function onError(e, t) {}, onWarning: function onWarning(e, t) {}, error: { method: "The method you called is not defined.", nonNumeric: "Progress value is non numeric", tooHigh: "Value specified is above 100%", tooLow: "Value specified is below 0%" }, regExp: { variable: /\{\$*[A-z0-9]+\}/g }, metadata: { percent: "percent", total: "total", value: "value" }, selector: { bar: "> .bar", label: "> .label", progress: ".bar > .progress" }, text: { active: !1, error: !1, success: !1, warning: !1, percent: "{percent}%", ratio: "{value} of {total}" }, className: { active: "active", error: "error", success: "success", warning: "warning" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/rating", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.rating = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.rating.settings, parameters) : $.extend({}, $.fn.rating.settings),
          namespace = settings.namespace,
          className = settings.className,
          metadata = settings.metadata,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          element = this,
          instance = $(this).data(moduleNamespace),
          $module = $(this),
          $icon = $module.find(selector.icon),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing rating module', settings);

          if ($icon.length === 0) {
            module.setup.layout();
          }

          if (settings.interactive) {
            module.enable();
          } else {
            module.disable();
          }
          module.set.rating(module.get.initialRating());
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance', instance);
          module.remove.events();
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          $icon = $module.find(selector.icon);
        },

        setup: {
          layout: function layout() {
            var maxRating = module.get.maxRating(),
                html = $.fn.rating.settings.templates.icon(maxRating);
            module.debug('Generating icon html dynamically');
            $module.html(html);
            module.refresh();
          }
        },

        event: {
          mouseenter: function mouseenter() {
            var $activeIcon = $(this);
            $activeIcon.nextAll().removeClass(className.selected);
            $module.addClass(className.selected);
            $activeIcon.addClass(className.selected).prevAll().addClass(className.selected);
          },
          mouseleave: function mouseleave() {
            $module.removeClass(className.selected);
            $icon.removeClass(className.selected);
          },
          click: function click() {
            var $activeIcon = $(this),
                currentRating = module.get.rating(),
                rating = $icon.index($activeIcon) + 1,
                canClear = settings.clearable == 'auto' ? $icon.length === 1 : settings.clearable;
            if (canClear && currentRating == rating) {
              module.clearRating();
            } else {
              module.set.rating(rating);
            }
          }
        },

        clearRating: function clearRating() {
          module.debug('Clearing current rating');
          module.set.rating(0);
        },

        bind: {
          events: function events() {
            module.verbose('Binding events');
            $module.on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter).on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave).on('click' + eventNamespace, selector.icon, module.event.click);
          }
        },

        remove: {
          events: function events() {
            module.verbose('Removing events');
            $module.off(eventNamespace);
          }
        },

        enable: function enable() {
          module.debug('Setting rating to interactive mode');
          module.bind.events();
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          module.debug('Setting rating to read-only mode');
          module.remove.events();
          $module.addClass(className.disabled);
        },

        get: {
          initialRating: function initialRating() {
            if ($module.data(metadata.rating) !== undefined) {
              $module.removeData(metadata.rating);
              return $module.data(metadata.rating);
            }
            return settings.initialRating;
          },
          maxRating: function maxRating() {
            if ($module.data(metadata.maxRating) !== undefined) {
              $module.removeData(metadata.maxRating);
              return $module.data(metadata.maxRating);
            }
            return settings.maxRating;
          },
          rating: function rating() {
            var currentRating = $icon.filter('.' + className.active).length;
            module.verbose('Current rating retrieved', currentRating);
            return currentRating;
          }
        },

        set: {
          rating: function rating(_rating) {
            var ratingIndex = _rating - 1 >= 0 ? _rating - 1 : 0,
                $activeIcon = $icon.eq(ratingIndex);
            $module.removeClass(className.selected);
            $icon.removeClass(className.selected).removeClass(className.active);
            if (_rating > 0) {
              module.verbose('Setting current rating to', _rating);
              $activeIcon.prevAll().andSelf().addClass(className.active);
            }
            settings.onRate.call(element, _rating);
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.rating.settings = {

    name: 'Rating',
    namespace: 'rating',

    debug: false,
    verbose: false,
    performance: true,

    initialRating: 0,
    interactive: true,
    maxRating: 4,
    clearable: 'auto',

    onRate: function onRate(rating) {},

    error: {
      method: 'The method you called is not defined',
      noMaximum: 'No maximum rating specified. Cannot generate HTML automatically'
    },

    metadata: {
      rating: 'rating',
      maxRating: 'maxRating'
    },

    className: {
      active: 'active',
      disabled: 'disabled',
      selected: 'selected',
      loading: 'loading'
    },

    selector: {
      icon: '.icon'
    },

    templates: {
      icon: function icon(maxRating) {
        var icon = 1,
            html = '';
        while (icon <= maxRating) {
          html += '<i class="icon"></i>';
          icon++;
        }
        return html;
      }
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/rating.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Rating
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, t, i) {
  "use strict";e.fn.rating = function (n) {
    var t,
        a = e(this),
        o = a.selector || "",
        r = new Date().getTime(),
        s = [],
        l = arguments[0],
        c = "string" == typeof l,
        u = [].slice.call(arguments, 1);return (a.each(function () {
      var g,
          m = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.rating.settings, n) : e.extend({}, e.fn.rating.settings),
          d = m.namespace,
          f = m.className,
          v = m.metadata,
          p = m.selector,
          b = (m.error, "." + d),
          h = "module-" + d,
          y = this,
          x = e(this).data(h),
          R = e(this),
          C = R.find(p.icon);g = { initialize: function initialize() {
          g.verbose("Initializing rating module", m), 0 === C.length && g.setup.layout(), m.interactive ? g.enable() : g.disable(), g.set.rating(g.get.initialRating()), g.instantiate();
        }, instantiate: function instantiate() {
          g.verbose("Instantiating module", m), x = g, R.data(h, g);
        }, destroy: function destroy() {
          g.verbose("Destroying previous instance", x), g.remove.events(), R.removeData(h);
        }, refresh: function refresh() {
          C = R.find(p.icon);
        }, setup: { layout: function layout() {
            var n = g.get.maxRating(),
                t = e.fn.rating.settings.templates.icon(n);g.debug("Generating icon html dynamically"), R.html(t), g.refresh();
          } }, event: { mouseenter: function mouseenter() {
            var n = e(this);n.nextAll().removeClass(f.selected), R.addClass(f.selected), n.addClass(f.selected).prevAll().addClass(f.selected);
          }, mouseleave: function mouseleave() {
            R.removeClass(f.selected), C.removeClass(f.selected);
          }, click: function click() {
            var n = e(this),
                t = g.get.rating(),
                i = C.index(n) + 1,
                a = "auto" == m.clearable ? 1 === C.length : m.clearable;a && t == i ? g.clearRating() : g.set.rating(i);
          } }, clearRating: function clearRating() {
          g.debug("Clearing current rating"), g.set.rating(0);
        }, bind: { events: function events() {
            g.verbose("Binding events"), R.on("mouseenter" + b, p.icon, g.event.mouseenter).on("mouseleave" + b, p.icon, g.event.mouseleave).on("click" + b, p.icon, g.event.click);
          } }, remove: { events: function events() {
            g.verbose("Removing events"), R.off(b);
          } }, enable: function enable() {
          g.debug("Setting rating to interactive mode"), g.bind.events(), R.removeClass(f.disabled);
        }, disable: function disable() {
          g.debug("Setting rating to read-only mode"), g.remove.events(), R.addClass(f.disabled);
        }, get: { initialRating: function initialRating() {
            return R.data(v.rating) !== i ? (R.removeData(v.rating), R.data(v.rating)) : m.initialRating;
          }, maxRating: function maxRating() {
            return R.data(v.maxRating) !== i ? (R.removeData(v.maxRating), R.data(v.maxRating)) : m.maxRating;
          }, rating: function rating() {
            var e = C.filter("." + f.active).length;return (g.verbose("Current rating retrieved", e), e);
          } }, set: { rating: function rating(e) {
            var n = e - 1 >= 0 ? e - 1 : 0,
                t = C.eq(n);R.removeClass(f.selected), C.removeClass(f.selected).removeClass(f.active), e > 0 && (g.verbose("Setting current rating to", e), t.prevAll().andSelf().addClass(f.active)), m.onRate.call(y, e);
          } }, setting: function setting(n, t) {
          if ((g.debug("Changing setting", n, t), e.isPlainObject(n))) e.extend(!0, m, n);else {
            if (t === i) return m[n];m[n] = t;
          }
        }, internal: function internal(n, t) {
          if (e.isPlainObject(n)) e.extend(!0, g, n);else {
            if (t === i) return g[n];g[n] = t;
          }
        }, debug: function debug() {
          m.debug && (m.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, m.name + ":"), g.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          m.verbose && m.debug && (m.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, m.name + ":"), g.verbose.apply(console, arguments)));
        }, error: function error() {
          g.error = Function.prototype.bind.call(console.error, console, m.name + ":"), g.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var n, t, i;m.performance && (n = new Date().getTime(), i = r || n, t = n - i, r = n, s.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: y, "Execution Time": t })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 500);
          }, display: function display() {
            var n = m.name + ":",
                t = 0;r = !1, clearTimeout(g.performance.timer), e.each(s, function (e, n) {
              t += n["Execution Time"];
            }), n += " " + t + "ms", o && (n += " '" + o + "'"), a.length > 1 && (n += " (" + a.length + ")"), (console.group !== i || console.table !== i) && s.length > 0 && (console.groupCollapsed(n), console.table ? console.table(s) : e.each(s, function (e, n) {
              console.log(n.Name + ": " + n["Execution Time"] + "ms");
            }), console.groupEnd()), s = [];
          } }, invoke: function invoke(n, a, o) {
          var r,
              s,
              l,
              c = x;return (a = a || u, o = y || o, "string" == typeof n && c !== i && (n = n.split(/[\. ]/), r = n.length - 1, e.each(n, function (t, a) {
            var o = t != r ? a + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n;if (e.isPlainObject(c[o]) && t != r) c = c[o];else {
              if (c[o] !== i) return (s = c[o], !1);if (!e.isPlainObject(c[a]) || t == r) return c[a] !== i ? (s = c[a], !1) : !1;c = c[a];
            }
          })), e.isFunction(s) ? l = s.apply(o, a) : s !== i && (l = s), e.isArray(t) ? t.push(l) : t !== i ? t = [t, l] : l !== i && (t = l), s);
        } }, c ? (x === i && g.initialize(), g.invoke(l)) : (x !== i && x.invoke("destroy"), g.initialize());
    }), t !== i ? t : this);
  }, e.fn.rating.settings = { name: "Rating", namespace: "rating", debug: !1, verbose: !1, performance: !0, initialRating: 0, interactive: !0, maxRating: 4, clearable: "auto", onRate: function onRate(e) {}, error: { method: "The method you called is not defined", noMaximum: "No maximum rating specified. Cannot generate HTML automatically" }, metadata: { rating: "rating", maxRating: "maxRating" }, className: { active: "active", disabled: "disabled", selected: "selected", loading: "loading" }, selector: { icon: ".icon" }, templates: { icon: function icon(e) {
        for (var n = 1, t = ""; e >= n;) t += "<i class=\"icon\"></i>", n++;return t;
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/search", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.search = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $(this).each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.search.settings, parameters) : $.extend({}, $.fn.search.settings),
          className = settings.className,
          metadata = settings.metadata,
          regExp = settings.regExp,
          selector = settings.selector,
          error = settings.error,
          namespace = settings.namespace,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          $prompt = $module.find(selector.prompt),
          $searchButton = $module.find(selector.searchButton),
          $results = $module.find(selector.results),
          $result = $module.find(selector.result),
          $category = $module.find(selector.category),
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing module');
          module.determine.searchFields();
          module.bind.events();
          module.set.type();
          module.create.results();
          module.instantiate();
        },
        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },
        destroy: function destroy() {
          module.verbose('Destroying instance');
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        bind: {
          events: function events() {
            module.verbose('Binding events to search');
            if (settings.automatic) {
              $module.on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input);
              $prompt.attr('autocomplete', 'off');
            }
            $module
            // prompt
            .on('focus' + eventNamespace, selector.prompt, module.event.focus).on('blur' + eventNamespace, selector.prompt, module.event.blur).on('keydown' + eventNamespace, selector.prompt, module.handleKeyboard)
            // search button
            .on('click' + eventNamespace, selector.searchButton, module.query)
            // results
            .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown).on('mouseup' + eventNamespace, selector.results, module.event.result.mouseup).on('click' + eventNamespace, selector.result, module.event.result.click);
          }
        },

        determine: {
          searchFields: function searchFields() {
            // this makes sure $.extend does not add specified search fields to default fields
            // this is the only setting which should not extend defaults
            if (parameters && parameters.searchFields !== undefined) {
              settings.searchFields = parameters.searchFields;
            }
          }
        },

        event: {
          input: function input() {
            clearTimeout(module.timer);
            module.timer = setTimeout(module.query, settings.searchDelay);
          },
          focus: function focus() {
            module.set.focus();
            if (module.has.minimumCharacters()) {
              module.query();
              module.showResults();
            }
          },
          blur: function blur(event) {
            var pageLostFocus = document.activeElement === this;
            if (!pageLostFocus && !module.resultsClicked) {
              module.cancel.query();
              module.remove.focus();
              module.timer = setTimeout(module.hideResults, settings.hideDelay);
            }
          },
          result: {
            mousedown: function mousedown() {
              module.resultsClicked = true;
            },
            mouseup: function mouseup() {
              module.resultsClicked = false;
            },
            click: function click(event) {
              module.debug('Search result selected');
              var $result = $(this),
                  $title = $result.find(selector.title).eq(0),
                  $link = $result.find('a[href]').eq(0),
                  href = $link.attr('href') || false,
                  target = $link.attr('target') || false,
                  title = $title.html(),

              // title is used for result lookup
              value = $title.length > 0 ? $title.text() : false,
                  results = module.get.results(),
                  result = $result.data(metadata.result) || module.get.result(value, results),
                  returnedValue;
              if ($.isFunction(settings.onSelect)) {
                if (settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  return;
                }
              }
              module.hideResults();
              if (value) {
                module.set.value(value);
              }
              if (href) {
                module.verbose('Opening search link found in result', $link);
                if (target == '_blank' || event.ctrlKey) {
                  window.open(href);
                } else {
                  window.location.href = href;
                }
              }
            }
          }
        },
        handleKeyboard: function handleKeyboard(event) {
          var
          // force selector refresh
          $result = $module.find(selector.result),
              $category = $module.find(selector.category),
              currentIndex = $result.index($result.filter('.' + className.active)),
              resultSize = $result.length,
              keyCode = event.which,
              keys = {
            backspace: 8,
            enter: 13,
            escape: 27,
            upArrow: 38,
            downArrow: 40
          },
              newIndex;
          // search shortcuts
          if (keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            $prompt.trigger('blur');
          }
          if (module.is.visible()) {
            if (keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if ($result.filter('.' + className.active).length > 0) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
              }
            } else if (keyCode == keys.upArrow) {
              module.verbose('Up key pressed, changing active result');
              newIndex = currentIndex - 1 < 0 ? currentIndex : currentIndex - 1;
              $category.removeClass(className.active);
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();
            } else if (keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = currentIndex + 1 >= resultSize ? currentIndex : currentIndex + 1;
              $category.removeClass(className.active);
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();
            }
          } else {
            // query shortcuts
            if (keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
            }
          }
        },

        setup: {
          api: function api() {
            var apiSettings = {
              debug: settings.debug,
              on: false,
              cache: 'local',
              action: 'search',
              onError: module.error
            },
                searchHTML;
            module.verbose('First request, initializing API');
            $module.api(apiSettings);
          }
        },

        can: {
          useAPI: function useAPI() {
            return $.fn.api !== undefined;
          },
          transition: function transition() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
          }
        },

        is: {
          empty: function empty() {
            return $results.html() === '';
          },
          visible: function visible() {
            return $results.filter(':visible').length > 0;
          },
          focused: function focused() {
            return $prompt.filter(':focus').length > 0;
          }
        },

        get: {
          inputEvent: function inputEvent() {
            var prompt = $prompt[0],
                inputEvent = prompt !== undefined && prompt.oninput !== undefined ? 'input' : prompt !== undefined && prompt.onpropertychange !== undefined ? 'propertychange' : 'keyup';
            return inputEvent;
          },
          value: function value() {
            return $prompt.val();
          },
          results: function results() {
            var results = $module.data(metadata.results);
            return results;
          },
          result: function result(value, results) {
            var lookupFields = ['title', 'id'],
                result = false;
            value = value !== undefined ? value : module.get.value();
            results = results !== undefined ? results : module.get.results();
            if (settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function (index, category) {
                if ($.isArray(category.results)) {
                  result = module.search.object(value, category.results, lookupFields)[0];
                  // dont continue searching if a result is found
                  if (result) {
                    return false;
                  }
                }
              });
            } else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results, lookupFields)[0];
            }
            return result || false;
          }
        },

        set: {
          focus: function focus() {
            $module.addClass(className.focus);
          },
          loading: function loading() {
            $module.addClass(className.loading);
          },
          value: function value(_value) {
            module.verbose('Setting search input value', _value);
            $prompt.val(_value);
          },
          type: function type(_type) {
            _type = _type || settings.type;
            if (settings.type == 'category') {
              $module.addClass(settings.type);
            }
          },
          buttonPressed: function buttonPressed() {
            $searchButton.addClass(className.pressed);
          }
        },

        remove: {
          loading: function loading() {
            $module.removeClass(className.loading);
          },
          focus: function focus() {
            $module.removeClass(className.focus);
          },
          buttonPressed: function buttonPressed() {
            $searchButton.removeClass(className.pressed);
          }
        },

        query: function query() {
          var searchTerm = module.get.value(),
              cache = module.read.cache(searchTerm);
          if (module.has.minimumCharacters()) {
            if (cache) {
              module.debug('Reading result from cache', searchTerm);
              module.save.results(cache.results);
              module.addResults(cache.html);
              module.inject.id(cache.results);
            } else {
              module.debug('Querying for', searchTerm);
              if ($.isPlainObject(settings.source) || $.isArray(settings.source)) {
                module.search.local(searchTerm);
              } else if (module.can.useAPI()) {
                module.search.remote(searchTerm);
              } else {
                module.error(error.source);
              }
              settings.onSearchQuery.call(element, searchTerm);
            }
          } else {
            module.hideResults();
          }
        },

        search: {
          local: function local(searchTerm) {
            var results = module.search.object(searchTerm, settings.content),
                searchHTML;
            module.set.loading();
            module.save.results(results);
            module.debug('Returned local search results', results);

            searchHTML = module.generateResults({
              results: results
            });
            module.remove.loading();
            module.addResults(searchHTML);
            module.inject.id(results);
            module.write.cache(searchTerm, {
              html: searchHTML,
              results: results
            });
          },
          remote: function remote(searchTerm) {
            var apiSettings = {
              onSuccess: function onSuccess(response) {
                module.parse.response.call(element, response, searchTerm);
              },
              onFailure: function onFailure() {
                module.displayMessage(error.serverError);
              },
              urlData: {
                query: searchTerm
              }
            };
            if (!$module.api('get request')) {
              module.setup.api();
            }
            $.extend(true, apiSettings, settings.apiSettings);
            module.debug('Executing search', apiSettings);
            module.cancel.query();
            $module.api('setting', apiSettings).api('query');
          },
          object: function object(searchTerm, source, searchFields) {
            var results = [],
                fuzzyResults = [],
                searchExp = searchTerm.toString().replace(regExp.escape, '\\$&'),
                matchRegExp = new RegExp(regExp.beginsWith + searchExp, 'i'),

            // avoid duplicates when pushing results
            addResult = function addResult(array, result) {
              var notResult = $.inArray(result, results) == -1,
                  notFuzzyResult = $.inArray(result, fuzzyResults) == -1;
              if (notResult && notFuzzyResult) {
                array.push(result);
              }
            };
            source = source || settings.source;
            searchFields = searchFields !== undefined ? searchFields : settings.searchFields;

            // search fields should be array to loop correctly
            if (!$.isArray(searchFields)) {
              searchFields = [searchFields];
            }

            // exit conditions if no source
            if (source === undefined || source === false) {
              module.error(error.source);
              return [];
            }

            // iterate through search fields looking for matches
            $.each(searchFields, function (index, field) {
              $.each(source, function (label, content) {
                var fieldExists = typeof content[field] == 'string';
                if (fieldExists) {
                  if (content[field].search(matchRegExp) !== -1) {
                    // content starts with value (first in results)
                    addResult(results, content);
                  } else if (settings.searchFullText && module.fuzzySearch(searchTerm, content[field])) {
                    // content fuzzy matches (last in results)
                    addResult(fuzzyResults, content);
                  }
                }
              });
            });
            return $.merge(results, fuzzyResults);
          }
        },

        fuzzySearch: function fuzzySearch(query, term) {
          var termLength = term.length,
              queryLength = query.length;
          if (typeof query !== 'string') {
            return false;
          }
          query = query.toLowerCase();
          term = term.toLowerCase();
          if (queryLength > termLength) {
            return false;
          }
          if (queryLength === termLength) {
            return query === term;
          }
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var queryCharacter = query.charCodeAt(characterIndex);
            while (nextCharacterIndex < termLength) {
              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
              }
            }
            return false;
          }
          return true;
        },

        parse: {
          response: function response(_response, searchTerm) {
            var searchHTML = module.generateResults(_response);
            module.verbose('Parsing server response', _response);
            if (_response !== undefined) {
              if (searchTerm !== undefined && _response.results !== undefined) {
                module.addResults(searchHTML);
                module.inject.id(_response.results);
                module.write.cache(searchTerm, {
                  html: searchHTML,
                  results: _response.results
                });
                module.save.results(_response.results);
              }
            }
          }
        },

        cancel: {
          query: function query() {
            if (module.can.useAPI()) {
              $module.api('abort');
            }
          }
        },

        has: {
          minimumCharacters: function minimumCharacters() {
            var searchTerm = module.get.value(),
                numCharacters = searchTerm.length;
            return numCharacters >= settings.minCharacters;
          }
        },

        clear: {
          cache: function cache(value) {
            var cache = $module.data(metadata.cache);
            if (!value) {
              module.debug('Clearing cache', value);
              $module.removeData(metadata.cache);
            } else if (value && cache && cache[value]) {
              module.debug('Removing value from cache', value);
              delete cache[value];
              $module.data(metadata.cache, cache);
            }
          }
        },

        read: {
          cache: function cache(name) {
            var cache = $module.data(metadata.cache);
            if (settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return typeof cache == 'object' && cache[name] !== undefined ? cache[name] : false;
            }
            return false;
          }
        },

        create: {
          id: function id(resultIndex, categoryIndex) {
            var resultID = resultIndex + 1,
                // not zero indexed
            categoryID = categoryIndex + 1,
                firstCharCode,
                letterID,
                id;
            if (categoryIndex !== undefined) {
              // start char code for "A"
              letterID = String.fromCharCode(97 + categoryIndex);
              id = letterID + resultID;
              module.verbose('Creating category result id', id);
            } else {
              id = resultID;
              module.verbose('Creating result id', id);
            }
            return id;
          },
          results: function results() {
            if ($results.length === 0) {
              $results = $('<div />').addClass(className.results).appendTo($module);
            }
          }
        },

        inject: {
          result: function result(_result, resultIndex, categoryIndex) {
            module.verbose('Injecting result into results');
            var $selectedResult = categoryIndex !== undefined ? $results.children().eq(categoryIndex).children(selector.result).eq(resultIndex) : $results.children(selector.result).eq(resultIndex);
            module.verbose('Injecting results metadata', $selectedResult);
            $selectedResult.data(metadata.result, _result);
          },
          id: function id(results) {
            module.debug('Injecting unique ids into results');
            var
            // since results may be object, we must use counters
            categoryIndex = 0,
                resultIndex = 0;
            if (settings.type === 'category') {
              // iterate through each category result
              $.each(results, function (index, category) {
                resultIndex = 0;
                $.each(category.results, function (index, value) {
                  var result = category.results[index];
                  if (result.id === undefined) {
                    result.id = module.create.id(resultIndex, categoryIndex);
                  }
                  module.inject.result(result, resultIndex, categoryIndex);
                  resultIndex++;
                });
                categoryIndex++;
              });
            } else {
              // top level
              $.each(results, function (index, value) {
                var result = results[index];
                if (result.id === undefined) {
                  result.id = module.create.id(resultIndex);
                }
                module.inject.result(result, resultIndex);
                resultIndex++;
              });
            }
            return results;
          }
        },

        save: {
          results: function results(_results) {
            module.verbose('Saving current search results to metadata', _results);
            $module.data(metadata.results, _results);
          }
        },

        write: {
          cache: function cache(name, value) {
            var cache = $module.data(metadata.cache) !== undefined ? $module.data(metadata.cache) : {};
            if (settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module.data(metadata.cache, cache);
            }
          }
        },

        addResults: function addResults(html) {
          if ($.isFunction(settings.onResultsAdd)) {
            if (settings.onResultsAdd.call($results, html) === false) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
            }
          }
          $results.html(html);
          module.showResults();
        },

        showResults: function showResults() {
          if (!module.is.visible() && module.is.focused() && !module.is.empty()) {
            if (module.can.transition()) {
              module.debug('Showing results with css animations');
              $results.transition({
                animation: settings.transition + ' in',
                debug: settings.debug,
                verbose: settings.verbose,
                duration: settings.duration,
                queue: true
              });
            } else {
              module.debug('Showing results with javascript');
              $results.stop().fadeIn(settings.duration, settings.easing);
            }
            settings.onResultsOpen.call($results);
          }
        },
        hideResults: function hideResults() {
          if (module.is.visible()) {
            if (module.can.transition()) {
              module.debug('Hiding results with css animations');
              $results.transition({
                animation: settings.transition + ' out',
                debug: settings.debug,
                verbose: settings.verbose,
                duration: settings.duration,
                queue: true
              });
            } else {
              module.debug('Hiding results with javascript');
              $results.stop().fadeOut(settings.duration, settings.easing);
            }
            settings.onResultsClose.call($results);
          }
        },

        generateResults: function generateResults(response) {
          module.debug('Generating html from response', response);
          var template = settings.templates[settings.type],
              isProperObject = $.isPlainObject(response.results) && !$.isEmptyObject(response.results),
              isProperArray = $.isArray(response.results) && response.results.length > 0,
              html = '';
          if (isProperObject || isProperArray) {
            if (settings.maxResults > 0) {
              if (isProperObject) {
                if (settings.type == 'standard') {
                  module.error(error.maxResults);
                }
              } else {
                response.results = response.results.slice(0, settings.maxResults);
              }
            }
            if ($.isFunction(template)) {
              html = template(response);
            } else {
              module.error(error.noTemplate, false);
            }
          } else {
            html = module.displayMessage(error.noResults, 'empty');
          }
          settings.onResults.call(element, response);
          return html;
        },

        displayMessage: function displayMessage(text, type) {
          type = type || 'standard';
          module.debug('Displaying message', text, type);
          module.addResults(settings.templates.message(text, type));
          return settings.templates.message(text, type);
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.search.settings = {

    name: 'Search',
    namespace: 'search',

    debug: false,
    verbose: false,
    performance: true,

    type: 'standard',
    // template to use (specified in settings.templates)

    minCharacters: 1,
    // minimum characters required to search

    apiSettings: false,
    // API config

    source: false,
    // object to search

    searchFields: ['title', 'description'],
    // fields to search

    searchFullText: true,
    // whether to include fuzzy results in local search

    automatic: true,
    // whether to add events to prompt automatically

    hideDelay: 0,
    // delay before hiding menu after blur

    searchDelay: 200,
    // delay before searching

    maxResults: 7,
    // maximum results returned from local

    cache: true,
    // whether to store lookups in local cache

    // transition settings
    transition: 'scale',
    duration: 200,
    easing: 'easeOutExpo',

    // callbacks
    onSelect: false,
    onResultsAdd: false,

    onSearchQuery: function onSearchQuery() {},
    onResults: function onResults(response) {},

    onResultsOpen: function onResultsOpen() {},
    onResultsClose: function onResultsClose() {},

    className: {
      active: 'active',
      empty: 'empty',
      focus: 'focus',
      loading: 'loading',
      results: 'results',
      pressed: 'down'
    },

    error: {
      source: 'Cannot search. No source used, and Semantic API module was not included',
      noResults: 'Your search returned no results',
      logging: 'Error in debug logging, exiting.',
      noEndpoint: 'No search endpoint was specified',
      noTemplate: 'A valid template name was not specified.',
      serverError: 'There was an issue querying the server.',
      maxResults: 'Results must be an array to use maxResults setting',
      method: 'The method you called is not defined.'
    },

    metadata: {
      cache: 'cache',
      results: 'results',
      result: 'result'
    },

    regExp: {
      escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
      beginsWith: '(?:s|^)'
    },

    selector: {
      prompt: '.prompt',
      searchButton: '.search.button',
      results: '.results',
      category: '.category',
      result: '.result',
      title: '.title, .name'
    },

    templates: {
      escape: function escape(string) {
        var badChars = /[&<>"'`]/g,
            shouldEscape = /[&<>"'`]/,
            escape = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        },
            escapedChar = function escapedChar(chr) {
          return escape[chr];
        };
        if (shouldEscape.test(string)) {
          return string.replace(badChars, escapedChar);
        }
        return string;
      },
      message: function message(_message, type) {
        var html = '';
        if (_message !== undefined && type !== undefined) {
          html += '' + '<div class="message ' + type + '">';
          // message type
          if (type == 'empty') {
            html += '' + '<div class="header">No Results</div class="header">' + '<div class="description">' + _message + '</div class="description">';
          } else {
            html += ' <div class="description">' + _message + '</div>';
          }
          html += '</div>';
        }
        return html;
      },
      category: function category(response) {
        var html = '',
            escape = $.fn.search.settings.templates.escape;
        if (response.results !== undefined) {
          // each category
          $.each(response.results, function (index, category) {
            if (category.results !== undefined && category.results.length > 0) {
              html += '' + '<div class="category">' + '<div class="name">' + category.name + '</div>';
              // each item inside category
              $.each(category.results, function (index, result) {
                html += '<div class="result">';
                if (result.url) {
                  html += '<a href="' + result.url + '"></a>';
                }
                if (result.image !== undefined) {
                  result.image = escape(result.image);
                  html += '' + '<div class="image">' + ' <img src="' + result.image + '" alt="">' + '</div>';
                }
                html += '<div class="content">';
                if (result.price !== undefined) {
                  result.price = escape(result.price);
                  html += '<div class="price">' + result.price + '</div>';
                }
                if (result.title !== undefined) {
                  result.title = escape(result.title);
                  html += '<div class="title">' + result.title + '</div>';
                }
                if (result.description !== undefined) {
                  html += '<div class="description">' + result.description + '</div>';
                }
                html += '' + '</div>' + '</div>';
              });
              html += '' + '</div>';
            }
          });
          if (response.action) {
            html += '' + '<a href="' + response.action.url + '" class="action">' + response.action.text + '</a>';
          }
          return html;
        }
        return false;
      },
      standard: function standard(response) {
        var html = '';
        if (response.results !== undefined) {

          // each result
          $.each(response.results, function (index, result) {
            if (result.url) {
              html += '<a class="result" href="' + result.url + '">';
            } else {
              html += '<a class="result">';
            }
            if (result.image !== undefined) {
              html += '' + '<div class="image">' + ' <img src="' + result.image + '">' + '</div>';
            }
            html += '<div class="content">';
            if (result.price !== undefined) {
              html += '<div class="price">' + result.price + '</div>';
            }
            if (result.title !== undefined) {
              html += '<div class="title">' + result.title + '</div>';
            }
            if (result.description !== undefined) {
              html += '<div class="description">' + result.description + '</div>';
            }
            html += '' + '</div>';
            html += '</a>';
          });

          if (response.action) {
            html += '' + '<a href="' + response.action.url + '" class="action">' + response.action.text + '</a>';
          }
          return html;
        }
        return false;
      }
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/search.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Search
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, s, r) {
  "use strict";e.fn.search = function (n) {
    var a,
        i = e(this),
        c = i.selector || "",
        o = new Date().getTime(),
        u = [],
        l = arguments[0],
        d = "string" == typeof l,
        g = [].slice.call(arguments, 1);return (e(this).each(function () {
      var f,
          p = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.search.settings, n) : e.extend({}, e.fn.search.settings),
          v = p.className,
          h = p.metadata,
          m = p.regExp,
          b = p.selector,
          y = p.error,
          C = p.namespace,
          R = "." + C,
          w = C + "-module",
          x = e(this),
          j = x.find(b.prompt),
          q = x.find(b.searchButton),
          k = x.find(b.results),
          A = (x.find(b.result), x.find(b.category), this),
          E = x.data(w);f = { initialize: function initialize() {
          f.verbose("Initializing module"), f.determine.searchFields(), f.bind.events(), f.set.type(), f.create.results(), f.instantiate();
        }, instantiate: function instantiate() {
          f.verbose("Storing instance of module", f), E = f, x.data(w, f);
        }, destroy: function destroy() {
          f.verbose("Destroying instance"), x.off(R).removeData(w);
        }, bind: { events: function events() {
            f.verbose("Binding events to search"), p.automatic && (x.on(f.get.inputEvent() + R, b.prompt, f.event.input), j.attr("autocomplete", "off")), x.on("focus" + R, b.prompt, f.event.focus).on("blur" + R, b.prompt, f.event.blur).on("keydown" + R, b.prompt, f.handleKeyboard).on("click" + R, b.searchButton, f.query).on("mousedown" + R, b.results, f.event.result.mousedown).on("mouseup" + R, b.results, f.event.result.mouseup).on("click" + R, b.result, f.event.result.click);
          } }, determine: { searchFields: function searchFields() {
            n && n.searchFields !== r && (p.searchFields = n.searchFields);
          } }, event: { input: function input() {
            clearTimeout(f.timer), f.timer = setTimeout(f.query, p.searchDelay);
          }, focus: function focus() {
            f.set.focus(), f.has.minimumCharacters() && (f.query(), f.showResults());
          }, blur: function blur(e) {
            var t = s.activeElement === this;t || f.resultsClicked || (f.cancel.query(), f.remove.focus(), f.timer = setTimeout(f.hideResults, p.hideDelay));
          }, result: { mousedown: function mousedown() {
              f.resultsClicked = !0;
            }, mouseup: function mouseup() {
              f.resultsClicked = !1;
            }, click: function click(s) {
              f.debug("Search result selected");var r = e(this),
                  n = r.find(b.title).eq(0),
                  a = r.find("a[href]").eq(0),
                  i = a.attr("href") || !1,
                  c = a.attr("target") || !1,
                  o = (n.html(), n.length > 0 ? n.text() : !1),
                  u = f.get.results(),
                  l = r.data(h.result) || f.get.result(o, u);return e.isFunction(p.onSelect) && p.onSelect.call(A, l, u) === !1 ? void f.debug("Custom onSelect callback cancelled default select action") : (f.hideResults(), o && f.set.value(o), void (i && (f.verbose("Opening search link found in result", a), "_blank" == c || s.ctrlKey ? t.open(i) : t.location.href = i)));
            } } }, handleKeyboard: function handleKeyboard(e) {
          var t,
              s = x.find(b.result),
              r = x.find(b.category),
              n = s.index(s.filter("." + v.active)),
              a = s.length,
              i = e.which,
              c = { backspace: 8, enter: 13, escape: 27, upArrow: 38, downArrow: 40 };if ((i == c.escape && (f.verbose("Escape key pressed, blurring search field"), j.trigger("blur")), f.is.visible())) if (i == c.enter) {
            if ((f.verbose("Enter key pressed, selecting active result"), s.filter("." + v.active).length > 0)) return (f.event.result.click.call(s.filter("." + v.active), e), e.preventDefault(), !1);
          } else i == c.upArrow ? (f.verbose("Up key pressed, changing active result"), t = 0 > n - 1 ? n : n - 1, r.removeClass(v.active), s.removeClass(v.active).eq(t).addClass(v.active).closest(r).addClass(v.active), e.preventDefault()) : i == c.downArrow && (f.verbose("Down key pressed, changing active result"), t = n + 1 >= a ? n : n + 1, r.removeClass(v.active), s.removeClass(v.active).eq(t).addClass(v.active).closest(r).addClass(v.active), e.preventDefault());else i == c.enter && (f.verbose("Enter key pressed, executing query"), f.query(), f.set.buttonPressed(), j.one("keyup", f.remove.buttonFocus));
        }, setup: { api: function api() {
            var e = { debug: p.debug, on: !1, cache: "local", action: "search", onError: f.error };f.verbose("First request, initializing API"), x.api(e);
          } }, can: { useAPI: function useAPI() {
            return e.fn.api !== r;
          }, transition: function transition() {
            return p.transition && e.fn.transition !== r && x.transition("is supported");
          } }, is: { empty: function empty() {
            return "" === k.html();
          }, visible: function visible() {
            return k.filter(":visible").length > 0;
          }, focused: function focused() {
            return j.filter(":focus").length > 0;
          } }, get: { inputEvent: function inputEvent() {
            var e = j[0],
                t = e !== r && e.oninput !== r ? "input" : e !== r && e.onpropertychange !== r ? "propertychange" : "keyup";return t;
          }, value: function value() {
            return j.val();
          }, results: function results() {
            var e = x.data(h.results);return e;
          }, result: function result(t, s) {
            var n = ["title", "id"],
                a = !1;return (t = t !== r ? t : f.get.value(), s = s !== r ? s : f.get.results(), "category" === p.type ? (f.debug("Finding result that matches", t), e.each(s, function (s, r) {
              return e.isArray(r.results) && (a = f.search.object(t, r.results, n)[0]) ? !1 : void 0;
            })) : (f.debug("Finding result in results object", t), a = f.search.object(t, s, n)[0]), a || !1);
          } }, set: { focus: function focus() {
            x.addClass(v.focus);
          }, loading: function loading() {
            x.addClass(v.loading);
          }, value: function value(e) {
            f.verbose("Setting search input value", e), j.val(e);
          }, type: function type(e) {
            e = e || p.type, "category" == p.type && x.addClass(p.type);
          }, buttonPressed: function buttonPressed() {
            q.addClass(v.pressed);
          } }, remove: { loading: function loading() {
            x.removeClass(v.loading);
          }, focus: function focus() {
            x.removeClass(v.focus);
          }, buttonPressed: function buttonPressed() {
            q.removeClass(v.pressed);
          } }, query: function query() {
          var t = f.get.value(),
              s = f.read.cache(t);f.has.minimumCharacters() ? s ? (f.debug("Reading result from cache", t), f.save.results(s.results), f.addResults(s.html), f.inject.id(s.results)) : (f.debug("Querying for", t), e.isPlainObject(p.source) || e.isArray(p.source) ? f.search.local(t) : f.can.useAPI() ? f.search.remote(t) : f.error(y.source), p.onSearchQuery.call(A, t)) : f.hideResults();
        }, search: { local: function local(e) {
            var t,
                s = f.search.object(e, p.content);f.set.loading(), f.save.results(s), f.debug("Returned local search results", s), t = f.generateResults({ results: s }), f.remove.loading(), f.addResults(t), f.inject.id(s), f.write.cache(e, { html: t, results: s });
          }, remote: function remote(t) {
            var s = { onSuccess: function onSuccess(e) {
                f.parse.response.call(A, e, t);
              }, onFailure: function onFailure() {
                f.displayMessage(y.serverError);
              }, urlData: { query: t } };x.api("get request") || f.setup.api(), e.extend(!0, s, p.apiSettings), f.debug("Executing search", s), f.cancel.query(), x.api("setting", s).api("query");
          }, object: function object(t, s, n) {
            var a = [],
                i = [],
                c = t.toString().replace(m.escape, "\\$&"),
                o = new RegExp(m.beginsWith + c, "i"),
                u = function u(t, s) {
              var r = -1 == e.inArray(s, a),
                  n = -1 == e.inArray(s, i);r && n && t.push(s);
            };return (s = s || p.source, n = n !== r ? n : p.searchFields, e.isArray(n) || (n = [n]), s === r || s === !1 ? (f.error(y.source), []) : (e.each(n, function (r, n) {
              e.each(s, function (e, s) {
                var r = "string" == typeof s[n];r && (-1 !== s[n].search(o) ? u(a, s) : p.searchFullText && f.fuzzySearch(t, s[n]) && u(i, s));
              });
            }), e.merge(a, i)));
          } }, fuzzySearch: function fuzzySearch(e, t) {
          var s = t.length,
              r = e.length;if ("string" != typeof e) return !1;if ((e = e.toLowerCase(), t = t.toLowerCase(), r > s)) return !1;if (r === s) return e === t;e: for (var n = 0, a = 0; r > n; n++) {
            for (var i = e.charCodeAt(n); s > a;) if (t.charCodeAt(a++) === i) continue e;return !1;
          }return !0;
        }, parse: { response: function response(e, t) {
            var s = f.generateResults(e);f.verbose("Parsing server response", e), e !== r && t !== r && e.results !== r && (f.addResults(s), f.inject.id(e.results), f.write.cache(t, { html: s, results: e.results }), f.save.results(e.results));
          } }, cancel: { query: function query() {
            f.can.useAPI() && x.api("abort");
          } }, has: { minimumCharacters: function minimumCharacters() {
            var e = f.get.value(),
                t = e.length;return t >= p.minCharacters;
          } }, clear: { cache: function cache(e) {
            var t = x.data(h.cache);e ? e && t && t[e] && (f.debug("Removing value from cache", e), delete t[e], x.data(h.cache, t)) : (f.debug("Clearing cache", e), x.removeData(h.cache));
          } }, read: { cache: function cache(e) {
            var t = x.data(h.cache);return p.cache ? (f.verbose("Checking cache for generated html for query", e), "object" == typeof t && t[e] !== r ? t[e] : !1) : !1;
          } }, create: { id: function id(e, t) {
            var s,
                n,
                a = e + 1;return (t !== r ? (s = String.fromCharCode(97 + t), n = s + a, f.verbose("Creating category result id", n)) : (n = a, f.verbose("Creating result id", n)), n);
          }, results: function results() {
            0 === k.length && (k = e("<div />").addClass(v.results).appendTo(x));
          } }, inject: { result: function result(e, t, s) {
            f.verbose("Injecting result into results");var n = s !== r ? k.children().eq(s).children(b.result).eq(t) : k.children(b.result).eq(t);f.verbose("Injecting results metadata", n), n.data(h.result, e);
          }, id: function id(t) {
            f.debug("Injecting unique ids into results");var s = 0,
                n = 0;return ("category" === p.type ? e.each(t, function (t, a) {
              n = 0, e.each(a.results, function (e, t) {
                var i = a.results[e];i.id === r && (i.id = f.create.id(n, s)), f.inject.result(i, n, s), n++;
              }), s++;
            }) : e.each(t, function (e, s) {
              var a = t[e];a.id === r && (a.id = f.create.id(n)), f.inject.result(a, n), n++;
            }), t);
          } }, save: { results: function results(e) {
            f.verbose("Saving current search results to metadata", e), x.data(h.results, e);
          } }, write: { cache: function cache(e, t) {
            var s = x.data(h.cache) !== r ? x.data(h.cache) : {};p.cache && (f.verbose("Writing generated html to cache", e, t), s[e] = t, x.data(h.cache, s));
          } }, addResults: function addResults(t) {
          return e.isFunction(p.onResultsAdd) && p.onResultsAdd.call(k, t) === !1 ? (f.debug("onResultsAdd callback cancelled default action"), !1) : (k.html(t), void f.showResults());
        }, showResults: function showResults() {
          f.is.visible() || !f.is.focused() || f.is.empty() || (f.can.transition() ? (f.debug("Showing results with css animations"), k.transition({ animation: p.transition + " in", debug: p.debug, verbose: p.verbose, duration: p.duration, queue: !0 })) : (f.debug("Showing results with javascript"), k.stop().fadeIn(p.duration, p.easing)), p.onResultsOpen.call(k));
        }, hideResults: function hideResults() {
          f.is.visible() && (f.can.transition() ? (f.debug("Hiding results with css animations"), k.transition({ animation: p.transition + " out", debug: p.debug, verbose: p.verbose, duration: p.duration, queue: !0 })) : (f.debug("Hiding results with javascript"), k.stop().fadeOut(p.duration, p.easing)), p.onResultsClose.call(k));
        }, generateResults: function generateResults(t) {
          f.debug("Generating html from response", t);var s = p.templates[p.type],
              r = e.isPlainObject(t.results) && !e.isEmptyObject(t.results),
              n = e.isArray(t.results) && t.results.length > 0,
              a = "";return (r || n ? (p.maxResults > 0 && (r ? "standard" == p.type && f.error(y.maxResults) : t.results = t.results.slice(0, p.maxResults)), e.isFunction(s) ? a = s(t) : f.error(y.noTemplate, !1)) : a = f.displayMessage(y.noResults, "empty"), p.onResults.call(A, t), a);
        }, displayMessage: function displayMessage(e, t) {
          return (t = t || "standard", f.debug("Displaying message", e, t), f.addResults(p.templates.message(e, t)), p.templates.message(e, t));
        }, setting: function setting(t, s) {
          if (e.isPlainObject(t)) e.extend(!0, p, t);else {
            if (s === r) return p[t];p[t] = s;
          }
        }, internal: function internal(t, s) {
          if (e.isPlainObject(t)) e.extend(!0, f, t);else {
            if (s === r) return f[t];f[t] = s;
          }
        }, debug: function debug() {
          p.debug && (p.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, p.name + ":"), f.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          p.verbose && p.debug && (p.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, p.name + ":"), f.verbose.apply(console, arguments)));
        }, error: function error() {
          f.error = Function.prototype.bind.call(console.error, console, p.name + ":"), f.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, s, r;p.performance && (t = new Date().getTime(), r = o || t, s = t - r, o = t, u.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: A, "Execution Time": s })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 500);
          }, display: function display() {
            var t = p.name + ":",
                s = 0;o = !1, clearTimeout(f.performance.timer), e.each(u, function (e, t) {
              s += t["Execution Time"];
            }), t += " " + s + "ms", c && (t += " '" + c + "'"), i.length > 1 && (t += " (" + i.length + ")"), (console.group !== r || console.table !== r) && u.length > 0 && (console.groupCollapsed(t), console.table ? console.table(u) : e.each(u, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), u = [];
          } }, invoke: function invoke(t, s, n) {
          var i,
              c,
              o,
              u = E;return (s = s || g, n = A || n, "string" == typeof t && u !== r && (t = t.split(/[\. ]/), i = t.length - 1, e.each(t, function (s, n) {
            var a = s != i ? n + t[s + 1].charAt(0).toUpperCase() + t[s + 1].slice(1) : t;if (e.isPlainObject(u[a]) && s != i) u = u[a];else {
              if (u[a] !== r) return (c = u[a], !1);if (!e.isPlainObject(u[n]) || s == i) return u[n] !== r ? (c = u[n], !1) : !1;u = u[n];
            }
          })), e.isFunction(c) ? o = c.apply(n, s) : c !== r && (o = c), e.isArray(a) ? a.push(o) : a !== r ? a = [a, o] : o !== r && (a = o), c);
        } }, d ? (E === r && f.initialize(), f.invoke(l)) : (E !== r && E.invoke("destroy"), f.initialize());
    }), a !== r ? a : this);
  }, e.fn.search.settings = { name: "Search", namespace: "search", debug: !1, verbose: !1, performance: !0, type: "standard", minCharacters: 1, apiSettings: !1, source: !1, searchFields: ["title", "description"], searchFullText: !0, automatic: !0, hideDelay: 0, searchDelay: 200, maxResults: 7, cache: !0, transition: "scale", duration: 200, easing: "easeOutExpo", onSelect: !1, onResultsAdd: !1, onSearchQuery: function onSearchQuery() {}, onResults: function onResults(e) {}, onResultsOpen: function onResultsOpen() {}, onResultsClose: function onResultsClose() {}, className: { active: "active", empty: "empty", focus: "focus", loading: "loading", results: "results", pressed: "down" }, error: { source: "Cannot search. No source used, and Semantic API module was not included", noResults: "Your search returned no results", logging: "Error in debug logging, exiting.", noEndpoint: "No search endpoint was specified", noTemplate: "A valid template name was not specified.", serverError: "There was an issue querying the server.", maxResults: "Results must be an array to use maxResults setting", method: "The method you called is not defined." }, metadata: { cache: "cache", results: "results", result: "result" }, regExp: { escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, beginsWith: "(?:s|^)" }, selector: { prompt: ".prompt", searchButton: ".search.button", results: ".results", category: ".category", result: ".result", title: ".title, .name" }, templates: { escape: function escape(e) {
        var t = /[&<>"'`]/g,
            s = /[&<>"'`]/,
            r = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;", "`": "&#x60;" },
            n = function n(e) {
          return r[e];
        };return s.test(e) ? e.replace(t, n) : e;
      }, message: function message(e, t) {
        var s = "";return (e !== r && t !== r && (s += "<div class=\"message " + t + "\">", s += "empty" == t ? "<div class=\"header\">No Results</div class=\"header\"><div class=\"description\">" + e + "</div class=\"description\">" : " <div class=\"description\">" + e + "</div>", s += "</div>"), s);
      }, category: function category(t) {
        var s = "",
            n = e.fn.search.settings.templates.escape;return t.results !== r ? (e.each(t.results, function (t, a) {
          a.results !== r && a.results.length > 0 && (s += "<div class=\"category\"><div class=\"name\">" + a.name + "</div>", e.each(a.results, function (e, t) {
            s += "<div class=\"result\">", t.url && (s += "<a href=\"" + t.url + "\"></a>"), t.image !== r && (t.image = n(t.image), s += "<div class=\"image\"> <img src=\"" + t.image + "\" alt=\"\"></div>"), s += "<div class=\"content\">", t.price !== r && (t.price = n(t.price), s += "<div class=\"price\">" + t.price + "</div>"), t.title !== r && (t.title = n(t.title), s += "<div class=\"title\">" + t.title + "</div>"), t.description !== r && (s += "<div class=\"description\">" + t.description + "</div>"), s += "</div></div>";
          }), s += "</div>");
        }), t.action && (s += "<a href=\"" + t.action.url + "\" class=\"action\">" + t.action.text + "</a>"), s) : !1;
      }, standard: function standard(t) {
        var s = "";return t.results !== r ? (e.each(t.results, function (e, t) {
          s += t.url ? "<a class=\"result\" href=\"" + t.url + "\">" : "<a class=\"result\">", t.image !== r && (s += "<div class=\"image\"> <img src=\"" + t.image + "\"></div>"), s += "<div class=\"content\">", t.price !== r && (s += "<div class=\"price\">" + t.price + "</div>"), t.title !== r && (s += "<div class=\"title\">" + t.title + "</div>"), t.description !== r && (s += "<div class=\"description\">" + t.description + "</div>"), s += "</div>", s += "</a>";
        }), t.action && (s += "<a href=\"" + t.action.url + "\" class=\"action\">" + t.action.text + "</a>"), s) : !1;
      } } };
})(jQuery, window, document);
});

require.register("web/static/css/components/shape", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.shape = function (parameters) {
    var $allModules = $(this),
        $body = $('body'),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var moduleSelector = $allModules.selector || '',
          settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.shape.settings, parameters) : $.extend({}, $.fn.shape.settings),

      // internal aliases
      namespace = settings.namespace,
          selector = settings.selector,
          error = settings.error,
          className = settings.className,

      // define namespaces for modules
      eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,

      // selector cache
      $module = $(this),
          $sides = $module.find(selector.sides),
          $side = $module.find(selector.side),

      // private variables
      nextIndex = false,
          $activeSide,
          $nextSide,

      // standard module
      element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides = $(this).find(selector.shape);
          $side = $(this).find(selector.side);
        },

        repaint: function repaint() {
          module.verbose('Forcing repaint event');
          var shape = $sides[0] || document.createElement('div'),
              fakeAssignment = shape.offsetWidth;
        },

        animate: function animate(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function (event) {
            module.verbose('Executing animation callback');
            if (event !== undefined) {
              event.stopPropagation();
            }
            module.reset();
            module.set.active();
          };
          settings.beforeChange.call($nextSide[0]);
          if (module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module.addClass(className.animating);
            $sides.css(propertyObject).one(module.get.transitionEvent(), callback);
            module.set.duration(settings.duration);
            requestAnimationFrame(function () {
              $module.addClass(className.animating);
              $activeSide.addClass(className.hidden);
            });
          } else {
            callback();
          }
        },

        queue: function queue(method) {
          module.debug('Queueing animation of', method);
          $sides.one(module.get.transitionEvent(), function () {
            module.debug('Executing queued animation');
            setTimeout(function () {
              $module.shape(method);
            }, 0);
          });
        },

        reset: function reset() {
          module.verbose('Animating states reset');
          $module.removeClass(className.animating).attr('style', '').removeAttr('style');
          // removeAttr style does not consistently work in safari
          $sides.attr('style', '').removeAttr('style');
          $side.attr('style', '').removeAttr('style').removeClass(className.hidden);
          $nextSide.removeClass(className.animating).attr('style', '').removeAttr('style');
        },

        is: {
          complete: function complete() {
            return $side.filter('.' + className.active)[0] == $nextSide[0];
          },
          animating: function animating() {
            return $module.hasClass(className.animating);
          }
        },

        set: {

          defaultSide: function defaultSide() {
            $activeSide = $module.find('.' + settings.className.active);
            $nextSide = $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
          },

          duration: function duration(_duration) {
            _duration = _duration || settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            module.verbose('Setting animation duration', _duration);
            if (settings.duration || settings.duration === 0) {
              $sides.add($side).css({
                '-webkit-transition-duration': _duration,
                '-moz-transition-duration': _duration,
                '-ms-transition-duration': _duration,
                '-o-transition-duration': _duration,
                'transition-duration': _duration
              });
            }
          },

          currentStageSize: function currentStageSize() {
            var $activeSide = $module.find('.' + settings.className.active),
                width = $activeSide.outerWidth(true),
                height = $activeSide.outerHeight(true);
            $module.css({
              width: width,
              height: height
            });
          },

          stageSize: function stageSize() {
            var $clone = $module.clone().addClass(className.loading),
                $activeSide = $clone.find('.' + settings.className.active),
                $nextSide = nextIndex ? $clone.find(selector.side).eq(nextIndex) : $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $clone.find(selector.side).first(),
                newSize = {};
            module.set.currentStageSize();
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            newSize = {
              width: $nextSide.outerWidth(true),
              height: $nextSide.outerHeight(true)
            };
            $clone.remove();
            $module.css(newSize);
            module.verbose('Resizing stage to fit new content', newSize);
          },

          nextSide: function nextSide(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if ($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
            }
            module.verbose('Next side manually set to', $nextSide);
          },

          active: function active() {
            module.verbose('Setting new side to active', $nextSide);
            $side.removeClass(className.active);
            $nextSide.addClass(className.active);
            settings.onChange.call($nextSide[0]);
            module.set.defaultSide();
          }
        },

        flip: {

          up: function up() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping up', $nextSide);
              module.set.stageSize();
              module.stage.above();
              module.animate(module.get.transform.up());
            } else {
              module.queue('flip up');
            }
          },

          down: function down() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping down', $nextSide);
              module.set.stageSize();
              module.stage.below();
              module.animate(module.get.transform.down());
            } else {
              module.queue('flip down');
            }
          },

          left: function left() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping left', $nextSide);
              module.set.stageSize();
              module.stage.left();
              module.animate(module.get.transform.left());
            } else {
              module.queue('flip left');
            }
          },

          right: function right() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping right', $nextSide);
              module.set.stageSize();
              module.stage.right();
              module.animate(module.get.transform.right());
            } else {
              module.queue('flip right');
            }
          },

          over: function over() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping over', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.over());
            } else {
              module.queue('flip over');
            }
          },

          back: function back() {
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
            }
            if (!module.is.animating()) {
              module.debug('Flipping back', $nextSide);
              module.set.stageSize();
              module.stage.behind();
              module.animate(module.get.transform.back());
            } else {
              module.queue('flip back');
            }
          }

        },

        get: {

          transform: {
            up: function up() {
              var translate = {
                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                z: -($activeSide.outerHeight(true) / 2)
              };
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(-90deg)'
              };
            },

            down: function down() {
              var translate = {
                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                z: -($activeSide.outerHeight(true) / 2)
              };
              return {
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(90deg)'
              };
            },

            left: function left() {
              var translate = {
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                z: -($activeSide.outerWidth(true) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'
              };
            },

            right: function right() {
              var translate = {
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),
                z: -($activeSide.outerWidth(true) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'
              };
            },

            over: function over() {
              var translate = {
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
              };
            },

            back: function back() {
              var translate = {
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
              };
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
              };
            }
          },

          transitionEvent: function transitionEvent() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          },

          nextSide: function nextSide() {
            return $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
          }

        },

        stage: {

          above: function above() {
            var box = {
              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,
              depth: {
                active: $nextSide.outerHeight(true) / 2,
                next: $activeSide.outerHeight(true) / 2
              }
            };
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $sides.css({
              'transform': 'translateZ(-' + box.depth.active + 'px)'
            });
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'top': box.origin + 'px',
              'transform': 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          below: function below() {
            var box = {
              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,
              depth: {
                active: $nextSide.outerHeight(true) / 2,
                next: $activeSide.outerHeight(true) / 2
              }
            };
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $sides.css({
              'transform': 'translateZ(-' + box.depth.active + 'px)'
            });
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'top': box.origin + 'px',
              'transform': 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          left: function left() {
            var height = {
              active: $activeSide.outerWidth(true),
              next: $nextSide.outerWidth(true)
            },
                box = {
              origin: (height.active - height.next) / 2,
              depth: {
                active: height.next / 2,
                next: height.active / 2
              }
            };
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides.css({
              'transform': 'translateZ(-' + box.depth.active + 'px)'
            });
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'left': box.origin + 'px',
              'transform': 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          right: function right() {
            var height = {
              active: $activeSide.outerWidth(true),
              next: $nextSide.outerWidth(true)
            },
                box = {
              origin: (height.active - height.next) / 2,
              depth: {
                active: height.next / 2,
                next: height.active / 2
              }
            };
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $sides.css({
              'transform': 'translateZ(-' + box.depth.active + 'px)'
            });
            $activeSide.css({
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'
            });
            $nextSide.addClass(className.animating).css({
              'left': box.origin + 'px',
              'transform': 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'
            });
          },

          behind: function behind() {
            var height = {
              active: $activeSide.outerWidth(true),
              next: $nextSide.outerWidth(true)
            },
                box = {
              origin: (height.active - height.next) / 2,
              depth: {
                active: height.next / 2,
                next: height.active / 2
              }
            };
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide.css({
              'transform': 'rotateY(0deg)'
            });
            $nextSide.addClass(className.animating).css({
              'left': box.origin + 'px',
              'transform': 'rotateY(-180deg)'
            });
          }
        },
        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.shape.settings = {

    // module info
    name: 'Shape',

    // debug content outputted to console
    debug: false,

    // verbose debug output
    verbose: false,

    // performance data output
    performance: true,

    // event namespace
    namespace: 'shape',

    // callback occurs on side change
    beforeChange: function beforeChange() {},
    onChange: function onChange() {},

    // allow animation to same side
    allowRepeats: false,

    // animation duration
    duration: false,

    // possible errors
    error: {
      side: 'You tried to switch to a side that does not exist.',
      method: 'The method you called is not defined'
    },

    // classnames used
    className: {
      animating: 'animating',
      hidden: 'hidden',
      loading: 'loading',
      active: 'active'
    },

    // selectors used
    selector: {
      sides: '.sides',
      side: '.side'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/shape.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Shape
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, i, n) {
  "use strict";e.fn.shape = function (a) {
    var o,
        r = e(this),
        s = (e("body"), new Date().getTime()),
        d = [],
        l = arguments[0],
        u = "string" == typeof l,
        c = [].slice.call(arguments, 1),
        g = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (r.each(function () {
      var t,
          f,
          m,
          p = r.selector || "",
          v = e.isPlainObject(a) ? e.extend(!0, {}, e.fn.shape.settings, a) : e.extend({}, e.fn.shape.settings),
          h = v.namespace,
          b = v.selector,
          x = v.error,
          y = v.className,
          S = "." + h,
          w = "module-" + h,
          z = e(this),
          C = z.find(b.sides),
          W = z.find(b.side),
          H = !1,
          T = this,
          Z = z.data(w);m = { initialize: function initialize() {
          m.verbose("Initializing module for", T), m.set.defaultSide(), m.instantiate();
        }, instantiate: function instantiate() {
          m.verbose("Storing instance of module", m), Z = m, z.data(w, Z);
        }, destroy: function destroy() {
          m.verbose("Destroying previous module for", T), z.removeData(w).off(S);
        }, refresh: function refresh() {
          m.verbose("Refreshing selector cache for", T), z = e(T), C = e(this).find(b.shape), W = e(this).find(b.side);
        }, repaint: function repaint() {
          m.verbose("Forcing repaint event");{
            var e = C[0] || i.createElement("div");e.offsetWidth;
          }
        }, animate: function animate(e, i) {
          m.verbose("Animating box with properties", e), i = i || function (e) {
            m.verbose("Executing animation callback"), e !== n && e.stopPropagation(), m.reset(), m.set.active();
          }, v.beforeChange.call(f[0]), m.get.transitionEvent() ? (m.verbose("Starting CSS animation"), z.addClass(y.animating), C.css(e).one(m.get.transitionEvent(), i), m.set.duration(v.duration), g(function () {
            z.addClass(y.animating), t.addClass(y.hidden);
          })) : i();
        }, queue: function queue(e) {
          m.debug("Queueing animation of", e), C.one(m.get.transitionEvent(), function () {
            m.debug("Executing queued animation"), setTimeout(function () {
              z.shape(e);
            }, 0);
          });
        }, reset: function reset() {
          m.verbose("Animating states reset"), z.removeClass(y.animating).attr("style", "").removeAttr("style"), C.attr("style", "").removeAttr("style"), W.attr("style", "").removeAttr("style").removeClass(y.hidden), f.removeClass(y.animating).attr("style", "").removeAttr("style");
        }, is: { complete: function complete() {
            return W.filter("." + y.active)[0] == f[0];
          }, animating: function animating() {
            return z.hasClass(y.animating);
          } }, set: { defaultSide: function defaultSide() {
            t = z.find("." + v.className.active), f = t.next(b.side).length > 0 ? t.next(b.side) : z.find(b.side).first(), H = !1, m.verbose("Active side set to", t), m.verbose("Next side set to", f);
          }, duration: function duration(e) {
            e = e || v.duration, e = "number" == typeof e ? e + "ms" : e, m.verbose("Setting animation duration", e), (v.duration || 0 === v.duration) && C.add(W).css({ "-webkit-transition-duration": e, "-moz-transition-duration": e, "-ms-transition-duration": e, "-o-transition-duration": e, "transition-duration": e });
          }, currentStageSize: function currentStageSize() {
            var e = z.find("." + v.className.active),
                t = e.outerWidth(!0),
                i = e.outerHeight(!0);z.css({ width: t, height: i });
          }, stageSize: function stageSize() {
            var e = z.clone().addClass(y.loading),
                t = e.find("." + v.className.active),
                i = H ? e.find(b.side).eq(H) : t.next(b.side).length > 0 ? t.next(b.side) : e.find(b.side).first(),
                n = {};m.set.currentStageSize(), t.removeClass(y.active), i.addClass(y.active), e.insertAfter(z), n = { width: i.outerWidth(!0), height: i.outerHeight(!0) }, e.remove(), z.css(n), m.verbose("Resizing stage to fit new content", n);
          }, nextSide: function nextSide(e) {
            H = e, f = W.filter(e), H = W.index(f), 0 === f.length && (m.set.defaultSide(), m.error(x.side)), m.verbose("Next side manually set to", f);
          }, active: function active() {
            m.verbose("Setting new side to active", f), W.removeClass(y.active), f.addClass(y.active), v.onChange.call(f[0]), m.set.defaultSide();
          } }, flip: { up: function up() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip up") : (m.debug("Flipping up", f), m.set.stageSize(), m.stage.above(), m.animate(m.get.transform.up()))) : void m.debug("Side already visible", f);
          }, down: function down() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip down") : (m.debug("Flipping down", f), m.set.stageSize(), m.stage.below(), m.animate(m.get.transform.down()))) : void m.debug("Side already visible", f);
          }, left: function left() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip left") : (m.debug("Flipping left", f), m.set.stageSize(), m.stage.left(), m.animate(m.get.transform.left()))) : void m.debug("Side already visible", f);
          }, right: function right() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip right") : (m.debug("Flipping right", f), m.set.stageSize(), m.stage.right(), m.animate(m.get.transform.right()))) : void m.debug("Side already visible", f);
          }, over: function over() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip over") : (m.debug("Flipping over", f), m.set.stageSize(), m.stage.behind(), m.animate(m.get.transform.over()))) : void m.debug("Side already visible", f);
          }, back: function back() {
            return !m.is.complete() || m.is.animating() || v.allowRepeats ? void (m.is.animating() ? m.queue("flip back") : (m.debug("Flipping back", f), m.set.stageSize(), m.stage.behind(), m.animate(m.get.transform.back()))) : void m.debug("Side already visible", f);
          } }, get: { transform: { up: function up() {
              var e = { y: -((t.outerHeight(!0) - f.outerHeight(!0)) / 2), z: -(t.outerHeight(!0) / 2) };return { transform: "translateY(" + e.y + "px) translateZ(" + e.z + "px) rotateX(-90deg)" };
            }, down: function down() {
              var e = { y: -((t.outerHeight(!0) - f.outerHeight(!0)) / 2), z: -(t.outerHeight(!0) / 2) };return { transform: "translateY(" + e.y + "px) translateZ(" + e.z + "px) rotateX(90deg)" };
            }, left: function left() {
              var e = { x: -((t.outerWidth(!0) - f.outerWidth(!0)) / 2), z: -(t.outerWidth(!0) / 2) };return { transform: "translateX(" + e.x + "px) translateZ(" + e.z + "px) rotateY(90deg)" };
            }, right: function right() {
              var e = { x: -((t.outerWidth(!0) - f.outerWidth(!0)) / 2), z: -(t.outerWidth(!0) / 2) };return { transform: "translateX(" + e.x + "px) translateZ(" + e.z + "px) rotateY(-90deg)" };
            }, over: function over() {
              var e = { x: -((t.outerWidth(!0) - f.outerWidth(!0)) / 2) };return { transform: "translateX(" + e.x + "px) rotateY(180deg)" };
            }, back: function back() {
              var e = { x: -((t.outerWidth(!0) - f.outerWidth(!0)) / 2) };return { transform: "translateX(" + e.x + "px) rotateY(-180deg)" };
            } }, transitionEvent: function transitionEvent() {
            var e,
                t = i.createElement("element"),
                a = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in a) if (t.style[e] !== n) return a[e];
          }, nextSide: function nextSide() {
            return t.next(b.side).length > 0 ? t.next(b.side) : z.find(b.side).first();
          } }, stage: { above: function above() {
            var e = { origin: (t.outerHeight(!0) - f.outerHeight(!0)) / 2, depth: { active: f.outerHeight(!0) / 2, next: t.outerHeight(!0) / 2 } };m.verbose("Setting the initial animation position as above", f, e), C.css({ transform: "translateZ(-" + e.depth.active + "px)" }), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ top: e.origin + "px", transform: "rotateX(90deg) translateZ(" + e.depth.next + "px)" });
          }, below: function below() {
            var e = { origin: (t.outerHeight(!0) - f.outerHeight(!0)) / 2, depth: { active: f.outerHeight(!0) / 2, next: t.outerHeight(!0) / 2 } };m.verbose("Setting the initial animation position as below", f, e), C.css({ transform: "translateZ(-" + e.depth.active + "px)" }), t.css({ transform: "rotateY(0deg) translateZ(" + e.depth.active + "px)" }), f.addClass(y.animating).css({ top: e.origin + "px", transform: "rotateX(-90deg) translateZ(" + e.depth.next + "px)" });
          }, left: function left() {
            var e = { active: t.outerWidth(!0), next: f.outerWidth(!0) },
                i = { origin: (e.active - e.next) / 2, depth: { active: e.next / 2, next: e.active / 2 } };m.verbose("Setting the initial animation position as left", f, i), C.css({ transform: "translateZ(-" + i.depth.active + "px)" }), t.css({ transform: "rotateY(0deg) translateZ(" + i.depth.active + "px)" }), f.addClass(y.animating).css({ left: i.origin + "px", transform: "rotateY(-90deg) translateZ(" + i.depth.next + "px)" });
          }, right: function right() {
            var e = { active: t.outerWidth(!0), next: f.outerWidth(!0) },
                i = { origin: (e.active - e.next) / 2, depth: { active: e.next / 2, next: e.active / 2 } };m.verbose("Setting the initial animation position as left", f, i), C.css({ transform: "translateZ(-" + i.depth.active + "px)" }), t.css({ transform: "rotateY(0deg) translateZ(" + i.depth.active + "px)" }), f.addClass(y.animating).css({ left: i.origin + "px", transform: "rotateY(90deg) translateZ(" + i.depth.next + "px)" });
          }, behind: function behind() {
            var e = { active: t.outerWidth(!0), next: f.outerWidth(!0) },
                i = { origin: (e.active - e.next) / 2, depth: { active: e.next / 2, next: e.active / 2 } };m.verbose("Setting the initial animation position as behind", f, i), t.css({ transform: "rotateY(0deg)" }), f.addClass(y.animating).css({ left: i.origin + "px", transform: "rotateY(-180deg)" });
          } }, setting: function setting(t, i) {
          if ((m.debug("Changing setting", t, i), e.isPlainObject(t))) e.extend(!0, v, t);else {
            if (i === n) return v[t];v[t] = i;
          }
        }, internal: function internal(t, i) {
          if (e.isPlainObject(t)) e.extend(!0, m, t);else {
            if (i === n) return m[t];m[t] = i;
          }
        }, debug: function debug() {
          v.debug && (v.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, v.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          v.verbose && v.debug && (v.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, v.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, v.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, i, n;v.performance && (t = new Date().getTime(), n = s || t, i = t - n, s = t, d.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": i })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 500);
          }, display: function display() {
            var t = v.name + ":",
                i = 0;s = !1, clearTimeout(m.performance.timer), e.each(d, function (e, t) {
              i += t["Execution Time"];
            }), t += " " + i + "ms", p && (t += " '" + p + "'"), r.length > 1 && (t += " (" + r.length + ")"), (console.group !== n || console.table !== n) && d.length > 0 && (console.groupCollapsed(t), console.table ? console.table(d) : e.each(d, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), d = [];
          } }, invoke: function invoke(t, i, a) {
          var r,
              s,
              d,
              l = Z;return (i = i || c, a = T || a, "string" == typeof t && l !== n && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (i, a) {
            var o = i != r ? a + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;if (e.isPlainObject(l[o]) && i != r) l = l[o];else {
              if (l[o] !== n) return (s = l[o], !1);if (!e.isPlainObject(l[a]) || i == r) return l[a] !== n ? (s = l[a], !1) : !1;l = l[a];
            }
          })), e.isFunction(s) ? d = s.apply(a, i) : s !== n && (d = s), e.isArray(o) ? o.push(d) : o !== n ? o = [o, d] : d !== n && (o = d), s);
        } }, u ? (Z === n && m.initialize(), m.invoke(l)) : (Z !== n && Z.invoke("destroy"), m.initialize());
    }), o !== n ? o : this);
  }, e.fn.shape.settings = { name: "Shape", debug: !1, verbose: !1, performance: !0, namespace: "shape", beforeChange: function beforeChange() {}, onChange: function onChange() {}, allowRepeats: !1, duration: !1, error: { side: "You tried to switch to a side that does not exist.", method: "The method you called is not defined" }, className: { animating: "animating", hidden: "hidden", loading: "loading", active: "active" }, selector: { sides: ".sides", side: ".side" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/sidebar", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.sidebar = function (parameters) {
    var $allModules = $(this),
        $window = $(window),
        $document = $(document),
        $html = $('html'),
        $head = $('head'),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sidebar.settings, parameters) : $.extend({}, $.fn.sidebar.settings),
          selector = settings.selector,
          className = settings.className,
          namespace = settings.namespace,
          regExp = settings.regExp,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $context = $(settings.context),
          $sidebars = $module.children(selector.sidebar),
          $fixed = $context.children(selector.fixed),
          $pusher = $context.children(selector.pusher),
          $style,
          element = this,
          instance = $module.data(moduleNamespace),
          elementNamespace,
          _id,
          currentScroll,
          transitionEvent,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          if (module.is.ios()) {
            module.set.ios();
          }

          // avoids locking rendering if initialized in onReady
          if (settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
          } else {
            module.setup.layout();
          }

          requestAnimationFrame(function () {
            module.setup.cache();
          });

          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        create: {
          id: function id() {
            _id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + _id;
            module.verbose('Creating unique id for element', _id);
          }
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', $module);
          module.remove.direction();
          $module.off(eventNamespace).removeData(moduleNamespace);
          if (module.is.ios()) {
            module.remove.ios();
          }
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
        },

        event: {
          clickaway: function clickaway(event) {
            var clickedInPusher = $pusher.find(event.target).length > 0 || $pusher.is(event.target),
                clickedContext = $context.is(event.target);
            if (clickedInPusher) {
              module.verbose('User clicked on dimmed page');
              module.hide();
            }
            if (clickedContext) {
              module.verbose('User clicked on dimmable context (scaled out page)');
              module.hide();
            }
          },
          touch: function touch(event) {},
          containScroll: function containScroll(event) {
            if (element.scrollTop <= 0) {
              element.scrollTop = 1;
            }
            if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
            }
          },
          scroll: function scroll(event) {
            if ($(event.target).closest(selector.sidebar).length === 0) {
              event.preventDefault();
            }
          }
        },

        bind: {
          clickaway: function clickaway() {
            module.verbose('Adding clickaway events to context', $context);
            if (settings.closable) {
              $context.on('click' + elementNamespace, module.event.clickaway).on('touchend' + elementNamespace, module.event.clickaway);
            }
          },
          scrollLock: function scrollLock() {
            if (settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window.on('DOMMouseScroll' + elementNamespace, module.event.scroll);
            }
            module.verbose('Adding events to contain sidebar scroll');
            $document.on('touchmove' + elementNamespace, module.event.touch);
            $module.on('scroll' + eventNamespace, module.event.containScroll);
          }
        },
        unbind: {
          clickaway: function clickaway() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
          },
          scrollLock: function scrollLock() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
          }
        },

        add: {
          inlineCSS: function inlineCSS() {
            var width = module.cache.width || $module.outerWidth(),
                height = module.cache.height || $module.outerHeight(),
                isRTL = module.is.rtl(),
                direction = module.get.direction(),
                distance = {
              left: width,
              right: -width,
              top: height,
              bottom: -height
            },
                style;

            if (isRTL) {
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
            }

            style = '<style>';

            if (direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
            } else if (direction === 'top' || direction == 'bottom') {
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
            }

            /* IE is only browser not to create context with transforms */
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
            if (module.is.ie()) {
              if (direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
              } else if (direction === 'top' || direction == 'bottom') {
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
              }
              /* opposite sides visible forces content overlay */
              style += '' + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,' + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0px, 0, 0);' + '           transform: translate3d(0px, 0, 0);' + ' }';
            }
            style += '</style>';
            $style = $(style).appendTo($head);
            module.debug('Adding sizing css to head', $style);
          }
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $context = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher = $context.children(selector.pusher);
          $fixed = $context.children(selector.fixed);
          module.clear.cache();
        },

        refreshSidebars: function refreshSidebars() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
        },

        repaint: function repaint() {
          module.verbose('Forcing repaint event');
          element.style.display = 'none';
          var ignored = element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display = '';
        },

        setup: {
          cache: function cache() {
            module.cache = {
              width: $module.outerWidth(),
              height: $module.outerHeight(),
              rtl: $module.css('direction') == 'rtl'
            };
          },
          layout: function layout() {
            if ($context.children(selector.pusher).length === 0) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context.children().not(selector.omitted).not($sidebars).wrapAll($pusher);
              module.refresh();
            }
            if ($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
            }
            module.clear.cache();
            module.set.pushable();
            module.set.direction();
          }
        },

        attachEvents: function attachEvents(selector, event) {
          var $toggle = $(selector);
          event = $.isFunction(module[event]) ? module[event] : module.toggle;
          if ($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle.on('click' + eventNamespace, event);
          } else {
            module.error(error.notFound, selector);
          }
        },

        show: function show(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.hidden()) {
            module.refreshSidebars();
            if (settings.overlay) {
              module.error(error.overlay);
              settings.transition = 'overlay';
            }
            module.refresh();
            if (module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if (settings.exclusive) {
                // if not overlay queue animation after hide
                if (settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
                } else {
                  module.hideOthers();
                }
              } else {
                settings.transition = 'overlay';
              }
            }
            module.pushPage(function () {
              callback.call(element);
              settings.onShow.call(element);
            });
            settings.onChange.call(element);
            settings.onVisible.call(element);
          } else {
            module.debug('Sidebar is already visible');
          }
        },

        hide: function hide(callback) {
          callback = $.isFunction(callback) ? callback : function () {};
          if (module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            module.pullPage(function () {
              callback.call(element);
              settings.onHidden.call(element);
            });
            settings.onChange.call(element);
            settings.onHide.call(element);
          }
        },

        othersAnimating: function othersAnimating() {
          return $sidebars.not($module).filter('.' + className.animating).length > 0;
        },
        othersVisible: function othersVisible() {
          return $sidebars.not($module).filter('.' + className.visible).length > 0;
        },
        othersActive: function othersActive() {
          return module.othersVisible() || module.othersAnimating();
        },

        hideOthers: function hideOthers(callback) {
          var $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
              sidebarCount = $otherSidebars.length,
              callbackCount = 0;
          callback = callback || function () {};
          $otherSidebars.sidebar('hide', function () {
            callbackCount++;
            if (callbackCount == sidebarCount) {
              callback();
            }
          });
        },

        toggle: function toggle() {
          module.verbose('Determining toggled direction');
          if (module.is.hidden()) {
            module.show();
          } else {
            module.hide();
          }
        },

        pushPage: function pushPage(callback) {
          var transition = module.get.transition(),
              $transition = transition === 'overlay' || module.othersActive() ? $module : $pusher,
              animate,
              dim,
              transitionEnd;
          callback = $.isFunction(callback) ? callback : function () {};
          if (settings.transition == 'scale down') {
            module.scrollToTop();
          }
          module.set.transition(transition);
          module.repaint();
          animate = function () {
            module.bind.clickaway();
            module.add.inlineCSS();
            module.set.animating();
            module.set.visible();
          };
          dim = function () {
            module.set.dimmed();
          };
          transitionEnd = function (event) {
            if (event.target == $transition[0]) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
          if (settings.dimPage && !module.othersVisible()) {
            requestAnimationFrame(dim);
          }
        },

        pullPage: function pullPage(callback) {
          var transition = module.get.transition(),
              $transition = transition == 'overlay' || module.othersActive() ? $module : $pusher,
              animate,
              transitionEnd;
          callback = $.isFunction(callback) ? callback : function () {};
          module.verbose('Removing context push state', module.get.direction());

          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function () {
            module.set.transition(transition);
            module.set.animating();
            module.remove.visible();
            if (settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
            }
          };
          transitionEnd = function (event) {
            if (event.target == $transition[0]) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.inlineCSS();
              if (transition == 'scale down' || settings.returnScroll && module.is.mobile()) {
                module.scrollBack();
              }
              callback.call(element);
            }
          };
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
        },

        scrollToTop: function scrollToTop() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
        },

        scrollBack: function scrollBack() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
        },

        clear: {
          cache: function cache() {
            module.verbose('Clearing cached dimensions');
            module.cache = {};
          }
        },

        set: {

          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios
          ios: function ios() {
            $html.addClass(className.ios);
          },

          // container
          pushed: function pushed() {
            $context.addClass(className.pushed);
          },
          pushable: function pushable() {
            $context.addClass(className.pushable);
          },

          // pusher
          dimmed: function dimmed() {
            $pusher.addClass(className.dimmed);
          },

          // sidebar
          active: function active() {
            $module.addClass(className.active);
          },
          animating: function animating() {
            $module.addClass(className.animating);
          },
          transition: function transition(_transition) {
            _transition = _transition || module.get.transition();
            $module.addClass(_transition);
          },
          direction: function direction(_direction) {
            _direction = _direction || module.get.direction();
            $module.addClass(className[_direction]);
          },
          visible: function visible() {
            $module.addClass(className.visible);
          },
          overlay: function overlay() {
            $module.addClass(className.overlay);
          }
        },
        remove: {

          inlineCSS: function inlineCSS() {
            module.debug('Removing inline css styles', $style);
            if ($style && $style.length > 0) {
              $style.remove();
            }
          },

          // ios scroll on html not document
          ios: function ios() {
            $html.removeClass(className.ios);
          },

          // context
          pushed: function pushed() {
            $context.removeClass(className.pushed);
          },
          pushable: function pushable() {
            $context.removeClass(className.pushable);
          },

          // sidebar
          active: function active() {
            $module.removeClass(className.active);
          },
          animating: function animating() {
            $module.removeClass(className.animating);
          },
          transition: function transition(_transition2) {
            _transition2 = _transition2 || module.get.transition();
            $module.removeClass(_transition2);
          },
          direction: function direction(_direction2) {
            _direction2 = _direction2 || module.get.direction();
            $module.removeClass(className[_direction2]);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          overlay: function overlay() {
            $module.removeClass(className.overlay);
          }
        },

        get: {
          direction: function direction() {
            if ($module.hasClass(className.top)) {
              return className.top;
            } else if ($module.hasClass(className.right)) {
              return className.right;
            } else if ($module.hasClass(className.bottom)) {
              return className.bottom;
            }
            return className.left;
          },
          transition: function transition() {
            var direction = module.get.direction(),
                transition;
            transition = module.is.mobile() ? settings.mobileTransition == 'auto' ? settings.defaultTransition.mobile[direction] : settings.mobileTransition : settings.transition == 'auto' ? settings.defaultTransition.computer[direction] : settings.transition;
            module.verbose('Determined transition', transition);
            return transition;
          },
          transitionEvent: function transitionEvent() {
            var element = document.createElement('element'),
                transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            },
                transition;
            for (transition in transitions) {
              if (element.style[transition] !== undefined) {
                return transitions[transition];
              }
            }
          }
        },

        is: {

          ie: function ie() {
            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,
                isIE = ('ActiveXObject' in window);
            return isIE11 || isIE;
          },

          ios: function ios() {
            var userAgent = navigator.userAgent,
                isIOS = userAgent.match(regExp.ios),
                isMobileChrome = userAgent.match(regExp.mobileChrome);
            if (isIOS && !isMobileChrome) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
            } else {
              return false;
            }
          },
          mobile: function mobile() {
            var userAgent = navigator.userAgent,
                isMobile = userAgent.match(regExp.mobile);
            if (isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
            } else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
            }
          },
          hidden: function hidden() {
            return !module.is.visible();
          },
          visible: function visible() {
            return $module.hasClass(className.visible);
          },
          // alias
          open: function open() {
            return module.is.visible();
          },
          closed: function closed() {
            return module.is.hidden();
          },
          vertical: function vertical() {
            return $module.hasClass(className.top);
          },
          animating: function animating() {
            return $context.hasClass(className.animating);
          },
          rtl: function rtl() {
            if (module.cache.rtl === undefined) {
              module.cache.rtl = $module.css('direction') == 'rtl';
            }
            return module.cache.rtl;
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          module.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.sidebar.settings = {

    name: 'Sidebar',
    namespace: 'sidebar',

    debug: false,
    verbose: false,
    performance: true,

    transition: 'auto',
    mobileTransition: 'auto',

    defaultTransition: {
      computer: {
        left: 'uncover',
        right: 'uncover',
        top: 'overlay',
        bottom: 'overlay'
      },
      mobile: {
        left: 'uncover',
        right: 'uncover',
        top: 'overlay',
        bottom: 'overlay'
      }
    },

    context: 'body',
    exclusive: false,
    closable: true,
    dimPage: true,
    scrollLock: false,
    returnScroll: false,
    delaySetup: false,

    duration: 500,

    onChange: function onChange() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    onHidden: function onHidden() {},
    onVisible: function onVisible() {},

    className: {
      active: 'active',
      animating: 'animating',
      dimmed: 'dimmed',
      ios: 'ios',
      pushable: 'pushable',
      pushed: 'pushed',
      right: 'right',
      top: 'top',
      left: 'left',
      bottom: 'bottom',
      visible: 'visible'
    },

    selector: {
      fixed: '.fixed',
      omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
      pusher: '.pusher',
      sidebar: '.ui.sidebar'
    },

    regExp: {
      ios: /(iPad|iPhone|iPod)/g,
      mobileChrome: /(CriOS)/g,
      mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
    },

    error: {
      method: 'The method you called is not defined.',
      pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
      movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
      overlay: 'The overlay setting is no longer supported, use animation: overlay',
      notFound: 'There were no elements that matched the specified selector'
    }

  };
})(jQuery, window, document);

//event.stopPropagation();
});

require.register("web/static/css/components/sidebar.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Sidebar
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, i, n, t) {
  "use strict";e.fn.sidebar = function (o) {
    var r,
        s = e(this),
        a = e(i),
        l = e(n),
        c = e("html"),
        u = e("head"),
        d = s.selector || "",
        f = new Date().getTime(),
        b = [],
        m = arguments[0],
        h = "string" == typeof m,
        g = [].slice.call(arguments, 1),
        v = i.requestAnimationFrame || i.mozRequestAnimationFrame || i.webkitRequestAnimationFrame || i.msRequestAnimationFrame || function (e) {
      setTimeout(e, 0);
    };return (s.each(function () {
      var s,
          p,
          y,
          C,
          k,
          w,
          T = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.sidebar.settings, o) : e.extend({}, e.fn.sidebar.settings),
          x = T.selector,
          S = T.className,
          A = T.namespace,
          F = T.regExp,
          O = T.error,
          P = "." + A,
          E = "module-" + A,
          H = e(this),
          D = e(T.context),
          R = H.children(x.sidebar),
          j = D.children(x.fixed),
          M = D.children(x.pusher),
          z = this,
          B = H.data(E);w = { initialize: function initialize() {
          w.debug("Initializing sidebar", o), w.create.id(), k = w.get.transitionEvent(), w.is.ios() && w.set.ios(), T.delaySetup ? v(w.setup.layout) : w.setup.layout(), v(function () {
            w.setup.cache();
          }), w.instantiate();
        }, instantiate: function instantiate() {
          w.verbose("Storing instance of module", w), B = w, H.data(E, w);
        }, create: { id: function id() {
            y = (Math.random().toString(16) + "000000000").substr(2, 8), p = "." + y, w.verbose("Creating unique id for element", y);
          } }, destroy: function destroy() {
          w.verbose("Destroying previous module for", H), w.remove.direction(), H.off(P).removeData(E), w.is.ios() && w.remove.ios(), D.off(p), a.off(p), l.off(p);
        }, event: { clickaway: function clickaway(e) {
            var i = M.find(e.target).length > 0 || M.is(e.target),
                n = D.is(e.target);i && (w.verbose("User clicked on dimmed page"), w.hide()), n && (w.verbose("User clicked on dimmable context (scaled out page)"), w.hide());
          }, touch: function touch(e) {}, containScroll: function containScroll(e) {
            z.scrollTop <= 0 && (z.scrollTop = 1), z.scrollTop + z.offsetHeight >= z.scrollHeight && (z.scrollTop = z.scrollHeight - z.offsetHeight - 1);
          }, scroll: function scroll(i) {
            0 === e(i.target).closest(x.sidebar).length && i.preventDefault();
          } }, bind: { clickaway: function clickaway() {
            w.verbose("Adding clickaway events to context", D), T.closable && D.on("click" + p, w.event.clickaway).on("touchend" + p, w.event.clickaway);
          }, scrollLock: function scrollLock() {
            T.scrollLock && (w.debug("Disabling page scroll"), a.on("DOMMouseScroll" + p, w.event.scroll)), w.verbose("Adding events to contain sidebar scroll"), l.on("touchmove" + p, w.event.touch), H.on("scroll" + P, w.event.containScroll);
          } }, unbind: { clickaway: function clickaway() {
            w.verbose("Removing clickaway events from context", D), D.off(p);
          }, scrollLock: function scrollLock() {
            w.verbose("Removing scroll lock from page"), l.off(p), a.off(p), H.off("scroll" + P);
          } }, add: { inlineCSS: function inlineCSS() {
            var i,
                n = w.cache.width || H.outerWidth(),
                t = w.cache.height || H.outerHeight(),
                o = w.is.rtl(),
                r = w.get.direction(),
                a = { left: n, right: -n, top: t, bottom: -t };o && (w.verbose("RTL detected, flipping widths"), a.left = -n, a.right = n), i = "<style>", "left" === r || "right" === r ? (w.debug("Adding CSS rules for animation distance", n), i += " .ui.visible." + r + ".sidebar ~ .fixed, .ui.visible." + r + ".sidebar ~ .pusher {   -webkit-transform: translate3d(" + a[r] + "px, 0, 0);           transform: translate3d(" + a[r] + "px, 0, 0); }") : ("top" === r || "bottom" == r) && (i += " .ui.visible." + r + ".sidebar ~ .fixed, .ui.visible." + r + ".sidebar ~ .pusher {   -webkit-transform: translate3d(0, " + a[r] + "px, 0);           transform: translate3d(0, " + a[r] + "px, 0); }"), w.is.ie() && ("left" === r || "right" === r ? (w.debug("Adding CSS rules for animation distance", n), i += " body.pushable > .ui.visible." + r + ".sidebar ~ .pusher:after {   -webkit-transform: translate3d(" + a[r] + "px, 0, 0);           transform: translate3d(" + a[r] + "px, 0, 0); }") : ("top" === r || "bottom" == r) && (i += " body.pushable > .ui.visible." + r + ".sidebar ~ .pusher:after {   -webkit-transform: translate3d(0, " + a[r] + "px, 0);           transform: translate3d(0, " + a[r] + "px, 0); }"), i += " body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after, body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {   -webkit-transform: translate3d(0px, 0, 0);           transform: translate3d(0px, 0, 0); }"), i += "</style>", s = e(i).appendTo(u), w.debug("Adding sizing css to head", s);
          } }, refresh: function refresh() {
          w.verbose("Refreshing selector cache"), D = e(T.context), R = D.children(x.sidebar), M = D.children(x.pusher), j = D.children(x.fixed), w.clear.cache();
        }, refreshSidebars: function refreshSidebars() {
          w.verbose("Refreshing other sidebars"), R = D.children(x.sidebar);
        }, repaint: function repaint() {
          w.verbose("Forcing repaint event"), z.style.display = "none";z.offsetHeight;z.scrollTop = z.scrollTop, z.style.display = "";
        }, setup: { cache: function cache() {
            w.cache = { width: H.outerWidth(), height: H.outerHeight(), rtl: "rtl" == H.css("direction") };
          }, layout: function layout() {
            0 === D.children(x.pusher).length && (w.debug("Adding wrapper element for sidebar"), w.error(O.pusher), M = e("<div class=\"pusher\" />"), D.children().not(x.omitted).not(R).wrapAll(M), w.refresh()), (0 === H.nextAll(x.pusher).length || H.nextAll(x.pusher)[0] !== M[0]) && (w.debug("Moved sidebar to correct parent element"), w.error(O.movedSidebar, z), H.detach().prependTo(D), w.refresh()), w.clear.cache(), w.set.pushable(), w.set.direction();
          } }, attachEvents: function attachEvents(i, n) {
          var t = e(i);n = e.isFunction(w[n]) ? w[n] : w.toggle, t.length > 0 ? (w.debug("Attaching sidebar events to element", i, n), t.on("click" + P, n)) : w.error(O.notFound, i);
        }, show: function show(i) {
          if ((i = e.isFunction(i) ? i : function () {}, w.is.hidden())) {
            if ((w.refreshSidebars(), T.overlay && (w.error(O.overlay), T.transition = "overlay"), w.refresh(), w.othersActive())) if ((w.debug("Other sidebars currently visible"), T.exclusive)) {
              if ("overlay" != T.transition) return void w.hideOthers(w.show);w.hideOthers();
            } else T.transition = "overlay";w.pushPage(function () {
              i.call(z), T.onShow.call(z);
            }), T.onChange.call(z), T.onVisible.call(z);
          } else w.debug("Sidebar is already visible");
        }, hide: function hide(i) {
          i = e.isFunction(i) ? i : function () {}, (w.is.visible() || w.is.animating()) && (w.debug("Hiding sidebar", i), w.refreshSidebars(), w.pullPage(function () {
            i.call(z), T.onHidden.call(z);
          }), T.onChange.call(z), T.onHide.call(z));
        }, othersAnimating: function othersAnimating() {
          return R.not(H).filter("." + S.animating).length > 0;
        }, othersVisible: function othersVisible() {
          return R.not(H).filter("." + S.visible).length > 0;
        }, othersActive: function othersActive() {
          return w.othersVisible() || w.othersAnimating();
        }, hideOthers: function hideOthers(e) {
          var i = R.not(H).filter("." + S.visible),
              n = i.length,
              t = 0;e = e || function () {}, i.sidebar("hide", function () {
            t++, t == n && e();
          });
        }, toggle: function toggle() {
          w.verbose("Determining toggled direction"), w.is.hidden() ? w.show() : w.hide();
        }, pushPage: function pushPage(i) {
          var n,
              t,
              o,
              r = w.get.transition(),
              s = "overlay" === r || w.othersActive() ? H : M;i = e.isFunction(i) ? i : function () {}, "scale down" == T.transition && w.scrollToTop(), w.set.transition(r), w.repaint(), n = function () {
            w.bind.clickaway(), w.add.inlineCSS(), w.set.animating(), w.set.visible();
          }, t = function () {
            w.set.dimmed();
          }, o = function (e) {
            e.target == s[0] && (s.off(k + p, o), w.remove.animating(), w.bind.scrollLock(), i.call(z));
          }, s.off(k + p), s.on(k + p, o), v(n), T.dimPage && !w.othersVisible() && v(t);
        }, pullPage: function pullPage(i) {
          var n,
              t,
              o = w.get.transition(),
              r = "overlay" == o || w.othersActive() ? H : M;i = e.isFunction(i) ? i : function () {}, w.verbose("Removing context push state", w.get.direction()), w.unbind.clickaway(), w.unbind.scrollLock(), n = function () {
            w.set.transition(o), w.set.animating(), w.remove.visible(), T.dimPage && !w.othersVisible() && M.removeClass(S.dimmed);
          }, t = function (e) {
            e.target == r[0] && (r.off(k + p, t), w.remove.animating(), w.remove.transition(), w.remove.inlineCSS(), ("scale down" == o || T.returnScroll && w.is.mobile()) && w.scrollBack(), i.call(z));
          }, r.off(k + p), r.on(k + p, t), v(n);
        }, scrollToTop: function scrollToTop() {
          w.verbose("Scrolling to top of page to avoid animation issues"), C = e(i).scrollTop(), H.scrollTop(0), i.scrollTo(0, 0);
        }, scrollBack: function scrollBack() {
          w.verbose("Scrolling back to original page position"), i.scrollTo(0, C);
        }, clear: { cache: function cache() {
            w.verbose("Clearing cached dimensions"), w.cache = {};
          } }, set: { ios: function ios() {
            c.addClass(S.ios);
          }, pushed: function pushed() {
            D.addClass(S.pushed);
          }, pushable: function pushable() {
            D.addClass(S.pushable);
          }, dimmed: function dimmed() {
            M.addClass(S.dimmed);
          }, active: function active() {
            H.addClass(S.active);
          }, animating: function animating() {
            H.addClass(S.animating);
          }, transition: function transition(e) {
            e = e || w.get.transition(), H.addClass(e);
          }, direction: function direction(e) {
            e = e || w.get.direction(), H.addClass(S[e]);
          }, visible: function visible() {
            H.addClass(S.visible);
          }, overlay: function overlay() {
            H.addClass(S.overlay);
          } }, remove: { inlineCSS: function inlineCSS() {
            w.debug("Removing inline css styles", s), s && s.length > 0 && s.remove();
          }, ios: function ios() {
            c.removeClass(S.ios);
          }, pushed: function pushed() {
            D.removeClass(S.pushed);
          }, pushable: function pushable() {
            D.removeClass(S.pushable);
          }, active: function active() {
            H.removeClass(S.active);
          }, animating: function animating() {
            H.removeClass(S.animating);
          }, transition: function transition(e) {
            e = e || w.get.transition(), H.removeClass(e);
          }, direction: function direction(e) {
            e = e || w.get.direction(), H.removeClass(S[e]);
          }, visible: function visible() {
            H.removeClass(S.visible);
          }, overlay: function overlay() {
            H.removeClass(S.overlay);
          } }, get: { direction: function direction() {
            return H.hasClass(S.top) ? S.top : H.hasClass(S.right) ? S.right : H.hasClass(S.bottom) ? S.bottom : S.left;
          }, transition: function transition() {
            var e,
                i = w.get.direction();return (e = w.is.mobile() ? "auto" == T.mobileTransition ? T.defaultTransition.mobile[i] : T.mobileTransition : "auto" == T.transition ? T.defaultTransition.computer[i] : T.transition, w.verbose("Determined transition", e), e);
          }, transitionEvent: function transitionEvent() {
            var e,
                i = n.createElement("element"),
                o = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (e in o) if (i.style[e] !== t) return o[e];
          } }, is: { ie: function ie() {
            var e = !i.ActiveXObject && "ActiveXObject" in i,
                n = ("ActiveXObject" in i);return e || n;
          }, ios: function ios() {
            var e = navigator.userAgent,
                i = e.match(F.ios),
                n = e.match(F.mobileChrome);return i && !n ? (w.verbose("Browser was found to be iOS", e), !0) : !1;
          }, mobile: function mobile() {
            var e = navigator.userAgent,
                i = e.match(F.mobile);return i ? (w.verbose("Browser was found to be mobile", e), !0) : (w.verbose("Browser is not mobile, using regular transition", e), !1);
          }, hidden: function hidden() {
            return !w.is.visible();
          }, visible: function visible() {
            return H.hasClass(S.visible);
          }, open: function open() {
            return w.is.visible();
          }, closed: function closed() {
            return w.is.hidden();
          }, vertical: function vertical() {
            return H.hasClass(S.top);
          }, animating: function animating() {
            return D.hasClass(S.animating);
          }, rtl: function rtl() {
            return (w.cache.rtl === t && (w.cache.rtl = "rtl" == H.css("direction")), w.cache.rtl);
          } }, setting: function setting(i, n) {
          if ((w.debug("Changing setting", i, n), e.isPlainObject(i))) e.extend(!0, T, i);else {
            if (n === t) return T[i];T[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, w, i);else {
            if (n === t) return w[i];w[i] = n;
          }
        }, debug: function debug() {
          T.debug && (T.performance ? w.performance.log(arguments) : (w.debug = Function.prototype.bind.call(console.info, console, T.name + ":"), w.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          T.verbose && T.debug && (T.performance ? w.performance.log(arguments) : (w.verbose = Function.prototype.bind.call(console.info, console, T.name + ":"), w.verbose.apply(console, arguments)));
        }, error: function error() {
          w.error = Function.prototype.bind.call(console.error, console, T.name + ":"), w.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var i, n, t;T.performance && (i = new Date().getTime(), t = f || i, n = i - t, f = i, b.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: z, "Execution Time": n })), clearTimeout(w.performance.timer), w.performance.timer = setTimeout(w.performance.display, 500);
          }, display: function display() {
            var i = T.name + ":",
                n = 0;f = !1, clearTimeout(w.performance.timer), e.each(b, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", d && (i += " '" + d + "'"), (console.group !== t || console.table !== t) && b.length > 0 && (console.groupCollapsed(i), console.table ? console.table(b) : e.each(b, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), b = [];
          } }, invoke: function invoke(i, n, o) {
          var s,
              a,
              l,
              c = B;return (n = n || g, o = z || o, "string" == typeof i && c !== t && (i = i.split(/[\. ]/), s = i.length - 1, e.each(i, function (n, o) {
            var r = n != s ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(c[r]) && n != s) c = c[r];else {
              if (c[r] !== t) return (a = c[r], !1);if (!e.isPlainObject(c[o]) || n == s) return c[o] !== t ? (a = c[o], !1) : (w.error(O.method, i), !1);c = c[o];
            }
          })), e.isFunction(a) ? l = a.apply(o, n) : a !== t && (l = a), e.isArray(r) ? r.push(l) : r !== t ? r = [r, l] : l !== t && (r = l), a);
        } }, h ? (B === t && w.initialize(), w.invoke(m)) : (B !== t && w.invoke("destroy"), w.initialize());
    }), r !== t ? r : this);
  }, e.fn.sidebar.settings = { name: "Sidebar", namespace: "sidebar", debug: !1, verbose: !1, performance: !0, transition: "auto", mobileTransition: "auto", defaultTransition: { computer: { left: "uncover", right: "uncover", top: "overlay", bottom: "overlay" }, mobile: { left: "uncover", right: "uncover", top: "overlay", bottom: "overlay" } }, context: "body", exclusive: !1, closable: !0, dimPage: !0, scrollLock: !1, returnScroll: !1, delaySetup: !1, duration: 500, onChange: function onChange() {}, onShow: function onShow() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, onVisible: function onVisible() {}, className: { active: "active", animating: "animating", dimmed: "dimmed", ios: "ios", pushable: "pushable", pushed: "pushed", right: "right", top: "top", left: "left", bottom: "bottom", visible: "visible" }, selector: { fixed: ".fixed", omitted: "script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed", pusher: ".pusher", sidebar: ".ui.sidebar" }, regExp: { ios: /(iPad|iPhone|iPod)/g, mobileChrome: /(CriOS)/g, mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g }, error: { method: "The method you called is not defined.", pusher: "Had to add pusher element. For optimal performance make sure body content is inside a pusher element", movedSidebar: "Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag", overlay: "The overlay setting is no longer supported, use animation: overlay", notFound: "There were no elements that matched the specified selector" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/site", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
'use strict';

;(function ($, window, document, undefined) {

  $.site = $.fn.site = function (parameters) {
    var time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.site.settings, parameters) : $.extend({}, $.site.settings),
        namespace = _settings.namespace,
        error = _settings.error,
        eventNamespace = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        $document = $(document),
        $module = $document,
        element = this,
        instance = $module.data(moduleNamespace),
        module,
        returnedValue;
    module = {

      initialize: function initialize() {
        module.instantiate();
      },

      instantiate: function instantiate() {
        module.verbose('Storing instance of site', module);
        instance = module;
        $module.data(moduleNamespace, module);
      },

      normalize: function normalize() {
        module.fix.console();
        module.fix.requestAnimationFrame();
      },

      fix: {
        console: (function (_console) {
          function console() {
            return _console.apply(this, arguments);
          }

          console.toString = function () {
            return _console.toString();
          };

          return console;
        })(function () {
          module.debug('Normalizing window.console');
          if (console === undefined || console.log === undefined) {
            module.verbose('Console not available, normalizing events');
            module.disable.console();
          }
          if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
            module.verbose('Console group not available, normalizing events');
            window.console.group = function () {};
            window.console.groupEnd = function () {};
            window.console.groupCollapsed = function () {};
          }
          if (typeof console.markTimeline == 'undefined') {
            module.verbose('Mark timeline not available, normalizing events');
            window.console.markTimeline = function () {};
          }
        }),
        consoleClear: function consoleClear() {
          module.debug('Disabling programmatic console clearing');
          window.console.clear = function () {};
        },
        requestAnimationFrame: function requestAnimationFrame() {
          module.debug('Normalizing requestAnimationFrame');
          if (window.requestAnimationFrame === undefined) {
            module.debug('RequestAnimationFrame not available, normailizing event');
            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
              setTimeout(callback, 0);
            };
          }
        }
      },

      moduleExists: function moduleExists(name) {
        return $.fn[name] !== undefined && $.fn[name].settings !== undefined;
      },

      enabled: {
        modules: function modules(_modules) {
          var enabledModules = [];
          _modules = _modules || _settings.modules;
          $.each(_modules, function (index, name) {
            if (module.moduleExists(name)) {
              enabledModules.push(name);
            }
          });
          return enabledModules;
        }
      },

      disabled: {
        modules: function modules(_modules2) {
          var disabledModules = [];
          _modules2 = _modules2 || _settings.modules;
          $.each(_modules2, function (index, name) {
            if (!module.moduleExists(name)) {
              disabledModules.push(name);
            }
          });
          return disabledModules;
        }
      },

      change: {
        setting: function setting(_setting, value, modules, modifyExisting) {
          modules = typeof modules === 'string' ? modules === 'all' ? _settings.modules : [modules] : modules || _settings.modules;
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;
          $.each(modules, function (index, name) {
            var namespace = module.moduleExists(name) ? $.fn[name].settings.namespace || false : true,
                $existingModules;
            if (module.moduleExists(name)) {
              module.verbose('Changing default setting', _setting, value, name);
              $.fn[name].settings[_setting] = value;
              if (modifyExisting && namespace) {
                $existingModules = $(':data(module-' + namespace + ')');
                if ($existingModules.length > 0) {
                  module.verbose('Modifying existing settings', $existingModules);
                  $existingModules[name]('setting', _setting, value);
                }
              }
            }
          });
        },
        settings: function settings(newSettings, modules, modifyExisting) {
          modules = typeof modules === 'string' ? [modules] : modules || _settings.modules;
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;
          $.each(modules, function (index, name) {
            var $existingModules;
            if (module.moduleExists(name)) {
              module.verbose('Changing default setting', newSettings, name);
              $.extend(true, $.fn[name].settings, newSettings);
              if (modifyExisting && namespace) {
                $existingModules = $(':data(module-' + namespace + ')');
                if ($existingModules.length > 0) {
                  module.verbose('Modifying existing settings', $existingModules);
                  $existingModules[name]('setting', newSettings);
                }
              }
            }
          });
        }
      },

      enable: {
        console: function console() {
          module.console(true);
        },
        debug: function debug(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Enabling debug for modules', modules);
          module.change.setting('debug', true, modules, modifyExisting);
        },
        verbose: function verbose(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Enabling verbose debug for modules', modules);
          module.change.setting('verbose', true, modules, modifyExisting);
        }
      },
      disable: {
        console: function console() {
          module.console(false);
        },
        debug: function debug(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Disabling debug for modules', modules);
          module.change.setting('debug', false, modules, modifyExisting);
        },
        verbose: function verbose(modules, modifyExisting) {
          modules = modules || _settings.modules;
          module.debug('Disabling verbose debug for modules', modules);
          module.change.setting('verbose', false, modules, modifyExisting);
        }
      },

      console: function console(enable) {
        if (enable) {
          if (instance.cache.console === undefined) {
            module.error(error.console);
            return;
          }
          module.debug('Restoring console function');
          window.console = instance.cache.console;
        } else {
          module.debug('Disabling console function');
          instance.cache.console = window.console;
          window.console = {
            clear: function clear() {},
            error: function error() {},
            group: function group() {},
            groupCollapsed: function groupCollapsed() {},
            groupEnd: function groupEnd() {},
            info: function info() {},
            log: function log() {},
            markTimeline: function markTimeline() {},
            warn: function warn() {}
          };
        }
      },

      destroy: function destroy() {
        module.verbose('Destroying previous site for', $module);
        $module.removeData(moduleNamespace);
      },

      cache: {},

      setting: function setting(name, value) {
        if ($.isPlainObject(name)) {
          $.extend(true, _settings, name);
        } else if (value !== undefined) {
          _settings[name] = value;
        } else {
          return _settings[name];
        }
      },
      internal: function internal(name, value) {
        if ($.isPlainObject(name)) {
          $.extend(true, module, name);
        } else if (value !== undefined) {
          module[name] = value;
        } else {
          return module[name];
        }
      },
      debug: function debug() {
        if (_settings.debug) {
          if (_settings.performance) {
            module.performance.log(arguments);
          } else {
            module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');
            module.debug.apply(console, arguments);
          }
        }
      },
      verbose: function verbose() {
        if (_settings.verbose && _settings.debug) {
          if (_settings.performance) {
            module.performance.log(arguments);
          } else {
            module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');
            module.verbose.apply(console, arguments);
          }
        }
      },
      error: function error() {
        module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');
        module.error.apply(console, arguments);
      },
      performance: {
        log: function log(message) {
          var currentTime, executionTime, previousTime;
          if (_settings.performance) {
            currentTime = new Date().getTime();
            previousTime = time || currentTime;
            executionTime = currentTime - previousTime;
            time = currentTime;
            performance.push({
              'Element': element,
              'Name': message[0],
              'Arguments': [].slice.call(message, 1) || '',
              'Execution Time': executionTime
            });
          }
          clearTimeout(module.performance.timer);
          module.performance.timer = setTimeout(module.performance.display, 500);
        },
        display: function display() {
          var title = _settings.name + ':',
              totalTime = 0;
          time = false;
          clearTimeout(module.performance.timer);
          $.each(performance, function (index, data) {
            totalTime += data['Execution Time'];
          });
          title += ' ' + totalTime + 'ms';
          if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
            console.groupCollapsed(title);
            if (console.table) {
              console.table(performance);
            } else {
              $.each(performance, function (index, data) {
                console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
              });
            }
            console.groupEnd();
          }
          performance = [];
        }
      },
      invoke: function invoke(query, passedArguments, context) {
        var object = instance,
            maxDepth,
            found,
            response;
        passedArguments = passedArguments || queryArguments;
        context = element || context;
        if (typeof query == 'string' && object !== undefined) {
          query = query.split(/[\. ]/);
          maxDepth = query.length - 1;
          $.each(query, function (depth, value) {
            var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
            if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
              object = object[camelCaseValue];
            } else if (object[camelCaseValue] !== undefined) {
              found = object[camelCaseValue];
              return false;
            } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
              object = object[value];
            } else if (object[value] !== undefined) {
              found = object[value];
              return false;
            } else {
              module.error(error.method, query);
              return false;
            }
          });
        }
        if ($.isFunction(found)) {
          response = found.apply(context, passedArguments);
        } else if (found !== undefined) {
          response = found;
        }
        if ($.isArray(returnedValue)) {
          returnedValue.push(response);
        } else if (returnedValue !== undefined) {
          returnedValue = [returnedValue, response];
        } else if (response !== undefined) {
          returnedValue = response;
        }
        return found;
      }
    };

    if (methodInvoked) {
      if (instance === undefined) {
        module.initialize();
      }
      module.invoke(query);
    } else {
      if (instance !== undefined) {
        module.destroy();
      }
      module.initialize();
    }
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.site.settings = {

    name: 'Site',
    namespace: 'site',

    error: {
      console: 'Console cannot be restored, most likely it was overwritten outside of module',
      method: 'The method you called is not defined.'
    },

    debug: false,
    verbose: false,
    performance: true,

    modules: ['accordion', 'api', 'checkbox', 'dimmer', 'dropdown', 'embed', 'form', 'modal', 'nag', 'popup', 'rating', 'shape', 'sidebar', 'state', 'sticky', 'tab', 'transition', 'visit', 'visibility'],

    siteNamespace: 'site',
    namespaceStub: {
      cache: {},
      config: {},
      sections: {},
      section: {},
      utilities: {}
    }

  };

  // allows for selection of elements with data attributes
  $.extend($.expr[':'], {
    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
      return function (elem) {
        return !!$.data(elem, dataName);
      };
    }) : function (elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[3]);
    }
  });
})(jQuery, window, document);
});

require.register("web/static/css/components/site.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Site
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, n, o, i) {
  e.site = e.fn.site = function (t) {
    var s,
        r,
        a = new Date().getTime(),
        c = [],
        u = arguments[0],
        l = "string" == typeof u,
        m = [].slice.call(arguments, 1),
        d = e.isPlainObject(t) ? e.extend(!0, {}, e.site.settings, t) : e.extend({}, e.site.settings),
        f = d.namespace,
        g = d.error,
        b = "module-" + f,
        p = e(o),
        v = p,
        h = this,
        y = v.data(b);return (s = { initialize: function initialize() {
        s.instantiate();
      }, instantiate: function instantiate() {
        s.verbose("Storing instance of site", s), y = s, v.data(b, s);
      }, normalize: function normalize() {
        s.fix.console(), s.fix.requestAnimationFrame();
      }, fix: { console: (function (_console) {
          function console() {
            return _console.apply(this, arguments);
          }

          console.toString = function () {
            return _console.toString();
          };

          return console;
        })(function () {
          s.debug("Normalizing window.console"), (console === i || console.log === i) && (s.verbose("Console not available, normalizing events"), s.disable.console()), ("undefined" == typeof console.group || "undefined" == typeof console.groupEnd || "undefined" == typeof console.groupCollapsed) && (s.verbose("Console group not available, normalizing events"), n.console.group = function () {}, n.console.groupEnd = function () {}, n.console.groupCollapsed = function () {}), "undefined" == typeof console.markTimeline && (s.verbose("Mark timeline not available, normalizing events"), n.console.markTimeline = function () {});
        }), consoleClear: function consoleClear() {
          s.debug("Disabling programmatic console clearing"), n.console.clear = function () {};
        }, requestAnimationFrame: function requestAnimationFrame() {
          s.debug("Normalizing requestAnimationFrame"), n.requestAnimationFrame === i && (s.debug("RequestAnimationFrame not available, normailizing event"), n.requestAnimationFrame = n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame || function (e) {
            setTimeout(e, 0);
          });
        } }, moduleExists: function moduleExists(n) {
        return e.fn[n] !== i && e.fn[n].settings !== i;
      }, enabled: { modules: function modules(n) {
          var o = [];return (n = n || d.modules, e.each(n, function (e, n) {
            s.moduleExists(n) && o.push(n);
          }), o);
        } }, disabled: { modules: function modules(n) {
          var o = [];return (n = n || d.modules, e.each(n, function (e, n) {
            s.moduleExists(n) || o.push(n);
          }), o);
        } }, change: { setting: function setting(n, o, t, r) {
          t = "string" == typeof t ? "all" === t ? d.modules : [t] : t || d.modules, r = r !== i ? r : !0, e.each(t, function (i, t) {
            var a,
                c = s.moduleExists(t) ? e.fn[t].settings.namespace || !1 : !0;s.moduleExists(t) && (s.verbose("Changing default setting", n, o, t), e.fn[t].settings[n] = o, r && c && (a = e(":data(module-" + c + ")"), a.length > 0 && (s.verbose("Modifying existing settings", a), a[t]("setting", n, o))));
          });
        }, settings: function settings(n, o, t) {
          o = "string" == typeof o ? [o] : o || d.modules, t = t !== i ? t : !0, e.each(o, function (o, i) {
            var r;s.moduleExists(i) && (s.verbose("Changing default setting", n, i), e.extend(!0, e.fn[i].settings, n), t && f && (r = e(":data(module-" + f + ")"), r.length > 0 && (s.verbose("Modifying existing settings", r), r[i]("setting", n))));
          });
        } }, enable: { console: function console() {
          s.console(!0);
        }, debug: function debug(e, n) {
          e = e || d.modules, s.debug("Enabling debug for modules", e), s.change.setting("debug", !0, e, n);
        }, verbose: function verbose(e, n) {
          e = e || d.modules, s.debug("Enabling verbose debug for modules", e), s.change.setting("verbose", !0, e, n);
        } }, disable: { console: function console() {
          s.console(!1);
        }, debug: function debug(e, n) {
          e = e || d.modules, s.debug("Disabling debug for modules", e), s.change.setting("debug", !1, e, n);
        }, verbose: function verbose(e, n) {
          e = e || d.modules, s.debug("Disabling verbose debug for modules", e), s.change.setting("verbose", !1, e, n);
        } }, console: function console(e) {
        if (e) {
          if (y.cache.console === i) return void s.error(g.console);s.debug("Restoring console function"), n.console = y.cache.console;
        } else s.debug("Disabling console function"), y.cache.console = n.console, n.console = { clear: function clear() {}, error: function error() {}, group: function group() {}, groupCollapsed: function groupCollapsed() {}, groupEnd: function groupEnd() {}, info: function info() {}, log: function log() {}, markTimeline: function markTimeline() {}, warn: function warn() {} };
      }, destroy: function destroy() {
        s.verbose("Destroying previous site for", v), v.removeData(b);
      }, cache: {}, setting: function setting(n, o) {
        if (e.isPlainObject(n)) e.extend(!0, d, n);else {
          if (o === i) return d[n];d[n] = o;
        }
      }, internal: function internal(n, o) {
        if (e.isPlainObject(n)) e.extend(!0, s, n);else {
          if (o === i) return s[n];s[n] = o;
        }
      }, debug: function debug() {
        d.debug && (d.performance ? s.performance.log(arguments) : (s.debug = Function.prototype.bind.call(console.info, console, d.name + ":"), s.debug.apply(console, arguments)));
      }, verbose: function verbose() {
        d.verbose && d.debug && (d.performance ? s.performance.log(arguments) : (s.verbose = Function.prototype.bind.call(console.info, console, d.name + ":"), s.verbose.apply(console, arguments)));
      }, error: function error() {
        s.error = Function.prototype.bind.call(console.error, console, d.name + ":"), s.error.apply(console, arguments);
      }, performance: { log: function log(e) {
          var n, o, i;d.performance && (n = new Date().getTime(), i = a || n, o = n - i, a = n, c.push({ Element: h, Name: e[0], Arguments: [].slice.call(e, 1) || "", "Execution Time": o })), clearTimeout(s.performance.timer), s.performance.timer = setTimeout(s.performance.display, 500);
        }, display: function display() {
          var n = d.name + ":",
              o = 0;a = !1, clearTimeout(s.performance.timer), e.each(c, function (e, n) {
            o += n["Execution Time"];
          }), n += " " + o + "ms", (console.group !== i || console.table !== i) && c.length > 0 && (console.groupCollapsed(n), console.table ? console.table(c) : e.each(c, function (e, n) {
            console.log(n.Name + ": " + n["Execution Time"] + "ms");
          }), console.groupEnd()), c = [];
        } }, invoke: function invoke(n, o, t) {
        var a,
            c,
            u,
            l = y;return (o = o || m, t = h || t, "string" == typeof n && l !== i && (n = n.split(/[\. ]/), a = n.length - 1, e.each(n, function (o, t) {
          var r = o != a ? t + n[o + 1].charAt(0).toUpperCase() + n[o + 1].slice(1) : n;if (e.isPlainObject(l[r]) && o != a) l = l[r];else {
            if (l[r] !== i) return (c = l[r], !1);if (!e.isPlainObject(l[t]) || o == a) return l[t] !== i ? (c = l[t], !1) : (s.error(g.method, n), !1);l = l[t];
          }
        })), e.isFunction(c) ? u = c.apply(t, o) : c !== i && (u = c), e.isArray(r) ? r.push(u) : r !== i ? r = [r, u] : u !== i && (r = u), c);
      } }, l ? (y === i && s.initialize(), s.invoke(u)) : (y !== i && s.destroy(), s.initialize()), r !== i ? r : this);
  }, e.site.settings = { name: "Site", namespace: "site", error: { console: "Console cannot be restored, most likely it was overwritten outside of module", method: "The method you called is not defined." }, debug: !1, verbose: !1, performance: !0, modules: ["accordion", "api", "checkbox", "dimmer", "dropdown", "embed", "form", "modal", "nag", "popup", "rating", "shape", "sidebar", "state", "sticky", "tab", "transition", "visit", "visibility"], siteNamespace: "site", namespaceStub: { cache: {}, config: {}, sections: {}, section: {}, utilities: {} } }, e.extend(e.expr[":"], { data: e.expr.createPseudo ? e.expr.createPseudo(function (n) {
      return function (o) {
        return !!e.data(o, n);
      };
    }) : function (n, o, i) {
      return !!e.data(n, i[3]);
    } });
})(jQuery, window, document);
});

require.register("web/static/css/components/state", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.state = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        hasTouch = ('ontouchstart' in document.documentElement),
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.state.settings, parameters) : $.extend({}, $.fn.state.settings),
          error = settings.error,
          metadata = settings.metadata,
          className = settings.className,
          namespace = settings.namespace,
          states = settings.states,
          _text = settings.text,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          element = this,
          instance = $module.data(moduleNamespace),
          module;
      module = {

        initialize: function initialize() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if (settings.automatic) {
            module.add.defaults();
          }

          // bind events with delegated events
          if (settings.context && moduleSelector !== '') {
            $(settings.context).on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text).on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text).on(moduleSelector, 'click' + eventNamespace, module.toggle.state);
          } else {
            $module.on('mouseenter' + eventNamespace, module.change.text).on('mouseleave' + eventNamespace, module.reset.text).on('click' + eventNamespace, module.toggle.state);
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module', instance);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
        },

        add: {
          defaults: function defaults() {
            var userStates = parameters && $.isPlainObject(parameters.states) ? parameters.states : {};
            $.each(settings.defaults, function (type, typeStates) {
              if (module.is[type] !== undefined && module.is[type]()) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
              }
            });
          }
        },

        is: {

          active: function active() {
            return $module.hasClass(className.active);
          },
          loading: function loading() {
            return $module.hasClass(className.loading);
          },
          inactive: function inactive() {
            return !$module.hasClass(className.active);
          },
          state: function state(_state) {
            if (className[_state] === undefined) {
              return false;
            }
            return $module.hasClass(className[_state]);
          },

          enabled: function enabled() {
            return !$module.is(settings.filter.active);
          },
          disabled: function disabled() {
            return $module.is(settings.filter.active);
          },
          textEnabled: function textEnabled() {
            return !$module.is(settings.filter.text);
          },

          // definitions for automatic type detection
          button: function button() {
            return $module.is('.button:not(a, .submit)');
          },
          input: function input() {
            return $module.is('input');
          },
          progress: function progress() {
            return $module.is('.ui.progress');
          }
        },

        allow: function allow(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
        },
        disallow: function disallow(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
        },

        allows: function allows(state) {
          return states[state] || false;
        },

        enable: function enable() {
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          $module.addClass(className.disabled);
        },

        setState: function setState(state) {
          if (module.allows(state)) {
            $module.addClass(className[state]);
          }
        },

        removeState: function removeState(state) {
          if (module.allows(state)) {
            $module.removeClass(className[state]);
          }
        },

        toggle: {
          state: function state() {
            var apiRequest, requestCancelled;
            if (module.allows('active') && module.is.enabled()) {
              module.refresh();
              if ($.fn.api !== undefined) {
                apiRequest = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if (requestCancelled) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest = function () {
                    return false;
                  };
                  settings.deactivateTest = function () {
                    return false;
                  };
                } else if (apiRequest) {
                  module.listenTo(apiRequest);
                  return;
                }
              }
              module.change.state();
            }
          }
        },

        listenTo: function listenTo(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if (apiRequest) {
            if (_text.loading) {
              module.update.text(_text.loading);
            }
            $.when(apiRequest).then(function () {
              if (apiRequest.state() == 'resolved') {
                module.debug('API request succeeded');
                settings.activateTest = function () {
                  return true;
                };
                settings.deactivateTest = function () {
                  return true;
                };
              } else {
                module.debug('API request failed');
                settings.activateTest = function () {
                  return false;
                };
                settings.deactivateTest = function () {
                  return false;
                };
              }
              module.change.state();
            });
          }
        },

        // checks whether active/inactive state can be given
        change: {

          state: function state() {
            module.debug('Determining state change direction');
            // inactive to active change
            if (module.is.inactive()) {
              module.activate();
            } else {
              module.deactivate();
            }
            if (settings.sync) {
              module.sync();
            }
            settings.onChange.call(element);
          },

          text: function text() {
            if (module.is.textEnabled()) {
              if (module.is.disabled()) {
                module.verbose('Changing text to disabled text', _text.hover);
                module.update.text(_text.disabled);
              } else if (module.is.active()) {
                if (_text.hover) {
                  module.verbose('Changing text to hover text', _text.hover);
                  module.update.text(_text.hover);
                } else if (_text.deactivate) {
                  module.verbose('Changing text to deactivating text', _text.deactivate);
                  module.update.text(_text.deactivate);
                }
              } else {
                if (_text.hover) {
                  module.verbose('Changing text to hover text', _text.hover);
                  module.update.text(_text.hover);
                } else if (_text.activate) {
                  module.verbose('Changing text to activating text', _text.activate);
                  module.update.text(_text.activate);
                }
              }
            }
          }

        },

        activate: function activate() {
          if (settings.activateTest.call(element)) {
            module.debug('Setting state to active');
            $module.addClass(className.active);
            module.update.text(_text.active);
            settings.onActivate.call(element);
          }
        },

        deactivate: function deactivate() {
          if (settings.deactivateTest.call(element)) {
            module.debug('Setting state to inactive');
            $module.removeClass(className.active);
            module.update.text(_text.inactive);
            settings.onDeactivate.call(element);
          }
        },

        sync: function sync() {
          module.verbose('Syncing other buttons to current state');
          if (module.is.active()) {
            $allModules.not($module).state('activate');
          } else {
            $allModules.not($module).state('deactivate');
          }
        },

        get: {
          text: function text() {
            return settings.selector.text ? $module.find(settings.selector.text).text() : $module.html();
          },
          textFor: function textFor(state) {
            return _text[state] || false;
          }
        },

        flash: {
          text: function text(_text2, duration, callback) {
            var previousText = module.get.text();
            module.debug('Flashing text message', _text2, duration);
            _text2 = _text2 || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function () {};
            module.update.text(_text2);
            setTimeout(function () {
              module.update.text(previousText);
              callback.call(element);
            }, duration);
          }
        },

        reset: {
          // on mouseout sets text to previous value
          text: function text() {
            var activeText = _text.active || $module.data(metadata.storedText),
                inactiveText = _text.inactive || $module.data(metadata.storedText);
            if (module.is.textEnabled()) {
              if (module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
              } else if (inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
              }
            }
          }
        },

        update: {
          text: function text(_text3) {
            var currentText = module.get.text();
            if (_text3 && _text3 !== currentText) {
              module.debug('Updating text', _text3);
              if (settings.selector.text) {
                $module.data(metadata.storedText, _text3).find(settings.selector.text).text(_text3);
              } else {
                $module.data(metadata.storedText, _text3).html(_text3);
              }
            } else {
              module.debug('Text is already set, ignoring update', _text3);
            }
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.state.settings = {

    // module info
    name: 'State',

    // debug output
    debug: false,

    // verbose debug output
    verbose: false,

    // namespace for events
    namespace: 'state',

    // debug data includes performance
    performance: true,

    // callback occurs on state change
    onActivate: function onActivate() {},
    onDeactivate: function onDeactivate() {},
    onChange: function onChange() {},

    // state test functions
    activateTest: function activateTest() {
      return true;
    },
    deactivateTest: function deactivateTest() {
      return true;
    },

    // whether to automatically map default states
    automatic: true,

    // activate / deactivate changes all elements instantiated at same time
    sync: false,

    // default flash text duration, used for temporarily changing text of an element
    flashDuration: 1000,

    // selector filter
    filter: {
      text: '.loading, .disabled',
      active: '.disabled'
    },

    context: false,

    // error
    error: {
      beforeSend: 'The before send function has cancelled state change',
      method: 'The method you called is not defined.'
    },

    // metadata
    metadata: {
      promise: 'promise',
      storedText: 'stored-text'
    },

    // change class on state
    className: {
      active: 'active',
      disabled: 'disabled',
      error: 'error',
      loading: 'loading',
      success: 'success',
      warning: 'warning'
    },

    selector: {
      // selector for text node
      text: false
    },

    defaults: {
      input: {
        disabled: true,
        loading: true,
        active: true
      },
      button: {
        disabled: true,
        loading: true,
        active: true
      },
      progress: {
        active: true,
        success: true,
        warning: true,
        error: true
      }
    },

    states: {
      active: true,
      disabled: true,
      error: true,
      loading: true,
      success: true,
      warning: true
    },

    text: {
      disabled: false,
      flash: false,
      hover: false,
      active: false,
      inactive: false,
      activate: false,
      deactivate: false
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/state.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - State
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, n, a) {
  "use strict";e.fn.state = function (t) {
    var i,
        o = e(this),
        s = o.selector || "",
        r = ("ontouchstart" in n.documentElement, new Date().getTime()),
        c = [],
        u = arguments[0],
        l = "string" == typeof u,
        d = [].slice.call(arguments, 1);return (o.each(function () {
      var n,
          f = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.state.settings, t) : e.extend({}, e.fn.state.settings),
          g = f.error,
          v = f.metadata,
          b = f.className,
          m = f.namespace,
          x = f.states,
          p = f.text,
          h = "." + m,
          T = m + "-module",
          y = e(this),
          w = this,
          C = y.data(T);n = { initialize: function initialize() {
          n.verbose("Initializing module"), f.automatic && n.add.defaults(), f.context && "" !== s ? e(f.context).on(s, "mouseenter" + h, n.change.text).on(s, "mouseleave" + h, n.reset.text).on(s, "click" + h, n.toggle.state) : y.on("mouseenter" + h, n.change.text).on("mouseleave" + h, n.reset.text).on("click" + h, n.toggle.state), n.instantiate();
        }, instantiate: function instantiate() {
          n.verbose("Storing instance of module", n), C = n, y.data(T, n);
        }, destroy: function destroy() {
          n.verbose("Destroying previous module", C), y.off(h).removeData(T);
        }, refresh: function refresh() {
          n.verbose("Refreshing selector cache"), y = e(w);
        }, add: { defaults: function defaults() {
            var i = t && e.isPlainObject(t.states) ? t.states : {};e.each(f.defaults, function (t, o) {
              n.is[t] !== a && n.is[t]() && (n.verbose("Adding default states", t, w), e.extend(f.states, o, i));
            });
          } }, is: { active: function active() {
            return y.hasClass(b.active);
          }, loading: function loading() {
            return y.hasClass(b.loading);
          }, inactive: function inactive() {
            return !y.hasClass(b.active);
          }, state: function state(e) {
            return b[e] === a ? !1 : y.hasClass(b[e]);
          }, enabled: function enabled() {
            return !y.is(f.filter.active);
          }, disabled: function disabled() {
            return y.is(f.filter.active);
          }, textEnabled: function textEnabled() {
            return !y.is(f.filter.text);
          }, button: function button() {
            return y.is(".button:not(a, .submit)");
          }, input: function input() {
            return y.is("input");
          }, progress: function progress() {
            return y.is(".ui.progress");
          } }, allow: function allow(e) {
          n.debug("Now allowing state", e), x[e] = !0;
        }, disallow: function disallow(e) {
          n.debug("No longer allowing", e), x[e] = !1;
        }, allows: function allows(e) {
          return x[e] || !1;
        }, enable: function enable() {
          y.removeClass(b.disabled);
        }, disable: function disable() {
          y.addClass(b.disabled);
        }, setState: function setState(e) {
          n.allows(e) && y.addClass(b[e]);
        }, removeState: function removeState(e) {
          n.allows(e) && y.removeClass(b[e]);
        }, toggle: { state: function state() {
            var t, i;if (n.allows("active") && n.is.enabled()) {
              if ((n.refresh(), e.fn.api !== a)) if ((t = y.api("get request"), i = y.api("was cancelled"))) n.debug("API Request cancelled by beforesend"), f.activateTest = function () {
                return !1;
              }, f.deactivateTest = function () {
                return !1;
              };else if (t) return void n.listenTo(t);n.change.state();
            }
          } }, listenTo: function listenTo(t) {
          n.debug("API request detected, waiting for state signal", t), t && (p.loading && n.update.text(p.loading), e.when(t).then(function () {
            "resolved" == t.state() ? (n.debug("API request succeeded"), f.activateTest = function () {
              return !0;
            }, f.deactivateTest = function () {
              return !0;
            }) : (n.debug("API request failed"), f.activateTest = function () {
              return !1;
            }, f.deactivateTest = function () {
              return !1;
            }), n.change.state();
          }));
        }, change: { state: function state() {
            n.debug("Determining state change direction"), n.is.inactive() ? n.activate() : n.deactivate(), f.sync && n.sync(), f.onChange.call(w);
          }, text: function text() {
            n.is.textEnabled() && (n.is.disabled() ? (n.verbose("Changing text to disabled text", p.hover), n.update.text(p.disabled)) : n.is.active() ? p.hover ? (n.verbose("Changing text to hover text", p.hover), n.update.text(p.hover)) : p.deactivate && (n.verbose("Changing text to deactivating text", p.deactivate), n.update.text(p.deactivate)) : p.hover ? (n.verbose("Changing text to hover text", p.hover), n.update.text(p.hover)) : p.activate && (n.verbose("Changing text to activating text", p.activate), n.update.text(p.activate)));
          } }, activate: function activate() {
          f.activateTest.call(w) && (n.debug("Setting state to active"), y.addClass(b.active), n.update.text(p.active), f.onActivate.call(w));
        }, deactivate: function deactivate() {
          f.deactivateTest.call(w) && (n.debug("Setting state to inactive"), y.removeClass(b.active), n.update.text(p.inactive), f.onDeactivate.call(w));
        }, sync: function sync() {
          n.verbose("Syncing other buttons to current state"), o.not(y).state(n.is.active() ? "activate" : "deactivate");
        }, get: { text: function text() {
            return f.selector.text ? y.find(f.selector.text).text() : y.html();
          }, textFor: function textFor(e) {
            return p[e] || !1;
          } }, flash: { text: function text(e, t, a) {
            var i = n.get.text();n.debug("Flashing text message", e, t), e = e || f.text.flash, t = t || f.flashDuration, a = a || function () {}, n.update.text(e), setTimeout(function () {
              n.update.text(i), a.call(w);
            }, t);
          } }, reset: { text: function text() {
            var e = p.active || y.data(v.storedText),
                t = p.inactive || y.data(v.storedText);n.is.textEnabled() && (n.is.active() && e ? (n.verbose("Resetting active text", e), n.update.text(e)) : t && (n.verbose("Resetting inactive text", e), n.update.text(t)));
          } }, update: { text: function text(e) {
            var t = n.get.text();e && e !== t ? (n.debug("Updating text", e), f.selector.text ? y.data(v.storedText, e).find(f.selector.text).text(e) : y.data(v.storedText, e).html(e)) : n.debug("Text is already set, ignoring update", e);
          } }, setting: function setting(t, i) {
          if ((n.debug("Changing setting", t, i), e.isPlainObject(t))) e.extend(!0, f, t);else {
            if (i === a) return f[t];f[t] = i;
          }
        }, internal: function internal(t, i) {
          if (e.isPlainObject(t)) e.extend(!0, n, t);else {
            if (i === a) return n[t];n[t] = i;
          }
        }, debug: function debug() {
          f.debug && (f.performance ? n.performance.log(arguments) : (n.debug = Function.prototype.bind.call(console.info, console, f.name + ":"), n.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          f.verbose && f.debug && (f.performance ? n.performance.log(arguments) : (n.verbose = Function.prototype.bind.call(console.info, console, f.name + ":"), n.verbose.apply(console, arguments)));
        }, error: function error() {
          n.error = Function.prototype.bind.call(console.error, console, f.name + ":"), n.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, a, i;f.performance && (t = new Date().getTime(), i = r || t, a = t - i, r = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: w, "Execution Time": a })), clearTimeout(n.performance.timer), n.performance.timer = setTimeout(n.performance.display, 500);
          }, display: function display() {
            var t = f.name + ":",
                i = 0;r = !1, clearTimeout(n.performance.timer), e.each(c, function (e, t) {
              i += t["Execution Time"];
            }), t += " " + i + "ms", s && (t += " '" + s + "'"), (console.group !== a || console.table !== a) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, o, s) {
          var r,
              c,
              u,
              l = C;return (o = o || d, s = w || s, "string" == typeof t && l !== a && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (i, o) {
            var s = i != r ? o + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;if (e.isPlainObject(l[s]) && i != r) l = l[s];else {
              if (l[s] !== a) return (c = l[s], !1);if (!e.isPlainObject(l[o]) || i == r) return l[o] !== a ? (c = l[o], !1) : (n.error(g.method, t), !1);l = l[o];
            }
          })), e.isFunction(c) ? u = c.apply(s, o) : c !== a && (u = c), e.isArray(i) ? i.push(u) : i !== a ? i = [i, u] : u !== a && (i = u), c);
        } }, l ? (C === a && n.initialize(), n.invoke(u)) : (C !== a && C.invoke("destroy"), n.initialize());
    }), i !== a ? i : this);
  }, e.fn.state.settings = { name: "State", debug: !1, verbose: !1, namespace: "state", performance: !0, onActivate: function onActivate() {}, onDeactivate: function onDeactivate() {}, onChange: function onChange() {}, activateTest: function activateTest() {
      return !0;
    }, deactivateTest: function deactivateTest() {
      return !0;
    }, automatic: !0, sync: !1, flashDuration: 1000, filter: { text: ".loading, .disabled", active: ".disabled" }, context: !1, error: { beforeSend: "The before send function has cancelled state change", method: "The method you called is not defined." }, metadata: { promise: "promise", storedText: "stored-text" }, className: { active: "active", disabled: "disabled", error: "error", loading: "loading", success: "success", warning: "warning" }, selector: { text: !1 }, defaults: { input: { disabled: !0, loading: !0, active: !0 }, button: { disabled: !0, loading: !0, active: !0 }, progress: { active: !0, success: !0, warning: !0, error: !0 } }, states: { active: !0, disabled: !0, error: !0, loading: !0, success: !0, warning: !0 }, text: { disabled: !1, flash: !1, hover: !1, active: !1, inactive: !1, activate: !1, deactivate: !1 } };
})(jQuery, window, document);
});

require.register("web/static/css/components/sticky", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.sticky = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sticky.settings, parameters) : $.extend({}, $.fn.sticky.settings),
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $module = $(this),
          $window = $(window),
          $scroll = $(settings.scrollContext),
          $container,
          $context,
          selector = $module.selector || '',
          instance = $module.data(moduleNamespace),
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      },
          element = this,
          observer,
          module;

      module = {

        initialize: function initialize() {

          module.determineContainer();
          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if (settings.observeChanges) {
            module.observeChanges();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance');
          module.reset();
          if (observer) {
            observer.disconnect();
          }
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $scroll.off('scrollchange' + eventNamespace, module.event.scrollchange);
          $module.removeData(moduleNamespace);
        },

        observeChanges: function observeChanges() {
          var context = $context[0];
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function () {
                module.verbose('DOM tree modified, updating sticky menu', mutations);
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            observer.observe(context, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        determineContainer: function determineContainer() {
          $container = $module.offsetParent();
        },

        determineContext: function determineContext() {
          if (settings.context) {
            $context = $(settings.context);
          } else {
            $context = $container;
          }
          if ($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
          }
        },

        checkErrors: function checkErrors() {
          if (module.is.hidden()) {
            module.error(error.visible, $module);
          }
          if (module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
          }
        },

        bind: {
          events: function events() {
            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize);
            // pub/sub pattern
            $scroll.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          }
        },

        event: {
          load: function load() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
          },
          resize: function resize() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
          },
          scroll: function scroll() {
            requestAnimationFrame(function () {
              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop());
            });
          },
          scrollchange: function scrollchange(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
          }
        },

        refresh: function refresh(hardRefresh) {
          module.reset();
          if (!settings.context) {
            module.determineContext();
          }
          if (hardRefresh) {
            module.determineContainer();
          }
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
        },

        supports: {
          sticky: function sticky() {
            var $element = $('<div/>'),
                element = $element[0];
            $element.addClass(className.supported);
            return $element.css('position').match('sticky');
          }
        },

        save: {
          lastScroll: function lastScroll(scroll) {
            module.lastScroll = scroll;
          },
          elementScroll: function elementScroll(scroll) {
            module.elementScroll = scroll;
          },
          positions: function positions() {
            var window = {
              height: $window.height()
            },
                element = {
              margin: {
                top: parseInt($module.css('margin-top'), 10),
                bottom: parseInt($module.css('margin-bottom'), 10)
              },
              offset: $module.offset(),
              width: $module.outerWidth(),
              height: $module.outerHeight()
            },
                context = {
              offset: $context.offset(),
              height: $context.outerHeight(),
              bottomPadding: parseInt($context.css('padding-bottom'), 10)
            },
                container = {
              height: $container.outerHeight()
            };
            module.cache = {
              fits: element.height < window.height,
              window: {
                height: window.height
              },
              element: {
                margin: element.margin,
                top: element.offset.top - element.margin.top,
                left: element.offset.left,
                width: element.width,
                height: element.height,
                bottom: element.offset.top + element.height
              },
              context: {
                top: context.offset.top,
                height: context.height,
                bottomPadding: context.bottomPadding,
                bottom: context.offset.top + context.height - context.bottomPadding
              }
            };
            module.set.containerSize();
            module.set.size();
            module.stick();
            module.debug('Caching element positions', module.cache);
          }
        },

        get: {
          direction: function direction(scroll) {
            var direction = 'down';
            scroll = scroll || $scroll.scrollTop();
            if (module.lastScroll !== undefined) {
              if (module.lastScroll < scroll) {
                direction = 'down';
              } else if (module.lastScroll > scroll) {
                direction = 'up';
              }
            }
            return direction;
          },
          scrollChange: function scrollChange(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return module.lastScroll ? scroll - module.lastScroll : 0;
          },
          currentElementScroll: function currentElementScroll() {
            if (module.elementScroll) {
              return module.elementScroll;
            }
            return module.is.top() ? Math.abs(parseInt($module.css('top'), 10)) || 0 : Math.abs(parseInt($module.css('bottom'), 10)) || 0;
          },

          elementScroll: function elementScroll(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var element = module.cache.element,
                window = module.cache.window,
                delta = module.get.scrollChange(scroll),
                maxScroll = element.height - window.height + settings.offset,
                elementScroll = module.get.currentElementScroll(),
                possibleScroll = elementScroll + delta;
            if (module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
            } else if (possibleScroll > maxScroll) {
              elementScroll = maxScroll;
            } else {
              elementScroll = possibleScroll;
            }
            return elementScroll;
          }
        },

        remove: {
          lastScroll: function lastScroll() {
            delete module.lastScroll;
          },
          elementScroll: function elementScroll(scroll) {
            delete module.elementScroll;
          },
          offset: function offset() {
            $module.css('margin-top', '');
          }
        },

        set: {
          offset: function offset() {
            module.verbose('Setting offset on element', settings.offset);
            $module.css('margin-top', settings.offset);
          },
          containerSize: function containerSize() {
            var tagName = $container.get(0).tagName;
            if (tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              module.determineContainer();
            } else {
              if (Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
                });
              }
            }
          },
          minimumSize: function minimumSize() {
            var element = module.cache.element;
            $container.css('min-height', element.height);
          },
          scroll: function scroll(_scroll) {
            module.debug('Setting scroll on element', _scroll);
            if (module.elementScroll == _scroll) {
              return;
            }
            if (module.is.top()) {
              $module.css('bottom', '').css('top', -_scroll);
            }
            if (module.is.bottom()) {
              $module.css('top', '').css('bottom', _scroll);
            }
          },
          size: function size() {
            if (module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              $module.css({
                width: module.cache.element.width,
                height: module.cache.element.height
              });
            }
          }
        },

        is: {
          top: function top() {
            return $module.hasClass(className.top);
          },
          bottom: function bottom() {
            return $module.hasClass(className.bottom);
          },
          initialPosition: function initialPosition() {
            return !module.is.fixed() && !module.is.bound();
          },
          hidden: function hidden() {
            return !$module.is(':visible');
          },
          bound: function bound() {
            return $module.hasClass(className.bound);
          },
          fixed: function fixed() {
            return $module.hasClass(className.fixed);
          }
        },

        stick: function stick(scroll) {
          var cachedPosition = scroll || $scroll.scrollTop(),
              cache = module.cache,
              fits = cache.fits,
              element = cache.element,
              window = cache.window,
              context = cache.context,
              offset = module.is.bottom() && settings.pushing ? settings.bottomOffset : settings.offset,
              scroll = {
            top: cachedPosition + offset,
            bottom: cachedPosition + offset + window.height
          },
              direction = module.get.direction(scroll.top),
              elementScroll = fits ? 0 : module.get.elementScroll(scroll.top),

          // shorthand
          doesntFit = !fits,
              elementVisible = element.height !== 0;

          if (elementVisible) {

            if (module.is.initialPosition()) {
              if (scroll.top > context.bottom) {
                module.debug('Element bottom of container');
                module.bindBottom();
              } else if (scroll.top > element.top) {
                module.debug('Element passed, fixing element to page');
                module.fixTop();
              }
            } else if (module.is.fixed()) {

              // currently fixed top
              if (module.is.top()) {
                if (scroll.top < element.top) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
                } else if (element.height + scroll.top - elementScroll > context.bottom) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if (doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }

              // currently fixed bottom
              else if (module.is.bottom()) {

                // top edge
                if (scroll.bottom - element.height < element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
                }
                // bottom edge
                else if (scroll.bottom > context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
                }
                // scroll element if larger than screen
                else if (doesntFit) {
                  module.set.scroll(elementScroll);
                }
              }
            } else if (module.is.bottom()) {
              if (settings.pushing) {
                if (module.is.bound() && scroll.bottom < context.bottom) {
                  module.debug('Fixing bottom attached element to bottom of browser.');
                  module.fixBottom();
                }
              } else {
                if (module.is.bound() && scroll.top < context.bottom - element.height) {
                  module.debug('Fixing bottom attached element to top of browser.');
                  module.fixTop();
                }
              }
            }
          }

          // save current scroll for next run
          module.save.lastScroll(scroll.top);
          module.save.elementScroll(elementScroll);
        },

        bindTop: function bindTop() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module.css({
            left: '',
            top: '',
            marginBottom: ''
          }).removeClass(className.fixed).removeClass(className.bottom).addClass(className.bound).addClass(className.top);
          settings.onTop.call(element);
          settings.onUnstick.call(element);
        },
        bindBottom: function bindBottom() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module.css({
            left: '',
            top: '',
            marginBottom: module.cache.context.bottomPadding
          }).removeClass(className.fixed).removeClass(className.top).addClass(className.bound).addClass(className.bottom);
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
        },

        setInitialPosition: function setInitialPosition() {
          module.unfix();
          module.unbind();
        },

        fixTop: function fixTop() {
          module.debug('Fixing element to top of page');
          module.set.minimumSize();
          module.set.offset();
          $module.css({
            left: module.cache.element.left,
            bottom: '',
            marginBottom: ''
          }).removeClass(className.bound).removeClass(className.bottom).addClass(className.fixed).addClass(className.top);
          settings.onStick.call(element);
        },

        fixBottom: function fixBottom() {
          module.debug('Sticking element to bottom of page');
          module.set.minimumSize();
          module.set.offset();
          $module.css({
            left: module.cache.element.left,
            bottom: '',
            marginBottom: ''
          }).removeClass(className.bound).removeClass(className.top).addClass(className.fixed).addClass(className.bottom);
          settings.onStick.call(element);
        },

        unbind: function unbind() {
          module.debug('Removing absolute position on element');
          module.remove.offset();
          $module.removeClass(className.bound).removeClass(className.top).removeClass(className.bottom);
        },

        unfix: function unfix() {
          module.debug('Removing fixed position on element');
          module.remove.offset();
          $module.removeClass(className.fixed).removeClass(className.top).removeClass(className.bottom);
          settings.onUnstick.call(element);
        },

        reset: function reset() {
          module.debug('Reseting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
          module.remove.lastScroll();
        },

        resetCSS: function resetCSS() {
          $module.css({
            width: '',
            height: ''
          });
          $container.css({
            height: ''
          });
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.sticky.settings = {

    name: 'Sticky',
    namespace: 'sticky',

    debug: false,
    verbose: true,
    performance: true,

    // whether to stick in the opposite direction on scroll up
    pushing: false,

    context: false,

    // Context to watch scroll events
    scrollContext: window,

    // Offset to adjust scroll
    offset: 0,

    // Offset to adjust scroll when attached to bottom of screen
    bottomOffset: 0,

    jitter: 5, // will only set container height if difference between context and container is larger than this number

    // Whether to automatically observe changes with Mutation Observers
    observeChanges: false,

    // Called when position is recalculated
    onReposition: function onReposition() {},

    // Called on each scroll
    onScroll: function onScroll() {},

    // Called when element is stuck to viewport
    onStick: function onStick() {},

    // Called when element is unstuck from viewport
    onUnstick: function onUnstick() {},

    // Called when element reaches top of context
    onTop: function onTop() {},

    // Called when element reaches bottom of context
    onBottom: function onBottom() {},

    error: {
      container: 'Sticky element must be inside a relative container',
      visible: 'Element is hidden, you must call refresh after element becomes visible',
      method: 'The method you called is not defined.',
      invalidContext: 'Context specified does not exist',
      elementSize: 'Sticky element is larger than its container, cannot create sticky.'
    },

    className: {
      bound: 'bound',
      fixed: 'fixed',
      supported: 'native',
      top: 'top',
      bottom: 'bottom'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/sticky.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Sticky
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, o, n) {
  "use strict";e.fn.sticky = function (o) {
    var i,
        s = e(this),
        r = s.selector || "",
        c = new Date().getTime(),
        l = [],
        a = arguments[0],
        m = "string" == typeof a,
        f = [].slice.call(arguments, 1);return (s.each(function () {
      var s,
          u,
          d,
          h,
          g = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.sticky.settings, o) : e.extend({}, e.fn.sticky.settings),
          b = g.className,
          p = g.namespace,
          v = g.error,
          x = "." + p,
          C = "module-" + p,
          S = e(this),
          y = e(t),
          k = e(g.scrollContext),
          w = (S.selector || "", S.data(C)),
          T = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      },
          z = this;h = { initialize: function initialize() {
          h.determineContainer(), h.determineContext(), h.verbose("Initializing sticky", g, s), h.save.positions(), h.checkErrors(), h.bind.events(), g.observeChanges && h.observeChanges(), h.instantiate();
        }, instantiate: function instantiate() {
          h.verbose("Storing instance of module", h), w = h, S.data(C, h);
        }, destroy: function destroy() {
          h.verbose("Destroying previous instance"), h.reset(), d && d.disconnect(), y.off("load" + x, h.event.load).off("resize" + x, h.event.resize), k.off("scrollchange" + x, h.event.scrollchange), S.removeData(C);
        }, observeChanges: function observeChanges() {
          var e = u[0];"MutationObserver" in t && (d = new MutationObserver(function (e) {
            clearTimeout(h.timer), h.timer = setTimeout(function () {
              h.verbose("DOM tree modified, updating sticky menu", e), h.refresh();
            }, 100);
          }), d.observe(z, { childList: !0, subtree: !0 }), d.observe(e, { childList: !0, subtree: !0 }), h.debug("Setting up mutation observer", d));
        }, determineContainer: function determineContainer() {
          s = S.offsetParent();
        }, determineContext: function determineContext() {
          return (u = g.context ? e(g.context) : s, 0 === u.length ? void h.error(v.invalidContext, g.context, S) : void 0);
        }, checkErrors: function checkErrors() {
          return (h.is.hidden() && h.error(v.visible, S), h.cache.element.height > h.cache.context.height ? (h.reset(), void h.error(v.elementSize, S)) : void 0);
        }, bind: { events: function events() {
            y.on("load" + x, h.event.load).on("resize" + x, h.event.resize), k.off("scroll" + x).on("scroll" + x, h.event.scroll).on("scrollchange" + x, h.event.scrollchange);
          } }, event: { load: function load() {
            h.verbose("Page contents finished loading"), T(h.refresh);
          }, resize: function resize() {
            h.verbose("Window resized"), T(h.refresh);
          }, scroll: function scroll() {
            T(function () {
              k.triggerHandler("scrollchange" + x, k.scrollTop());
            });
          }, scrollchange: function scrollchange(e, t) {
            h.stick(t), g.onScroll.call(z);
          } }, refresh: function refresh(e) {
          h.reset(), g.context || h.determineContext(), e && h.determineContainer(), h.save.positions(), h.stick(), g.onReposition.call(z);
        }, supports: { sticky: function sticky() {
            {
              var t = e("<div/>");t[0];
            }return (t.addClass(b.supported), t.css("position").match("sticky"));
          } }, save: { lastScroll: function lastScroll(e) {
            h.lastScroll = e;
          }, elementScroll: function elementScroll(e) {
            h.elementScroll = e;
          }, positions: function positions() {
            {
              var e = { height: y.height() },
                  t = { margin: { top: parseInt(S.css("margin-top"), 10), bottom: parseInt(S.css("margin-bottom"), 10) }, offset: S.offset(), width: S.outerWidth(), height: S.outerHeight() },
                  o = { offset: u.offset(), height: u.outerHeight(), bottomPadding: parseInt(u.css("padding-bottom"), 10) };({ height: s.outerHeight() });
            }h.cache = { fits: t.height < e.height, window: { height: e.height }, element: { margin: t.margin, top: t.offset.top - t.margin.top, left: t.offset.left, width: t.width, height: t.height, bottom: t.offset.top + t.height }, context: { top: o.offset.top, height: o.height, bottomPadding: o.bottomPadding, bottom: o.offset.top + o.height - o.bottomPadding } }, h.set.containerSize(), h.set.size(), h.stick(), h.debug("Caching element positions", h.cache);
          } }, get: { direction: function direction(e) {
            var t = "down";return (e = e || k.scrollTop(), h.lastScroll !== n && (h.lastScroll < e ? t = "down" : h.lastScroll > e && (t = "up")), t);
          }, scrollChange: function scrollChange(e) {
            return (e = e || k.scrollTop(), h.lastScroll ? e - h.lastScroll : 0);
          }, currentElementScroll: function currentElementScroll() {
            return h.elementScroll ? h.elementScroll : h.is.top() ? Math.abs(parseInt(S.css("top"), 10)) || 0 : Math.abs(parseInt(S.css("bottom"), 10)) || 0;
          }, elementScroll: function elementScroll(e) {
            e = e || k.scrollTop();var t = h.cache.element,
                o = h.cache.window,
                n = h.get.scrollChange(e),
                i = t.height - o.height + g.offset,
                s = h.get.currentElementScroll(),
                r = s + n;return s = h.cache.fits || 0 > r ? 0 : r > i ? i : r;
          } }, remove: { lastScroll: function lastScroll() {
            delete h.lastScroll;
          }, elementScroll: function elementScroll(e) {
            delete h.elementScroll;
          }, offset: function offset() {
            S.css("margin-top", "");
          } }, set: { offset: function offset() {
            h.verbose("Setting offset on element", g.offset), S.css("margin-top", g.offset);
          }, containerSize: function containerSize() {
            var e = s.get(0).tagName;"HTML" === e || "body" == e ? h.determineContainer() : Math.abs(s.outerHeight() - h.cache.context.height) > g.jitter && (h.debug("Context has padding, specifying exact height for container", h.cache.context.height), s.css({ height: h.cache.context.height }));
          }, minimumSize: function minimumSize() {
            var e = h.cache.element;s.css("min-height", e.height);
          }, scroll: function scroll(e) {
            h.debug("Setting scroll on element", e), h.elementScroll != e && (h.is.top() && S.css("bottom", "").css("top", -e), h.is.bottom() && S.css("top", "").css("bottom", e));
          }, size: function size() {
            0 !== h.cache.element.height && 0 !== h.cache.element.width && S.css({ width: h.cache.element.width, height: h.cache.element.height });
          } }, is: { top: function top() {
            return S.hasClass(b.top);
          }, bottom: function bottom() {
            return S.hasClass(b.bottom);
          }, initialPosition: function initialPosition() {
            return !h.is.fixed() && !h.is.bound();
          }, hidden: function hidden() {
            return !S.is(":visible");
          }, bound: function bound() {
            return S.hasClass(b.bound);
          }, fixed: function fixed() {
            return S.hasClass(b.fixed);
          } }, stick: function stick(e) {
          var t = e || k.scrollTop(),
              o = h.cache,
              n = o.fits,
              i = o.element,
              s = o.window,
              r = o.context,
              c = h.is.bottom() && g.pushing ? g.bottomOffset : g.offset,
              e = { top: t + c, bottom: t + c + s.height },
              l = (h.get.direction(e.top), n ? 0 : h.get.elementScroll(e.top)),
              a = !n,
              m = 0 !== i.height;m && (h.is.initialPosition() ? e.top > r.bottom ? (h.debug("Element bottom of container"), h.bindBottom()) : e.top > i.top && (h.debug("Element passed, fixing element to page"), h.fixTop()) : h.is.fixed() ? h.is.top() ? e.top < i.top ? (h.debug("Fixed element reached top of container"), h.setInitialPosition()) : i.height + e.top - l > r.bottom ? (h.debug("Fixed element reached bottom of container"), h.bindBottom()) : a && h.set.scroll(l) : h.is.bottom() && (e.bottom - i.height < i.top ? (h.debug("Bottom fixed rail has reached top of container"), h.setInitialPosition()) : e.bottom > r.bottom ? (h.debug("Bottom fixed rail has reached bottom of container"), h.bindBottom()) : a && h.set.scroll(l)) : h.is.bottom() && (g.pushing ? h.is.bound() && e.bottom < r.bottom && (h.debug("Fixing bottom attached element to bottom of browser."), h.fixBottom()) : h.is.bound() && e.top < r.bottom - i.height && (h.debug("Fixing bottom attached element to top of browser."), h.fixTop()))), h.save.lastScroll(e.top), h.save.elementScroll(l);
        }, bindTop: function bindTop() {
          h.debug("Binding element to top of parent container"), h.remove.offset(), S.css({ left: "", top: "", marginBottom: "" }).removeClass(b.fixed).removeClass(b.bottom).addClass(b.bound).addClass(b.top), g.onTop.call(z), g.onUnstick.call(z);
        }, bindBottom: function bindBottom() {
          h.debug("Binding element to bottom of parent container"), h.remove.offset(), S.css({ left: "", top: "", marginBottom: h.cache.context.bottomPadding }).removeClass(b.fixed).removeClass(b.top).addClass(b.bound).addClass(b.bottom), g.onBottom.call(z), g.onUnstick.call(z);
        }, setInitialPosition: function setInitialPosition() {
          h.unfix(), h.unbind();
        }, fixTop: function fixTop() {
          h.debug("Fixing element to top of page"), h.set.minimumSize(), h.set.offset(), S.css({ left: h.cache.element.left, bottom: "", marginBottom: "" }).removeClass(b.bound).removeClass(b.bottom).addClass(b.fixed).addClass(b.top), g.onStick.call(z);
        }, fixBottom: function fixBottom() {
          h.debug("Sticking element to bottom of page"), h.set.minimumSize(), h.set.offset(), S.css({ left: h.cache.element.left, bottom: "", marginBottom: "" }).removeClass(b.bound).removeClass(b.top).addClass(b.fixed).addClass(b.bottom), g.onStick.call(z);
        }, unbind: function unbind() {
          h.debug("Removing absolute position on element"), h.remove.offset(), S.removeClass(b.bound).removeClass(b.top).removeClass(b.bottom);
        }, unfix: function unfix() {
          h.debug("Removing fixed position on element"), h.remove.offset(), S.removeClass(b.fixed).removeClass(b.top).removeClass(b.bottom), g.onUnstick.call(z);
        }, reset: function reset() {
          h.debug("Reseting elements position"), h.unbind(), h.unfix(), h.resetCSS(), h.remove.offset(), h.remove.lastScroll();
        }, resetCSS: function resetCSS() {
          S.css({ width: "", height: "" }), s.css({ height: "" });
        }, setting: function setting(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, g, t);else {
            if (o === n) return g[t];g[t] = o;
          }
        }, internal: function internal(t, o) {
          if (e.isPlainObject(t)) e.extend(!0, h, t);else {
            if (o === n) return h[t];h[t] = o;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? h.performance.log(arguments) : (h.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), h.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? h.performance.log(arguments) : (h.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), h.verbose.apply(console, arguments)));
        }, error: function error() {
          h.error = Function.prototype.bind.call(console.error, console, g.name + ":"), h.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, o, n;g.performance && (t = new Date().getTime(), n = c || t, o = t - n, c = t, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: z, "Execution Time": o })), clearTimeout(h.performance.timer), h.performance.timer = setTimeout(h.performance.display, 0);
          }, display: function display() {
            var t = g.name + ":",
                o = 0;c = !1, clearTimeout(h.performance.timer), e.each(l, function (e, t) {
              o += t["Execution Time"];
            }), t += " " + o + "ms", r && (t += " '" + r + "'"), (console.group !== n || console.table !== n) && l.length > 0 && (console.groupCollapsed(t), console.table ? console.table(l) : e.each(l, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(t, o, s) {
          var r,
              c,
              l,
              a = w;return (o = o || f, s = z || s, "string" == typeof t && a !== n && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (o, i) {
            var s = o != r ? i + t[o + 1].charAt(0).toUpperCase() + t[o + 1].slice(1) : t;if (e.isPlainObject(a[s]) && o != r) a = a[s];else {
              if (a[s] !== n) return (c = a[s], !1);if (!e.isPlainObject(a[i]) || o == r) return a[i] !== n ? (c = a[i], !1) : !1;a = a[i];
            }
          })), e.isFunction(c) ? l = c.apply(s, o) : c !== n && (l = c), e.isArray(i) ? i.push(l) : i !== n ? i = [i, l] : l !== n && (i = l), c);
        } }, m ? (w === n && h.initialize(), h.invoke(a)) : (w !== n && w.invoke("destroy"), h.initialize());
    }), i !== n ? i : this);
  }, e.fn.sticky.settings = { name: "Sticky", namespace: "sticky", debug: !1, verbose: !0, performance: !0, pushing: !1, context: !1, scrollContext: t, offset: 0, bottomOffset: 0, jitter: 5, observeChanges: !1, onReposition: function onReposition() {}, onScroll: function onScroll() {}, onStick: function onStick() {}, onUnstick: function onUnstick() {}, onTop: function onTop() {}, onBottom: function onBottom() {}, error: { container: "Sticky element must be inside a relative container", visible: "Element is hidden, you must call refresh after element becomes visible", method: "The method you called is not defined.", invalidContext: "Context specified does not exist", elementSize: "Sticky element is larger than its container, cannot create sticky." }, className: { bound: "bound", fixed: "fixed", supported: "native", top: "top", bottom: "bottom" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/tab", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.tab = function (parameters) {

    var
    // use window context if none specified
    $allModules = $.isFunction(this) ? $(window) : $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        initializedHistory = false,
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.tab.settings, parameters) : $.extend({}, $.fn.tab.settings),
          className = settings.className,
          metadata = settings.metadata,
          selector = settings.selector,
          error = settings.error,
          eventNamespace = '.' + settings.namespace,
          moduleNamespace = 'module-' + settings.namespace,
          $module = $(this),
          $context,
          $tabs,
          cache = {},
          firstLoad = true,
          recursionDepth = 0,
          element = this,
          instance = $module.data(moduleNamespace),
          activeTabPath,
          parameterArray,
          module,
          historyEvent;

      module = {

        initialize: function initialize() {
          module.debug('Initializing tab menu item', $module);
          module.fix.callbacks();
          module.determineTabs();

          module.debug('Determining tabs', settings.context, $tabs);
          // set up automatic routing
          if (settings.auto) {
            module.set.auto();
          }
          module.bind.events();

          if (settings.history && !initializedHistory) {
            module.initializeHistory();
            initializedHistory = true;
          }

          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.debug('Destroying tabs', $module);
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        bind: {
          events: function events() {
            // if using $.tab dont add events
            if (!$.isWindow(element)) {
              module.debug('Attaching tab activation events to element', $module);
              $module.on('click' + eventNamespace, module.event.click);
            }
          }
        },

        determineTabs: function determineTabs() {
          var $reference;

          // determine tab context
          if (settings.context === 'parent') {
            if ($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element as parent', $reference);
            } else {
              $reference = $module;
            }
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
          } else if (settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
          } else {
            $context = $('body');
          }
          // find tabs
          if (settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
          } else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
          }
        },

        fix: {
          callbacks: function callbacks() {
            if ($.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit)) {
              if (parameters.onTabLoad) {
                parameters.onLoad = parameters.onTabLoad;
                delete parameters.onTabLoad;
                module.error(error.legacyLoad, parameters.onLoad);
              }
              if (parameters.onTabInit) {
                parameters.onFirstLoad = parameters.onTabInit;
                delete parameters.onTabInit;
                module.error(error.legacyInit, parameters.onFirstLoad);
              }
              settings = $.extend(true, {}, $.fn.tab.settings, parameters);
            }
          }
        },

        initializeHistory: function initializeHistory() {
          module.debug('Initializing page state');
          if ($.address === undefined) {
            module.error(error.state);
            return false;
          } else {
            if (settings.historyType == 'state') {
              module.debug('Using HTML5 to manage state');
              if (settings.path !== false) {
                $.address.history(true).state(settings.path);
              } else {
                module.error(error.path);
                return false;
              }
            }
            $.address.bind('change', module.event.history.change);
          }
        },

        event: {
          click: function click(event) {
            var tabPath = $(this).data(metadata.tab);
            if (tabPath !== undefined) {
              if (settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
              } else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
              }
              event.preventDefault();
            } else {
              module.debug('No tab specified');
            }
          },
          history: {
            change: function change(event) {
              var tabPath = event.pathNames.join('/') || module.get.initialPath(),
                  pageTitle = settings.templates.determineTitle(tabPath) || false;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if (tabPath !== undefined) {
                module.changeTab(tabPath);
              }
              if (pageTitle) {
                $.address.title(pageTitle);
              }
            }
          }
        },

        refresh: function refresh() {
          if (activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
          }
        },

        cache: {

          read: function read(cacheKey) {
            return cacheKey !== undefined ? cache[cacheKey] : false;
          },
          add: function add(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
          },
          remove: function remove(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
          }
        },

        set: {
          auto: function auto() {
            var url = typeof settings.path == 'string' ? settings.path.replace(/\/$/, '') + '/{$tab}' : '/{$tab}';
            module.verbose('Setting up automatic tab retrieval from server', url);
            if ($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
            } else {
              settings.apiSettings = {
                url: url
              };
            }
          },
          loading: function loading(tabPath) {
            var $tab = module.get.tabElement(tabPath),
                isLoading = $tab.hasClass(className.loading);
            if (!isLoading) {
              module.verbose('Setting loading state for', $tab);
              $tab.addClass(className.loading).siblings($tabs).removeClass(className.active + ' ' + className.loading);
              if ($tab.length > 0) {
                settings.onRequest.call($tab[0], tabPath);
              }
            }
          },
          state: function state(_state) {
            $.address.value(_state);
          }
        },

        changeTab: function changeTab(tabPath) {
          var pushStateAvailable = window.history && window.history.pushState,
              shouldIgnoreLoad = pushStateAvailable && settings.ignoreFirstLoad && firstLoad,
              remoteContent = settings.auto || $.isPlainObject(settings.apiSettings),

          // only add default path if not remote content
          pathArray = remoteContent && !shouldIgnoreLoad ? module.utilities.pathToArray(tabPath) : module.get.defaultPathArray(tabPath);
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function (index, tab) {
            var currentPathArray = pathArray.slice(0, index + 1),
                currentPath = module.utilities.arrayToPath(currentPathArray),
                isTab = module.is.tab(currentPath),
                isLastIndex = index + 1 == pathArray.length,
                $tab = module.get.tabElement(currentPath),
                $anchor,
                nextPathArray,
                nextPath,
                isLastTab;
            module.verbose('Looking for tab', tab);
            if (isTab) {
              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if (isLastIndex) {
                isLastTab = true;
              } else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath = module.utilities.arrayToPath(nextPathArray);
                isLastTab = !module.is.tab(nextPath);
                if (isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
                }
              }
              if (isLastTab && remoteContent) {
                if (!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.fetch.content(currentPath, tabPath);
                } else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                return false;
              } else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if (!module.cache.read(currentPath)) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              }
            } else if (tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              $anchor = $('#' + tabPath + ', a[name="' + tabPath + '"]');
              currentPath = $anchor.closest('[data-tab]').data('tab');
              $tab = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if ($anchor && $anchor.length > 0 && currentPath) {
                module.debug('Anchor link used, opening parent tab', $tab, $anchor);
                if (!$tab.hasClass(className.active)) {
                  setTimeout(function () {
                    module.scrollTo($anchor);
                  }, 0);
                }
                module.activate.all(currentPath);
                if (!module.cache.read(currentPath)) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                }
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                return false;
              }
            } else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
            }
          });
        },

        scrollTo: function scrollTo($element) {
          var scrollOffset = $element && $element.length > 0 ? $element.offset().top : false;
          if (scrollOffset !== false) {
            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);
            $(document).scrollTop(scrollOffset);
          }
        },

        update: {
          content: function content(tabPath, html, evaluateScripts) {
            var $tab = module.get.tabElement(tabPath),
                tab = $tab[0];
            evaluateScripts = evaluateScripts !== undefined ? evaluateScripts : settings.evaluateScripts;
            if (evaluateScripts) {
              module.debug('Updating HTML and evaluating inline scripts', tabPath, html);
              $tab.html(html);
            } else {
              module.debug('Updating HTML', tabPath, html);
              tab.innerHTML = html;
            }
          }
        },

        fetch: {

          content: function content(tabPath, fullTabPath) {
            var $tab = module.get.tabElement(tabPath),
                apiSettings = {
              dataType: 'html',
              on: 'now',
              cache: 'local',
              onSuccess: function onSuccess(response) {
                module.cache.add(fullTabPath, response);
                module.update.content(tabPath, response);
                if (tabPath == activeTabPath) {
                  module.debug('Content loaded', tabPath);
                  module.activate.tab(tabPath);
                } else {
                  module.debug('Content loaded in background', tabPath);
                }
                settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
              },
              urlData: {
                tab: fullTabPath
              }
            },
                request = $tab.api('get request') || false,
                existingRequest = request && request.state() === 'pending',
                requestSettings,
                cachedContent;

            fullTabPath = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);

            if (settings.cache && cachedContent) {
              module.activate.tab(tabPath);
              module.debug('Adding cached content', fullTabPath);
              if (settings.evaluateScripts == 'once') {
                module.update.content(tabPath, cachedContent, false);
              } else {
                module.update.content(tabPath, cachedContent);
              }
              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
            } else if (existingRequest) {
              module.set.loading(tabPath);
              module.debug('Content is already loading', fullTabPath);
            } else if ($.api !== undefined) {
              requestSettings = $.extend(true, {
                headers: {
                  'X-Remote': true
                }
              }, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              $tab.api(requestSettings);
            } else {
              module.error(error.api);
            }
          }
        },

        activate: {
          all: function all(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
          },
          tab: function tab(tabPath) {
            var $tab = module.get.tabElement(tabPath),
                isActive = $tab.hasClass(className.active);
            module.verbose('Showing tab content for', $tab);
            if (!isActive) {
              $tab.addClass(className.active).siblings($tabs).removeClass(className.active + ' ' + className.loading);
              if ($tab.length > 0) {
                settings.onVisible.call($tab[0], tabPath);
              }
            }
          },
          navigation: function navigation(tabPath) {
            var $navigation = module.get.navElement(tabPath),
                isActive = $navigation.hasClass(className.active);
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            if (!isActive) {
              $navigation.addClass(className.active).siblings($allModules).removeClass(className.active + ' ' + className.loading);
            }
          }
        },

        deactivate: {
          all: function all() {
            module.deactivate.navigation();
            module.deactivate.tabs();
          },
          navigation: function navigation() {
            $allModules.removeClass(className.active);
          },
          tabs: function tabs() {
            $tabs.removeClass(className.active + ' ' + className.loading);
          }
        },

        is: {
          tab: function tab(tabName) {
            return tabName !== undefined ? module.get.tabElement(tabName).length > 0 : false;
          }
        },

        get: {
          initialPath: function initialPath() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
          },
          path: function path() {
            return $.address.value();
          },
          // adds default tabs to tab path
          defaultPathArray: function defaultPathArray(tabPath) {
            return module.utilities.pathToArray(module.get.defaultPath(tabPath));
          },
          defaultPath: function defaultPath(tabPath) {
            var $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),
                defaultTab = $defaultNav.data(metadata.tab) || false;
            if (defaultTab) {
              module.debug('Found default tab', defaultTab);
              if (recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
              }
              module.error(error.recursion);
            } else {
              module.debug('No default tabs found for', tabPath, $tabs);
            }
            recursionDepth = 0;
            return tabPath;
          },
          navElement: function navElement(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
          },
          tabElement: function tabElement(tabPath) {
            var $fullPathTab, $simplePathTab, tabPathArray, lastTab;
            tabPath = tabPath || activeTabPath;
            tabPathArray = module.utilities.pathToArray(tabPath);
            lastTab = module.utilities.last(tabPathArray);
            $fullPathTab = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');
            return $fullPathTab.length > 0 ? $fullPathTab : $simplePathTab;
          },
          tab: function tab() {
            return activeTabPath;
          }
        },

        utilities: {
          filterArray: function filterArray(keepArray, removeArray) {
            return $.grep(keepArray, function (keepValue) {
              return $.inArray(keepValue, removeArray) == -1;
            });
          },
          last: function last(array) {
            return $.isArray(array) ? array[array.length - 1] : false;
          },
          pathToArray: function pathToArray(pathName) {
            if (pathName === undefined) {
              pathName = activeTabPath;
            }
            return typeof pathName == 'string' ? pathName.split('/') : [pathName];
          },
          arrayToPath: function arrayToPath(pathArray) {
            return $.isArray(pathArray) ? pathArray.join('/') : false;
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  // shortcut for tabbed content with no defined navigation
  $.tab = function () {
    $(window).tab.apply(this, arguments);
  };

  $.fn.tab.settings = {

    name: 'Tab',
    namespace: 'tab',

    debug: false,
    verbose: false,
    performance: true,

    auto: false, // uses pjax style endpoints fetching content from same url with remote-content headers
    history: false, // use browser history
    historyType: 'hash', // #/ or html5 state
    path: false, // base path of url

    context: false, // specify a context that tabs must appear inside
    childrenOnly: false, // use only tabs that are children of context
    maxDepth: 25, // max depth a tab can be nested

    alwaysRefresh: false, // load tab content new every tab click
    cache: true, // cache the content requests to pull locally
    ignoreFirstLoad: false, // don't load remote content on first load

    apiSettings: false, // settings for api call
    evaluateScripts: 'once', // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content

    onFirstLoad: function onFirstLoad(tabPath, parameterArray, historyEvent) {}, // called first time loaded
    onLoad: function onLoad(tabPath, parameterArray, historyEvent) {}, // called on every load
    onVisible: function onVisible(tabPath, parameterArray, historyEvent) {}, // called every time tab visible
    onRequest: function onRequest(tabPath, parameterArray, historyEvent) {}, // called ever time a tab beings loading remote content

    templates: {
      determineTitle: function determineTitle(tabArray) {} // returns page title for path
    },

    error: {
      api: 'You attempted to load content without API module',
      method: 'The method you called is not defined',
      missingTab: 'Activated tab cannot be found. Tabs are case-sensitive.',
      noContent: 'The tab you specified is missing a content url.',
      path: 'History enabled, but no path was specified',
      recursion: 'Max recursive depth reached',
      legacyInit: 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',
      legacyLoad: 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',
      state: 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
    },

    metadata: {
      tab: 'tab',
      loaded: 'loaded',
      promise: 'promise'
    },

    className: {
      loading: 'loading',
      active: 'active'
    },

    selector: {
      tabs: '.ui.tab',
      ui: '.ui'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/tab.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Tab
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, a, n) {
  "use strict";e.fn.tab = function (i) {
    var o,
        r = e(e.isFunction(this) ? t : this),
        s = r.selector || "",
        c = new Date().getTime(),
        l = [],
        d = arguments[0],
        u = "string" == typeof d,
        b = [].slice.call(arguments, 1),
        g = !1;return (r.each(function () {
      var f,
          h,
          p,
          m,
          v,
          y,
          T = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.tab.settings, i) : e.extend({}, e.fn.tab.settings),
          L = T.className,
          x = T.metadata,
          A = T.selector,
          P = T.error,
          C = "." + T.namespace,
          F = "module-" + T.namespace,
          S = e(this),
          E = {},
          j = !0,
          k = 0,
          I = this,
          w = S.data(F);v = { initialize: function initialize() {
          v.debug("Initializing tab menu item", S), v.fix.callbacks(), v.determineTabs(), v.debug("Determining tabs", T.context, h), T.auto && v.set.auto(), v.bind.events(), T.history && !g && (v.initializeHistory(), g = !0), v.instantiate();
        }, instantiate: function instantiate() {
          v.verbose("Storing instance of module", v), w = v, S.data(F, v);
        }, destroy: function destroy() {
          v.debug("Destroying tabs", S), S.removeData(F).off(C);
        }, bind: { events: function events() {
            e.isWindow(I) || (v.debug("Attaching tab activation events to element", S), S.on("click" + C, v.event.click));
          } }, determineTabs: function determineTabs() {
          var t;"parent" === T.context ? (S.closest(A.ui).length > 0 ? (t = S.closest(A.ui), v.verbose("Using closest UI element as parent", t)) : t = S, f = t.parent(), v.verbose("Determined parent element for creating context", f)) : T.context ? (f = e(T.context), v.verbose("Using selector for tab context", T.context, f)) : f = e("body"), T.childrenOnly ? (h = f.children(A.tabs), v.debug("Searching tab context children for tabs", f, h)) : (h = f.find(A.tabs), v.debug("Searching tab context for tabs", f, h));
        }, fix: { callbacks: function callbacks() {
            e.isPlainObject(i) && (i.onTabLoad || i.onTabInit) && (i.onTabLoad && (i.onLoad = i.onTabLoad, delete i.onTabLoad, v.error(P.legacyLoad, i.onLoad)), i.onTabInit && (i.onFirstLoad = i.onTabInit, delete i.onTabInit, v.error(P.legacyInit, i.onFirstLoad)), T = e.extend(!0, {}, e.fn.tab.settings, i));
          } }, initializeHistory: function initializeHistory() {
          if ((v.debug("Initializing page state"), e.address === n)) return (v.error(P.state), !1);if ("state" == T.historyType) {
            if ((v.debug("Using HTML5 to manage state"), T.path === !1)) return (v.error(P.path), !1);e.address.history(!0).state(T.path);
          }e.address.bind("change", v.event.history.change);
        }, event: { click: function click(t) {
            var a = e(this).data(x.tab);a !== n ? (T.history ? (v.verbose("Updating page state", t), e.address.value(a)) : (v.verbose("Changing tab", t), v.changeTab(a)), t.preventDefault()) : v.debug("No tab specified");
          }, history: { change: function change(t) {
              var a = t.pathNames.join("/") || v.get.initialPath(),
                  i = T.templates.determineTitle(a) || !1;v.performance.display(), v.debug("History change event", a, t), y = t, a !== n && v.changeTab(a), i && e.address.title(i);
            } } }, refresh: function refresh() {
          p && (v.debug("Refreshing tab", p), v.changeTab(p));
        }, cache: { read: function read(e) {
            return e !== n ? E[e] : !1;
          }, add: function add(e, t) {
            e = e || p, v.debug("Adding cached content for", e), E[e] = t;
          }, remove: function remove(e) {
            e = e || p, v.debug("Removing cached content for", e), delete E[e];
          } }, set: { auto: function auto() {
            var t = "string" == typeof T.path ? T.path.replace(/\/$/, "") + "/{$tab}" : "/{$tab}";v.verbose("Setting up automatic tab retrieval from server", t), e.isPlainObject(T.apiSettings) ? T.apiSettings.url = t : T.apiSettings = { url: t };
          }, loading: function loading(e) {
            var t = v.get.tabElement(e),
                a = t.hasClass(L.loading);a || (v.verbose("Setting loading state for", t), t.addClass(L.loading).siblings(h).removeClass(L.active + " " + L.loading), t.length > 0 && T.onRequest.call(t[0], e));
          }, state: function state(t) {
            e.address.value(t);
          } }, changeTab: function changeTab(a) {
          var n = t.history && t.history.pushState,
              i = n && T.ignoreFirstLoad && j,
              o = T.auto || e.isPlainObject(T.apiSettings),
              r = o && !i ? v.utilities.pathToArray(a) : v.get.defaultPathArray(a);a = v.utilities.arrayToPath(r), e.each(r, function (t, n) {
            var s,
                c,
                l,
                d,
                u = r.slice(0, t + 1),
                b = v.utilities.arrayToPath(u),
                g = v.is.tab(b),
                h = t + 1 == r.length,
                x = v.get.tabElement(b);if ((v.verbose("Looking for tab", n), g)) {
              if ((v.verbose("Tab was found", n), p = b, m = v.utilities.filterArray(r, u), h ? d = !0 : (c = r.slice(0, t + 2), l = v.utilities.arrayToPath(c), d = !v.is.tab(l), d && v.verbose("Tab parameters found", c)), d && o)) return (i ? (v.debug("Ignoring remote content on first tab load", b), j = !1, v.cache.add(a, x.html()), v.activate.all(b), T.onFirstLoad.call(x[0], b, m, y), T.onLoad.call(x[0], b, m, y)) : (v.activate.navigation(b), v.fetch.content(b, a)), !1);v.debug("Opened local tab", b), v.activate.all(b), v.cache.read(b) || (v.cache.add(b, !0), v.debug("First time tab loaded calling tab init"), T.onFirstLoad.call(x[0], b, m, y)), T.onLoad.call(x[0], b, m, y);
            } else {
              if (-1 != a.search("/") || "" === a) return (v.error(P.missingTab, S, f, b), !1);if ((s = e("#" + a + ", a[name=\"" + a + "\"]"), b = s.closest("[data-tab]").data("tab"), x = v.get.tabElement(b), s && s.length > 0 && b)) return (v.debug("Anchor link used, opening parent tab", x, s), x.hasClass(L.active) || setTimeout(function () {
                v.scrollTo(s);
              }, 0), v.activate.all(b), v.cache.read(b) || (v.cache.add(b, !0), v.debug("First time tab loaded calling tab init"), T.onFirstLoad.call(x[0], b, m, y)), T.onLoad.call(x[0], b, m, y), !1);
            }
          });
        }, scrollTo: function scrollTo(t) {
          var n = t && t.length > 0 ? t.offset().top : !1;n !== !1 && (v.debug("Forcing scroll to an in-page link in a hidden tab", n, t), e(a).scrollTop(n));
        }, update: { content: function content(e, t, a) {
            var i = v.get.tabElement(e),
                o = i[0];a = a !== n ? a : T.evaluateScripts, a ? (v.debug("Updating HTML and evaluating inline scripts", e, t), i.html(t)) : (v.debug("Updating HTML", e, t), o.innerHTML = t);
          } }, fetch: { content: function content(t, a) {
            var i,
                o,
                r = v.get.tabElement(t),
                s = { dataType: "html", on: "now", cache: "local", onSuccess: function onSuccess(e) {
                v.cache.add(a, e), v.update.content(t, e), t == p ? (v.debug("Content loaded", t), v.activate.tab(t)) : v.debug("Content loaded in background", t), T.onFirstLoad.call(r[0], t, m, y), T.onLoad.call(r[0], t, m, y);
              }, urlData: { tab: a } },
                c = r.api("get request") || !1,
                l = c && "pending" === c.state();a = a || t, o = v.cache.read(a), T.cache && o ? (v.activate.tab(t), v.debug("Adding cached content", a), "once" == T.evaluateScripts ? v.update.content(t, o, !1) : v.update.content(t, o), T.onLoad.call(r[0], t, m, y)) : l ? (v.set.loading(t), v.debug("Content is already loading", a)) : e.api !== n ? (i = e.extend(!0, { headers: { "X-Remote": !0 } }, T.apiSettings, s), v.debug("Retrieving remote content", a, i), r.api(i)) : v.error(P.api);
          } }, activate: { all: function all(e) {
            v.activate.tab(e), v.activate.navigation(e);
          }, tab: function tab(e) {
            var t = v.get.tabElement(e),
                a = t.hasClass(L.active);v.verbose("Showing tab content for", t), a || (t.addClass(L.active).siblings(h).removeClass(L.active + " " + L.loading), t.length > 0 && T.onVisible.call(t[0], e));
          }, navigation: function navigation(e) {
            var t = v.get.navElement(e),
                a = t.hasClass(L.active);v.verbose("Activating tab navigation for", t, e), a || t.addClass(L.active).siblings(r).removeClass(L.active + " " + L.loading);
          } }, deactivate: { all: function all() {
            v.deactivate.navigation(), v.deactivate.tabs();
          }, navigation: function navigation() {
            r.removeClass(L.active);
          }, tabs: function tabs() {
            h.removeClass(L.active + " " + L.loading);
          } }, is: { tab: function tab(e) {
            return e !== n ? v.get.tabElement(e).length > 0 : !1;
          } }, get: { initialPath: function initialPath() {
            return r.eq(0).data(x.tab) || h.eq(0).data(x.tab);
          }, path: function path() {
            return e.address.value();
          }, defaultPathArray: function defaultPathArray(e) {
            return v.utilities.pathToArray(v.get.defaultPath(e));
          }, defaultPath: function defaultPath(e) {
            var t = r.filter("[data-" + x.tab + "^=\"" + e + "/\"]").eq(0),
                a = t.data(x.tab) || !1;if (a) {
              if ((v.debug("Found default tab", a), k < T.maxDepth)) return (k++, v.get.defaultPath(a));v.error(P.recursion);
            } else v.debug("No default tabs found for", e, h);return (k = 0, e);
          }, navElement: function navElement(e) {
            return (e = e || p, r.filter("[data-" + x.tab + "=\"" + e + "\"]"));
          }, tabElement: function tabElement(e) {
            var t, a, n, i;return (e = e || p, n = v.utilities.pathToArray(e), i = v.utilities.last(n), t = h.filter("[data-" + x.tab + "=\"" + i + "\"]"), a = h.filter("[data-" + x.tab + "=\"" + e + "\"]"), t.length > 0 ? t : a);
          }, tab: function tab() {
            return p;
          } }, utilities: { filterArray: function filterArray(t, a) {
            return e.grep(t, function (t) {
              return -1 == e.inArray(t, a);
            });
          }, last: function last(t) {
            return e.isArray(t) ? t[t.length - 1] : !1;
          }, pathToArray: function pathToArray(e) {
            return (e === n && (e = p), "string" == typeof e ? e.split("/") : [e]);
          }, arrayToPath: function arrayToPath(t) {
            return e.isArray(t) ? t.join("/") : !1;
          } }, setting: function setting(t, a) {
          if ((v.debug("Changing setting", t, a), e.isPlainObject(t))) e.extend(!0, T, t);else {
            if (a === n) return T[t];T[t] = a;
          }
        }, internal: function internal(t, a) {
          if (e.isPlainObject(t)) e.extend(!0, v, t);else {
            if (a === n) return v[t];v[t] = a;
          }
        }, debug: function debug() {
          T.debug && (T.performance ? v.performance.log(arguments) : (v.debug = Function.prototype.bind.call(console.info, console, T.name + ":"), v.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          T.verbose && T.debug && (T.performance ? v.performance.log(arguments) : (v.verbose = Function.prototype.bind.call(console.info, console, T.name + ":"), v.verbose.apply(console, arguments)));
        }, error: function error() {
          v.error = Function.prototype.bind.call(console.error, console, T.name + ":"), v.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, a, n;T.performance && (t = new Date().getTime(), n = c || t, a = t - n, c = t, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: I, "Execution Time": a })), clearTimeout(v.performance.timer), v.performance.timer = setTimeout(v.performance.display, 500);
          }, display: function display() {
            var t = T.name + ":",
                a = 0;c = !1, clearTimeout(v.performance.timer), e.each(l, function (e, t) {
              a += t["Execution Time"];
            }), t += " " + a + "ms", s && (t += " '" + s + "'"), (console.group !== n || console.table !== n) && l.length > 0 && (console.groupCollapsed(t), console.table ? console.table(l) : e.each(l, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(t, a, i) {
          var r,
              s,
              c,
              l = w;return (a = a || b, i = I || i, "string" == typeof t && l !== n && (t = t.split(/[\. ]/), r = t.length - 1, e.each(t, function (a, i) {
            var o = a != r ? i + t[a + 1].charAt(0).toUpperCase() + t[a + 1].slice(1) : t;if (e.isPlainObject(l[o]) && a != r) l = l[o];else {
              if (l[o] !== n) return (s = l[o], !1);if (!e.isPlainObject(l[i]) || a == r) return l[i] !== n ? (s = l[i], !1) : (v.error(P.method, t), !1);l = l[i];
            }
          })), e.isFunction(s) ? c = s.apply(i, a) : s !== n && (c = s), e.isArray(o) ? o.push(c) : o !== n ? o = [o, c] : c !== n && (o = c), s);
        } }, u ? (w === n && v.initialize(), v.invoke(d)) : (w !== n && w.invoke("destroy"), v.initialize());
    }), o !== n ? o : this);
  }, e.tab = function () {
    e(t).tab.apply(this, arguments);
  }, e.fn.tab.settings = { name: "Tab", namespace: "tab", debug: !1, verbose: !1, performance: !0, auto: !1, history: !1, historyType: "hash", path: !1, context: !1, childrenOnly: !1, maxDepth: 25, alwaysRefresh: !1, cache: !0, ignoreFirstLoad: !1, apiSettings: !1, evaluateScripts: "once", onFirstLoad: function onFirstLoad(e, t, a) {}, onLoad: function onLoad(e, t, a) {}, onVisible: function onVisible(e, t, a) {}, onRequest: function onRequest(e, t, a) {}, templates: { determineTitle: function determineTitle(e) {} }, error: { api: "You attempted to load content without API module", method: "The method you called is not defined", missingTab: "Activated tab cannot be found. Tabs are case-sensitive.", noContent: "The tab you specified is missing a content url.", path: "History enabled, but no path was specified", recursion: "Max recursive depth reached", legacyInit: "onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.", legacyLoad: "onTabLoad has been renamed to onLoad in 2.0. Please adjust your code", state: "History requires Asual's Address library <https://github.com/asual/jquery-address>" }, metadata: { tab: "tab", loaded: "loaded", promise: "promise" }, className: { loading: "loading", active: "active" }, selector: { tabs: ".ui.tab", ui: ".ui" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/transition", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.transition = function () {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        moduleArguments = arguments,
        query = moduleArguments[0],
        queryArguments = [].slice.call(arguments, 1),
        methodInvoked = typeof query === 'string',
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;
    $allModules.each(function (index) {
      var $module = $(this),
          element = this,

      // set at run time
      settings,
          instance,
          error,
          className,
          metadata,
          animationEnd,
          animationName,
          namespace,
          moduleNamespace,
          eventNamespace,
          module;

      module = {

        initialize: function initialize() {

          // get full settings
          settings = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className = settings.className;
          error = settings.error;
          metadata = settings.metadata;

          // define namespace
          eventNamespace = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd = module.get.animationEndEvent();

          if (methodInvoked) {
            methodInvoked = module.invoke(query);
          }

          // method not invoked, lets run an animation
          if (methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if (settings.interval) {
              module.delay(settings.animate);
            } else {
              module.animate();
            }
            module.instantiate();
          }
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, instance);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module for', element);
          $module.removeData(moduleNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
        },

        forceRepaint: function forceRepaint() {
          module.verbose('Forcing element repaint');
          var $parentElement = $module.parent(),
              $nextElement = $module.next();
          if ($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
          } else {
            $module.detach().insertBefore($nextElement);
          }
        },

        repaint: function repaint() {
          module.verbose('Repainting element');
          var fakeAssignment = element.offsetWidth;
        },

        delay: function delay(interval) {
          var direction = module.get.animationDirection(),
              shouldReverse,
              delay;
          if (!direction) {
            direction = module.can.transition() ? module.get.direction() : 'static';
          }
          interval = interval !== undefined ? interval : settings.interval;
          shouldReverse = settings.reverse == 'auto' && direction == className.outward;
          delay = shouldReverse || settings.reverse == true ? ($allModules.length - index) * settings.interval : index * settings.interval;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
        },

        animate: function animate(overrideSettings) {
          settings = overrideSettings || settings;
          if (!module.is.supported()) {
            module.error(error.support);
            return false;
          }
          module.debug('Preparing animation', settings.animation);
          if (module.is.animating()) {
            if (settings.queue) {
              if (!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              } else {
                module.queue(settings.animation);
              }
              return false;
            } else if (!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
            } else {
              module.debug('New animation started, completing previous early', settings.animation);
              instance.complete();
            }
          }
          if (module.can.animate()) {
            module.set.animating(settings.animation);
          } else {
            module.error(error.noAnimation, settings.animation, element);
          }
        },

        reset: function reset() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
        },

        queue: function queue(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module.one(animationEnd + '.queue' + eventNamespace, function () {
            module.queuing = false;
            module.repaint();
            module.animate.apply(this, settings);
          });
        },

        complete: function complete(event) {
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if (!module.is.looping()) {
            if (module.is.outward()) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
            } else if (module.is.inward()) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
            } else {
              module.restore.conditions();
            }
          }
        },

        force: {
          visible: function visible() {
            var style = $module.attr('style'),
                userStyle = module.get.userStyle(),
                displayType = module.get.displayType(),
                overrideStyle = userStyle + 'display: ' + displayType + ' !important;',
                currentDisplay = $module.css('display'),
                emptyStyle = style === undefined || style === '';
            if (currentDisplay !== displayType) {
              module.verbose('Overriding default display to show element', displayType);
              $module.attr('style', overrideStyle);
            } else if (emptyStyle) {
              $module.removeAttr('style');
            }
          },
          hidden: function hidden() {
            var style = $module.attr('style'),
                currentDisplay = $module.css('display'),
                emptyStyle = style === undefined || style === '';
            if (currentDisplay !== 'none' && !module.is.hidden()) {
              module.verbose('Overriding default display to hide element');
              $module.css('display', 'none');
            } else if (emptyStyle) {
              $module.removeAttr('style');
            }
          }
        },

        has: {
          direction: function direction(animation) {
            var hasDirection = false;
            animation = animation || settings.animation;
            if (typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function (index, word) {
                if (word === className.inward || word === className.outward) {
                  hasDirection = true;
                }
              });
            }
            return hasDirection;
          },
          inlineDisplay: function inlineDisplay() {
            var style = $module.attr('style') || '';
            return $.isArray(style.match(/display.*?;/, ''));
          }
        },

        set: {
          animating: function animating(animation) {
            var animationClass, direction;
            // remove previous callbacks
            module.remove.completeCallback();

            // determine exact animation
            animation = animation || settings.animation;
            animationClass = module.get.animationClass(animation);

            // save animation class in cache to restore class names
            module.save.animation(animationClass);

            // override display if necessary so animation appears visibly
            module.force.visible();

            module.remove.hidden();
            module.remove.direction();

            module.start.animation(animationClass);
          },
          duration: function duration(animationName, _duration) {
            _duration = _duration || settings.duration;
            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;
            if (_duration || _duration === 0) {
              module.verbose('Setting animation duration', _duration);
              $module.css({
                'animation-duration': _duration
              });
            }
          },
          direction: function direction(_direction) {
            _direction = _direction || module.get.direction();
            if (_direction == className.inward) {
              module.set.inward();
            } else {
              module.set.outward();
            }
          },
          looping: function looping() {
            module.debug('Transition set to loop');
            $module.addClass(className.looping);
          },
          hidden: function hidden() {
            $module.addClass(className.transition).addClass(className.hidden);
          },
          inward: function inward() {
            module.debug('Setting direction to inward');
            $module.removeClass(className.outward).addClass(className.inward);
          },
          outward: function outward() {
            module.debug('Setting direction to outward');
            $module.removeClass(className.inward).addClass(className.outward);
          },
          visible: function visible() {
            $module.addClass(className.transition).addClass(className.visible);
          }
        },

        start: {
          animation: function animation(animationClass) {
            animationClass = animationClass || module.get.animationClass();
            module.debug('Starting tween', animationClass);
            $module.addClass(animationClass).one(animationEnd + '.complete' + eventNamespace, module.complete);
            if (settings.useFailSafe) {
              module.add.failSafe();
            }
            module.set.duration(settings.duration);
            settings.onStart.call(this);
          }
        },

        save: {
          animation: function animation(_animation) {
            if (!module.cache) {
              module.cache = {};
            }
            module.cache.animation = _animation;
          },
          displayType: function displayType(_displayType) {
            if (_displayType !== 'none') {
              $module.data(metadata.displayType, _displayType);
            }
          },
          transitionExists: function transitionExists(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
          }
        },

        restore: {
          conditions: function conditions() {
            var animation = module.get.currentAnimation();
            if (animation) {
              $module.removeClass(animation);
              module.verbose('Removing animation class', module.cache);
            }
            module.remove.duration();
          }
        },

        add: {
          failSafe: function failSafe() {
            var duration = module.get.duration();
            module.timer = setTimeout(function () {
              $module.triggerHandler(animationEnd);
            }, duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
          }
        },

        remove: {
          animating: function animating() {
            $module.removeClass(className.animating);
          },
          animationCallbacks: function animationCallbacks() {
            module.remove.queueCallback();
            module.remove.completeCallback();
          },
          queueCallback: function queueCallback() {
            $module.off('.queue' + eventNamespace);
          },
          completeCallback: function completeCallback() {
            $module.off('.complete' + eventNamespace);
          },
          display: function display() {
            $module.css('display', '');
          },
          direction: function direction() {
            $module.removeClass(className.inward).removeClass(className.outward);
          },
          duration: function duration() {
            $module.css('animation-duration', '');
          },
          failSafe: function failSafe() {
            module.verbose('Removing fail safe timer', module.timer);
            if (module.timer) {
              clearTimeout(module.timer);
            }
          },
          hidden: function hidden() {
            $module.removeClass(className.hidden);
          },
          visible: function visible() {
            $module.removeClass(className.visible);
          },
          looping: function looping() {
            module.debug('Transitions are no longer looping');
            if (module.is.looping()) {
              module.reset();
              $module.removeClass(className.looping);
            }
          },
          transition: function transition() {
            $module.removeClass(className.visible).removeClass(className.hidden);
          }
        },
        get: {
          settings: function settings(animation, duration, onComplete) {
            // single settings object
            if (typeof animation == 'object') {
              return $.extend(true, {}, $.fn.transition.settings, animation);
            }
            // all arguments provided
            else if (typeof onComplete == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                onComplete: onComplete,
                duration: duration
              });
            }
            // only duration provided
            else if (typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                duration: duration
              });
            }
            // duration is actually settings object
            else if (typeof duration == 'object') {
              return $.extend({}, $.fn.transition.settings, duration, {
                animation: animation
              });
            }
            // duration is actually callback
            else if (typeof duration == 'function') {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation,
                onComplete: duration
              });
            }
            // only animation provided
            else {
              return $.extend({}, $.fn.transition.settings, {
                animation: animation
              });
            }
            return $.fn.transition.settings;
          },
          animationClass: function animationClass(animation) {
            var animationClass = animation || settings.animation,
                directionClass = module.can.transition() && !module.has.direction() ? module.get.direction() + ' ' : '';
            return className.animating + ' ' + className.transition + ' ' + directionClass + animationClass;
          },
          currentAnimation: function currentAnimation() {
            return module.cache.animation || false;
          },
          currentDirection: function currentDirection() {
            return module.is.inward() ? className.inward : className.outward;
          },
          direction: function direction() {
            return module.is.hidden() || !module.is.visible() ? className.inward : className.outward;
          },
          animationDirection: function animationDirection(animation) {
            var direction;
            animation = animation || settings.animation;
            if (typeof animation === 'string') {
              animation = animation.split(' ');
              // search animation name for out/in class
              $.each(animation, function (index, word) {
                if (word === className.inward) {
                  direction = className.inward;
                } else if (word === className.outward) {
                  direction = className.outward;
                }
              });
            }
            // return found direction
            if (direction) {
              return direction;
            }
            return false;
          },
          duration: function duration(_duration2) {
            _duration2 = _duration2 || settings.duration;
            if (_duration2 === false) {
              _duration2 = $module.css('animation-duration') || 0;
            }
            return typeof _duration2 === 'string' ? _duration2.indexOf('ms') > -1 ? parseFloat(_duration2) : parseFloat(_duration2) * 1000 : _duration2;
          },
          displayType: function displayType() {
            if (settings.displayType) {
              return settings.displayType;
            }
            if ($module.data(metadata.displayType) === undefined) {
              // create fake element to determine display state
              module.can.transition(true);
            }
            return $module.data(metadata.displayType);
          },
          userStyle: function userStyle(style) {
            style = style || $module.attr('style') || '';
            return style.replace(/display.*?;/, '');;
          },
          transitionExists: function transitionExists(animation) {
            return $.fn.transition.exists[animation];
          },
          animationStartEvent: function animationStartEvent() {
            var element = document.createElement('div'),
                animations = {
              'animation': 'animationstart',
              'OAnimation': 'oAnimationStart',
              'MozAnimation': 'mozAnimationStart',
              'WebkitAnimation': 'webkitAnimationStart'
            },
                animation;
            for (animation in animations) {
              if (element.style[animation] !== undefined) {
                return animations[animation];
              }
            }
            return false;
          },
          animationEndEvent: function animationEndEvent() {
            var element = document.createElement('div'),
                animations = {
              'animation': 'animationend',
              'OAnimation': 'oAnimationEnd',
              'MozAnimation': 'mozAnimationEnd',
              'WebkitAnimation': 'webkitAnimationEnd'
            },
                animation;
            for (animation in animations) {
              if (element.style[animation] !== undefined) {
                return animations[animation];
              }
            }
            return false;
          }

        },

        can: {
          transition: function transition(forced) {
            var animation = settings.animation,
                transitionExists = module.get.transitionExists(animation),
                elementClass,
                tagName,
                $clone,
                currentAnimation,
                inAnimation,
                directionExists,
                displayType;
            if (transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              elementClass = $module.attr('class');
              tagName = $module.prop('tagName');

              $clone = $('<' + tagName + ' />').addClass(elementClass).insertAfter($module);
              currentAnimation = $clone.addClass(animation).removeClass(className.inward).removeClass(className.outward).addClass(className.animating).addClass(className.transition).css('animationName');
              inAnimation = $clone.addClass(className.inward).css('animationName');
              displayType = $clone.attr('class', elementClass).removeAttr('style').removeClass(className.hidden).removeClass(className.visible).show().css('display');
              module.verbose('Determining final display state', displayType);
              module.save.displayType(displayType);

              $clone.remove();
              if (currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
              } else if (currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
              } else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
              }
              module.save.transitionExists(animation, directionExists);
            }
            return transitionExists !== undefined ? transitionExists : directionExists;
          },
          animate: function animate() {
            // can transition does not return a value if animation does not exist
            return module.can.transition() !== undefined;
          }
        },

        is: {
          animating: function animating() {
            return $module.hasClass(className.animating);
          },
          inward: function inward() {
            return $module.hasClass(className.inward);
          },
          outward: function outward() {
            return $module.hasClass(className.outward);
          },
          looping: function looping() {
            return $module.hasClass(className.looping);
          },
          occurring: function occurring(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return $module.filter(animation).length > 0;
          },
          visible: function visible() {
            return $module.is(':visible');
          },
          hidden: function hidden() {
            return $module.css('visibility') === 'hidden';
          },
          supported: function supported() {
            return animationEnd !== false;
          }
        },

        hide: function hide() {
          module.verbose('Hiding element');
          if (module.is.animating()) {
            module.reset();
          }
          element.blur(); // IE will trigger focus change if element is not blurred before hiding
          module.remove.display();
          module.remove.visible();
          module.set.hidden();
          settings.onHide.call(this);
          settings.onComplete.call(this);
          module.force.hidden();
          // module.repaint();
        },

        show: function show(display) {
          module.verbose('Showing element', display);
          module.remove.hidden();
          module.set.visible();
          settings.onShow.call(this);
          settings.onComplete.call(this);
          module.force.visible();
          // module.repaint();
        },

        toggle: function toggle() {
          if (module.is.visible()) {
            module.hide();
          } else {
            module.show();
          }
        },

        stop: function stop() {
          module.debug('Stopping current animation');
          $module.triggerHandler(animationEnd);
        },

        stopAll: function stopAll() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.triggerHandler(animationEnd);
        },

        clear: {
          queue: function queue() {
            module.debug('Clearing animation queue');
            module.remove.queueCallback();
          }
        },

        enable: function enable() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
        },

        disable: function disable() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        // modified for transition to return invoke success
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }

          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found !== undefined ? found : false;
        }
      };
      module.initialize();
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  // Records if CSS transition is available
  $.fn.transition.exists = {};

  $.fn.transition.settings = {

    // module info
    name: 'Transition',

    // debug content outputted to console
    debug: false,

    // verbose debug output
    verbose: false,

    // performance data output
    performance: true,

    // event namespace
    namespace: 'transition',

    // delay between animations in group
    interval: 0,

    // whether group animations should be reversed
    reverse: 'auto',

    // animation callback event
    onStart: function onStart() {},
    onComplete: function onComplete() {},
    onShow: function onShow() {},
    onHide: function onHide() {},

    // whether timeout should be used to ensure callback fires in cases animationend does not
    useFailSafe: true,

    // delay in ms for fail safe
    failSafeDelay: 100,

    // whether EXACT animation can occur twice in a row
    allowRepeats: false,

    // Override final display type on visible
    displayType: false,

    // animation duration
    animation: 'fade',
    duration: false,

    // new animations will occur after previous ones
    queue: true,

    metadata: {
      displayType: 'display'
    },

    className: {
      animating: 'animating',
      disabled: 'disabled',
      hidden: 'hidden',
      inward: 'in',
      loading: 'loading',
      looping: 'looping',
      outward: 'out',
      transition: 'transition',
      visible: 'visible'
    },

    // possible errors
    error: {
      noAnimation: 'There is no css animation matching the one you specified. Please make sure your css is vendor prefixed, and you have included transition css.',
      repeated: 'That animation is already occurring, cancelling repeated animation',
      method: 'The method you called is not defined',
      support: 'This browser does not support CSS animations'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/transition.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Transition
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (n, e, i, t) {
  "use strict";n.fn.transition = function () {
    {
      var a,
          o = n(this),
          r = o.selector || "",
          s = new Date().getTime(),
          l = [],
          u = arguments,
          d = u[0],
          c = [].slice.call(arguments, 1),
          m = "string" == typeof d;e.requestAnimationFrame || e.mozRequestAnimationFrame || e.webkitRequestAnimationFrame || e.msRequestAnimationFrame || function (n) {
        setTimeout(n, 0);
      };
    }return (o.each(function (e) {
      var f,
          p,
          g,
          v,
          b,
          y,
          h,
          w,
          C,
          A = n(this),
          S = this;C = { initialize: function initialize() {
          f = C.get.settings.apply(S, u), v = f.className, g = f.error, b = f.metadata, w = "." + f.namespace, h = "module-" + f.namespace, p = A.data(h) || C, y = C.get.animationEndEvent(), m && (m = C.invoke(d)), m === !1 && (C.verbose("Converted arguments into settings object", f), f.interval ? C.delay(f.animate) : C.animate(), C.instantiate());
        }, instantiate: function instantiate() {
          C.verbose("Storing instance of module", C), p = C, A.data(h, p);
        }, destroy: function destroy() {
          C.verbose("Destroying previous module for", S), A.removeData(h);
        }, refresh: function refresh() {
          C.verbose("Refreshing display type on next animation"), delete C.displayType;
        }, forceRepaint: function forceRepaint() {
          C.verbose("Forcing element repaint");var n = A.parent(),
              e = A.next();0 === e.length ? A.detach().appendTo(n) : A.detach().insertBefore(e);
        }, repaint: function repaint() {
          C.verbose("Repainting element");S.offsetWidth;
        }, delay: function delay(n) {
          var i,
              a,
              r = C.get.animationDirection();r || (r = C.can.transition() ? C.get.direction() : "static"), n = n !== t ? n : f.interval, i = "auto" == f.reverse && r == v.outward, a = i || 1 == f.reverse ? (o.length - e) * f.interval : e * f.interval, C.debug("Delaying animation by", a), setTimeout(C.animate, a);
        }, animate: function animate(n) {
          if ((f = n || f, !C.is.supported())) return (C.error(g.support), !1);if ((C.debug("Preparing animation", f.animation), C.is.animating())) {
            if (f.queue) return (!f.allowRepeats && C.has.direction() && C.is.occurring() && C.queuing !== !0 ? C.debug("Animation is currently occurring, preventing queueing same animation", f.animation) : C.queue(f.animation), !1);if (!f.allowRepeats && C.is.occurring()) return (C.debug("Animation is already occurring, will not execute repeated animation", f.animation), !1);C.debug("New animation started, completing previous early", f.animation), p.complete();
          }C.can.animate() ? C.set.animating(f.animation) : C.error(g.noAnimation, f.animation, S);
        }, reset: function reset() {
          C.debug("Resetting animation to beginning conditions"), C.remove.animationCallbacks(), C.restore.conditions(), C.remove.animating();
        }, queue: function queue(n) {
          C.debug("Queueing animation of", n), C.queuing = !0, A.one(y + ".queue" + w, function () {
            C.queuing = !1, C.repaint(), C.animate.apply(this, f);
          });
        }, complete: function complete(n) {
          C.debug("Animation complete", f.animation), C.remove.completeCallback(), C.remove.failSafe(), C.is.looping() || (C.is.outward() ? (C.verbose("Animation is outward, hiding element"), C.restore.conditions(), C.hide()) : C.is.inward() ? (C.verbose("Animation is outward, showing element"), C.restore.conditions(), C.show()) : C.restore.conditions());
        }, force: { visible: function visible() {
            var n = A.attr("style"),
                e = C.get.userStyle(),
                i = C.get.displayType(),
                a = e + "display: " + i + " !important;",
                o = A.css("display"),
                r = n === t || "" === n;o !== i ? (C.verbose("Overriding default display to show element", i), A.attr("style", a)) : r && A.removeAttr("style");
          }, hidden: function hidden() {
            var n = A.attr("style"),
                e = A.css("display"),
                i = n === t || "" === n;"none" === e || C.is.hidden() ? i && A.removeAttr("style") : (C.verbose("Overriding default display to hide element"), A.css("display", "none"));
          } }, has: { direction: function direction(e) {
            var i = !1;return (e = e || f.animation, "string" == typeof e && (e = e.split(" "), n.each(e, function (n, e) {
              (e === v.inward || e === v.outward) && (i = !0);
            })), i);
          }, inlineDisplay: function inlineDisplay() {
            var e = A.attr("style") || "";return n.isArray(e.match(/display.*?;/, ""));
          } }, set: { animating: function animating(n) {
            var e;C.remove.completeCallback(), n = n || f.animation, e = C.get.animationClass(n), C.save.animation(e), C.force.visible(), C.remove.hidden(), C.remove.direction(), C.start.animation(e);
          }, duration: function duration(n, e) {
            e = e || f.duration, e = "number" == typeof e ? e + "ms" : e, (e || 0 === e) && (C.verbose("Setting animation duration", e), A.css({ "animation-duration": e }));
          }, direction: function direction(n) {
            n = n || C.get.direction(), n == v.inward ? C.set.inward() : C.set.outward();
          }, looping: function looping() {
            C.debug("Transition set to loop"), A.addClass(v.looping);
          }, hidden: function hidden() {
            A.addClass(v.transition).addClass(v.hidden);
          }, inward: function inward() {
            C.debug("Setting direction to inward"), A.removeClass(v.outward).addClass(v.inward);
          }, outward: function outward() {
            C.debug("Setting direction to outward"), A.removeClass(v.inward).addClass(v.outward);
          }, visible: function visible() {
            A.addClass(v.transition).addClass(v.visible);
          } }, start: { animation: function animation(n) {
            n = n || C.get.animationClass(), C.debug("Starting tween", n), A.addClass(n).one(y + ".complete" + w, C.complete), f.useFailSafe && C.add.failSafe(), C.set.duration(f.duration), f.onStart.call(this);
          } }, save: { animation: function animation(n) {
            C.cache || (C.cache = {}), C.cache.animation = n;
          }, displayType: function displayType(n) {
            "none" !== n && A.data(b.displayType, n);
          }, transitionExists: function transitionExists(e, i) {
            n.fn.transition.exists[e] = i, C.verbose("Saving existence of transition", e, i);
          } }, restore: { conditions: function conditions() {
            var n = C.get.currentAnimation();n && (A.removeClass(n), C.verbose("Removing animation class", C.cache)), C.remove.duration();
          } }, add: { failSafe: function failSafe() {
            var n = C.get.duration();C.timer = setTimeout(function () {
              A.triggerHandler(y);
            }, n + f.failSafeDelay), C.verbose("Adding fail safe timer", C.timer);
          } }, remove: { animating: function animating() {
            A.removeClass(v.animating);
          }, animationCallbacks: function animationCallbacks() {
            C.remove.queueCallback(), C.remove.completeCallback();
          }, queueCallback: function queueCallback() {
            A.off(".queue" + w);
          }, completeCallback: function completeCallback() {
            A.off(".complete" + w);
          }, display: function display() {
            A.css("display", "");
          }, direction: function direction() {
            A.removeClass(v.inward).removeClass(v.outward);
          }, duration: function duration() {
            A.css("animation-duration", "");
          }, failSafe: function failSafe() {
            C.verbose("Removing fail safe timer", C.timer), C.timer && clearTimeout(C.timer);
          }, hidden: function hidden() {
            A.removeClass(v.hidden);
          }, visible: function visible() {
            A.removeClass(v.visible);
          }, looping: function looping() {
            C.debug("Transitions are no longer looping"), C.is.looping() && (C.reset(), A.removeClass(v.looping));
          }, transition: function transition() {
            A.removeClass(v.visible).removeClass(v.hidden);
          } }, get: { settings: function settings(e, i, t) {
            return "object" == typeof e ? n.extend(!0, {}, n.fn.transition.settings, e) : "function" == typeof t ? n.extend({}, n.fn.transition.settings, { animation: e, onComplete: t, duration: i }) : "string" == typeof i || "number" == typeof i ? n.extend({}, n.fn.transition.settings, { animation: e, duration: i }) : "object" == typeof i ? n.extend({}, n.fn.transition.settings, i, { animation: e }) : "function" == typeof i ? n.extend({}, n.fn.transition.settings, { animation: e, onComplete: i }) : n.extend({}, n.fn.transition.settings, { animation: e });
          }, animationClass: function animationClass(n) {
            var e = n || f.animation,
                i = C.can.transition() && !C.has.direction() ? C.get.direction() + " " : "";return v.animating + " " + v.transition + " " + i + e;
          }, currentAnimation: function currentAnimation() {
            return C.cache.animation || !1;
          }, currentDirection: function currentDirection() {
            return C.is.inward() ? v.inward : v.outward;
          }, direction: function direction() {
            return C.is.hidden() || !C.is.visible() ? v.inward : v.outward;
          }, animationDirection: function animationDirection(e) {
            var i;return (e = e || f.animation, "string" == typeof e && (e = e.split(" "), n.each(e, function (n, e) {
              e === v.inward ? i = v.inward : e === v.outward && (i = v.outward);
            })), i ? i : !1);
          }, duration: function duration(n) {
            return (n = n || f.duration, n === !1 && (n = A.css("animation-duration") || 0), "string" == typeof n ? n.indexOf("ms") > -1 ? parseFloat(n) : 1000 * parseFloat(n) : n);
          }, displayType: function displayType() {
            return f.displayType ? f.displayType : (A.data(b.displayType) === t && C.can.transition(!0), A.data(b.displayType));
          }, userStyle: function userStyle(n) {
            return (n = n || A.attr("style") || "", n.replace(/display.*?;/, ""));
          }, transitionExists: function transitionExists(e) {
            return n.fn.transition.exists[e];
          }, animationStartEvent: function animationStartEvent() {
            var n,
                e = i.createElement("div"),
                a = { animation: "animationstart", OAnimation: "oAnimationStart", MozAnimation: "mozAnimationStart", WebkitAnimation: "webkitAnimationStart" };for (n in a) if (e.style[n] !== t) return a[n];return !1;
          }, animationEndEvent: function animationEndEvent() {
            var n,
                e = i.createElement("div"),
                a = { animation: "animationend", OAnimation: "oAnimationEnd", MozAnimation: "mozAnimationEnd", WebkitAnimation: "webkitAnimationEnd" };for (n in a) if (e.style[n] !== t) return a[n];return !1;
          } }, can: { transition: function transition(e) {
            var i,
                a,
                o,
                r,
                s,
                l,
                u,
                d = f.animation,
                c = C.get.transitionExists(d);if (c === t || e) {
              if ((C.verbose("Determining whether animation exists"), i = A.attr("class"), a = A.prop("tagName"), o = n("<" + a + " />").addClass(i).insertAfter(A), r = o.addClass(d).removeClass(v.inward).removeClass(v.outward).addClass(v.animating).addClass(v.transition).css("animationName"), s = o.addClass(v.inward).css("animationName"), u = o.attr("class", i).removeAttr("style").removeClass(v.hidden).removeClass(v.visible).show().css("display"), C.verbose("Determining final display state", u), C.save.displayType(u), o.remove(), r != s)) C.debug("Direction exists for animation", d), l = !0;else {
                if ("none" == r || !r) return void C.debug("No animation defined in css", d);C.debug("Static animation found", d, u), l = !1;
              }C.save.transitionExists(d, l);
            }return c !== t ? c : l;
          }, animate: function animate() {
            return C.can.transition() !== t;
          } }, is: { animating: function animating() {
            return A.hasClass(v.animating);
          }, inward: function inward() {
            return A.hasClass(v.inward);
          }, outward: function outward() {
            return A.hasClass(v.outward);
          }, looping: function looping() {
            return A.hasClass(v.looping);
          }, occurring: function occurring(n) {
            return (n = n || f.animation, n = "." + n.replace(" ", "."), A.filter(n).length > 0);
          }, visible: function visible() {
            return A.is(":visible");
          }, hidden: function hidden() {
            return "hidden" === A.css("visibility");
          }, supported: function supported() {
            return y !== !1;
          } }, hide: function hide() {
          C.verbose("Hiding element"), C.is.animating() && C.reset(), S.blur(), C.remove.display(), C.remove.visible(), C.set.hidden(), f.onHide.call(this), f.onComplete.call(this), C.force.hidden();
        }, show: function show(n) {
          C.verbose("Showing element", n), C.remove.hidden(), C.set.visible(), f.onShow.call(this), f.onComplete.call(this), C.force.visible();
        }, toggle: function toggle() {
          C.is.visible() ? C.hide() : C.show();
        }, stop: function stop() {
          C.debug("Stopping current animation"), A.triggerHandler(y);
        }, stopAll: function stopAll() {
          C.debug("Stopping all animation"), C.remove.queueCallback(), A.triggerHandler(y);
        }, clear: { queue: function queue() {
            C.debug("Clearing animation queue"), C.remove.queueCallback();
          } }, enable: function enable() {
          C.verbose("Starting animation"), A.removeClass(v.disabled);
        }, disable: function disable() {
          C.debug("Stopping animation"), A.addClass(v.disabled);
        }, setting: function setting(e, i) {
          if ((C.debug("Changing setting", e, i), n.isPlainObject(e))) n.extend(!0, f, e);else {
            if (i === t) return f[e];f[e] = i;
          }
        }, internal: function internal(e, i) {
          if (n.isPlainObject(e)) n.extend(!0, C, e);else {
            if (i === t) return C[e];C[e] = i;
          }
        }, debug: function debug() {
          f.debug && (f.performance ? C.performance.log(arguments) : (C.debug = Function.prototype.bind.call(console.info, console, f.name + ":"), C.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          f.verbose && f.debug && (f.performance ? C.performance.log(arguments) : (C.verbose = Function.prototype.bind.call(console.info, console, f.name + ":"), C.verbose.apply(console, arguments)));
        }, error: function error() {
          C.error = Function.prototype.bind.call(console.error, console, f.name + ":"), C.error.apply(console, arguments);
        }, performance: { log: function log(n) {
            var e, i, t;f.performance && (e = new Date().getTime(), t = s || e, i = e - t, s = e, l.push({ Name: n[0], Arguments: [].slice.call(n, 1) || "", Element: S, "Execution Time": i })), clearTimeout(C.performance.timer), C.performance.timer = setTimeout(C.performance.display, 500);
          }, display: function display() {
            var e = f.name + ":",
                i = 0;s = !1, clearTimeout(C.performance.timer), n.each(l, function (n, e) {
              i += e["Execution Time"];
            }), e += " " + i + "ms", r && (e += " '" + r + "'"), o.length > 1 && (e += " (" + o.length + ")"), (console.group !== t || console.table !== t) && l.length > 0 && (console.groupCollapsed(e), console.table ? console.table(l) : n.each(l, function (n, e) {
              console.log(e.Name + ": " + e["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(e, i, o) {
          var r,
              s,
              l,
              u = p;return (i = i || c, o = S || o, "string" == typeof e && u !== t && (e = e.split(/[\. ]/), r = e.length - 1, n.each(e, function (i, a) {
            var o = i != r ? a + e[i + 1].charAt(0).toUpperCase() + e[i + 1].slice(1) : e;if (n.isPlainObject(u[o]) && i != r) u = u[o];else {
              if (u[o] !== t) return (s = u[o], !1);if (!n.isPlainObject(u[a]) || i == r) return u[a] !== t ? (s = u[a], !1) : !1;u = u[a];
            }
          })), n.isFunction(s) ? l = s.apply(o, i) : s !== t && (l = s), n.isArray(a) ? a.push(l) : a !== t ? a = [a, l] : l !== t && (a = l), s !== t ? s : !1);
        } }, C.initialize();
    }), a !== t ? a : this);
  }, n.fn.transition.exists = {}, n.fn.transition.settings = { name: "Transition", debug: !1, verbose: !1, performance: !0, namespace: "transition", interval: 0, reverse: "auto", onStart: function onStart() {}, onComplete: function onComplete() {}, onShow: function onShow() {}, onHide: function onHide() {}, useFailSafe: !0, failSafeDelay: 100, allowRepeats: !1, displayType: !1, animation: "fade", duration: !1, queue: !0, metadata: { displayType: "display" }, className: { animating: "animating", disabled: "disabled", hidden: "hidden", inward: "in", loading: "loading", looping: "looping", outward: "out", transition: "transition", visible: "visible" }, error: { noAnimation: "There is no css animation matching the one you specified. Please make sure your css is vendor prefixed, and you have included transition css.", repeated: "That animation is already occurring, cancelling repeated animation", method: "The method you called is not defined", support: "This browser does not support CSS animations" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/video", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.video = function (parameters) {

    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);
    },
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.video.settings, parameters) : $.extend({}, $.fn.video.settings),
          selector = settings.selector,
          className = settings.className,
          error = settings.error,
          metadata = settings.metadata,
          namespace = settings.namespace,
          templates = settings.templates,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $window = $(window),
          $module = $(this),
          $placeholder = $module.find(selector.placeholder),
          $playButton = $module.find(selector.playButton),
          $embed = $module.find(selector.embed),
          element = this,
          instance = $module.data(moduleNamespace),
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing video');
          module.create();
          $module.on('click' + eventNamespace, selector.placeholder, module.play).on('click' + eventNamespace, selector.playButton, module.play);
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        create: function create() {
          var image = $module.data(metadata.image),
              html = templates.video(image);
          $module.html(html);
          module.refresh();
          if (!image) {
            module.play();
          }
          module.debug('Creating html for video element', html);
        },

        destroy: function destroy() {
          module.verbose('Destroying previous instance of video');
          module.reset();
          $module.removeData(moduleNamespace).off(eventNamespace);
        },

        refresh: function refresh() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $playButton = $module.find(selector.playButton);
          $embed = $module.find(selector.embed);
        },

        // sets new video
        change: function change(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module.data(metadata.source, source).data(metadata.id, id).data(metadata.url, url);
          settings.onChange();
        },

        // clears video embed
        reset: function reset() {
          module.debug('Clearing video embed and showing placeholder');
          $module.removeClass(className.active);
          $embed.html(' ');
          $placeholder.show();
          settings.onReset();
        },

        // plays current video
        play: function play() {
          module.debug('Playing video');
          var source = $module.data(metadata.source) || false,
              url = $module.data(metadata.url) || false,
              id = $module.data(metadata.id) || false;
          $embed.html(module.generate.html(source, id, url));
          $module.addClass(className.active);
          settings.onPlay();
        },

        get: {
          source: function source(url) {
            if (typeof url !== 'string') {
              return false;
            }
            if (url.search('youtube.com') !== -1) {
              return 'youtube';
            } else if (url.search('vimeo.com') !== -1) {
              return 'vimeo';
            }
            return false;
          },
          id: function id(url) {
            if (url.match(settings.regExp.youtube)) {
              return url.match(settings.regExp.youtube)[1];
            } else if (url.match(settings.regExp.vimeo)) {
              return url.match(settings.regExp.vimeo)[2];
            }
            return false;
          }
        },

        generate: {
          // generates iframe html
          html: function html(source, id, url) {
            module.debug('Generating embed html');
            var html;
            // allow override of settings
            source = source || settings.source;
            id = id || settings.id;
            if (source && id || url) {
              if (!source || !id) {
                source = module.get.source(url);
                id = module.get.id(url);
              }
              if (source == 'vimeo') {
                html = '' + '<iframe src="//player.vimeo.com/video/' + id + '?=' + module.generate.url(source) + '"' + ' width="100%" height="100%"' + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
              } else if (source == 'youtube') {
                html = '' + '<iframe src="//www.youtube.com/embed/' + id + '?=' + module.generate.url(source) + '"' + ' width="100%" height="100%"' + ' frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
              }
            } else {
              module.error(error.noVideo);
            }
            return html;
          },

          // generate url parameters
          url: function url(source) {
            var api = settings.api ? 1 : 0,
                autoplay = settings.autoplay === 'auto' ? $module.data('image') !== undefined : settings.autoplay,
                hd = settings.hd ? 1 : 0,
                showUI = settings.showUI ? 1 : 0,

            // opposite used for some params
            hideUI = !settings.showUI ? 1 : 0,
                url = '';
            if (source == 'vimeo') {
              url = '' + 'api=' + api + '&amp;title=' + showUI + '&amp;byline=' + showUI + '&amp;portrait=' + showUI + '&amp;autoplay=' + autoplay;
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            if (source == 'ustream') {
              url = '' + 'autoplay=' + autoplay;
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            } else if (source == 'youtube') {
              url = '' + 'enablejsapi=' + api + '&amp;autoplay=' + autoplay + '&amp;autohide=' + hideUI + '&amp;hq=' + hd + '&amp;modestbranding=1';
              if (settings.color) {
                url += '&amp;color=' + settings.color;
              }
            }
            return url;
          }
        },

        setting: function setting(name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.video.settings = {

    name: 'Video',
    namespace: 'video',

    debug: false,
    verbose: false,
    performance: true,

    metadata: {
      id: 'id',
      image: 'image',
      source: 'source',
      url: 'url'
    },

    source: false,
    url: false,
    id: false,

    aspectRatio: 16 / 9,

    onPlay: function onPlay() {},
    onReset: function onReset() {},
    onChange: function onChange() {},

    // callbacks not coded yet (needs to use jsapi)
    onPause: function onPause() {},
    onStop: function onStop() {},

    width: 'auto',
    height: 'auto',

    autoplay: 'auto',
    color: '#442359',
    hd: true,
    showUI: false,
    api: true,

    regExp: {
      youtube: /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/,
      vimeo: /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/
    },

    error: {
      noVideo: 'No video specified',
      method: 'The method you called is not defined'
    },

    className: {
      active: 'active'
    },

    selector: {
      embed: '.embed',
      placeholder: '.placeholder',
      playButton: '.play'
    }
  };

  $.fn.video.settings.templates = {
    video: function video(image) {
      var html = '';
      if (image) {
        html += '' + '<i class="video play icon"></i>' + '<img class="placeholder" src="' + image + '">';
      }
      html += '<div class="embed"></div>';
      return html;
    }
  };
})(jQuery, window, document);
});

require.register("web/static/css/components/video.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, t, n) {
  "use strict";e.fn.video = function (t) {
    {
      var a,
          i = e(this),
          r = i.selector || "",
          l = new Date().getTime(),
          c = [],
          u = arguments[0],
          s = "string" == typeof u,
          m = [].slice.call(arguments, 1);o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      };
    }return (i.each(function () {
      var d,
          p = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.video.settings, t) : e.extend({}, e.fn.video.settings),
          f = p.selector,
          g = p.className,
          h = p.error,
          v = p.metadata,
          b = p.namespace,
          y = p.templates,
          w = "." + b,
          x = "module-" + b,
          F = (e(o), e(this)),
          C = F.find(f.placeholder),
          E = F.find(f.playButton),
          T = F.find(f.embed),
          A = this,
          P = F.data(x);d = { initialize: function initialize() {
          d.debug("Initializing video"), d.create(), F.on("click" + w, f.placeholder, d.play).on("click" + w, f.playButton, d.play), d.instantiate();
        }, instantiate: function instantiate() {
          d.verbose("Storing instance of module", d), P = d, F.data(x, d);
        }, create: function create() {
          var e = F.data(v.image),
              o = y.video(e);F.html(o), d.refresh(), e || d.play(), d.debug("Creating html for video element", o);
        }, destroy: function destroy() {
          d.verbose("Destroying previous instance of video"), d.reset(), F.removeData(x).off(w);
        }, refresh: function refresh() {
          d.verbose("Refreshing selector cache"), C = F.find(f.placeholder), E = F.find(f.playButton), T = F.find(f.embed);
        }, change: function change(e, o, t) {
          d.debug("Changing video to ", e, o, t), F.data(v.source, e).data(v.id, o).data(v.url, t), p.onChange();
        }, reset: function reset() {
          d.debug("Clearing video embed and showing placeholder"), F.removeClass(g.active), T.html(" "), C.show(), p.onReset();
        }, play: function play() {
          d.debug("Playing video");var e = F.data(v.source) || !1,
              o = F.data(v.url) || !1,
              t = F.data(v.id) || !1;T.html(d.generate.html(e, t, o)), F.addClass(g.active), p.onPlay();
        }, get: { source: function source(e) {
            return "string" != typeof e ? !1 : -1 !== e.search("youtube.com") ? "youtube" : -1 !== e.search("vimeo.com") ? "vimeo" : !1;
          }, id: function id(e) {
            return e.match(p.regExp.youtube) ? e.match(p.regExp.youtube)[1] : e.match(p.regExp.vimeo) ? e.match(p.regExp.vimeo)[2] : !1;
          } }, generate: { html: function html(e, o, t) {
            d.debug("Generating embed html");var n;return (e = e || p.source, o = o || p.id, e && o || t ? (e && o || (e = d.get.source(t), o = d.get.id(t)), "vimeo" == e ? n = "<iframe src=\"//player.vimeo.com/video/" + o + "?=" + d.generate.url(e) + "\" width=\"100%\" height=\"100%\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>" : "youtube" == e && (n = "<iframe src=\"//www.youtube.com/embed/" + o + "?=" + d.generate.url(e) + "\" width=\"100%\" height=\"100%\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>")) : d.error(h.noVideo), n);
          }, url: function url(e) {
            var o = p.api ? 1 : 0,
                t = "auto" === p.autoplay ? F.data("image") !== n : p.autoplay,
                a = p.hd ? 1 : 0,
                i = p.showUI ? 1 : 0,
                r = p.showUI ? 0 : 1,
                l = "";return ("vimeo" == e && (l = "api=" + o + "&amp;title=" + i + "&amp;byline=" + i + "&amp;portrait=" + i + "&amp;autoplay=" + t, p.color && (l += "&amp;color=" + p.color)), "ustream" == e ? (l = "autoplay=" + t, p.color && (l += "&amp;color=" + p.color)) : "youtube" == e && (l = "enablejsapi=" + o + "&amp;autoplay=" + t + "&amp;autohide=" + r + "&amp;hq=" + a + "&amp;modestbranding=1", p.color && (l += "&amp;color=" + p.color)), l);
          } }, setting: function setting(o, t) {
          if ((d.debug("Changing setting", o, t), e.isPlainObject(o))) e.extend(!0, p, o);else {
            if (t === n) return p[o];p[o] = t;
          }
        }, internal: function internal(o, t) {
          if (e.isPlainObject(o)) e.extend(!0, d, o);else {
            if (t === n) return d[o];d[o] = t;
          }
        }, debug: function debug() {
          p.debug && (p.performance ? d.performance.log(arguments) : (d.debug = Function.prototype.bind.call(console.info, console, p.name + ":"), d.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          p.verbose && p.debug && (p.performance ? d.performance.log(arguments) : (d.verbose = Function.prototype.bind.call(console.info, console, p.name + ":"), d.verbose.apply(console, arguments)));
        }, error: function error() {
          d.error = Function.prototype.bind.call(console.error, console, p.name + ":"), d.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, t, n;p.performance && (o = new Date().getTime(), n = l || o, t = o - n, l = o, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: A, "Execution Time": t })), clearTimeout(d.performance.timer), d.performance.timer = setTimeout(d.performance.display, 500);
          }, display: function display() {
            var o = p.name + ":",
                t = 0;l = !1, clearTimeout(d.performance.timer), e.each(c, function (e, o) {
              t += o["Execution Time"];
            }), o += " " + t + "ms", r && (o += " '" + r + "'"), i.length > 1 && (o += " (" + i.length + ")"), (console.group !== n || console.table !== n) && c.length > 0 && (console.groupCollapsed(o), console.table ? console.table(c) : e.each(c, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(o, t, i) {
          var r,
              l,
              c,
              u = P;return (t = t || m, i = A || i, "string" == typeof o && u !== n && (o = o.split(/[\. ]/), r = o.length - 1, e.each(o, function (t, a) {
            var i = t != r ? a + o[t + 1].charAt(0).toUpperCase() + o[t + 1].slice(1) : o;if (e.isPlainObject(u[i]) && t != r) u = u[i];else {
              if (u[i] !== n) return (l = u[i], !1);if (!e.isPlainObject(u[a]) || t == r) return u[a] !== n ? (l = u[a], !1) : (d.error(h.method, o), !1);u = u[a];
            }
          })), e.isFunction(l) ? c = l.apply(i, t) : l !== n && (c = l), e.isArray(a) ? a.push(c) : a !== n ? a = [a, c] : c !== n && (a = c), l);
        } }, s ? (P === n && d.initialize(), d.invoke(u)) : (P !== n && P.invoke("destroy"), d.initialize());
    }), a !== n ? a : this);
  }, e.fn.video.settings = { name: "Video", namespace: "video", debug: !1, verbose: !1, performance: !0, metadata: { id: "id", image: "image", source: "source", url: "url" }, source: !1, url: !1, id: !1, aspectRatio: 16 / 9, onPlay: function onPlay() {}, onReset: function onReset() {}, onChange: function onChange() {}, onPause: function onPause() {}, onStop: function onStop() {}, width: "auto", height: "auto", autoplay: "auto", color: "#442359", hd: !0, showUI: !1, api: !0, regExp: { youtube: /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/, vimeo: /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/ }, error: { noVideo: "No video specified", method: "The method you called is not defined" }, className: { active: "active" }, selector: { embed: ".embed", placeholder: ".placeholder", playButton: ".play" } }, e.fn.video.settings.templates = { video: function video(e) {
      var o = "";return (e && (o += "<i class=\"video play icon\"></i><img class=\"placeholder\" src=\"" + e + "\">"), o += "<div class=\"embed\"></div>");
    } };
})(jQuery, window, document);
});

require.register("web/static/css/components/visibility", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.fn.visibility = function (parameters) {
    var $allModules = $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;

    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visibility.settings, parameters) : $.extend({}, $.fn.visibility.settings),
          className = settings.className,
          namespace = settings.namespace,
          error = settings.error,
          metadata = settings.metadata,
          eventNamespace = '.' + namespace,
          moduleNamespace = 'module-' + namespace,
          $window = $(window),
          $module = $(this),
          $context = $(settings.context),
          $placeholder,
          selector = $module.selector || '',
          instance = $module.data(moduleNamespace),
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);
      },
          element = this,
          disabled = false,
          observer,
          module;

      module = {

        initialize: function initialize() {
          module.debug('Initializing', settings);

          module.setup.cache();

          if (module.should.trackChanges()) {

            if (settings.type == 'image') {
              module.setup.image();
            }
            if (settings.type == 'fixed') {
              module.setup.fixed();
            }

            if (settings.observeChanges) {
              module.observeChanges();
            }
            module.bind.events();
          }

          module.save.position();
          if (!module.is.visible()) {
            module.error(error.visible, $module);
          }

          if (settings.initialCheck) {
            module.checkVisibility();
          }
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.debug('Storing instance', module);
          $module.data(moduleNamespace, module);
          instance = module;
        },

        destroy: function destroy() {
          module.verbose('Destroying previous module');
          if (observer) {
            observer.disconnect();
          }
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $context.off('scrollchange' + eventNamespace, module.event.scrollchange);
          $module.off(eventNamespace).removeData(moduleNamespace);
        },

        observeChanges: function observeChanges() {
          if ('MutationObserver' in window) {
            observer = new MutationObserver(function (mutations) {
              module.verbose('DOM tree modified, updating visibility calculations');
              module.timer = setTimeout(function () {
                module.verbose('DOM tree modified, updating sticky menu');
                module.refresh();
              }, 100);
            });
            observer.observe(element, {
              childList: true,
              subtree: true
            });
            module.debug('Setting up mutation observer', observer);
          }
        },

        bind: {
          events: function events() {
            module.verbose('Binding visibility events to scroll and resize');
            if (settings.refreshOnLoad) {
              $window.on('load' + eventNamespace, module.event.load);
            }
            $window.on('resize' + eventNamespace, module.event.resize);
            // pub/sub pattern
            $context.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          }
        },

        event: {
          resize: function resize() {
            module.debug('Window resized');
            if (settings.refreshOnResize) {
              requestAnimationFrame(module.refresh);
            }
          },
          load: function load() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
          },
          // publishes scrollchange event on one scroll
          scroll: function scroll() {
            if (settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function () {
                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);
              }, settings.throttle);
            } else {
              requestAnimationFrame(function () {
                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);
              });
            }
          },
          // subscribes to scrollchange
          scrollchange: function scrollchange(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
          }
        },

        precache: function precache(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
          }
          var imagesLength = images.length,
              loadedCounter = 0,
              cache = [],
              cacheImage = document.createElement('img'),
              handleLoad = function handleLoad() {
            loadedCounter++;
            if (loadedCounter >= images.length) {
              if ($.isFunction(callback)) {
                callback();
              }
            }
          };
          while (imagesLength--) {
            cacheImage = document.createElement('img');
            cacheImage.onload = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src = images[imagesLength];
            cache.push(cacheImage);
          }
        },

        enableCallbacks: function enableCallbacks() {
          module.debug('Allowing callbacks to occur');
          disabled = false;
        },

        disableCallbacks: function disableCallbacks() {
          module.debug('Disabling all callbacks temporarily');
          disabled = true;
        },

        should: {
          trackChanges: function trackChanges() {
            if (methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
            }
            module.debug('Callbacks being attached');
            return true;
          }
        },

        setup: {
          cache: function cache() {
            module.cache = {
              occurred: {},
              screen: {},
              element: {}
            };
          },
          image: function image() {
            var src = $module.data(metadata.src);
            if (src) {
              module.verbose('Lazy loading image', src);
              settings.once = true;
              settings.observeChanges = false;

              // show when top visible
              settings.onOnScreen = function () {
                module.debug('Image on screen', element);
                module.precache(src, function () {
                  module.set.image(src);
                });
              };
            }
          },
          fixed: function fixed() {
            module.debug('Setting up fixed');
            settings.once = false;
            settings.observeChanges = false;
            settings.initialCheck = true;
            settings.refreshOnLoad = true;
            if (!parameters.transition) {
              settings.transition = false;
            }
            module.create.placeholder();
            module.debug('Added placeholder', $placeholder);
            settings.onTopPassed = function () {
              module.debug('Element passed, adding fixed position', $module);
              module.show.placeholder();
              module.set.fixed();
              if (settings.transition) {
                if ($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
                }
              }
            };
            settings.onTopPassedReverse = function () {
              module.debug('Element returned to position, removing fixed', $module);
              module.hide.placeholder();
              module.remove.fixed();
            };
          }
        },

        create: {
          placeholder: function placeholder() {
            module.verbose('Creating fixed position placeholder');
            $placeholder = $module.clone(false).css('display', 'none').addClass(className.placeholder).insertAfter($module);
          }
        },

        show: {
          placeholder: function placeholder() {
            module.verbose('Showing placeholder');
            $placeholder.css('display', 'block').css('visibility', 'hidden');
          }
        },
        hide: {
          placeholder: function placeholder() {
            module.verbose('Hiding placeholder');
            $placeholder.css('display', 'none').css('visibility', '');
          }
        },

        set: {
          fixed: function fixed() {
            module.verbose('Setting element to fixed position');
            $module.addClass(className.fixed).css({
              position: 'fixed',
              top: settings.offset + 'px',
              left: 'auto',
              zIndex: '1'
            });
          },
          image: function image(src) {
            $module.attr('src', src);
            if (settings.transition) {
              if ($.fn.transition !== undefined) {
                $module.transition(settings.transition, settings.duration);
              } else {
                $module.fadeIn(settings.duration);
              }
            } else {
              $module.show();
            }
          }
        },

        is: {
          onScreen: function onScreen() {
            var calculations = module.get.elementCalculations();
            return calculations.onScreen;
          },
          offScreen: function offScreen() {
            var calculations = module.get.elementCalculations();
            return calculations.offScreen;
          },
          visible: function visible() {
            if (module.cache && module.cache.element) {
              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);
            }
            return false;
          }
        },

        refresh: function refresh() {
          module.debug('Refreshing constants (width/height)');
          if (settings.type == 'fixed') {
            module.remove.fixed();
            module.remove.occurred();
          }
          module.reset();
          module.save.position();
          if (settings.checkOnRefresh) {
            module.checkVisibility();
          }
          settings.onRefresh.call(element);
        },

        reset: function reset() {
          module.verbose('Reseting all cached values');
          if ($.isPlainObject(module.cache)) {
            module.cache.screen = {};
            module.cache.element = {};
          }
        },

        checkVisibility: function checkVisibility(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if (!disabled && module.is.visible()) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.onScreen();
            module.offScreen();
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if (settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
            }
          }
        },

        passed: function passed(amount, newCallback) {
          var calculations = module.get.elementCalculations(),
              amountInPixels;
          // assign callback
          if (amount && newCallback) {
            settings.onPassed[amount] = newCallback;
          } else if (amount !== undefined) {
            return module.get.pixelsPassed(amount) > calculations.pixelsPassed;
          } else if (calculations.passing) {
            $.each(settings.onPassed, function (amount, callback) {
              if (calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
              } else if (!settings.once) {
                module.remove.occurred(callback);
              }
            });
          }
        },

        onScreen: function onScreen(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onOnScreen,
              callbackName = 'onScreen';
          if (newCallback) {
            module.debug('Adding callback for onScreen', newCallback);
            settings.onOnScreen = newCallback;
          }
          if (calculations.onScreen) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return calculations.onOnScreen;
          }
        },

        offScreen: function offScreen(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onOffScreen,
              callbackName = 'offScreen';
          if (newCallback) {
            module.debug('Adding callback for offScreen', newCallback);
            settings.onOffScreen = newCallback;
          }
          if (calculations.offScreen) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return calculations.onOffScreen;
          }
        },

        passing: function passing(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onPassing,
              callbackName = 'passing';
          if (newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
          }
          if (calculations.passing) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return calculations.passing;
          }
        },

        topVisible: function topVisible(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopVisible,
              callbackName = 'topVisible';
          if (newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
          }
          if (calculations.topVisible) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.topVisible;
          }
        },

        bottomVisible: function bottomVisible(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomVisible,
              callbackName = 'bottomVisible';
          if (newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
          }
          if (calculations.bottomVisible) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.bottomVisible;
          }
        },

        topPassed: function topPassed(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopPassed,
              callbackName = 'topPassed';
          if (newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
          }
          if (calculations.topPassed) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.topPassed;
          }
        },

        bottomPassed: function bottomPassed(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomPassed,
              callbackName = 'bottomPassed';
          if (newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
          }
          if (calculations.bottomPassed) {
            module.execute(callback, callbackName);
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return calculations.bottomPassed;
          }
        },

        passingReverse: function passingReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onPassingReverse,
              callbackName = 'passingReverse';
          if (newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
          }
          if (!calculations.passing) {
            if (module.get.occurred('passing')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback !== undefined) {
            return !calculations.passing;
          }
        },

        topVisibleReverse: function topVisibleReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopVisibleReverse,
              callbackName = 'topVisibleReverse';
          if (newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
          }
          if (!calculations.topVisible) {
            if (module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.topVisible;
          }
        },

        bottomVisibleReverse: function bottomVisibleReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomVisibleReverse,
              callbackName = 'bottomVisibleReverse';
          if (newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
          }
          if (!calculations.bottomVisible) {
            if (module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.bottomVisible;
          }
        },

        topPassedReverse: function topPassedReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onTopPassedReverse,
              callbackName = 'topPassedReverse';
          if (newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
          }
          if (!calculations.topPassed) {
            if (module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.onTopPassed;
          }
        },

        bottomPassedReverse: function bottomPassedReverse(newCallback) {
          var calculations = module.get.elementCalculations(),
              callback = newCallback || settings.onBottomPassedReverse,
              callbackName = 'bottomPassedReverse';
          if (newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
          }
          if (!calculations.bottomPassed) {
            if (module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
            }
          } else if (!settings.once) {
            module.remove.occurred(callbackName);
          }
          if (newCallback === undefined) {
            return !calculations.bottomPassed;
          }
        },

        execute: function execute(callback, callbackName) {
          var calculations = module.get.elementCalculations(),
              screen = module.get.screenCalculations();
          callback = callback || false;
          if (callback) {
            if (settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
            } else if (!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
            }
          }
          module.save.occurred(callbackName);
        },

        remove: {
          fixed: function fixed() {
            module.debug('Removing fixed position');
            $module.removeClass(className.fixed).css({
              position: '',
              top: '',
              left: '',
              zIndex: ''
            });
          },
          occurred: function occurred(callback) {
            if (callback) {
              var occurred = module.cache.occurred;
              if (occurred[callback] !== undefined && occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
              }
            } else {
              module.cache.occurred = {};
            }
          }
        },

        save: {
          calculations: function calculations() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
          },
          occurred: function occurred(callback) {
            if (callback) {
              if (module.cache.occurred[callback] === undefined || module.cache.occurred[callback] !== true) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
              }
            }
          },
          scroll: function scroll(scrollPosition) {
            scrollPosition = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
          },
          direction: function direction() {
            var scroll = module.get.scroll(),
                lastScroll = module.get.lastScroll(),
                direction;
            if (scroll > lastScroll && lastScroll) {
              direction = 'down';
            } else if (scroll < lastScroll && lastScroll) {
              direction = 'up';
            } else {
              direction = 'static';
            }
            module.cache.direction = direction;
            return module.cache.direction;
          },
          elementPosition: function elementPosition() {
            var element = module.cache.element,
                screen = module.get.screenSize();
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits = element.height < screen.height;
            element.offset = $module.offset();
            element.width = $module.outerWidth();
            element.height = $module.outerHeight();
            // store
            module.cache.element = element;
            return element;
          },
          elementCalculations: function elementCalculations() {
            var screen = module.get.screenCalculations(),
                element = module.get.elementPosition();
            // offset
            if (settings.includeMargin) {
              element.margin = {};
              element.margin.top = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
            } else {
              element.top = element.offset.top;
              element.bottom = element.offset.top + element.height;
            }

            // visibility
            element.topVisible = screen.bottom >= element.top;
            element.topPassed = screen.top >= element.top;
            element.bottomVisible = screen.bottom >= element.bottom;
            element.bottomPassed = screen.top >= element.bottom;
            element.pixelsPassed = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.onScreen = element.topVisible && !element.bottomPassed;
            element.passing = element.topPassed && !element.bottomPassed;
            element.offScreen = !element.onScreen;

            // passing calculations
            if (element.passing) {
              element.pixelsPassed = screen.top - element.top;
              element.percentagePassed = (screen.top - element.top) / element.height;
            }
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
          },
          screenCalculations: function screenCalculations() {
            var scroll = module.get.scroll();
            module.save.direction();
            module.cache.screen.top = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
          },
          screenSize: function screenSize() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
            };
          },
          position: function position() {
            module.save.screenSize();
            module.save.elementPosition();
          }
        },

        get: {
          pixelsPassed: function pixelsPassed(amount) {
            var element = module.get.elementCalculations();
            if (amount.search('%') > -1) {
              return element.height * (parseInt(amount, 10) / 100);
            }
            return parseInt(amount, 10);
          },
          occurred: function occurred(callback) {
            return module.cache.occurred !== undefined ? module.cache.occurred[callback] || false : false;
          },
          direction: function direction() {
            if (module.cache.direction === undefined) {
              module.save.direction();
            }
            return module.cache.direction;
          },
          elementPosition: function elementPosition() {
            if (module.cache.element === undefined) {
              module.save.elementPosition();
            }
            return module.cache.element;
          },
          elementCalculations: function elementCalculations() {
            if (module.cache.element === undefined) {
              module.save.elementCalculations();
            }
            return module.cache.element;
          },
          screenCalculations: function screenCalculations() {
            if (module.cache.screen === undefined) {
              module.save.screenCalculations();
            }
            return module.cache.screen;
          },
          screenSize: function screenSize() {
            if (module.cache.screen === undefined) {
              module.save.screenSize();
            }
            return module.cache.screen;
          },
          scroll: function scroll() {
            if (module.cache.scroll === undefined) {
              module.save.scroll();
            }
            return module.cache.scroll;
          },
          lastScroll: function lastScroll() {
            if (module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
            }
            return module.cache.screen.top;
          }
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, module, name);
          } else if (value !== undefined) {
            module[name] = value;
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                module.error(error.method, query);
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        instance.save.scroll();
        instance.save.calculations();
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });

    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.visibility.settings = {

    name: 'Visibility',
    namespace: 'visibility',

    debug: false,
    verbose: false,
    performance: true,

    // whether to use mutation observers to follow changes
    observeChanges: true,

    // whether to refresh calculations after all page images load
    refreshOnLoad: true,

    // callback should only occur one time
    once: true,

    // callback should fire continuously whe evaluates to true
    continuous: false,

    // offset to use with scroll top
    offset: 0,

    // whether to include margin in elements position
    includeMargin: false,

    // scroll context for visibility checks
    context: window,

    // check position immediately on init
    initialCheck: true,

    // visibility check delay in ms (defaults to animationFrame)
    throttle: false,

    // special visibility type (image, fixed)
    type: false,

    // image only animation settings
    transition: 'fade in',
    duration: 1000,

    // array of callbacks for percentage
    onPassed: {},

    // should call callbacks on refresh event (resize, etc)
    checkOnRefresh: true,

    // standard callbacks
    onOnScreen: false,
    onOffScreen: false,
    onPassing: false,
    onTopVisible: false,
    onBottomVisible: false,
    onTopPassed: false,
    onBottomPassed: false,

    // reverse callbacks
    onPassingReverse: false,
    onTopVisibleReverse: false,
    onBottomVisibleReverse: false,
    onTopPassedReverse: false,
    onBottomPassedReverse: false,

    // utility callbacks
    onUpdate: false, // disabled by default for performance
    onRefresh: function onRefresh() {},

    metadata: {
      src: 'src'
    },

    className: {
      fixed: 'fixed',
      placeholder: 'placeholder'
    },

    error: {
      method: 'The method you called is not defined.',
      visible: 'Element is hidden, you must call refresh after element becomes visible'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/visibility.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Visibility
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, o, n, t) {
  "use strict";e.fn.visibility = function (i) {
    var s,
        c = e(this),
        r = c.selector || "",
        a = new Date().getTime(),
        l = [],
        u = arguments[0],
        d = "string" == typeof u,
        f = [].slice.call(arguments, 1);return (c.each(function () {
      var c,
          b,
          m,
          g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.visibility.settings, i) : e.extend({}, e.fn.visibility.settings),
          p = g.className,
          v = g.namespace,
          h = g.error,
          P = g.metadata,
          x = "." + v,
          C = "module-" + v,
          y = e(o),
          V = e(this),
          R = e(g.context),
          S = (V.selector || "", V.data(C)),
          k = o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) {
        setTimeout(e, 0);
      },
          T = this,
          O = !1;m = { initialize: function initialize() {
          m.debug("Initializing", g), m.setup.cache(), m.should.trackChanges() && ("image" == g.type && m.setup.image(), "fixed" == g.type && m.setup.fixed(), g.observeChanges && m.observeChanges(), m.bind.events()), m.save.position(), m.is.visible() || m.error(h.visible, V), g.initialCheck && m.checkVisibility(), m.instantiate();
        }, instantiate: function instantiate() {
          m.debug("Storing instance", m), V.data(C, m), S = m;
        }, destroy: function destroy() {
          m.verbose("Destroying previous module"), b && b.disconnect(), y.off("load" + x, m.event.load).off("resize" + x, m.event.resize), R.off("scrollchange" + x, m.event.scrollchange), V.off(x).removeData(C);
        }, observeChanges: function observeChanges() {
          "MutationObserver" in o && (b = new MutationObserver(function (e) {
            m.verbose("DOM tree modified, updating visibility calculations"), m.timer = setTimeout(function () {
              m.verbose("DOM tree modified, updating sticky menu"), m.refresh();
            }, 100);
          }), b.observe(T, { childList: !0, subtree: !0 }), m.debug("Setting up mutation observer", b));
        }, bind: { events: function events() {
            m.verbose("Binding visibility events to scroll and resize"), g.refreshOnLoad && y.on("load" + x, m.event.load), y.on("resize" + x, m.event.resize), R.off("scroll" + x).on("scroll" + x, m.event.scroll).on("scrollchange" + x, m.event.scrollchange);
          } }, event: { resize: function resize() {
            m.debug("Window resized"), g.refreshOnResize && k(m.refresh);
          }, load: function load() {
            m.debug("Page finished loading"), k(m.refresh);
          }, scroll: function scroll() {
            g.throttle ? (clearTimeout(m.timer), m.timer = setTimeout(function () {
              R.triggerHandler("scrollchange" + x, [R.scrollTop()]);
            }, g.throttle)) : k(function () {
              R.triggerHandler("scrollchange" + x, [R.scrollTop()]);
            });
          }, scrollchange: function scrollchange(e, o) {
            m.checkVisibility(o);
          } }, precache: function precache(o, t) {
          o instanceof Array || (o = [o]);for (var i = o.length, s = 0, c = [], r = n.createElement("img"), a = function a() {
            s++, s >= o.length && e.isFunction(t) && t();
          }; i--;) r = n.createElement("img"), r.onload = a, r.onerror = a, r.src = o[i], c.push(r);
        }, enableCallbacks: function enableCallbacks() {
          m.debug("Allowing callbacks to occur"), O = !1;
        }, disableCallbacks: function disableCallbacks() {
          m.debug("Disabling all callbacks temporarily"), O = !0;
        }, should: { trackChanges: function trackChanges() {
            return d ? (m.debug("One time query, no need to bind events"), !1) : (m.debug("Callbacks being attached"), !0);
          } }, setup: { cache: function cache() {
            m.cache = { occurred: {}, screen: {}, element: {} };
          }, image: function image() {
            var e = V.data(P.src);e && (m.verbose("Lazy loading image", e), g.once = !0, g.observeChanges = !1, g.onOnScreen = function () {
              m.debug("Image on screen", T), m.precache(e, function () {
                m.set.image(e);
              });
            });
          }, fixed: function fixed() {
            m.debug("Setting up fixed"), g.once = !1, g.observeChanges = !1, g.initialCheck = !0, g.refreshOnLoad = !0, i.transition || (g.transition = !1), m.create.placeholder(), m.debug("Added placeholder", c), g.onTopPassed = function () {
              m.debug("Element passed, adding fixed position", V), m.show.placeholder(), m.set.fixed(), g.transition && e.fn.transition !== t && V.transition(g.transition, g.duration);
            }, g.onTopPassedReverse = function () {
              m.debug("Element returned to position, removing fixed", V), m.hide.placeholder(), m.remove.fixed();
            };
          } }, create: { placeholder: function placeholder() {
            m.verbose("Creating fixed position placeholder"), c = V.clone(!1).css("display", "none").addClass(p.placeholder).insertAfter(V);
          } }, show: { placeholder: function placeholder() {
            m.verbose("Showing placeholder"), c.css("display", "block").css("visibility", "hidden");
          } }, hide: { placeholder: function placeholder() {
            m.verbose("Hiding placeholder"), c.css("display", "none").css("visibility", "");
          } }, set: { fixed: function fixed() {
            m.verbose("Setting element to fixed position"), V.addClass(p.fixed).css({ position: "fixed", top: g.offset + "px", left: "auto", zIndex: "1" });
          }, image: function image(o) {
            V.attr("src", o), g.transition ? e.fn.transition !== t ? V.transition(g.transition, g.duration) : V.fadeIn(g.duration) : V.show();
          } }, is: { onScreen: function onScreen() {
            var e = m.get.elementCalculations();return e.onScreen;
          }, offScreen: function offScreen() {
            var e = m.get.elementCalculations();return e.offScreen;
          }, visible: function visible() {
            return m.cache && m.cache.element ? !(0 === m.cache.element.width && 0 === m.cache.element.offset.top) : !1;
          } }, refresh: function refresh() {
          m.debug("Refreshing constants (width/height)"), "fixed" == g.type && (m.remove.fixed(), m.remove.occurred()), m.reset(), m.save.position(), g.checkOnRefresh && m.checkVisibility(), g.onRefresh.call(T);
        }, reset: function reset() {
          m.verbose("Reseting all cached values"), e.isPlainObject(m.cache) && (m.cache.screen = {}, m.cache.element = {});
        }, checkVisibility: function checkVisibility(e) {
          m.verbose("Checking visibility of element", m.cache.element), !O && m.is.visible() && (m.save.scroll(e), m.save.calculations(), m.passed(), m.passingReverse(), m.topVisibleReverse(), m.bottomVisibleReverse(), m.topPassedReverse(), m.bottomPassedReverse(), m.onScreen(), m.offScreen(), m.passing(), m.topVisible(), m.bottomVisible(), m.topPassed(), m.bottomPassed(), g.onUpdate && g.onUpdate.call(T, m.get.elementCalculations()));
        }, passed: function passed(o, n) {
          var i = m.get.elementCalculations();if (o && n) g.onPassed[o] = n;else {
            if (o !== t) return m.get.pixelsPassed(o) > i.pixelsPassed;i.passing && e.each(g.onPassed, function (e, o) {
              i.bottomVisible || i.pixelsPassed > m.get.pixelsPassed(e) ? m.execute(o, e) : g.once || m.remove.occurred(o);
            });
          }
        }, onScreen: function onScreen(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onOnScreen,
              i = "onScreen";return (e && (m.debug("Adding callback for onScreen", e), g.onOnScreen = e), o.onScreen ? m.execute(n, i) : g.once || m.remove.occurred(i), e !== t ? o.onOnScreen : void 0);
        }, offScreen: function offScreen(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onOffScreen,
              i = "offScreen";return (e && (m.debug("Adding callback for offScreen", e), g.onOffScreen = e), o.offScreen ? m.execute(n, i) : g.once || m.remove.occurred(i), e !== t ? o.onOffScreen : void 0);
        }, passing: function passing(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onPassing,
              i = "passing";return (e && (m.debug("Adding callback for passing", e), g.onPassing = e), o.passing ? m.execute(n, i) : g.once || m.remove.occurred(i), e !== t ? o.passing : void 0);
        }, topVisible: function topVisible(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onTopVisible,
              i = "topVisible";return (e && (m.debug("Adding callback for top visible", e), g.onTopVisible = e), o.topVisible ? m.execute(n, i) : g.once || m.remove.occurred(i), e === t ? o.topVisible : void 0);
        }, bottomVisible: function bottomVisible(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onBottomVisible,
              i = "bottomVisible";return (e && (m.debug("Adding callback for bottom visible", e), g.onBottomVisible = e), o.bottomVisible ? m.execute(n, i) : g.once || m.remove.occurred(i), e === t ? o.bottomVisible : void 0);
        }, topPassed: function topPassed(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onTopPassed,
              i = "topPassed";return (e && (m.debug("Adding callback for top passed", e), g.onTopPassed = e), o.topPassed ? m.execute(n, i) : g.once || m.remove.occurred(i), e === t ? o.topPassed : void 0);
        }, bottomPassed: function bottomPassed(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onBottomPassed,
              i = "bottomPassed";return (e && (m.debug("Adding callback for bottom passed", e), g.onBottomPassed = e), o.bottomPassed ? m.execute(n, i) : g.once || m.remove.occurred(i), e === t ? o.bottomPassed : void 0);
        }, passingReverse: function passingReverse(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onPassingReverse,
              i = "passingReverse";return (e && (m.debug("Adding callback for passing reverse", e), g.onPassingReverse = e), o.passing ? g.once || m.remove.occurred(i) : m.get.occurred("passing") && m.execute(n, i), e !== t ? !o.passing : void 0);
        }, topVisibleReverse: function topVisibleReverse(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onTopVisibleReverse,
              i = "topVisibleReverse";return (e && (m.debug("Adding callback for top visible reverse", e), g.onTopVisibleReverse = e), o.topVisible ? g.once || m.remove.occurred(i) : m.get.occurred("topVisible") && m.execute(n, i), e === t ? !o.topVisible : void 0);
        }, bottomVisibleReverse: function bottomVisibleReverse(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onBottomVisibleReverse,
              i = "bottomVisibleReverse";return (e && (m.debug("Adding callback for bottom visible reverse", e), g.onBottomVisibleReverse = e), o.bottomVisible ? g.once || m.remove.occurred(i) : m.get.occurred("bottomVisible") && m.execute(n, i), e === t ? !o.bottomVisible : void 0);
        }, topPassedReverse: function topPassedReverse(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onTopPassedReverse,
              i = "topPassedReverse";return (e && (m.debug("Adding callback for top passed reverse", e), g.onTopPassedReverse = e), o.topPassed ? g.once || m.remove.occurred(i) : m.get.occurred("topPassed") && m.execute(n, i), e === t ? !o.onTopPassed : void 0);
        }, bottomPassedReverse: function bottomPassedReverse(e) {
          var o = m.get.elementCalculations(),
              n = e || g.onBottomPassedReverse,
              i = "bottomPassedReverse";return (e && (m.debug("Adding callback for bottom passed reverse", e), g.onBottomPassedReverse = e), o.bottomPassed ? g.once || m.remove.occurred(i) : m.get.occurred("bottomPassed") && m.execute(n, i), e === t ? !o.bottomPassed : void 0);
        }, execute: function execute(e, o) {
          var n = m.get.elementCalculations(),
              t = m.get.screenCalculations();e = e || !1, e && (g.continuous ? (m.debug("Callback being called continuously", o, n), e.call(T, n, t)) : m.get.occurred(o) || (m.debug("Conditions met", o, n), e.call(T, n, t))), m.save.occurred(o);
        }, remove: { fixed: function fixed() {
            m.debug("Removing fixed position"), V.removeClass(p.fixed).css({ position: "", top: "", left: "", zIndex: "" });
          }, occurred: function occurred(e) {
            if (e) {
              var o = m.cache.occurred;o[e] !== t && o[e] === !0 && (m.debug("Callback can now be called again", e), m.cache.occurred[e] = !1);
            } else m.cache.occurred = {};
          } }, save: { calculations: function calculations() {
            m.verbose("Saving all calculations necessary to determine positioning"), m.save.direction(), m.save.screenCalculations(), m.save.elementCalculations();
          }, occurred: function occurred(e) {
            e && (m.cache.occurred[e] === t || m.cache.occurred[e] !== !0) && (m.verbose("Saving callback occurred", e), m.cache.occurred[e] = !0);
          }, scroll: function scroll(e) {
            e = e + g.offset || R.scrollTop() + g.offset, m.cache.scroll = e;
          }, direction: function direction() {
            var e,
                o = m.get.scroll(),
                n = m.get.lastScroll();return (e = o > n && n ? "down" : n > o && n ? "up" : "static", m.cache.direction = e, m.cache.direction);
          }, elementPosition: function elementPosition() {
            var e = m.cache.element,
                o = m.get.screenSize();return (m.verbose("Saving element position"), e.fits = e.height < o.height, e.offset = V.offset(), e.width = V.outerWidth(), e.height = V.outerHeight(), m.cache.element = e, e);
          }, elementCalculations: function elementCalculations() {
            var e = m.get.screenCalculations(),
                o = m.get.elementPosition();return (g.includeMargin ? (o.margin = {}, o.margin.top = parseInt(V.css("margin-top"), 10), o.margin.bottom = parseInt(V.css("margin-bottom"), 10), o.top = o.offset.top - o.margin.top, o.bottom = o.offset.top + o.height + o.margin.bottom) : (o.top = o.offset.top, o.bottom = o.offset.top + o.height), o.topVisible = e.bottom >= o.top, o.topPassed = e.top >= o.top, o.bottomVisible = e.bottom >= o.bottom, o.bottomPassed = e.top >= o.bottom, o.pixelsPassed = 0, o.percentagePassed = 0, o.onScreen = o.topVisible && !o.bottomPassed, o.passing = o.topPassed && !o.bottomPassed, o.offScreen = !o.onScreen, o.passing && (o.pixelsPassed = e.top - o.top, o.percentagePassed = (e.top - o.top) / o.height), m.cache.element = o, m.verbose("Updated element calculations", o), o);
          }, screenCalculations: function screenCalculations() {
            var e = m.get.scroll();return (m.save.direction(), m.cache.screen.top = e, m.cache.screen.bottom = e + m.cache.screen.height, m.cache.screen);
          }, screenSize: function screenSize() {
            m.verbose("Saving window position"), m.cache.screen = { height: R.height() };
          }, position: function position() {
            m.save.screenSize(), m.save.elementPosition();
          } }, get: { pixelsPassed: function pixelsPassed(e) {
            var o = m.get.elementCalculations();return e.search("%") > -1 ? o.height * (parseInt(e, 10) / 100) : parseInt(e, 10);
          }, occurred: function occurred(e) {
            return m.cache.occurred !== t ? m.cache.occurred[e] || !1 : !1;
          }, direction: function direction() {
            return (m.cache.direction === t && m.save.direction(), m.cache.direction);
          }, elementPosition: function elementPosition() {
            return (m.cache.element === t && m.save.elementPosition(), m.cache.element);
          }, elementCalculations: function elementCalculations() {
            return (m.cache.element === t && m.save.elementCalculations(), m.cache.element);
          }, screenCalculations: function screenCalculations() {
            return (m.cache.screen === t && m.save.screenCalculations(), m.cache.screen);
          }, screenSize: function screenSize() {
            return (m.cache.screen === t && m.save.screenSize(), m.cache.screen);
          }, scroll: function scroll() {
            return (m.cache.scroll === t && m.save.scroll(), m.cache.scroll);
          }, lastScroll: function lastScroll() {
            return m.cache.screen === t ? (m.debug("First scroll event, no last scroll could be found"), !1) : m.cache.screen.top;
          } }, setting: function setting(o, n) {
          if (e.isPlainObject(o)) e.extend(!0, g, o);else {
            if (n === t) return g[o];g[o] = n;
          }
        }, internal: function internal(o, n) {
          if (e.isPlainObject(o)) e.extend(!0, m, o);else {
            if (n === t) return m[o];m[o] = n;
          }
        }, debug: function debug() {
          g.debug && (g.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), m.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          g.verbose && g.debug && (g.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), m.verbose.apply(console, arguments)));
        }, error: function error() {
          m.error = Function.prototype.bind.call(console.error, console, g.name + ":"), m.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var o, n, t;g.performance && (o = new Date().getTime(), t = a || o, n = o - t, a = o, l.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": n })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 500);
          }, display: function display() {
            var o = g.name + ":",
                n = 0;a = !1, clearTimeout(m.performance.timer), e.each(l, function (e, o) {
              n += o["Execution Time"];
            }), o += " " + n + "ms", r && (o += " '" + r + "'"), (console.group !== t || console.table !== t) && l.length > 0 && (console.groupCollapsed(o), console.table ? console.table(l) : e.each(l, function (e, o) {
              console.log(o.Name + ": " + o["Execution Time"] + "ms");
            }), console.groupEnd()), l = [];
          } }, invoke: function invoke(o, n, i) {
          var c,
              r,
              a,
              l = S;return (n = n || f, i = T || i, "string" == typeof o && l !== t && (o = o.split(/[\. ]/), c = o.length - 1, e.each(o, function (n, i) {
            var s = n != c ? i + o[n + 1].charAt(0).toUpperCase() + o[n + 1].slice(1) : o;if (e.isPlainObject(l[s]) && n != c) l = l[s];else {
              if (l[s] !== t) return (r = l[s], !1);if (!e.isPlainObject(l[i]) || n == c) return l[i] !== t ? (r = l[i], !1) : (m.error(h.method, o), !1);l = l[i];
            }
          })), e.isFunction(r) ? a = r.apply(i, n) : r !== t && (a = r), e.isArray(s) ? s.push(a) : s !== t ? s = [s, a] : a !== t && (s = a), r);
        } }, d ? (S === t && m.initialize(), S.save.scroll(), S.save.calculations(), m.invoke(u)) : (S !== t && S.invoke("destroy"), m.initialize());
    }), s !== t ? s : this);
  }, e.fn.visibility.settings = { name: "Visibility", namespace: "visibility", debug: !1, verbose: !1, performance: !0, observeChanges: !0, refreshOnLoad: !0, once: !0, continuous: !1, offset: 0, includeMargin: !1, context: o, initialCheck: !0, throttle: !1, type: !1, transition: "fade in", duration: 1000, onPassed: {}, checkOnRefresh: !0, onOnScreen: !1, onOffScreen: !1, onPassing: !1, onTopVisible: !1, onBottomVisible: !1, onTopPassed: !1, onBottomPassed: !1, onPassingReverse: !1, onTopVisibleReverse: !1, onBottomVisibleReverse: !1, onTopPassedReverse: !1, onBottomPassedReverse: !1, onUpdate: !1, onRefresh: function onRefresh() {}, metadata: { src: "src" }, className: { fixed: "fixed", placeholder: "placeholder" }, error: { method: "The method you called is not defined.", visible: "Element is hidden, you must call refresh after element becomes visible" } };
})(jQuery, window, document);
});

require.register("web/static/css/components/visit", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Visit
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

'use strict';

;(function ($, window, document, undefined) {

  'use strict';

  $.visit = $.fn.visit = function (parameters) {
    var $allModules = $.isFunction(this) ? $(window) : $(this),
        moduleSelector = $allModules.selector || '',
        time = new Date().getTime(),
        performance = [],
        query = arguments[0],
        methodInvoked = typeof query == 'string',
        queryArguments = [].slice.call(arguments, 1),
        returnedValue;
    $allModules.each(function () {
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visit.settings, parameters) : $.extend({}, $.fn.visit.settings),
          error = settings.error,
          namespace = settings.namespace,
          eventNamespace = '.' + namespace,
          moduleNamespace = namespace + '-module',
          $module = $(this),
          $displays = $(),
          element = this,
          instance = $module.data(moduleNamespace),
          module;
      module = {

        initialize: function initialize() {
          if (settings.count) {
            module.store(settings.key.count, settings.count);
          } else if (settings.id) {
            module.add.id(settings.id);
          } else if (settings.increment && methodInvoked !== 'increment') {
            module.increment();
          }
          module.add.display($module);
          module.instantiate();
        },

        instantiate: function instantiate() {
          module.verbose('Storing instance of visit module', module);
          instance = module;
          $module.data(moduleNamespace, module);
        },

        destroy: function destroy() {
          module.verbose('Destroying instance');
          $module.removeData(moduleNamespace);
        },

        increment: function increment(id) {
          var currentValue = module.get.count(),
              newValue = +currentValue + 1;
          if (id) {
            module.add.id(id);
          } else {
            if (newValue > settings.limit && !settings.surpass) {
              newValue = settings.limit;
            }
            module.debug('Incrementing visits', newValue);
            module.store(settings.key.count, newValue);
          }
        },

        decrement: function decrement(id) {
          var currentValue = module.get.count(),
              newValue = +currentValue - 1;
          if (id) {
            module.remove.id(id);
          } else {
            module.debug('Removing visit');
            module.store(settings.key.count, newValue);
          }
        },

        get: {
          count: function count() {
            return +module.retrieve(settings.key.count) || 0;
          },
          idCount: function idCount(ids) {
            ids = ids || module.get.ids();
            return ids.length;
          },
          ids: function ids(delimitedIDs) {
            var idArray = [];
            delimitedIDs = delimitedIDs || module.retrieve(settings.key.ids);
            if (typeof delimitedIDs === 'string') {
              idArray = delimitedIDs.split(settings.delimiter);
            }
            module.verbose('Found visited ID list', idArray);
            return idArray;
          },
          storageOptions: function storageOptions(data) {
            var options = {};
            if (settings.expires) {
              options.expires = settings.expires;
            }
            if (settings.domain) {
              options.domain = settings.domain;
            }
            if (settings.path) {
              options.path = settings.path;
            }
            return options;
          }
        },

        has: {
          visited: function visited(id, ids) {
            var visited = false;
            ids = ids || module.get.ids();
            if (id !== undefined && ids) {
              $.each(ids, function (index, value) {
                if (value == id) {
                  visited = true;
                }
              });
            }
            return visited;
          }
        },

        set: {
          count: function count(value) {
            module.store(settings.key.count, value);
          },
          ids: function ids(value) {
            module.store(settings.key.ids, value);
          }
        },

        reset: function reset() {
          module.store(settings.key.count, 0);
          module.store(settings.key.ids, null);
        },

        add: {
          id: function id(_id) {
            var currentIDs = module.retrieve(settings.key.ids),
                newIDs = currentIDs === undefined || currentIDs === '' ? _id : currentIDs + settings.delimiter + _id;
            if (module.has.visited(_id)) {
              module.debug('Unique content already visited, not adding visit', _id, currentIDs);
            } else if (_id === undefined) {
              module.debug('ID is not defined');
            } else {
              module.debug('Adding visit to unique content', _id);
              module.store(settings.key.ids, newIDs);
            }
            module.set.count(module.get.idCount());
          },
          display: function display(selector) {
            var $element = $(selector);
            if ($element.length > 0 && !$.isWindow($element[0])) {
              module.debug('Updating visit count for element', $element);
              $displays = $displays.length > 0 ? $displays.add($element) : $element;
            }
          }
        },

        remove: {
          id: function id(_id2) {
            var currentIDs = module.get.ids(),
                newIDs = [];
            if (_id2 !== undefined && currentIDs !== undefined) {
              module.debug('Removing visit to unique content', _id2, currentIDs);
              $.each(currentIDs, function (index, value) {
                if (value !== _id2) {
                  newIDs.push(value);
                }
              });
              newIDs = newIDs.join(settings.delimiter);
              module.store(settings.key.ids, newIDs);
            }
            module.set.count(module.get.idCount());
          }
        },

        check: {
          limit: function limit(value) {
            value = value || module.get.count();
            if (settings.limit) {
              if (value >= settings.limit) {
                module.debug('Pages viewed exceeded limit, firing callback', value, settings.limit);
                settings.onLimit.call(element, value);
              }
              module.debug('Limit not reached', value, settings.limit);
              settings.onChange.call(element, value);
            }
            module.update.display(value);
          }
        },

        update: {
          display: function display(value) {
            value = value || module.get.count();
            if ($displays.length > 0) {
              module.debug('Updating displayed view count', $displays);
              $displays.html(value);
            }
          }
        },

        store: function store(key, value) {
          var options = module.get.storageOptions(value);
          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
            window.localStorage.setItem(key, value);
            module.debug('Value stored using local storage', key, value);
          } else if ($.cookie !== undefined) {
            $.cookie(key, value, options);
            module.debug('Value stored using cookie', key, value, options);
          } else {
            module.error(error.noCookieStorage);
            return;
          }
          if (key == settings.key.count) {
            module.check.limit(value);
          }
        },
        retrieve: function retrieve(key, value) {
          var storedValue;
          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
            storedValue = window.localStorage.getItem(key);
          }
          // get by cookie
          else if ($.cookie !== undefined) {
            storedValue = $.cookie(key);
          } else {
            module.error(error.noCookieStorage);
          }
          if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
            storedValue = undefined;
          }
          return storedValue;
        },

        setting: function setting(name, value) {
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
          } else if (value !== undefined) {
            settings[name] = value;
          } else {
            return settings[name];
          }
        },
        internal: function internal(name, value) {
          module.debug('Changing internal', name, value);
          if (value !== undefined) {
            if ($.isPlainObject(name)) {
              $.extend(true, module, name);
            } else {
              module[name] = value;
            }
          } else {
            return module[name];
          }
        },
        debug: function debug() {
          if (settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
            }
          }
        },
        verbose: function verbose() {
          if (settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
            } else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
            }
          }
        },
        error: function error() {
          module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
          module.error.apply(console, arguments);
        },
        performance: {
          log: function log(message) {
            var currentTime, executionTime, previousTime;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
              });
            }
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
          },
          display: function display() {
            var title = settings.name + ':',
                totalTime = 0;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
            });
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
            }
            if ($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
            }
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
              } else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
                });
              }
              console.groupEnd();
            }
            performance = [];
          }
        },
        invoke: function invoke(query, passedArguments, context) {
          var object = instance,
              maxDepth,
              found,
              response;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {
                object = object[camelCaseValue];
              } else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {
                object = object[value];
              } else if (object[value] !== undefined) {
                found = object[value];
                return false;
              } else {
                return false;
              }
            });
          }
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
          } else if (found !== undefined) {
            response = found;
          }
          if ($.isArray(returnedValue)) {
            returnedValue.push(response);
          } else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
          } else if (response !== undefined) {
            returnedValue = response;
          }
          return found;
        }
      };
      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
        }
        module.invoke(query);
      } else {
        if (instance !== undefined) {
          instance.invoke('destroy');
        }
        module.initialize();
      }
    });
    return returnedValue !== undefined ? returnedValue : this;
  };

  $.fn.visit.settings = {

    name: 'Visit',

    debug: false,
    verbose: false,
    performance: true,

    namespace: 'visit',

    increment: false,
    surpass: false,
    count: false,
    limit: false,

    delimiter: '&',
    storageMethod: 'localstorage',

    key: {
      count: 'visit-count',
      ids: 'visit-ids'
    },

    expires: 30,
    domain: false,
    path: '/',

    onLimit: function onLimit() {},
    onChange: function onChange() {},

    error: {
      method: 'The method you called is not defined',
      missingPersist: 'Using the persist setting requires the inclusion of PersistJS',
      noCookieStorage: 'The default storage cookie requires $.cookie to be included.'
    }

  };
})(jQuery, window, document);
});

require.register("web/static/css/components/visit.min", function(exports, require, module) {
/*!
 * # Semantic UI 2.0.0 - Visit
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
"use strict";

!(function (e, t, i, n) {
  "use strict";e.visit = e.fn.visit = function (i) {
    var o,
        r = e(e.isFunction(this) ? t : this),
        s = r.selector || "",
        a = new Date().getTime(),
        c = [],
        u = arguments[0],
        l = "string" == typeof u,
        d = [].slice.call(arguments, 1);return (r.each(function () {
      var g,
          m = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.visit.settings, i) : e.extend({}, e.fn.visit.settings),
          f = m.error,
          p = m.namespace,
          v = p + "-module",
          h = e(this),
          b = e(),
          y = this,
          k = h.data(v);g = { initialize: function initialize() {
          m.count ? g.store(m.key.count, m.count) : m.id ? g.add.id(m.id) : m.increment && "increment" !== l && g.increment(), g.add.display(h), g.instantiate();
        }, instantiate: function instantiate() {
          g.verbose("Storing instance of visit module", g), k = g, h.data(v, g);
        }, destroy: function destroy() {
          g.verbose("Destroying instance"), h.removeData(v);
        }, increment: function increment(e) {
          var t = g.get.count(),
              i = +t + 1;e ? g.add.id(e) : (i > m.limit && !m.surpass && (i = m.limit), g.debug("Incrementing visits", i), g.store(m.key.count, i));
        }, decrement: function decrement(e) {
          var t = g.get.count(),
              i = +t - 1;e ? g.remove.id(e) : (g.debug("Removing visit"), g.store(m.key.count, i));
        }, get: { count: function count() {
            return +g.retrieve(m.key.count) || 0;
          }, idCount: function idCount(e) {
            return (e = e || g.get.ids(), e.length);
          }, ids: function ids(e) {
            var t = [];return (e = e || g.retrieve(m.key.ids), "string" == typeof e && (t = e.split(m.delimiter)), g.verbose("Found visited ID list", t), t);
          }, storageOptions: function storageOptions(e) {
            var t = {};return (m.expires && (t.expires = m.expires), m.domain && (t.domain = m.domain), m.path && (t.path = m.path), t);
          } }, has: { visited: function visited(t, i) {
            var o = !1;return (i = i || g.get.ids(), t !== n && i && e.each(i, function (e, i) {
              i == t && (o = !0);
            }), o);
          } }, set: { count: function count(e) {
            g.store(m.key.count, e);
          }, ids: function ids(e) {
            g.store(m.key.ids, e);
          } }, reset: function reset() {
          g.store(m.key.count, 0), g.store(m.key.ids, null);
        }, add: { id: function id(e) {
            var t = g.retrieve(m.key.ids),
                i = t === n || "" === t ? e : t + m.delimiter + e;g.has.visited(e) ? g.debug("Unique content already visited, not adding visit", e, t) : e === n ? g.debug("ID is not defined") : (g.debug("Adding visit to unique content", e), g.store(m.key.ids, i)), g.set.count(g.get.idCount());
          }, display: function display(t) {
            var i = e(t);i.length > 0 && !e.isWindow(i[0]) && (g.debug("Updating visit count for element", i), b = b.length > 0 ? b.add(i) : i);
          } }, remove: { id: function id(t) {
            var i = g.get.ids(),
                o = [];t !== n && i !== n && (g.debug("Removing visit to unique content", t, i), e.each(i, function (e, i) {
              i !== t && o.push(i);
            }), o = o.join(m.delimiter), g.store(m.key.ids, o)), g.set.count(g.get.idCount());
          } }, check: { limit: function limit(e) {
            e = e || g.get.count(), m.limit && (e >= m.limit && (g.debug("Pages viewed exceeded limit, firing callback", e, m.limit), m.onLimit.call(y, e)), g.debug("Limit not reached", e, m.limit), m.onChange.call(y, e)), g.update.display(e);
          } }, update: { display: function display(e) {
            e = e || g.get.count(), b.length > 0 && (g.debug("Updating displayed view count", b), b.html(e));
          } }, store: function store(i, o) {
          var r = g.get.storageOptions(o);if ("localstorage" == m.storageMethod && t.localStorage !== n) t.localStorage.setItem(i, o), g.debug("Value stored using local storage", i, o);else {
            if (e.cookie === n) return void g.error(f.noCookieStorage);e.cookie(i, o, r), g.debug("Value stored using cookie", i, o, r);
          }i == m.key.count && g.check.limit(o);
        }, retrieve: function retrieve(i, o) {
          var r;return ("localstorage" == m.storageMethod && t.localStorage !== n ? r = t.localStorage.getItem(i) : e.cookie !== n ? r = e.cookie(i) : g.error(f.noCookieStorage), ("undefined" == r || "null" == r || r === n || null === r) && (r = n), r);
        }, setting: function setting(t, i) {
          if (e.isPlainObject(t)) e.extend(!0, m, t);else {
            if (i === n) return m[t];m[t] = i;
          }
        }, internal: function internal(t, i) {
          return (g.debug("Changing internal", t, i), i === n ? g[t] : void (e.isPlainObject(t) ? e.extend(!0, g, t) : g[t] = i));
        }, debug: function debug() {
          m.debug && (m.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, m.name + ":"), g.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          m.verbose && m.debug && (m.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, m.name + ":"), g.verbose.apply(console, arguments)));
        }, error: function error() {
          g.error = Function.prototype.bind.call(console.error, console, m.name + ":"), g.error.apply(console, arguments);
        }, performance: { log: function log(e) {
            var t, i, n;m.performance && (t = new Date().getTime(), n = a || t, i = t - n, a = t, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: y, "Execution Time": i })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 500);
          }, display: function display() {
            var t = m.name + ":",
                i = 0;a = !1, clearTimeout(g.performance.timer), e.each(c, function (e, t) {
              i += t["Execution Time"];
            }), t += " " + i + "ms", s && (t += " '" + s + "'"), r.length > 1 && (t += " (" + r.length + ")"), (console.group !== n || console.table !== n) && c.length > 0 && (console.groupCollapsed(t), console.table ? console.table(c) : e.each(c, function (e, t) {
              console.log(t.Name + ": " + t["Execution Time"] + "ms");
            }), console.groupEnd()), c = [];
          } }, invoke: function invoke(t, i, r) {
          var s,
              a,
              c,
              u = k;return (i = i || d, r = y || r, "string" == typeof t && u !== n && (t = t.split(/[\. ]/), s = t.length - 1, e.each(t, function (i, o) {
            var r = i != s ? o + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;if (e.isPlainObject(u[r]) && i != s) u = u[r];else {
              if (u[r] !== n) return (a = u[r], !1);if (!e.isPlainObject(u[o]) || i == s) return u[o] !== n ? (a = u[o], !1) : !1;u = u[o];
            }
          })), e.isFunction(a) ? c = a.apply(r, i) : a !== n && (c = a), e.isArray(o) ? o.push(c) : o !== n ? o = [o, c] : c !== n && (o = c), a);
        } }, l ? (k === n && g.initialize(), g.invoke(u)) : (k !== n && k.invoke("destroy"), g.initialize());
    }), o !== n ? o : this);
  }, e.fn.visit.settings = { name: "Visit", debug: !1, verbose: !1, performance: !0, namespace: "visit", increment: !1, surpass: !1, count: !1, limit: !1, delimiter: "&", storageMethod: "localstorage", key: { count: "visit-count", ids: "visit-ids" }, expires: 30, domain: !1, path: "/", onLimit: function onLimit() {}, onChange: function onChange() {}, error: { method: "The method you called is not defined", missingPersist: "Using the persist setting requires the inclusion of PersistJS", noCookieStorage: "The default storage cookie requires $.cookie to be included." } };
})(jQuery, window, document);
});

require.register("web/static/js/app", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _phoenix = require('phoenix');

// let socket = new Socket("/ws")
// socket.connect()
// let chan = socket.chan("topic:subtopic", {})
// chan.join().receive("ok", chan => {
//   console.log("Success!")
// })

var App = {};

$('.ui.checkbox').checkbox();

var formSettings = { inline: true, on: 'blur' };

var formRules = {
  name: {
    identifier: 'name',
    rules: [{
      type: 'length[4]',
      prompt: 'Please enter a name, at least 4 characters'
    }]
  },
  password: {
    identifier: 'password',
    rules: [{
      type: 'length[6]',
      prompt: 'Please provide at least 6 character of password'
    }]
  },
  confirmPassword: {
    identifier: 'confirm_password',
    rules: [{
      type: 'match[password]',
      prompt: 'Password should be the same'
    }]
  }
};

$('.ui.form').form(formRules, formSettings);
$('.message .close').on('click', function () {
  $(this).closest('.message').fadeOut();
});

exports['default'] = App;
module.exports = exports['default'];
});

;
//# sourceMappingURL=app.js.map